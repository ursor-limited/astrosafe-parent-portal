#!/usr/bin/env node
import{a as s,b as g,c as $,d as D,e as u,g as f,h as k,k as W}from"./chunk-WZOVIFMN.mjs";s();import{red as q}from"picocolors";import{Command as z}from"commander";var A={name:"@turbo/workspaces",version:"2.0.14",description:"Tools for working with package managers",homepage:"https://turbo.build/repo",license:"MIT",repository:{type:"git",url:"https://github.com/vercel/turborepo",directory:"packages/turbo-workspaces"},bugs:{url:"https://github.com/vercel/turborepo/issues"},bin:"dist/cli.js",module:"dist/index.mjs",main:"dist/index.js",types:"dist/index.d.ts",scripts:{build:"tsup",dev:"tsup --watch",test:"jest",lint:"eslint src/","check-types":"tsc --noEmit","lint:prettier":"prettier -c . --cache --ignore-path=../../.prettierignore"},dependencies:{commander:"^10.0.0",execa:"5.1.1","fast-glob":"^3.2.12","fs-extra":"^10.1.0","gradient-string":"^2.0.0",inquirer:"^8.0.0","js-yaml":"^4.1.0",ora:"4.1.1",picocolors:"1.0.1",rimraf:"^3.0.2",semver:"^7.3.5","update-check":"^1.5.4"},devDependencies:{"@turbo/eslint-config":"workspace:*","@turbo/test-utils":"workspace:*","@turbo/tsconfig":"workspace:*","@turbo/utils":"workspace:*","@types/fs-extra":"^9.0.13","@types/gradient-string":"^1.1.2","@types/inquirer":"^7.3.1","@types/jest":"^27.4.0","@types/js-yaml":"^4.0.5","@types/node":"^18.17.2","@types/rimraf":"^3.0.2","@types/semver":"^7.3.9",jest:"^27.4.3",semver:"^7.3.5","strip-ansi":"^6.0.1","ts-jest":"^27.1.1",tsup:"^5.10.3",typescript:"5.3.3"},files:["dist"],publishConfig:{access:"public"}};s();s();import w from"path";import R from"inquirer";import{bold as C,dim as I,italic as E,underline as G}from"picocolors";async function P(t){let r=new k;r.hero();let c=await R.prompt({type:"input",name:"directoryInput",message:"Where is the root of the repo?",when:!t,default:".",validate:e=>{let{exists:o,absolute:n}=u({directory:e});return o?!0:`Directory ${I(`(${n})`)} does not exist`},filter:e=>e.trim()}),{directoryInput:i=t}=c,{exists:h,absolute:p}=u({directory:i});if(!h)return r.error(`Directory ${I(`(${p})`)} does not exist`),process.exit(1);let m=await f({root:p}),d=m.workspaceData.workspaces.length,l=d>0,a={};m.workspaceData.workspaces.forEach(e=>{let n=w.relative(p,e.paths.root).split(w.sep)[0];n in a||(a[n]=[]),a[n].push(e)});let v=e=>`${e.name} (${E(`./${w.relative(p,e.paths.root)}`)})`,y=({number:e,dir:o,workspaces:n})=>{r.indented(2,`${e}. ${C(o)}`),n.forEach((L,T)=>{r.indented(3,`${T+1}. ${v(L)}`)})};r.header("Repository Summary"),r.indented(1,`${G(m.name)}:`),r.indented(1,`Package Manager: ${C(E(m.packageManager))}`),l&&(r.indented(1,`Workspaces (${C(d.toString())}):`),Object.keys(a).forEach((e,o)=>{y({number:o+1,workspaces:a[e],dir:e})}),r.blankLine())}s();import O from"inquirer";import{dim as S}from"picocolors";function U({packageManager:t,currentWorkspaceManger:r,availablePackageManagers:c}){return r===t?"already in use":c[t]?!1:"not installed"}async function j(t,r,c){let i=new k(c);i.hero(),i.header("Welcome, let's convert your project."),i.blankLine();let h=await O.prompt({type:"input",name:"directoryInput",message:"Where is the root of your repo?",when:!t,default:".",validate:e=>{let{exists:o,absolute:n}=u({directory:e});return o?!0:`Directory ${S(`(${n})`)} does not exist`},filter:e=>e.trim()}),{directoryInput:p=t}=h,{exists:m,absolute:d}=u({directory:p});if(!m)return i.error(`Directory ${S(`(${d})`)} does not exist`),process.exit(1);let[l,a]=await Promise.all([f({root:d}),$()]),v=await O.prompt({name:"packageManagerInput",type:"list",message:`Convert from ${l.packageManager} to:`,when:!r||!Object.keys(a).includes(r),choices:[{pm:"npm",label:"npm"},{pm:"pnpm",label:"pnpm"},{pm:"yarn",label:"yarn"},{pm:"bun",label:"Bun (beta)"}].map(({pm:e,label:o})=>({name:o,value:e,disabled:U({packageManager:e,currentWorkspaceManger:l.packageManager,availablePackageManagers:a})}))}),{packageManagerInput:y=r}=v;await W({project:l,convertTo:{name:y,version:a[y]},logger:i,options:c})}var b=new z;b.name("@turbo/workspaces").description("Tools for working with package manager workspaces").version(A.version,"-v, --version","output the current version");b.command("convert").description("Convert project between workspace managers").argument("[path]","Project root").argument("[package-manager]","Package manager to convert to").option("--skip-install","Do not run a package manager install after conversion",!1).option("--dry","Dry run (no changes are made to files)",!1).option("--force","Bypass Git safety checks and forcibly run conversion",!1).action(j);b.command("summary").description("Display a summary of the specified project").argument("[path]","Project root").action(P);b.parseAsync().catch(t=>{g.log(),t instanceof D?g.log(q(t.message)):(g.log(q("Unexpected error. Please report it as a bug:")),g.log(t)),g.log(),process.exit(1)});
