import React, { ReactElement } from 'react';
import { Locales } from '../../routing/types';
import { SharedNavigationRoutingConfigInput } from '../shared/config';
export default function createSharedPathnamesNavigation<const AppLocales extends Locales>(input?: SharedNavigationRoutingConfigInput<AppLocales>): {
    Link: (props: Omit<Omit<Omit<Omit<Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, keyof {
        href: string | import("url").UrlObject;
        as?: string | import("url").UrlObject;
        replace?: boolean;
        scroll?: boolean;
        shallow?: boolean;
        passHref?: boolean;
        prefetch?: boolean;
        locale?: string | false;
        legacyBehavior?: boolean;
        onMouseEnter?: React.MouseEventHandler<HTMLAnchorElement>;
        onTouchStart?: React.TouchEventHandler<HTMLAnchorElement>;
        onClick?: React.MouseEventHandler<HTMLAnchorElement>;
    }> & {
        href: string | import("url").UrlObject;
        as?: string | import("url").UrlObject;
        replace?: boolean;
        scroll?: boolean;
        shallow?: boolean;
        passHref?: boolean;
        prefetch?: boolean;
        locale?: string | false;
        legacyBehavior?: boolean;
        onMouseEnter?: React.MouseEventHandler<HTMLAnchorElement>;
        onTouchStart?: React.TouchEventHandler<HTMLAnchorElement>;
        onClick?: React.MouseEventHandler<HTMLAnchorElement>;
    } & {
        children?: React.ReactNode;
    } & React.RefAttributes<HTMLAnchorElement>, "locale"> & {
        locale: string;
        prefix: string;
        localePrefixMode: import("../../routing/types").LocalePrefixMode;
    }, "ref"> & React.RefAttributes<HTMLAnchorElement>, "locale" | "prefix" | "localePrefixMode"> & {
        locale?: AppLocales[number] | undefined;
        localePrefix: import("../../routing/types").LocalePrefixConfigVerbose<AppLocales>;
    } & {
        ref?: React.LegacyRef<HTMLAnchorElement> | undefined;
    }, "localePrefix"> & {
        ref?: React.LegacyRef<HTMLAnchorElement> | undefined;
    }) => ReactElement;
    redirect: (pathname: string, type?: import("next/navigation").RedirectType | undefined) => never;
    permanentRedirect: (pathname: string, type?: import("next/navigation").RedirectType | undefined) => never;
    usePathname: () => string;
    useRouter: () => {
        push: (href: string, options?: (import("next/dist/shared/lib/app-router-context.shared-runtime").NavigateOptions & {
            locale?: AppLocales[number] | undefined;
        }) | undefined) => void;
        replace: (href: string, options?: (import("next/dist/shared/lib/app-router-context.shared-runtime").NavigateOptions & {
            locale?: AppLocales[number] | undefined;
        }) | undefined) => void;
        prefetch: (href: string, options?: (import("next/dist/shared/lib/app-router-context.shared-runtime").PrefetchOptions & {
            locale?: AppLocales[number] | undefined;
        }) | undefined) => void;
        back(): void;
        forward(): void;
        refresh(): void;
    };
};
