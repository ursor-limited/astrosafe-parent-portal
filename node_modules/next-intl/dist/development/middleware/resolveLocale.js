'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var intlLocalematcher = require('@formatjs/intl-localematcher');
var Negotiator = require('negotiator');
var constants = require('../shared/constants.js');
var utils = require('./utils.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var Negotiator__default = /*#__PURE__*/_interopDefault(Negotiator);

function findDomainFromHost(requestHeaders, domains) {
  var _host;
  let host = utils.getHost(requestHeaders);

  // Remove port (easier for local development)
  host = (_host = host) === null || _host === void 0 ? void 0 : _host.replace(/:\d+$/, '');
  if (host && domains) {
    return domains.find(cur => cur.domain === host);
  }
  return undefined;
}
function orderLocales(locales) {
  // Workaround for https://github.com/formatjs/formatjs/issues/4469
  return locales.slice().sort((a, b) => b.length - a.length);
}
function getAcceptLanguageLocale(requestHeaders, locales, defaultLocale) {
  let locale;
  const languages = new Negotiator__default.default({
    headers: {
      'accept-language': requestHeaders.get('accept-language') || undefined
    }
  }).languages();
  try {
    const orderedLocales = orderLocales(locales);
    locale = intlLocalematcher.match(languages, orderedLocales, defaultLocale);
  } catch (e) {
    // Invalid language
  }
  return locale;
}
function getLocaleFromCookie(requestCookies, locales) {
  if (requestCookies.has(constants.COOKIE_LOCALE_NAME)) {
    var _requestCookies$get;
    const value = (_requestCookies$get = requestCookies.get(constants.COOKIE_LOCALE_NAME)) === null || _requestCookies$get === void 0 ? void 0 : _requestCookies$get.value;
    if (value && locales.includes(value)) {
      return value;
    }
  }
}
function resolveLocaleFromPrefix(_ref, requestHeaders, requestCookies, pathname) {
  let {
    defaultLocale,
    localeDetection,
    localePrefix,
    locales
  } = _ref;
  let locale;

  // Prio 1: Use route prefix
  if (pathname) {
    var _getPathnameMatch;
    locale = (_getPathnameMatch = utils.getPathnameMatch(pathname, locales, localePrefix)) === null || _getPathnameMatch === void 0 ? void 0 : _getPathnameMatch.locale;
  }

  // Prio 2: Use existing cookie
  if (!locale && localeDetection && requestCookies) {
    locale = getLocaleFromCookie(requestCookies, locales);
  }

  // Prio 3: Use the `accept-language` header
  if (!locale && localeDetection && requestHeaders) {
    locale = getAcceptLanguageLocale(requestHeaders, locales, defaultLocale);
  }

  // Prio 4: Use default locale
  if (!locale) {
    locale = defaultLocale;
  }
  return locale;
}
function resolveLocaleFromDomain(config, requestHeaders, requestCookies, pathname) {
  const domains = config.domains;
  const domain = findDomainFromHost(requestHeaders, domains);
  if (!domain) {
    return {
      locale: resolveLocaleFromPrefix(config, requestHeaders, requestCookies, pathname)
    };
  }
  let locale;

  // Prio 1: Use route prefix
  if (pathname) {
    var _getPathnameMatch2;
    const prefixLocale = (_getPathnameMatch2 = utils.getPathnameMatch(pathname, config.locales, config.localePrefix)) === null || _getPathnameMatch2 === void 0 ? void 0 : _getPathnameMatch2.locale;
    if (prefixLocale) {
      if (utils.isLocaleSupportedOnDomain(prefixLocale, domain)) {
        locale = prefixLocale;
      } else {
        // Causes a redirect to a domain that supports the locale
        return {
          locale: prefixLocale,
          domain
        };
      }
    }
  }

  // Prio 2: Use existing cookie
  if (!locale && config.localeDetection && requestCookies) {
    const cookieLocale = getLocaleFromCookie(requestCookies, config.locales);
    if (cookieLocale) {
      if (utils.isLocaleSupportedOnDomain(cookieLocale, domain)) {
        locale = cookieLocale;
      }
    }
  }

  // Prio 3: Use the `accept-language` header
  if (!locale && config.localeDetection && requestHeaders) {
    const headerLocale = getAcceptLanguageLocale(requestHeaders, domain.locales || config.locales, domain.defaultLocale);
    if (headerLocale) {
      locale = headerLocale;
    }
  }

  // Prio 4: Use default locale
  if (!locale) {
    locale = domain.defaultLocale;
  }
  return {
    locale,
    domain
  };
}
function resolveLocale(config, requestHeaders, requestCookies, pathname) {
  if (config.domains) {
    return resolveLocaleFromDomain(config, requestHeaders, requestCookies, pathname);
  } else {
    return {
      locale: resolveLocaleFromPrefix(config, requestHeaders, requestCookies, pathname)
    };
  }
}

exports.default = resolveLocale;
exports.getAcceptLanguageLocale = getAcceptLanguageLocale;
