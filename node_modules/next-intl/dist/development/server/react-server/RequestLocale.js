'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var headers = require('next/headers');
var navigation = require('next/navigation');
var React = require('react');
var constants = require('../../shared/constants.js');

function getLocaleFromHeaderImpl() {
  let locale;
  try {
    locale = headers.headers().get(constants.HEADER_LOCALE_NAME);
  } catch (error) {
    if (error instanceof Error && error.digest === 'DYNAMIC_SERVER_USAGE') {
      throw new Error('Usage of next-intl APIs in Server Components currently opts into dynamic rendering. This limitation will eventually be lifted, but as a stopgap solution, you can use the `unstable_setRequestLocale` API to enable static rendering, see https://next-intl-docs.vercel.app/docs/getting-started/app-router/with-i18n-routing#static-rendering', {
        cause: error
      });
    } else {
      throw error;
    }
  }
  if (!locale) {
    {
      console.error("\nUnable to find `next-intl` locale because the middleware didn't run on this request. See https://next-intl-docs.vercel.app/docs/routing/middleware#unable-to-find-locale. The `notFound()` function will be called as a result.\n");
    }
    navigation.notFound();
  }
  return locale;
}
const getLocaleFromHeader = React.cache(getLocaleFromHeaderImpl);

// Workaround until `createServerContext` is available
function getCacheImpl() {
  const value = {
    locale: undefined
  };
  return value;
}
const getCache = React.cache(getCacheImpl);
function setRequestLocale(locale) {
  getCache().locale = locale;
}
function getRequestLocale() {
  return getCache().locale || getLocaleFromHeader();
}

exports.getRequestLocale = getRequestLocale;
exports.setRequestLocale = setRequestLocale;
