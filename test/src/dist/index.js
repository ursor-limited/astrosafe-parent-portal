import * as React$1 from 'react';
import React__default$1, { forwardRef, useContext, useState, useEffect, useCallback, useLayoutEffect, useRef, useMemo, createContext } from 'react';
import * as ReactDOM from 'react-dom';
import ReactDOM__default, { createPortal } from 'react-dom';

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var jsxRuntime = {exports: {}};

var reactJsxRuntime_production_min = {};

/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactJsxRuntime_production_min;

function requireReactJsxRuntime_production_min () {
	if (hasRequiredReactJsxRuntime_production_min) return reactJsxRuntime_production_min;
	hasRequiredReactJsxRuntime_production_min = 1;
var f=React__default$1,k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};
	function q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=""+g);void 0!==a.key&&(e=""+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return {$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}reactJsxRuntime_production_min.Fragment=l;reactJsxRuntime_production_min.jsx=q;reactJsxRuntime_production_min.jsxs=q;
	return reactJsxRuntime_production_min;
}

var reactJsxRuntime_development = {};

/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactJsxRuntime_development;

function requireReactJsxRuntime_development () {
	if (hasRequiredReactJsxRuntime_development) return reactJsxRuntime_development;
	hasRequiredReactJsxRuntime_development = 1;

	if (process.env.NODE_ENV !== "production") {
	  (function() {

	var React = React__default$1;

	// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types.
	var REACT_ELEMENT_TYPE = Symbol.for('react.element');
	var REACT_PORTAL_TYPE = Symbol.for('react.portal');
	var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
	var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
	var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
	var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
	var REACT_CONTEXT_TYPE = Symbol.for('react.context');
	var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
	var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
	var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
	var REACT_MEMO_TYPE = Symbol.for('react.memo');
	var REACT_LAZY_TYPE = Symbol.for('react.lazy');
	var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
	var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	function error(format) {
	  {
	    {
	      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        args[_key2 - 1] = arguments[_key2];
	      }

	      printWarning('error', format, args);
	    }
	  }
	}

	function printWarning(level, format, args) {
	  // When changing this logic, you might want to also
	  // update consoleWithStackDev.www.js as well.
	  {
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum();

	    if (stack !== '') {
	      format += '%s';
	      args = args.concat([stack]);
	    } // eslint-disable-next-line react-internal/safe-string-coercion


	    var argsWithFormat = args.map(function (item) {
	      return String(item);
	    }); // Careful: RN currently depends on this prefix

	    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	    // breaks IE9: https://github.com/facebook/react/issues/13610
	    // eslint-disable-next-line react-internal/no-production-logging

	    Function.prototype.apply.call(console[level], console, argsWithFormat);
	  }
	}

	// -----------------------------------------------------------------------------

	var enableScopeAPI = false; // Experimental Create Event Handle API.
	var enableCacheElement = false;
	var enableTransitionTracing = false; // No known bugs, but needs performance testing

	var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
	// stuff. Intended to enable React core members to more easily debug scheduling
	// issues in DEV builds.

	var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

	var REACT_MODULE_REFERENCE;

	{
	  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
	}

	function isValidElementType(type) {
	  if (typeof type === 'string' || typeof type === 'function') {
	    return true;
	  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


	  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
	    return true;
	  }

	  if (typeof type === 'object' && type !== null) {
	    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
	    // types supported by any Flight configuration anywhere since
	    // we don't know which Flight build this will end up being used
	    // with.
	    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
	      return true;
	    }
	  }

	  return false;
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var displayName = outerType.displayName;

	  if (displayName) {
	    return displayName;
	  }

	  var functionName = innerType.displayName || innerType.name || '';
	  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
	} // Keep in sync with react-reconciler/getComponentNameFromFiber


	function getContextName(type) {
	  return type.displayName || 'Context';
	} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


	function getComponentNameFromType(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case REACT_PROFILER_TYPE:
	      return 'Profiler';

	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';

	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';

	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        var context = type;
	        return getContextName(context) + '.Consumer';

	      case REACT_PROVIDER_TYPE:
	        var provider = type;
	        return getContextName(provider._context) + '.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        var outerName = type.displayName || null;

	        if (outerName !== null) {
	          return outerName;
	        }

	        return getComponentNameFromType(type.type) || 'Memo';

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            return getComponentNameFromType(init(payload));
	          } catch (x) {
	            return null;
	          }
	        }

	      // eslint-disable-next-line no-fallthrough
	    }
	  }

	  return null;
	}

	var assign = Object.assign;

	// Helpers to patch console.logs to avoid logging during side-effect free
	// replaying on render function. This currently only patches the object
	// lazily which won't cover if the log function was extracted eagerly.
	// We could also eagerly patch the method.
	var disabledDepth = 0;
	var prevLog;
	var prevInfo;
	var prevWarn;
	var prevError;
	var prevGroup;
	var prevGroupCollapsed;
	var prevGroupEnd;

	function disabledLog() {}

	disabledLog.__reactDisabledLog = true;
	function disableLogs() {
	  {
	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      prevLog = console.log;
	      prevInfo = console.info;
	      prevWarn = console.warn;
	      prevError = console.error;
	      prevGroup = console.group;
	      prevGroupCollapsed = console.groupCollapsed;
	      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

	      var props = {
	        configurable: true,
	        enumerable: true,
	        value: disabledLog,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        info: props,
	        log: props,
	        warn: props,
	        error: props,
	        group: props,
	        groupCollapsed: props,
	        groupEnd: props
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    disabledDepth++;
	  }
	}
	function reenableLogs() {
	  {
	    disabledDepth--;

	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      var props = {
	        configurable: true,
	        enumerable: true,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        log: assign({}, props, {
	          value: prevLog
	        }),
	        info: assign({}, props, {
	          value: prevInfo
	        }),
	        warn: assign({}, props, {
	          value: prevWarn
	        }),
	        error: assign({}, props, {
	          value: prevError
	        }),
	        group: assign({}, props, {
	          value: prevGroup
	        }),
	        groupCollapsed: assign({}, props, {
	          value: prevGroupCollapsed
	        }),
	        groupEnd: assign({}, props, {
	          value: prevGroupEnd
	        })
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    if (disabledDepth < 0) {
	      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
	    }
	  }
	}

	var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	var prefix;
	function describeBuiltInComponentFrame(name, source, ownerFn) {
	  {
	    if (prefix === undefined) {
	      // Extract the VM specific prefix used by each line.
	      try {
	        throw Error();
	      } catch (x) {
	        var match = x.stack.trim().match(/\n( *(at )?)/);
	        prefix = match && match[1] || '';
	      }
	    } // We use the prefix to ensure our stacks line up with native stack frames.


	    return '\n' + prefix + name;
	  }
	}
	var reentry = false;
	var componentFrameCache;

	{
	  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
	  componentFrameCache = new PossiblyWeakMap();
	}

	function describeNativeComponentFrame(fn, construct) {
	  // If something asked for a stack inside a fake render, it should get ignored.
	  if ( !fn || reentry) {
	    return '';
	  }

	  {
	    var frame = componentFrameCache.get(fn);

	    if (frame !== undefined) {
	      return frame;
	    }
	  }

	  var control;
	  reentry = true;
	  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

	  Error.prepareStackTrace = undefined;
	  var previousDispatcher;

	  {
	    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
	    // for warnings.

	    ReactCurrentDispatcher.current = null;
	    disableLogs();
	  }

	  try {
	    // This should throw.
	    if (construct) {
	      // Something should be setting the props in the constructor.
	      var Fake = function () {
	        throw Error();
	      }; // $FlowFixMe


	      Object.defineProperty(Fake.prototype, 'props', {
	        set: function () {
	          // We use a throwing setter instead of frozen or non-writable props
	          // because that won't throw in a non-strict mode function.
	          throw Error();
	        }
	      });

	      if (typeof Reflect === 'object' && Reflect.construct) {
	        // We construct a different control for this case to include any extra
	        // frames added by the construct call.
	        try {
	          Reflect.construct(Fake, []);
	        } catch (x) {
	          control = x;
	        }

	        Reflect.construct(fn, [], Fake);
	      } else {
	        try {
	          Fake.call();
	        } catch (x) {
	          control = x;
	        }

	        fn.call(Fake.prototype);
	      }
	    } else {
	      try {
	        throw Error();
	      } catch (x) {
	        control = x;
	      }

	      fn();
	    }
	  } catch (sample) {
	    // This is inlined manually because closure doesn't do it for us.
	    if (sample && control && typeof sample.stack === 'string') {
	      // This extracts the first frame from the sample that isn't also in the control.
	      // Skipping one frame that we assume is the frame that calls the two.
	      var sampleLines = sample.stack.split('\n');
	      var controlLines = control.stack.split('\n');
	      var s = sampleLines.length - 1;
	      var c = controlLines.length - 1;

	      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
	        // We expect at least one stack frame to be shared.
	        // Typically this will be the root most one. However, stack frames may be
	        // cut off due to maximum stack limits. In this case, one maybe cut off
	        // earlier than the other. We assume that the sample is longer or the same
	        // and there for cut off earlier. So we should find the root most frame in
	        // the sample somewhere in the control.
	        c--;
	      }

	      for (; s >= 1 && c >= 0; s--, c--) {
	        // Next we find the first one that isn't the same which should be the
	        // frame that called our sample function and the control.
	        if (sampleLines[s] !== controlLines[c]) {
	          // In V8, the first line is describing the message but other VMs don't.
	          // If we're about to return the first line, and the control is also on the same
	          // line, that's a pretty good indicator that our sample threw at same line as
	          // the control. I.e. before we entered the sample frame. So we ignore this result.
	          // This can happen if you passed a class to function component, or non-function.
	          if (s !== 1 || c !== 1) {
	            do {
	              s--;
	              c--; // We may still have similar intermediate frames from the construct call.
	              // The next one that isn't the same should be our match though.

	              if (c < 0 || sampleLines[s] !== controlLines[c]) {
	                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
	                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
	                // but we have a user-provided "displayName"
	                // splice it in to make the stack more readable.


	                if (fn.displayName && _frame.includes('<anonymous>')) {
	                  _frame = _frame.replace('<anonymous>', fn.displayName);
	                }

	                {
	                  if (typeof fn === 'function') {
	                    componentFrameCache.set(fn, _frame);
	                  }
	                } // Return the line we found.


	                return _frame;
	              }
	            } while (s >= 1 && c >= 0);
	          }

	          break;
	        }
	      }
	    }
	  } finally {
	    reentry = false;

	    {
	      ReactCurrentDispatcher.current = previousDispatcher;
	      reenableLogs();
	    }

	    Error.prepareStackTrace = previousPrepareStackTrace;
	  } // Fallback to just using the name if we couldn't make it throw.


	  var name = fn ? fn.displayName || fn.name : '';
	  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

	  {
	    if (typeof fn === 'function') {
	      componentFrameCache.set(fn, syntheticFrame);
	    }
	  }

	  return syntheticFrame;
	}
	function describeFunctionComponentFrame(fn, source, ownerFn) {
	  {
	    return describeNativeComponentFrame(fn, false);
	  }
	}

	function shouldConstruct(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

	  if (type == null) {
	    return '';
	  }

	  if (typeof type === 'function') {
	    {
	      return describeNativeComponentFrame(type, shouldConstruct(type));
	    }
	  }

	  if (typeof type === 'string') {
	    return describeBuiltInComponentFrame(type);
	  }

	  switch (type) {
	    case REACT_SUSPENSE_TYPE:
	      return describeBuiltInComponentFrame('Suspense');

	    case REACT_SUSPENSE_LIST_TYPE:
	      return describeBuiltInComponentFrame('SuspenseList');
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_FORWARD_REF_TYPE:
	        return describeFunctionComponentFrame(type.render);

	      case REACT_MEMO_TYPE:
	        // Memo may contain any component type so we recursively resolve it.
	        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            // Lazy may contain any component type so we recursively resolve it.
	            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
	          } catch (x) {}
	        }
	    }
	  }

	  return '';
	}

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var loggedTypeFailures = {};
	var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

	function setCurrentlyValidatingElement(element) {
	  {
	    if (element) {
	      var owner = element._owner;
	      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	      ReactDebugCurrentFrame.setExtraStackFrame(stack);
	    } else {
	      ReactDebugCurrentFrame.setExtraStackFrame(null);
	    }
	  }
	}

	function checkPropTypes(typeSpecs, values, location, componentName, element) {
	  {
	    // $FlowFixMe This is okay but Flow doesn't know it.
	    var has = Function.call.bind(hasOwnProperty);

	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.

	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            // eslint-disable-next-line react-internal/prod-error-codes
	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
	            err.name = 'Invariant Violation';
	            throw err;
	          }

	          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	        } catch (ex) {
	          error$1 = ex;
	        }

	        if (error$1 && !(error$1 instanceof Error)) {
	          setCurrentlyValidatingElement(element);

	          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

	          setCurrentlyValidatingElement(null);
	        }

	        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error$1.message] = true;
	          setCurrentlyValidatingElement(element);

	          error('Failed %s type: %s', location, error$1.message);

	          setCurrentlyValidatingElement(null);
	        }
	      }
	    }
	  }
	}

	var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

	function isArray(a) {
	  return isArrayImpl(a);
	}

	/*
	 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
	 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
	 *
	 * The functions in this module will throw an easier-to-understand,
	 * easier-to-debug exception with a clear errors message message explaining the
	 * problem. (Instead of a confusing exception thrown inside the implementation
	 * of the `value` object).
	 */
	// $FlowFixMe only called in DEV, so void return is not possible.
	function typeName(value) {
	  {
	    // toStringTag is needed for namespaced types like Temporal.Instant
	    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
	    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
	    return type;
	  }
	} // $FlowFixMe only called in DEV, so void return is not possible.


	function willCoercionThrow(value) {
	  {
	    try {
	      testStringCoercion(value);
	      return false;
	    } catch (e) {
	      return true;
	    }
	  }
	}

	function testStringCoercion(value) {
	  // If you ended up here by following an exception call stack, here's what's
	  // happened: you supplied an object or symbol value to React (as a prop, key,
	  // DOM attribute, CSS property, string ref, etc.) and when React tried to
	  // coerce it to a string using `'' + value`, an exception was thrown.
	  //
	  // The most common types that will cause this exception are `Symbol` instances
	  // and Temporal objects like `Temporal.Instant`. But any object that has a
	  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
	  // exception. (Library authors do this to prevent users from using built-in
	  // numeric operators like `+` or comparison operators like `>=` because custom
	  // methods are needed to perform accurate arithmetic or comparison.)
	  //
	  // To fix the problem, coerce this object or symbol value to a string before
	  // passing it to React. The most reliable way is usually `String(value)`.
	  //
	  // To find which value is throwing, check the browser or debugger console.
	  // Before this exception was thrown, there should be `console.error` output
	  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
	  // problem and how that type was used: key, atrribute, input value prop, etc.
	  // In most cases, this console output also shows the component and its
	  // ancestor components where the exception happened.
	  //
	  // eslint-disable-next-line react-internal/safe-string-coercion
	  return '' + value;
	}
	function checkKeyStringCoercion(value) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}

	var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	var specialPropKeyWarningShown;
	var specialPropRefWarningShown;
	var didWarnAboutStringRefs;

	{
	  didWarnAboutStringRefs = {};
	}

	function hasValidRef(config) {
	  {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.key !== undefined;
	}

	function warnIfStringRefCannotBeAutoConverted(config, self) {
	  {
	    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
	      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

	      if (!didWarnAboutStringRefs[componentName]) {
	        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);

	        didWarnAboutStringRefs[componentName] = true;
	      }
	    }
	  }
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  {
	    var warnAboutAccessingKey = function () {
	      if (!specialPropKeyWarningShown) {
	        specialPropKeyWarningShown = true;

	        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
	      }
	    };

	    warnAboutAccessingKey.isReactWarning = true;
	    Object.defineProperty(props, 'key', {
	      get: warnAboutAccessingKey,
	      configurable: true
	    });
	  }
	}

	function defineRefPropWarningGetter(props, displayName) {
	  {
	    var warnAboutAccessingRef = function () {
	      if (!specialPropRefWarningShown) {
	        specialPropRefWarningShown = true;

	        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
	      }
	    };

	    warnAboutAccessingRef.isReactWarning = true;
	    Object.defineProperty(props, 'ref', {
	      get: warnAboutAccessingRef,
	      configurable: true
	    });
	  }
	}
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, instanceof check
	 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} props
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} owner
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @internal
	 */


	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allows us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.

	    Object.defineProperty(element._store, 'validated', {
	      configurable: false,
	      enumerable: false,
	      writable: true,
	      value: false
	    }); // self and source are DEV only properties.

	    Object.defineProperty(element, '_self', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: self
	    }); // Two elements created in two different places should be considered
	    // equal for testing purposes and therefore we hide it from enumeration.

	    Object.defineProperty(element, '_source', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: source
	    });

	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};
	/**
	 * https://github.com/reactjs/rfcs/pull/107
	 * @param {*} type
	 * @param {object} props
	 * @param {string} key
	 */

	function jsxDEV(type, config, maybeKey, source, self) {
	  {
	    var propName; // Reserved names are extracted

	    var props = {};
	    var key = null;
	    var ref = null; // Currently, key can be spread in as a prop. This causes a potential
	    // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
	    // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
	    // but as an intermediary step, we will use jsxDEV for everything except
	    // <div {...props} key="Hi" />, because we aren't currently able to tell if
	    // key is explicitly declared to be undefined or not.

	    if (maybeKey !== undefined) {
	      {
	        checkKeyStringCoercion(maybeKey);
	      }

	      key = '' + maybeKey;
	    }

	    if (hasValidKey(config)) {
	      {
	        checkKeyStringCoercion(config.key);
	      }

	      key = '' + config.key;
	    }

	    if (hasValidRef(config)) {
	      ref = config.ref;
	      warnIfStringRefCannotBeAutoConverted(config, self);
	    } // Remaining properties are added to a new props object


	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    } // Resolve default props


	    if (type && type.defaultProps) {
	      var defaultProps = type.defaultProps;

	      for (propName in defaultProps) {
	        if (props[propName] === undefined) {
	          props[propName] = defaultProps[propName];
	        }
	      }
	    }

	    if (key || ref) {
	      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

	      if (key) {
	        defineKeyPropWarningGetter(props, displayName);
	      }

	      if (ref) {
	        defineRefPropWarningGetter(props, displayName);
	      }
	    }

	    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	  }
	}

	var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
	var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

	function setCurrentlyValidatingElement$1(element) {
	  {
	    if (element) {
	      var owner = element._owner;
	      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
	    } else {
	      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
	    }
	  }
	}

	var propTypesMisspellWarningShown;

	{
	  propTypesMisspellWarningShown = false;
	}
	/**
	 * Verifies the object is a ReactElement.
	 * See https://reactjs.org/docs/react-api.html#isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a ReactElement.
	 * @final
	 */


	function isValidElement(object) {
	  {
	    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	  }
	}

	function getDeclarationErrorAddendum() {
	  {
	    if (ReactCurrentOwner$1.current) {
	      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);

	      if (name) {
	        return '\n\nCheck the render method of `' + name + '`.';
	      }
	    }

	    return '';
	  }
	}

	function getSourceInfoErrorAddendum(source) {
	  {

	    return '';
	  }
	}
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */


	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  {
	    var info = getDeclarationErrorAddendum();

	    if (!info) {
	      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

	      if (parentName) {
	        info = "\n\nCheck the top-level render call using <" + parentName + ">.";
	      }
	    }

	    return info;
	  }
	}
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */


	function validateExplicitKey(element, parentType) {
	  {
	    if (!element._store || element._store.validated || element.key != null) {
	      return;
	    }

	    element._store.validated = true;
	    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

	    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	      return;
	    }

	    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
	    // property, it may be the creator of the child that's responsible for
	    // assigning it a key.

	    var childOwner = '';

	    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
	      // Give the component that originally created this child.
	      childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
	    }

	    setCurrentlyValidatingElement$1(element);

	    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

	    setCurrentlyValidatingElement$1(null);
	  }
	}
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */


	function validateChildKeys(node, parentType) {
	  {
	    if (typeof node !== 'object') {
	      return;
	    }

	    if (isArray(node)) {
	      for (var i = 0; i < node.length; i++) {
	        var child = node[i];

	        if (isValidElement(child)) {
	          validateExplicitKey(child, parentType);
	        }
	      }
	    } else if (isValidElement(node)) {
	      // This element was passed in a valid location.
	      if (node._store) {
	        node._store.validated = true;
	      }
	    } else if (node) {
	      var iteratorFn = getIteratorFn(node);

	      if (typeof iteratorFn === 'function') {
	        // Entry iterators used to provide implicit keys,
	        // but now we print a separate warning for them later.
	        if (iteratorFn !== node.entries) {
	          var iterator = iteratorFn.call(node);
	          var step;

	          while (!(step = iterator.next()).done) {
	            if (isValidElement(step.value)) {
	              validateExplicitKey(step.value, parentType);
	            }
	          }
	        }
	      }
	    }
	  }
	}
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */


	function validatePropTypes(element) {
	  {
	    var type = element.type;

	    if (type === null || type === undefined || typeof type === 'string') {
	      return;
	    }

	    var propTypes;

	    if (typeof type === 'function') {
	      propTypes = type.propTypes;
	    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
	    // Inner props are checked in the reconciler.
	    type.$$typeof === REACT_MEMO_TYPE)) {
	      propTypes = type.propTypes;
	    } else {
	      return;
	    }

	    if (propTypes) {
	      // Intentionally inside to avoid triggering lazy initializers:
	      var name = getComponentNameFromType(type);
	      checkPropTypes(propTypes, element.props, 'prop', name, element);
	    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
	      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

	      var _name = getComponentNameFromType(type);

	      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
	    }

	    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
	      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
	    }
	  }
	}
	/**
	 * Given a fragment, validate that it can only be provided with fragment props
	 * @param {ReactElement} fragment
	 */


	function validateFragmentProps(fragment) {
	  {
	    var keys = Object.keys(fragment.props);

	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];

	      if (key !== 'children' && key !== 'key') {
	        setCurrentlyValidatingElement$1(fragment);

	        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

	        setCurrentlyValidatingElement$1(null);
	        break;
	      }
	    }

	    if (fragment.ref !== null) {
	      setCurrentlyValidatingElement$1(fragment);

	      error('Invalid attribute `ref` supplied to `React.Fragment`.');

	      setCurrentlyValidatingElement$1(null);
	    }
	  }
	}

	var didWarnAboutKeySpread = {};
	function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
	  {
	    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.

	    if (!validType) {
	      var info = '';

	      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
	      }

	      var sourceInfo = getSourceInfoErrorAddendum();

	      if (sourceInfo) {
	        info += sourceInfo;
	      } else {
	        info += getDeclarationErrorAddendum();
	      }

	      var typeString;

	      if (type === null) {
	        typeString = 'null';
	      } else if (isArray(type)) {
	        typeString = 'array';
	      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
	        typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
	        info = ' Did you accidentally export a JSX literal instead of a component?';
	      } else {
	        typeString = typeof type;
	      }

	      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
	    }

	    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.

	    if (element == null) {
	      return element;
	    } // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)


	    if (validType) {
	      var children = props.children;

	      if (children !== undefined) {
	        if (isStaticChildren) {
	          if (isArray(children)) {
	            for (var i = 0; i < children.length; i++) {
	              validateChildKeys(children[i], type);
	            }

	            if (Object.freeze) {
	              Object.freeze(children);
	            }
	          } else {
	            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
	          }
	        } else {
	          validateChildKeys(children, type);
	        }
	      }
	    }

	    {
	      if (hasOwnProperty.call(props, 'key')) {
	        var componentName = getComponentNameFromType(type);
	        var keys = Object.keys(props).filter(function (k) {
	          return k !== 'key';
	        });
	        var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';

	        if (!didWarnAboutKeySpread[componentName + beforeExample]) {
	          var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';

	          error('A props object containing a "key" prop is being spread into JSX:\n' + '  let props = %s;\n' + '  <%s {...props} />\n' + 'React keys must be passed directly to JSX without using spread:\n' + '  let props = %s;\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);

	          didWarnAboutKeySpread[componentName + beforeExample] = true;
	        }
	      }
	    }

	    if (type === REACT_FRAGMENT_TYPE) {
	      validateFragmentProps(element);
	    } else {
	      validatePropTypes(element);
	    }

	    return element;
	  }
	} // These two functions exist to still get child warnings in dev
	// even with the prod transform. This means that jsxDEV is purely
	// opt-in behavior for better messages but that we won't stop
	// giving you warnings if you use production apis.

	function jsxWithValidationStatic(type, props, key) {
	  {
	    return jsxWithValidation(type, props, key, true);
	  }
	}
	function jsxWithValidationDynamic(type, props, key) {
	  {
	    return jsxWithValidation(type, props, key, false);
	  }
	}

	var jsx =  jsxWithValidationDynamic ; // we may want to special case jsxs internally to take advantage of static children.
	// for now we can ship identical prod functions

	var jsxs =  jsxWithValidationStatic ;

	reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
	reactJsxRuntime_development.jsx = jsx;
	reactJsxRuntime_development.jsxs = jsxs;
	  })();
	}
	return reactJsxRuntime_development;
}

if (process.env.NODE_ENV === 'production') {
  jsxRuntime.exports = requireReactJsxRuntime_production_min();
} else {
  jsxRuntime.exports = requireReactJsxRuntime_development();
}

var jsxRuntimeExports = jsxRuntime.exports;

function _arrayWithHoles$2(r) {
  if (Array.isArray(r)) return r;
}

function _iterableToArrayLimit$2(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) ; else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}

function _arrayLikeToArray$2(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}

function _unsupportedIterableToArray$2(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray$2(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$2(r, a) : void 0;
  }
}

function _nonIterableRest$2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray$2(r, e) {
  return _arrayWithHoles$2(r) || _iterableToArrayLimit$2(r, e) || _unsupportedIterableToArray$2(r, e) || _nonIterableRest$2();
}

var useNavigate = function useNavigate() {
  var push = function push(path) {
    var newUrl = window.location.href + path;
    window.location.href = newUrl.replace('//', '/');
  };
  return {
    push: push
  };
};

function asyncGeneratorStep(n, t, e, r, o, a, c) {
  try {
    var i = n[a](c),
      u = i.value;
  } catch (n) {
    return void e(n);
  }
  i.done ? t(u) : Promise.resolve(u).then(r, o);
}
function _asyncToGenerator(n) {
  return function () {
    var t = this,
      e = arguments;
    return new Promise(function (r, o) {
      var a = n.apply(t, e);
      function _next(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
      }
      function _throw(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
      }
      _next(void 0);
    });
  };
}

function _classCallCheck$1(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}

function _typeof$2(o) {
  "@babel/helpers - typeof";

  return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof$2(o);
}

function toPrimitive(t, r) {
  if ("object" != _typeof$2(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof$2(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof$2(i) ? i : i + "";
}

function _defineProperties$1(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);
  }
}
function _createClass$1(e, r, t) {
  return t && _defineProperties$1(e, t), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}

var regeneratorRuntime$1 = {exports: {}};

var _typeof$1 = {exports: {}};

(function (module) {
	function _typeof(o) {
	  "@babel/helpers - typeof";

	  return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
	    return typeof o;
	  } : function (o) {
	    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
	  }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
	}
	module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports; 
} (_typeof$1));

var _typeofExports = _typeof$1.exports;

(function (module) {
	var _typeof = _typeofExports["default"];
	function _regeneratorRuntime() {
	  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
	    return e;
	  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
	  var t,
	    e = {},
	    r = Object.prototype,
	    n = r.hasOwnProperty,
	    o = Object.defineProperty || function (t, e, r) {
	      t[e] = r.value;
	    },
	    i = "function" == typeof Symbol ? Symbol : {},
	    a = i.iterator || "@@iterator",
	    c = i.asyncIterator || "@@asyncIterator",
	    u = i.toStringTag || "@@toStringTag";
	  function define(t, e, r) {
	    return Object.defineProperty(t, e, {
	      value: r,
	      enumerable: !0,
	      configurable: !0,
	      writable: !0
	    }), t[e];
	  }
	  try {
	    define({}, "");
	  } catch (t) {
	    define = function define(t, e, r) {
	      return t[e] = r;
	    };
	  }
	  function wrap(t, e, r, n) {
	    var i = e && e.prototype instanceof Generator ? e : Generator,
	      a = Object.create(i.prototype),
	      c = new Context(n || []);
	    return o(a, "_invoke", {
	      value: makeInvokeMethod(t, r, c)
	    }), a;
	  }
	  function tryCatch(t, e, r) {
	    try {
	      return {
	        type: "normal",
	        arg: t.call(e, r)
	      };
	    } catch (t) {
	      return {
	        type: "throw",
	        arg: t
	      };
	    }
	  }
	  e.wrap = wrap;
	  var h = "suspendedStart",
	    l = "suspendedYield",
	    f = "executing",
	    s = "completed",
	    y = {};
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}
	  var p = {};
	  define(p, a, function () {
	    return this;
	  });
	  var d = Object.getPrototypeOf,
	    v = d && d(d(values([])));
	  v && v !== r && n.call(v, a) && (p = v);
	  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
	  function defineIteratorMethods(t) {
	    ["next", "throw", "return"].forEach(function (e) {
	      define(t, e, function (t) {
	        return this._invoke(e, t);
	      });
	    });
	  }
	  function AsyncIterator(t, e) {
	    function invoke(r, o, i, a) {
	      var c = tryCatch(t[r], t, o);
	      if ("throw" !== c.type) {
	        var u = c.arg,
	          h = u.value;
	        return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
	          invoke("next", t, i, a);
	        }, function (t) {
	          invoke("throw", t, i, a);
	        }) : e.resolve(h).then(function (t) {
	          u.value = t, i(u);
	        }, function (t) {
	          return invoke("throw", t, i, a);
	        });
	      }
	      a(c.arg);
	    }
	    var r;
	    o(this, "_invoke", {
	      value: function value(t, n) {
	        function callInvokeWithMethodAndArg() {
	          return new e(function (e, r) {
	            invoke(t, n, e, r);
	          });
	        }
	        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
	      }
	    });
	  }
	  function makeInvokeMethod(e, r, n) {
	    var o = h;
	    return function (i, a) {
	      if (o === f) throw Error("Generator is already running");
	      if (o === s) {
	        if ("throw" === i) throw a;
	        return {
	          value: t,
	          done: !0
	        };
	      }
	      for (n.method = i, n.arg = a;;) {
	        var c = n.delegate;
	        if (c) {
	          var u = maybeInvokeDelegate(c, n);
	          if (u) {
	            if (u === y) continue;
	            return u;
	          }
	        }
	        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
	          if (o === h) throw o = s, n.arg;
	          n.dispatchException(n.arg);
	        } else "return" === n.method && n.abrupt("return", n.arg);
	        o = f;
	        var p = tryCatch(e, r, n);
	        if ("normal" === p.type) {
	          if (o = n.done ? s : l, p.arg === y) continue;
	          return {
	            value: p.arg,
	            done: n.done
	          };
	        }
	        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
	      }
	    };
	  }
	  function maybeInvokeDelegate(e, r) {
	    var n = r.method,
	      o = e.iterator[n];
	    if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
	    var i = tryCatch(o, e.iterator, r.arg);
	    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
	    var a = i.arg;
	    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
	  }
	  function pushTryEntry(t) {
	    var e = {
	      tryLoc: t[0]
	    };
	    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
	  }
	  function resetTryEntry(t) {
	    var e = t.completion || {};
	    e.type = "normal", delete e.arg, t.completion = e;
	  }
	  function Context(t) {
	    this.tryEntries = [{
	      tryLoc: "root"
	    }], t.forEach(pushTryEntry, this), this.reset(!0);
	  }
	  function values(e) {
	    if (e || "" === e) {
	      var r = e[a];
	      if (r) return r.call(e);
	      if ("function" == typeof e.next) return e;
	      if (!isNaN(e.length)) {
	        var o = -1,
	          i = function next() {
	            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
	            return next.value = t, next.done = !0, next;
	          };
	        return i.next = i;
	      }
	    }
	    throw new TypeError(_typeof(e) + " is not iterable");
	  }
	  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
	    value: GeneratorFunctionPrototype,
	    configurable: !0
	  }), o(GeneratorFunctionPrototype, "constructor", {
	    value: GeneratorFunction,
	    configurable: !0
	  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
	    var e = "function" == typeof t && t.constructor;
	    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
	  }, e.mark = function (t) {
	    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
	  }, e.awrap = function (t) {
	    return {
	      __await: t
	    };
	  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
	    return this;
	  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
	    void 0 === i && (i = Promise);
	    var a = new AsyncIterator(wrap(t, r, n, o), i);
	    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
	      return t.done ? t.value : a.next();
	    });
	  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
	    return this;
	  }), define(g, "toString", function () {
	    return "[object Generator]";
	  }), e.keys = function (t) {
	    var e = Object(t),
	      r = [];
	    for (var n in e) r.push(n);
	    return r.reverse(), function next() {
	      for (; r.length;) {
	        var t = r.pop();
	        if (t in e) return next.value = t, next.done = !1, next;
	      }
	      return next.done = !0, next;
	    };
	  }, e.values = values, Context.prototype = {
	    constructor: Context,
	    reset: function reset(e) {
	      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
	    },
	    stop: function stop() {
	      this.done = !0;
	      var t = this.tryEntries[0].completion;
	      if ("throw" === t.type) throw t.arg;
	      return this.rval;
	    },
	    dispatchException: function dispatchException(e) {
	      if (this.done) throw e;
	      var r = this;
	      function handle(n, o) {
	        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
	      }
	      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
	        var i = this.tryEntries[o],
	          a = i.completion;
	        if ("root" === i.tryLoc) return handle("end");
	        if (i.tryLoc <= this.prev) {
	          var c = n.call(i, "catchLoc"),
	            u = n.call(i, "finallyLoc");
	          if (c && u) {
	            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
	            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
	          } else if (c) {
	            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
	          } else {
	            if (!u) throw Error("try statement without catch or finally");
	            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
	          }
	        }
	      }
	    },
	    abrupt: function abrupt(t, e) {
	      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
	        var o = this.tryEntries[r];
	        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
	          var i = o;
	          break;
	        }
	      }
	      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
	      var a = i ? i.completion : {};
	      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
	    },
	    complete: function complete(t, e) {
	      if ("throw" === t.type) throw t.arg;
	      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
	    },
	    finish: function finish(t) {
	      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
	        var r = this.tryEntries[e];
	        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
	      }
	    },
	    "catch": function _catch(t) {
	      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
	        var r = this.tryEntries[e];
	        if (r.tryLoc === t) {
	          var n = r.completion;
	          if ("throw" === n.type) {
	            var o = n.arg;
	            resetTryEntry(r);
	          }
	          return o;
	        }
	      }
	      throw Error("illegal catch attempt");
	    },
	    delegateYield: function delegateYield(e, r, n) {
	      return this.delegate = {
	        iterator: values(e),
	        resultName: r,
	        nextLoc: n
	      }, "next" === this.method && (this.arg = t), y;
	    }
	  }, e;
	}
	module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports; 
} (regeneratorRuntime$1));

var regeneratorRuntimeExports = regeneratorRuntime$1.exports;

// TODO(Babel 8): Remove this file.

var runtime = regeneratorRuntimeExports();
var regenerator = runtime;

// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}

var _regeneratorRuntime = /*@__PURE__*/getDefaultExportFromCjs(regenerator);

/**
 * WARNING: Don't import this directly.
 * Use `MuiError` from `@mui/internal-babel-macros/MuiError.macro` instead.
 * @param {number} code
 */
function formatMuiErrorMessage$1(code) {
  // Apply babel-plugin-transform-template-literals in loose mode
  // loose mode is safe if we're concatenating primitives
  // see https://babeljs.io/docs/en/babel-plugin-transform-template-literals#loose
  /* eslint-disable prefer-template */
  let url = 'https://mui.com/production-error/?code=' + code;
  for (let i = 1; i < arguments.length; i += 1) {
    // rest params over-transpile for this case
    // eslint-disable-next-line prefer-rest-params
    url += '&args[]=' + encodeURIComponent(arguments[i]);
  }
  return 'Minified MUI error #' + code + '; visit ' + url + ' for the full message.';
  /* eslint-enable prefer-template */
}

var formatMuiErrorMessage = /*#__PURE__*/Object.freeze({
	__proto__: null,
	default: formatMuiErrorMessage$1
});

function _extends$i() {
  return _extends$i = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends$i.apply(null, arguments);
}

function memoize$1(fn) {
  var cache = Object.create(null);
  return function (arg) {
    if (cache[arg] === undefined) cache[arg] = fn(arg);
    return cache[arg];
  };
}

// eslint-disable-next-line no-undef
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

var isPropValid = /* #__PURE__ */memoize$1(function (prop) {
  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
  /* o */
  && prop.charCodeAt(1) === 110
  /* n */
  && prop.charCodeAt(2) < 91;
}
/* Z+1 */
);

var isDevelopment$2 = false;

/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/

function sheetForTag(tag) {
  if (tag.sheet) {
    return tag.sheet;
  } // this weirdness brought to you by firefox

  /* istanbul ignore next */


  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      return document.styleSheets[i];
    }
  } // this function should always return with a value
  // TS can't understand it though so we make it stop complaining here


  return undefined;
}

function createStyleElement(options) {
  var tag = document.createElement('style');
  tag.setAttribute('data-emotion', options.key);

  if (options.nonce !== undefined) {
    tag.setAttribute('nonce', options.nonce);
  }

  tag.appendChild(document.createTextNode(''));
  tag.setAttribute('data-s', '');
  return tag;
}

var StyleSheet = /*#__PURE__*/function () {
  // Using Node instead of HTMLElement since container may be a ShadowRoot
  function StyleSheet(options) {
    var _this = this;

    this._insertTag = function (tag) {
      var before;

      if (_this.tags.length === 0) {
        if (_this.insertionPoint) {
          before = _this.insertionPoint.nextSibling;
        } else if (_this.prepend) {
          before = _this.container.firstChild;
        } else {
          before = _this.before;
        }
      } else {
        before = _this.tags[_this.tags.length - 1].nextSibling;
      }

      _this.container.insertBefore(tag, before);

      _this.tags.push(tag);
    };

    this.isSpeedy = options.speedy === undefined ? !isDevelopment$2 : options.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

    this.key = options.key;
    this.container = options.container;
    this.prepend = options.prepend;
    this.insertionPoint = options.insertionPoint;
    this.before = null;
  }

  var _proto = StyleSheet.prototype;

  _proto.hydrate = function hydrate(nodes) {
    nodes.forEach(this._insertTag);
  };

  _proto.insert = function insert(rule) {
    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
    // it's 1 in dev because we insert source maps that map a single rule to a location
    // and you can only have one source map per style tag
    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
      this._insertTag(createStyleElement(this));
    }

    var tag = this.tags[this.tags.length - 1];

    if (this.isSpeedy) {
      var sheet = sheetForTag(tag);

      try {
        // this is the ultrafast version, works across browsers
        // the big drawback is that the css won't be editable in devtools
        sheet.insertRule(rule, sheet.cssRules.length);
      } catch (e) {
      }
    } else {
      tag.appendChild(document.createTextNode(rule));
    }

    this.ctr++;
  };

  _proto.flush = function flush() {
    this.tags.forEach(function (tag) {
      var _tag$parentNode;

      return (_tag$parentNode = tag.parentNode) == null ? void 0 : _tag$parentNode.removeChild(tag);
    });
    this.tags = [];
    this.ctr = 0;
  };

  return StyleSheet;
}();

var MS = '-ms-';
var MOZ = '-moz-';
var WEBKIT = '-webkit-';

var COMMENT = 'comm';
var RULESET = 'rule';
var DECLARATION = 'decl';
var IMPORT = '@import';
var KEYFRAMES = '@keyframes';
var LAYER = '@layer';

/**
 * @param {number}
 * @return {number}
 */
var abs = Math.abs;

/**
 * @param {number}
 * @return {string}
 */
var from = String.fromCharCode;

/**
 * @param {object}
 * @return {object}
 */
var assign$1 = Object.assign;

/**
 * @param {string} value
 * @param {number} length
 * @return {number}
 */
function hash$2 (value, length) {
	return charat(value, 0) ^ 45 ? (((((((length << 2) ^ charat(value, 0)) << 2) ^ charat(value, 1)) << 2) ^ charat(value, 2)) << 2) ^ charat(value, 3) : 0
}

/**
 * @param {string} value
 * @return {string}
 */
function trim (value) {
	return value.trim()
}

/**
 * @param {string} value
 * @param {RegExp} pattern
 * @return {string?}
 */
function match (value, pattern) {
	return (value = pattern.exec(value)) ? value[0] : value
}

/**
 * @param {string} value
 * @param {(string|RegExp)} pattern
 * @param {string} replacement
 * @return {string}
 */
function replace (value, pattern, replacement) {
	return value.replace(pattern, replacement)
}

/**
 * @param {string} value
 * @param {string} search
 * @return {number}
 */
function indexof (value, search) {
	return value.indexOf(search)
}

/**
 * @param {string} value
 * @param {number} index
 * @return {number}
 */
function charat (value, index) {
	return value.charCodeAt(index) | 0
}

/**
 * @param {string} value
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */
function substr (value, begin, end) {
	return value.slice(begin, end)
}

/**
 * @param {string} value
 * @return {number}
 */
function strlen (value) {
	return value.length
}

/**
 * @param {any[]} value
 * @return {number}
 */
function sizeof (value) {
	return value.length
}

/**
 * @param {any} value
 * @param {any[]} array
 * @return {any}
 */
function append (value, array) {
	return array.push(value), value
}

/**
 * @param {string[]} array
 * @param {function} callback
 * @return {string}
 */
function combine (array, callback) {
	return array.map(callback).join('')
}

var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = '';

/**
 * @param {string} value
 * @param {object | null} root
 * @param {object | null} parent
 * @param {string} type
 * @param {string[] | string} props
 * @param {object[] | string} children
 * @param {number} length
 */
function node (value, root, parent, type, props, children, length) {
	return {value: value, root: root, parent: parent, type: type, props: props, children: children, line: line, column: column, length: length, return: ''}
}

/**
 * @param {object} root
 * @param {object} props
 * @return {object}
 */
function copy (root, props) {
	return assign$1(node('', null, null, '', null, null, 0), root, {length: -root.length}, props)
}

/**
 * @return {number}
 */
function char () {
	return character
}

/**
 * @return {number}
 */
function prev () {
	character = position > 0 ? charat(characters, --position) : 0;

	if (column--, character === 10)
		column = 1, line--;

	return character
}

/**
 * @return {number}
 */
function next () {
	character = position < length ? charat(characters, position++) : 0;

	if (column++, character === 10)
		column = 1, line++;

	return character
}

/**
 * @return {number}
 */
function peek () {
	return charat(characters, position)
}

/**
 * @return {number}
 */
function caret () {
	return position
}

/**
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */
function slice (begin, end) {
	return substr(characters, begin, end)
}

/**
 * @param {number} type
 * @return {number}
 */
function token (type) {
	switch (type) {
		// \0 \t \n \r \s whitespace token
		case 0: case 9: case 10: case 13: case 32:
			return 5
		// ! + , / > @ ~ isolate token
		case 33: case 43: case 44: case 47: case 62: case 64: case 126:
		// ; { } breakpoint token
		case 59: case 123: case 125:
			return 4
		// : accompanied token
		case 58:
			return 3
		// " ' ( [ opening delimit token
		case 34: case 39: case 40: case 91:
			return 2
		// ) ] closing delimit token
		case 41: case 93:
			return 1
	}

	return 0
}

/**
 * @param {string} value
 * @return {any[]}
 */
function alloc (value) {
	return line = column = 1, length = strlen(characters = value), position = 0, []
}

/**
 * @param {any} value
 * @return {any}
 */
function dealloc (value) {
	return characters = '', value
}

/**
 * @param {number} type
 * @return {string}
 */
function delimit (type) {
	return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)))
}

/**
 * @param {number} type
 * @return {string}
 */
function whitespace (type) {
	while (character = peek())
		if (character < 33)
			next();
		else
			break

	return token(type) > 2 || token(character) > 3 ? '' : ' '
}

/**
 * @param {number} index
 * @param {number} count
 * @return {string}
 */
function escaping (index, count) {
	while (--count && next())
		// not 0-9 A-F a-f
		if (character < 48 || character > 102 || (character > 57 && character < 65) || (character > 70 && character < 97))
			break

	return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32))
}

/**
 * @param {number} type
 * @return {number}
 */
function delimiter (type) {
	while (next())
		switch (character) {
			// ] ) " '
			case type:
				return position
			// " '
			case 34: case 39:
				if (type !== 34 && type !== 39)
					delimiter(character);
				break
			// (
			case 40:
				if (type === 41)
					delimiter(type);
				break
			// \
			case 92:
				next();
				break
		}

	return position
}

/**
 * @param {number} type
 * @param {number} index
 * @return {number}
 */
function commenter (type, index) {
	while (next())
		// //
		if (type + character === 47 + 10)
			break
		// /*
		else if (type + character === 42 + 42 && peek() === 47)
			break

	return '/*' + slice(index, position - 1) + '*' + from(type === 47 ? type : next())
}

/**
 * @param {number} index
 * @return {string}
 */
function identifier (index) {
	while (!token(peek()))
		next();

	return slice(index, position)
}

/**
 * @param {string} value
 * @return {object[]}
 */
function compile (value) {
	return dealloc(parse('', null, null, null, [''], value = alloc(value), 0, [0], value))
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {string[]} rule
 * @param {string[]} rules
 * @param {string[]} rulesets
 * @param {number[]} pseudo
 * @param {number[]} points
 * @param {string[]} declarations
 * @return {object}
 */
function parse (value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
	var index = 0;
	var offset = 0;
	var length = pseudo;
	var atrule = 0;
	var property = 0;
	var previous = 0;
	var variable = 1;
	var scanning = 1;
	var ampersand = 1;
	var character = 0;
	var type = '';
	var props = rules;
	var children = rulesets;
	var reference = rule;
	var characters = type;

	while (scanning)
		switch (previous = character, character = next()) {
			// (
			case 40:
				if (previous != 108 && charat(characters, length - 1) == 58) {
					if (indexof(characters += replace(delimit(character), '&', '&\f'), '&\f') != -1)
						ampersand = -1;
					break
				}
			// " ' [
			case 34: case 39: case 91:
				characters += delimit(character);
				break
			// \t \n \r \s
			case 9: case 10: case 13: case 32:
				characters += whitespace(previous);
				break
			// \
			case 92:
				characters += escaping(caret() - 1, 7);
				continue
			// /
			case 47:
				switch (peek()) {
					case 42: case 47:
						append(comment(commenter(next(), caret()), root, parent), declarations);
						break
					default:
						characters += '/';
				}
				break
			// {
			case 123 * variable:
				points[index++] = strlen(characters) * ampersand;
			// } ; \0
			case 125 * variable: case 59: case 0:
				switch (character) {
					// \0 }
					case 0: case 125: scanning = 0;
					// ;
					case 59 + offset: if (ampersand == -1) characters = replace(characters, /\f/g, '');
						if (property > 0 && (strlen(characters) - length))
							append(property > 32 ? declaration(characters + ';', rule, parent, length - 1) : declaration(replace(characters, ' ', '') + ';', rule, parent, length - 2), declarations);
						break
					// @ ;
					case 59: characters += ';';
					// { rule/at-rule
					default:
						append(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets);

						if (character === 123)
							if (offset === 0)
								parse(characters, root, reference, reference, props, rulesets, length, points, children);
							else
								switch (atrule === 99 && charat(characters, 3) === 110 ? 100 : atrule) {
									// d l m s
									case 100: case 108: case 109: case 115:
										parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children);
										break
									default:
										parse(characters, reference, reference, reference, [''], children, 0, points, children);
								}
				}

				index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo;
				break
			// :
			case 58:
				length = 1 + strlen(characters), property = previous;
			default:
				if (variable < 1)
					if (character == 123)
						--variable;
					else if (character == 125 && variable++ == 0 && prev() == 125)
						continue

				switch (characters += from(character), character * variable) {
					// &
					case 38:
						ampersand = offset > 0 ? 1 : (characters += '\f', -1);
						break
					// ,
					case 44:
						points[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1;
						break
					// @
					case 64:
						// -
						if (peek() === 45)
							characters += delimit(next());

						atrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++;
						break
					// -
					case 45:
						if (previous === 45 && strlen(characters) == 2)
							variable = 0;
				}
		}

	return rulesets
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} index
 * @param {number} offset
 * @param {string[]} rules
 * @param {number[]} points
 * @param {string} type
 * @param {string[]} props
 * @param {string[]} children
 * @param {number} length
 * @return {object}
 */
function ruleset (value, root, parent, index, offset, rules, points, type, props, children, length) {
	var post = offset - 1;
	var rule = offset === 0 ? rules : [''];
	var size = sizeof(rule);

	for (var i = 0, j = 0, k = 0; i < index; ++i)
		for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
			if (z = trim(j > 0 ? rule[x] + ' ' + y : replace(y, /&\f/g, rule[x])))
				props[k++] = z;

	return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length)
}

/**
 * @param {number} value
 * @param {object} root
 * @param {object?} parent
 * @return {object}
 */
function comment (value, root, parent) {
	return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0)
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} length
 * @return {object}
 */
function declaration (value, root, parent, length) {
	return node(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length)
}

/**
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */
function serialize (children, callback) {
	var output = '';
	var length = sizeof(children);

	for (var i = 0; i < length; i++)
		output += callback(children[i], i, children, callback) || '';

	return output
}

/**
 * @param {object} element
 * @param {number} index
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */
function stringify (element, index, children, callback) {
	switch (element.type) {
		case LAYER: if (element.children.length) break
		case IMPORT: case DECLARATION: return element.return = element.return || element.value
		case COMMENT: return ''
		case KEYFRAMES: return element.return = element.value + '{' + serialize(element.children, callback) + '}'
		case RULESET: element.value = element.props.join(',');
	}

	return strlen(children = serialize(element.children, callback)) ? element.return = element.value + '{' + children + '}' : ''
}

/**
 * @param {function[]} collection
 * @return {function}
 */
function middleware (collection) {
	var length = sizeof(collection);

	return function (element, index, children, callback) {
		var output = '';

		for (var i = 0; i < length; i++)
			output += collection[i](element, index, children, callback) || '';

		return output
	}
}

/**
 * @param {function} callback
 * @return {function}
 */
function rulesheet (callback) {
	return function (element) {
		if (!element.root)
			if (element = element.return)
				callback(element);
	}
}

var weakMemoize = function weakMemoize(func) {
  var cache = new WeakMap();
  return function (arg) {
    if (cache.has(arg)) {
      // Use non-null assertion because we just checked that the cache `has` it
      // This allows us to remove `undefined` from the return value
      return cache.get(arg);
    }

    var ret = func(arg);
    cache.set(arg, ret);
    return ret;
  };
};

var isBrowser$5 = typeof document !== 'undefined';

var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
  var previous = 0;
  var character = 0;

  while (true) {
    previous = character;
    character = peek(); // &\f

    if (previous === 38 && character === 12) {
      points[index] = 1;
    }

    if (token(character)) {
      break;
    }

    next();
  }

  return slice(begin, position);
};

var toRules = function toRules(parsed, points) {
  // pretend we've started with a comma
  var index = -1;
  var character = 44;

  do {
    switch (token(character)) {
      case 0:
        // &\f
        if (character === 38 && peek() === 12) {
          // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
          // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
          // and when it should just concatenate the outer and inner selectors
          // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
          points[index] = 1;
        }

        parsed[index] += identifierWithPointTracking(position - 1, points, index);
        break;

      case 2:
        parsed[index] += delimit(character);
        break;

      case 4:
        // comma
        if (character === 44) {
          // colon
          parsed[++index] = peek() === 58 ? '&\f' : '';
          points[index] = parsed[index].length;
          break;
        }

      // fallthrough

      default:
        parsed[index] += from(character);
    }
  } while (character = next());

  return parsed;
};

var getRules = function getRules(value, points) {
  return dealloc(toRules(alloc(value), points));
}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11


var fixedElements = /* #__PURE__ */new WeakMap();
var compat = function compat(element) {
  if (element.type !== 'rule' || !element.parent || // positive .length indicates that this rule contains pseudo
  // negative .length indicates that this rule has been already prefixed
  element.length < 1) {
    return;
  }

  var value = element.value,
      parent = element.parent;
  var isImplicitRule = element.column === parent.column && element.line === parent.line;

  while (parent.type !== 'rule') {
    parent = parent.parent;
    if (!parent) return;
  } // short-circuit for the simplest case


  if (element.props.length === 1 && value.charCodeAt(0) !== 58
  /* colon */
  && !fixedElements.get(parent)) {
    return;
  } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
  // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"


  if (isImplicitRule) {
    return;
  }

  fixedElements.set(element, true);
  var points = [];
  var rules = getRules(value, points);
  var parentRules = parent.props;

  for (var i = 0, k = 0; i < rules.length; i++) {
    for (var j = 0; j < parentRules.length; j++, k++) {
      element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
    }
  }
};
var removeLabel = function removeLabel(element) {
  if (element.type === 'decl') {
    var value = element.value;

    if ( // charcode for l
    value.charCodeAt(0) === 108 && // charcode for b
    value.charCodeAt(2) === 98) {
      // this ignores label
      element["return"] = '';
      element.value = '';
    }
  }
};

/* eslint-disable no-fallthrough */

function prefix(value, length) {
  switch (hash$2(value, length)) {
    // color-adjust
    case 5103:
      return WEBKIT + 'print-' + value + value;
    // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)

    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921: // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break

    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005: // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,

    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855: // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)

    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value;
    // appearance, user-select, transform, hyphens, text-size-adjust

    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value;
    // flex, flex-direction

    case 6828:
    case 4268:
      return WEBKIT + value + MS + value + value;
    // order

    case 6165:
      return WEBKIT + value + MS + 'flex-' + value + value;
    // align-items

    case 5187:
      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + 'box-$1$2' + MS + 'flex-$1$2') + value;
    // align-self

    case 5443:
      return WEBKIT + value + MS + 'flex-item-' + replace(value, /flex-|-self/, '') + value;
    // align-content

    case 4675:
      return WEBKIT + value + MS + 'flex-line-pack' + replace(value, /align-content|flex-|-self/, '') + value;
    // flex-shrink

    case 5548:
      return WEBKIT + value + MS + replace(value, 'shrink', 'negative') + value;
    // flex-basis

    case 5292:
      return WEBKIT + value + MS + replace(value, 'basis', 'preferred-size') + value;
    // flex-grow

    case 6060:
      return WEBKIT + 'box-' + replace(value, '-grow', '') + WEBKIT + value + MS + replace(value, 'grow', 'positive') + value;
    // transition

    case 4554:
      return WEBKIT + replace(value, /([^-])(transform)/g, '$1' + WEBKIT + '$2') + value;
    // cursor

    case 6187:
      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + '$1'), /(image-set)/, WEBKIT + '$1'), value, '') + value;
    // background, background-image

    case 5495:
    case 3959:
      return replace(value, /(image-set\([^]*)/, WEBKIT + '$1' + '$`$1');
    // justify-content

    case 4968:
      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + 'box-pack:$3' + MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + WEBKIT + value + value;
    // (margin|padding)-inline-(start|end)

    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(value, /(.+)-inline(.+)/, WEBKIT + '$1$2') + value;
    // (min|max)?(width|height|inline-size|block-size)

    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      // stretch, max-content, min-content, fill-available
      if (strlen(value) - 1 - length > 6) switch (charat(value, length + 1)) {
        // (m)ax-content, (m)in-content
        case 109:
          // -
          if (charat(value, length + 4) !== 45) break;
        // (f)ill-available, (f)it-content

        case 102:
          return replace(value, /(.+:)(.+)-([^]+)/, '$1' + WEBKIT + '$2-$3' + '$1' + MOZ + (charat(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
        // (s)tretch

        case 115:
          return ~indexof(value, 'stretch') ? prefix(replace(value, 'stretch', 'fill-available'), length) + value : value;
      }
      break;
    // position: sticky

    case 4949:
      // (s)ticky?
      if (charat(value, length + 1) !== 115) break;
    // display: (flex|inline-flex)

    case 6444:
      switch (charat(value, strlen(value) - 3 - (~indexof(value, '!important') && 10))) {
        // stic(k)y
        case 107:
          return replace(value, ':', ':' + WEBKIT) + value;
        // (inline-)?fl(e)x

        case 101:
          return replace(value, /(.+:)([^;!]+)(;|!.+)?/, '$1' + WEBKIT + (charat(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + WEBKIT + '$2$3' + '$1' + MS + '$2box$3') + value;
      }

      break;
    // writing-mode

    case 5936:
      switch (charat(value, length + 11)) {
        // vertical-l(r)
        case 114:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
        // vertical-r(l)

        case 108:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
        // horizontal(-)tb

        case 45:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
      }

      return WEBKIT + value + MS + value + value;
  }

  return value;
}

var prefixer = function prefixer(element, index, children, callback) {
  if (element.length > -1) if (!element["return"]) switch (element.type) {
    case DECLARATION:
      element["return"] = prefix(element.value, element.length);
      break;

    case KEYFRAMES:
      return serialize([copy(element, {
        value: replace(element.value, '@', '@' + WEBKIT)
      })], callback);

    case RULESET:
      if (element.length) return combine(element.props, function (value) {
        switch (match(value, /(::plac\w+|:read-\w+)/)) {
          // :read-(only|write)
          case ':read-only':
          case ':read-write':
            return serialize([copy(element, {
              props: [replace(value, /:(read-\w+)/, ':' + MOZ + '$1')]
            })], callback);
          // :placeholder

          case '::placeholder':
            return serialize([copy(element, {
              props: [replace(value, /:(plac\w+)/, ':' + WEBKIT + 'input-$1')]
            }), copy(element, {
              props: [replace(value, /:(plac\w+)/, ':' + MOZ + '$1')]
            }), copy(element, {
              props: [replace(value, /:(plac\w+)/, MS + 'input-$1')]
            })], callback);
        }

        return '';
      });
  }
};

/* import type { StylisPlugin } from './types' */

/*
export type Options = {
  nonce?: string,
  stylisPlugins?: StylisPlugin[],
  key: string,
  container?: HTMLElement,
  speedy?: boolean,
  prepend?: boolean,
  insertionPoint?: HTMLElement
}
*/

var getServerStylisCache = isBrowser$5 ? undefined : weakMemoize(function () {
  return memoize$1(function () {
    var cache = {};
    return function (name) {
      return cache[name];
    };
  });
});
var defaultStylisPlugins = [prefixer];

var createCache = function
  /*: EmotionCache */
createCache(options
/*: Options */
) {
  var key = options.key;

  if (isBrowser$5 && key === 'css') {
    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
    // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
    // note this very very intentionally targets all style elements regardless of the key to ensure
    // that creating a cache works inside of render of a React component

    Array.prototype.forEach.call(ssrStyles, function (node
    /*: HTMLStyleElement */
    ) {
      // we want to only move elements which have a space in the data-emotion attribute value
      // because that indicates that it is an Emotion 11 server-side rendered style elements
      // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
      // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
      // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
      // will not result in the Emotion 10 styles being destroyed
      var dataEmotionAttribute = node.getAttribute('data-emotion');

      if (dataEmotionAttribute.indexOf(' ') === -1) {
        return;
      }

      document.head.appendChild(node);
      node.setAttribute('data-s', '');
    });
  }

  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;

  var inserted = {};
  var container;
  /* : Node */

  var nodesToHydrate = [];

  if (isBrowser$5) {
    container = options.container || document.head;
    Array.prototype.forEach.call( // this means we will ignore elements which don't have a space in them which
    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
    document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node
    /*: HTMLStyleElement */
    ) {
      var attrib = node.getAttribute("data-emotion").split(' ');

      for (var i = 1; i < attrib.length; i++) {
        inserted[attrib[i]] = true;
      }

      nodesToHydrate.push(node);
    });
  }

  var _insert;
  /*: (
  selector: string,
  serialized: SerializedStyles,
  sheet: StyleSheet,
  shouldCache: boolean
  ) => string | void */


  var omnipresentPlugins = [compat, removeLabel];

  if (isBrowser$5) {
    var currentSheet;
    var finalizingPlugins = [stringify, rulesheet(function (rule) {
      currentSheet.insert(rule);
    })];
    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));

    var stylis = function stylis(styles) {
      return serialize(compile(styles), serializer);
    };

    _insert = function
      /*: void */
    insert(selector
    /*: string */
    , serialized
    /*: SerializedStyles */
    , sheet
    /*: StyleSheet */
    , shouldCache
    /*: boolean */
    ) {
      currentSheet = sheet;

      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);

      if (shouldCache) {
        cache.inserted[serialized.name] = true;
      }
    };
  } else {
    var _finalizingPlugins = [stringify];

    var _serializer = middleware(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));

    var _stylis = function _stylis(styles) {
      return serialize(compile(styles), _serializer);
    };

    var serverStylisCache = getServerStylisCache(stylisPlugins)(key);

    var getRules = function
      /*: string */
    getRules(selector
    /*: string */
    , serialized
    /*: SerializedStyles */
    ) {
      var name = serialized.name;

      if (serverStylisCache[name] === undefined) {
        serverStylisCache[name] = _stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
      }

      return serverStylisCache[name];
    };

    _insert = function
      /*: string | void */
    _insert(selector
    /*: string */
    , serialized
    /*: SerializedStyles */
    , sheet
    /*: StyleSheet */
    , shouldCache
    /*: boolean */
    ) {
      var name = serialized.name;
      var rules = getRules(selector, serialized);

      if (cache.compat === undefined) {
        // in regular mode, we don't set the styles on the inserted cache
        // since we don't need to and that would be wasting memory
        // we return them so that they are rendered in a style tag
        if (shouldCache) {
          cache.inserted[name] = true;
        }

        return rules;
      } else {
        // in compat mode, we put the styles on the inserted cache so
        // that emotion-server can pull out the styles
        // except when we don't want to cache it which was in Global but now
        // is nowhere but we don't want to do a major right now
        // and just in case we're going to leave the case here
        // it's also not affecting client side bundle size
        // so it's really not a big deal
        if (shouldCache) {
          cache.inserted[name] = rules;
        } else {
          return rules;
        }
      }
    };
  }

  var cache
  /*: EmotionCache */
  = {
    key: key,
    sheet: new StyleSheet({
      key: key,
      container: container,
      nonce: options.nonce,
      speedy: options.speedy,
      prepend: options.prepend,
      insertionPoint: options.insertionPoint
    }),
    nonce: options.nonce,
    inserted: inserted,
    registered: {},
    insert: _insert
  };
  cache.sheet.hydrate(nodesToHydrate);
  return cache;
};

var reactIs$2 = {exports: {}};

var reactIs_production_min$1 = {};

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_production_min$1;

function requireReactIs_production_min$1 () {
	if (hasRequiredReactIs_production_min$1) return reactIs_production_min$1;
	hasRequiredReactIs_production_min$1 = 1;
var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
	Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
	function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min$1.AsyncMode=l;reactIs_production_min$1.ConcurrentMode=m;reactIs_production_min$1.ContextConsumer=k;reactIs_production_min$1.ContextProvider=h;reactIs_production_min$1.Element=c;reactIs_production_min$1.ForwardRef=n;reactIs_production_min$1.Fragment=e;reactIs_production_min$1.Lazy=t;reactIs_production_min$1.Memo=r;reactIs_production_min$1.Portal=d;
	reactIs_production_min$1.Profiler=g;reactIs_production_min$1.StrictMode=f;reactIs_production_min$1.Suspense=p;reactIs_production_min$1.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min$1.isConcurrentMode=A;reactIs_production_min$1.isContextConsumer=function(a){return z(a)===k};reactIs_production_min$1.isContextProvider=function(a){return z(a)===h};reactIs_production_min$1.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min$1.isForwardRef=function(a){return z(a)===n};reactIs_production_min$1.isFragment=function(a){return z(a)===e};reactIs_production_min$1.isLazy=function(a){return z(a)===t};
	reactIs_production_min$1.isMemo=function(a){return z(a)===r};reactIs_production_min$1.isPortal=function(a){return z(a)===d};reactIs_production_min$1.isProfiler=function(a){return z(a)===g};reactIs_production_min$1.isStrictMode=function(a){return z(a)===f};reactIs_production_min$1.isSuspense=function(a){return z(a)===p};
	reactIs_production_min$1.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min$1.typeOf=z;
	return reactIs_production_min$1;
}

var reactIs_development$1 = {};

/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_development$1;

function requireReactIs_development$1 () {
	if (hasRequiredReactIs_development$1) return reactIs_development$1;
	hasRequiredReactIs_development$1 = 1;



	if (process.env.NODE_ENV !== "production") {
	  (function() {

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	reactIs_development$1.AsyncMode = AsyncMode;
	reactIs_development$1.ConcurrentMode = ConcurrentMode;
	reactIs_development$1.ContextConsumer = ContextConsumer;
	reactIs_development$1.ContextProvider = ContextProvider;
	reactIs_development$1.Element = Element;
	reactIs_development$1.ForwardRef = ForwardRef;
	reactIs_development$1.Fragment = Fragment;
	reactIs_development$1.Lazy = Lazy;
	reactIs_development$1.Memo = Memo;
	reactIs_development$1.Portal = Portal;
	reactIs_development$1.Profiler = Profiler;
	reactIs_development$1.StrictMode = StrictMode;
	reactIs_development$1.Suspense = Suspense;
	reactIs_development$1.isAsyncMode = isAsyncMode;
	reactIs_development$1.isConcurrentMode = isConcurrentMode;
	reactIs_development$1.isContextConsumer = isContextConsumer;
	reactIs_development$1.isContextProvider = isContextProvider;
	reactIs_development$1.isElement = isElement;
	reactIs_development$1.isForwardRef = isForwardRef;
	reactIs_development$1.isFragment = isFragment;
	reactIs_development$1.isLazy = isLazy;
	reactIs_development$1.isMemo = isMemo;
	reactIs_development$1.isPortal = isPortal;
	reactIs_development$1.isProfiler = isProfiler;
	reactIs_development$1.isStrictMode = isStrictMode;
	reactIs_development$1.isSuspense = isSuspense;
	reactIs_development$1.isValidElementType = isValidElementType;
	reactIs_development$1.typeOf = typeOf;
	  })();
	}
	return reactIs_development$1;
}

var hasRequiredReactIs;

function requireReactIs () {
	if (hasRequiredReactIs) return reactIs$2.exports;
	hasRequiredReactIs = 1;

	if (process.env.NODE_ENV === 'production') {
	  reactIs$2.exports = requireReactIs_production_min$1();
	} else {
	  reactIs$2.exports = requireReactIs_development$1();
	}
	return reactIs$2.exports;
}

var reactIs$1 = requireReactIs();
var FORWARD_REF_STATICS = {
  '$$typeof': true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  '$$typeof': true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs$1.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs$1.Memo] = MEMO_STATICS;

var isBrowser$4 = typeof document !== 'undefined';

function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = '';
  classNames.split(' ').forEach(function (className) {
    if (registered[className] !== undefined) {
      registeredStyles.push(registered[className] + ";");
    } else {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var registerStyles = function registerStyles(cache, serialized, isStringTag) {
  var className = cache.key + "-" + serialized.name;

  if ( // we only need to add the styles to the registered cache if the
  // class name could be used further down
  // the tree but if it's a string tag, we know it won't
  // so we don't have to add it to registered cache.
  // this improves memory usage since we can avoid storing the whole style string
  (isStringTag === false || // we need to always store it if we're in compat mode and
  // in node since emotion-server relies on whether a style is in
  // the registered cache to know whether a style is global or not
  // also, note that this check will be dead code eliminated in the browser
  isBrowser$4 === false && cache.compat !== undefined) && cache.registered[className] === undefined) {
    cache.registered[className] = serialized.styles;
  }
};
var insertStyles = function insertStyles(cache, serialized, isStringTag) {
  registerStyles(cache, serialized, isStringTag);
  var className = cache.key + "-" + serialized.name;

  if (cache.inserted[serialized.name] === undefined) {
    var stylesForSSR = '';
    var current = serialized;

    do {
      var maybeStyles = cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);

      if (!isBrowser$4 && maybeStyles !== undefined) {
        stylesForSSR += maybeStyles;
      }

      current = current.next;
    } while (current !== undefined);

    if (!isBrowser$4 && stylesForSSR.length !== 0) {
      return stylesForSSR;
    }
  }
};

/* eslint-disable */
// Inspired by https://github.com/garycourt/murmurhash-js
// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
function murmur2(str) {
  // 'm' and 'r' are mixing constants generated offline.
  // They're not really 'magic', they just happen to work well.
  // const m = 0x5bd1e995;
  // const r = 24;
  // Initialize the hash
  var h = 0; // Mix 4 bytes at a time into the hash

  var k,
      i = 0,
      len = str.length;

  for (; len >= 4; ++i, len -= 4) {
    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
    k =
    /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
    k ^=
    /* k >>> r: */
    k >>> 24;
    h =
    /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
    /* Math.imul(h, m): */
    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Handle the last few bytes of the input array


  switch (len) {
    case 3:
      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

    case 2:
      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

    case 1:
      h ^= str.charCodeAt(i) & 0xff;
      h =
      /* Math.imul(h, m): */
      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Do a few final mixes of the hash to ensure the last few
  // bytes are well-incorporated.


  h ^= h >>> 13;
  h =
  /* Math.imul(h, m): */
  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  return ((h ^ h >>> 15) >>> 0).toString(36);
}

var unitlessKeys = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  scale: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};

var isDevelopment$1 = false;

var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

var isCustomProperty = function isCustomProperty(property) {
  return property.charCodeAt(1) === 45;
};

var isProcessableValue = function isProcessableValue(value) {
  return value != null && typeof value !== 'boolean';
};

var processStyleName = /* #__PURE__ */memoize$1(function (styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
});

var processStyleValue = function processStyleValue(key, value) {
  switch (key) {
    case 'animation':
    case 'animationName':
      {
        if (typeof value === 'string') {
          return value.replace(animationRegex, function (match, p1, p2) {
            cursor = {
              name: p1,
              styles: p2,
              next: cursor
            };
            return p1;
          });
        }
      }
  }

  if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
    return value + 'px';
  }

  return value;
};

var noComponentSelectorMessage = 'Component selectors can only be used in conjunction with ' + '@emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware ' + 'compiler transform.';

function handleInterpolation(mergedProps, registered, interpolation) {
  if (interpolation == null) {
    return '';
  }

  var componentSelector = interpolation;

  if (componentSelector.__emotion_styles !== undefined) {

    return componentSelector;
  }

  switch (typeof interpolation) {
    case 'boolean':
      {
        return '';
      }

    case 'object':
      {
        var keyframes = interpolation;

        if (keyframes.anim === 1) {
          cursor = {
            name: keyframes.name,
            styles: keyframes.styles,
            next: cursor
          };
          return keyframes.name;
        }

        var serializedStyles = interpolation;

        if (serializedStyles.styles !== undefined) {
          var next = serializedStyles.next;

          if (next !== undefined) {
            // not the most efficient thing ever but this is a pretty rare case
            // and there will be very few iterations of this generally
            while (next !== undefined) {
              cursor = {
                name: next.name,
                styles: next.styles,
                next: cursor
              };
              next = next.next;
            }
          }

          var styles = serializedStyles.styles + ";";

          return styles;
        }

        return createStringFromObject(mergedProps, registered, interpolation);
      }

    case 'function':
      {
        if (mergedProps !== undefined) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        }

        break;
      }
  } // finalize string values (regular strings and functions interpolated into css calls)


  var asString = interpolation;

  if (registered == null) {
    return asString;
  }

  var cached = registered[asString];
  return cached !== undefined ? cached : asString;
}

function createStringFromObject(mergedProps, registered, obj) {
  var string = '';

  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    }
  } else {
    for (var key in obj) {
      var value = obj[key];

      if (typeof value !== 'object') {
        var asString = value;

        if (registered != null && registered[asString] !== undefined) {
          string += key + "{" + registered[asString] + "}";
        } else if (isProcessableValue(asString)) {
          string += processStyleName(key) + ":" + processStyleValue(key, asString) + ";";
        }
      } else {
        if (key === 'NO_COMPONENT_SELECTOR' && isDevelopment$1) {
          throw new Error(noComponentSelectorMessage);
        }

        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string += processStyleName(key) + ":" + processStyleValue(key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value);

          switch (key) {
            case 'animation':
            case 'animationName':
              {
                string += processStyleName(key) + ":" + interpolated + ";";
                break;
              }

            default:
              {

                string += key + "{" + interpolated + "}";
              }
          }
        }
      }
    }
  }

  return string;
}

var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
// keyframes are stored on the SerializedStyles object as a linked list


var cursor;
function serializeStyles(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
    return args[0];
  }

  var stringMode = true;
  var styles = '';
  cursor = undefined;
  var strings = args[0];

  if (strings == null || strings.raw === undefined) {
    stringMode = false;
    styles += handleInterpolation(mergedProps, registered, strings);
  } else {
    var asTemplateStringsArr = strings;

    styles += asTemplateStringsArr[0];
  } // we start at 1 since we've already handled the first arg


  for (var i = 1; i < args.length; i++) {
    styles += handleInterpolation(mergedProps, registered, args[i]);

    if (stringMode) {
      var templateStringsArr = strings;

      styles += templateStringsArr[i];
    }
  }


  labelPattern.lastIndex = 0;
  var identifierName = '';
  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

  while ((match = labelPattern.exec(styles)) !== null) {
    identifierName += '-' + match[1];
  }

  var name = murmur2(styles) + identifierName;

  return {
    name: name,
    styles: styles,
    next: cursor
  };
}

var isBrowser$3 = typeof document !== 'undefined';

var syncFallback = function syncFallback(create) {
  return create();
};

var useInsertionEffect = React$1['useInsertion' + 'Effect'] ? React$1['useInsertion' + 'Effect'] : false;
var useInsertionEffectAlwaysWithSyncFallback = !isBrowser$3 ? syncFallback : useInsertionEffect || syncFallback;
var useInsertionEffectWithLayoutFallback = useInsertionEffect || React$1.useLayoutEffect;

var isBrowser$2 = typeof document !== 'undefined';

/* import { type EmotionCache } from '@emotion/utils' */
var EmotionCacheContext
/*: React.Context<EmotionCache | null> */
= /* #__PURE__ */React$1.createContext( // we're doing this to avoid preconstruct's dead code elimination in this one case
// because this module is primarily intended for the browser and node
// but it's also required in react native and similar environments sometimes
// and we could have a special build just for that
// but this is much easier and the native packages
// might use a different theme context in the future anyway
typeof HTMLElement !== 'undefined' ? /* #__PURE__ */createCache({
  key: 'css'
}) : null);

var CacheProvider = EmotionCacheContext.Provider;

var withEmotionCache = function withEmotionCache
/* <Props, Ref: React.Ref<*>> */
(func
/*: (props: Props, cache: EmotionCache, ref: Ref) => React.Node */
)
/*: React.AbstractComponent<Props> */
{
  return /*#__PURE__*/forwardRef(function (props
  /*: Props */
  , ref
  /*: Ref */
  ) {
    // the cache will never be null in the browser
    var cache = useContext(EmotionCacheContext);
    return func(props, cache, ref);
  });
};

if (!isBrowser$2) {
  withEmotionCache = function withEmotionCache
  /* <Props> */
  (func
  /*: (props: Props, cache: EmotionCache) => React.Node */
  )
  /*: React.StatelessFunctionalComponent<Props> */
  {
    return function (props
    /*: Props */
    ) {
      var cache = useContext(EmotionCacheContext);

      if (cache === null) {
        // yes, we're potentially creating this on every render
        // it doesn't actually matter though since it's only on the server
        // so there will only every be a single render
        // that could change in the future because of suspense and etc. but for now,
        // this works and i don't want to optimise for a future thing that we aren't sure about
        cache = createCache({
          key: 'css'
        });
        return /*#__PURE__*/React$1.createElement(EmotionCacheContext.Provider, {
          value: cache
        }, func(props, cache));
      } else {
        return func(props, cache);
      }
    };
  };
}

var ThemeContext = /* #__PURE__ */React$1.createContext({});

// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
// initial client-side render from SSR, use place of hydrating tag

var Global
/*: React.AbstractComponent<
GlobalProps
> */
= /* #__PURE__ */withEmotionCache(function (props
/*: GlobalProps */
, cache) {

  var styles = props.styles;
  var serialized = serializeStyles([styles], undefined, React$1.useContext(ThemeContext));

  if (!isBrowser$2) {
    var _ref;

    var serializedNames = serialized.name;
    var serializedStyles = serialized.styles;
    var next = serialized.next;

    while (next !== undefined) {
      serializedNames += ' ' + next.name;
      serializedStyles += next.styles;
      next = next.next;
    }

    var shouldCache = cache.compat === true;
    var rules = cache.insert("", {
      name: serializedNames,
      styles: serializedStyles
    }, cache.sheet, shouldCache);

    if (shouldCache) {
      return null;
    }

    return /*#__PURE__*/React$1.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
      __html: rules
    }, _ref.nonce = cache.sheet.nonce, _ref));
  } // yes, i know these hooks are used conditionally
  // but it is based on a constant that will never change at runtime
  // it's effectively like having two implementations and switching them out
  // so it's not actually breaking anything


  var sheetRef = React$1.useRef();
  useInsertionEffectWithLayoutFallback(function () {
    var key = cache.key + "-global"; // use case of https://github.com/emotion-js/emotion/issues/2675

    var sheet = new cache.sheet.constructor({
      key: key,
      nonce: cache.sheet.nonce,
      container: cache.sheet.container,
      speedy: cache.sheet.isSpeedy
    });
    var rehydrating = false;
    var node
    /*: HTMLStyleElement | null*/
    = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");

    if (cache.sheet.tags.length) {
      sheet.before = cache.sheet.tags[0];
    }

    if (node !== null) {
      rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s

      node.setAttribute('data-emotion', key);
      sheet.hydrate([node]);
    }

    sheetRef.current = [sheet, rehydrating];
    return function () {
      sheet.flush();
    };
  }, [cache]);
  useInsertionEffectWithLayoutFallback(function () {
    var sheetRefCurrent = sheetRef.current;
    var sheet = sheetRefCurrent[0],
        rehydrating = sheetRefCurrent[1];

    if (rehydrating) {
      sheetRefCurrent[1] = false;
      return;
    }

    if (serialized.next !== undefined) {
      // insert keyframes
      insertStyles(cache, serialized.next, true);
    }

    if (sheet.tags.length) {
      // if this doesn't exist then it will be null so the style element will be appended
      var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
      sheet.before = element;
      sheet.flush();
    }

    cache.insert("", serialized, sheet, false);
  }, [cache, serialized.name]);
  return null;
});

/* import type { Interpolation, SerializedStyles } from '@emotion/utils' */

function css()
/*: SerializedStyles */
{
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return serializeStyles(args);
}

/*
type Keyframes = {|
  name: string,
  styles: string,
  anim: 1,
  toString: () => string
|} & string
*/

var keyframes = function
  /*: Keyframes */
keyframes() {
  var insertable = css.apply(void 0, arguments);
  var name = "animation-" + insertable.name;
  return {
    name: name,
    styles: "@keyframes " + name + "{" + insertable.styles + "}",
    anim: 1,
    toString: function toString() {
      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
    }
  };
};

/* import type {
  ElementType,
  StatelessFunctionalComponent,
  AbstractComponent
} from 'react' */
/*
export type Interpolations = Array<any>

export type StyledElementType<Props> =
  | string
  | AbstractComponent<{ ...Props, className: string }, mixed>

export type StyledOptions = {
  label?: string,
  shouldForwardProp?: string => boolean,
  target?: string
}

export type StyledComponent<Props> = StatelessFunctionalComponent<Props> & {
  defaultProps: any,
  toString: () => string,
  withComponent: (
    nextTag: StyledElementType<Props>,
    nextOptions?: StyledOptions
  ) => StyledComponent<Props>
}

export type PrivateStyledComponent<Props> = StyledComponent<Props> & {
  __emotion_real: StyledComponent<Props>,
  __emotion_base: any,
  __emotion_styles: any,
  __emotion_forwardProp: any
}
*/

var testOmitPropsOnStringTag = isPropValid;

var testOmitPropsOnComponent = function testOmitPropsOnComponent(key
/*: string */
) {
  return key !== 'theme';
};

var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag
/*: ElementType */
) {
  return typeof tag === 'string' && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
};
var composeShouldForwardProps = function composeShouldForwardProps(tag
/*: PrivateStyledComponent<any> */
, options
/*: StyledOptions | void */
, isReal
/*: boolean */
) {
  var shouldForwardProp;

  if (options) {
    var optionsShouldForwardProp = options.shouldForwardProp;
    shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function (propName
    /*: string */
    ) {
      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
    } : optionsShouldForwardProp;
  }

  if (typeof shouldForwardProp !== 'function' && isReal) {
    shouldForwardProp = tag.__emotion_forwardProp;
  }

  return shouldForwardProp;
};
/*
export type CreateStyledComponent = <Props>(
  ...args: Interpolations
) => StyledComponent<Props>

export type CreateStyled = {
  <Props>(
    tag: StyledElementType<Props>,
    options?: StyledOptions
  ): (...args: Interpolations) => StyledComponent<Props>,
  [key: string]: CreateStyledComponent,
  bind: () => CreateStyled
}
*/

var isDevelopment = false;

var isBrowser$1 = typeof document !== 'undefined';

var Insertion = function Insertion(_ref) {
  var cache = _ref.cache,
      serialized = _ref.serialized,
      isStringTag = _ref.isStringTag;
  registerStyles(cache, serialized, isStringTag);
  var rules = useInsertionEffectAlwaysWithSyncFallback(function () {
    return insertStyles(cache, serialized, isStringTag);
  });

  if (!isBrowser$1 && rules !== undefined) {
    var _ref2;

    var serializedNames = serialized.name;
    var next = serialized.next;

    while (next !== undefined) {
      serializedNames += ' ' + next.name;
      next = next.next;
    }

    return /*#__PURE__*/React$1.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
      __html: rules
    }, _ref2.nonce = cache.sheet.nonce, _ref2));
  }

  return null;
};

var createStyled$3
/*: CreateStyled */
= function createStyled
/*: CreateStyled */
(tag
/*: any */
, options
/* ?: StyledOptions */
) {

  var isReal = tag.__emotion_real === tag;
  var baseTag = isReal && tag.__emotion_base || tag;
  var identifierName;
  var targetClassName;

  if (options !== undefined) {
    identifierName = options.label;
    targetClassName = options.target;
  }

  var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
  var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
  var shouldUseAs = !defaultShouldForwardProp('as');
  /* return function<Props>(): PrivateStyledComponent<Props> { */

  return function () {
    var args = arguments;
    var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];

    if (identifierName !== undefined) {
      styles.push("label:" + identifierName + ";");
    }

    if (args[0] == null || args[0].raw === undefined) {
      styles.push.apply(styles, args);
    } else {

      styles.push(args[0][0]);
      var len = args.length;
      var i = 1;

      for (; i < len; i++) {

        styles.push(args[i], args[0][i]);
      }
    }

    var Styled
    /*: PrivateStyledComponent<Props> */
    = withEmotionCache(function (props, cache, ref) {
      var FinalTag = shouldUseAs && props.as || baseTag;
      var className = '';
      var classInterpolations = [];
      var mergedProps = props;

      if (props.theme == null) {
        mergedProps = {};

        for (var key in props) {
          mergedProps[key] = props[key];
        }

        mergedProps.theme = React$1.useContext(ThemeContext);
      }

      if (typeof props.className === 'string') {
        className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
      } else if (props.className != null) {
        className = props.className + " ";
      }

      var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
      className += cache.key + "-" + serialized.name;

      if (targetClassName !== undefined) {
        className += " " + targetClassName;
      }

      var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
      var newProps = {};

      for (var _key in props) {
        if (shouldUseAs && _key === 'as') continue;

        if (finalShouldForwardProp(_key)) {
          newProps[_key] = props[_key];
        }
      }

      newProps.className = className;

      if (ref) {
        newProps.ref = ref;
      }

      return /*#__PURE__*/React$1.createElement(React$1.Fragment, null, /*#__PURE__*/React$1.createElement(Insertion, {
        cache: cache,
        serialized: serialized,
        isStringTag: typeof FinalTag === 'string'
      }), /*#__PURE__*/React$1.createElement(FinalTag, newProps));
    });
    Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
    Styled.defaultProps = tag.defaultProps;
    Styled.__emotion_real = Styled;
    Styled.__emotion_base = baseTag;
    Styled.__emotion_styles = styles;
    Styled.__emotion_forwardProp = shouldForwardProp;
    Object.defineProperty(Styled, 'toString', {
      value: function value() {
        if (targetClassName === undefined && isDevelopment) {
          return 'NO_COMPONENT_SELECTOR';
        }

        return "." + targetClassName;
      }
    });

    Styled.withComponent = function (nextTag
    /*: StyledElementType<Props> */
    , nextOptions
    /* ?: StyledOptions */
    ) {
      return createStyled(nextTag, _extends$i({}, options, nextOptions, {
        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
      })).apply(void 0, styles);
    };

    return Styled;
  };
};

var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG
'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];

var newStyled = createStyled$3.bind();
tags.forEach(function (tagName) {
  newStyled[tagName] = newStyled(tagName);
});

var propTypes = {exports: {}};

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

var objectAssign;
var hasRequiredObjectAssign;

function requireObjectAssign () {
	if (hasRequiredObjectAssign) return objectAssign;
	hasRequiredObjectAssign = 1;
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};
	return objectAssign;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret_1;
var hasRequiredReactPropTypesSecret;

function requireReactPropTypesSecret () {
	if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
	hasRequiredReactPropTypesSecret = 1;

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	ReactPropTypesSecret_1 = ReactPropTypesSecret;
	return ReactPropTypesSecret_1;
}

var has;
var hasRequiredHas;

function requireHas () {
	if (hasRequiredHas) return has;
	hasRequiredHas = 1;
	has = Function.call.bind(Object.prototype.hasOwnProperty);
	return has;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var checkPropTypes_1;
var hasRequiredCheckPropTypes;

function requireCheckPropTypes () {
	if (hasRequiredCheckPropTypes) return checkPropTypes_1;
	hasRequiredCheckPropTypes = 1;

	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  var ReactPropTypesSecret = requireReactPropTypesSecret();
	  var loggedTypeFailures = {};
	  var has = requireHas();

	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) { /**/ }
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +
	              'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          );
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes.resetWarningCache = function() {
	  if (process.env.NODE_ENV !== 'production') {
	    loggedTypeFailures = {};
	  }
	};

	checkPropTypes_1 = checkPropTypes;
	return checkPropTypes_1;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var factoryWithTypeCheckers;
var hasRequiredFactoryWithTypeCheckers;

function requireFactoryWithTypeCheckers () {
	if (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;
	hasRequiredFactoryWithTypeCheckers = 1;

	var ReactIs = requireReactIs();
	var assign = requireObjectAssign();

	var ReactPropTypesSecret = requireReactPropTypesSecret();
	var has = requireHas();
	var checkPropTypes = requireCheckPropTypes();

	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bigint: createPrimitiveTypeChecker('bigint'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message, data) {
	    this.message = message;
	    this.data = data && typeof data === 'object' ? data: {};
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError(
	          'Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'),
	          {expectedType: expectedType}
	        );
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!ReactIs.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (arguments.length > 1) {
	          printWarning(
	            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
	            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
	          );
	        } else {
	          printWarning('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var expectedTypes = [];
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
	        if (checkerResult == null) {
	          return null;
	        }
	        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
	          expectedTypes.push(checkerResult.data.expectedType);
	        }
	      }
	      var expectedTypesMessage = (expectedTypes.length > 0) ? ', expected one of type [' + expectedTypes.join(', ') + ']': '';
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function invalidValidatorError(componentName, location, propFullName, key, type) {
	    return new PropTypeError(
	      (componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' +
	      'it must be a function, usually from the `prop-types` package, but received `' + type + '`.'
	    );
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (has(shapeTypes, key) && typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};
	return factoryWithTypeCheckers;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var factoryWithThrowingShims;
var hasRequiredFactoryWithThrowingShims;

function requireFactoryWithThrowingShims () {
	if (hasRequiredFactoryWithThrowingShims) return factoryWithThrowingShims;
	hasRequiredFactoryWithThrowingShims = 1;

	var ReactPropTypesSecret = requireReactPropTypesSecret();

	function emptyFunction() {}
	function emptyFunctionWithReset() {}
	emptyFunctionWithReset.resetWarningCache = emptyFunction;

	factoryWithThrowingShims = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  }	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  }	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bigint: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,

	    checkPropTypes: emptyFunctionWithReset,
	    resetWarningCache: emptyFunction
	  };

	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};
	return factoryWithThrowingShims;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var ReactIs = requireReactIs();

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  propTypes.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  propTypes.exports = requireFactoryWithThrowingShims()();
}

var propTypesExports = propTypes.exports;
var PropTypes = /*@__PURE__*/getDefaultExportFromCjs(propTypesExports);

let cache;
if (typeof document === 'object') {
  cache = createCache({
    key: 'css',
    prepend: true
  });
}
function StyledEngineProvider(props) {
  const {
    injectFirst,
    children
  } = props;
  return injectFirst && cache ? /*#__PURE__*/jsxRuntimeExports.jsx(CacheProvider, {
    value: cache,
    children: children
  }) : children;
}
process.env.NODE_ENV !== "production" ? StyledEngineProvider.propTypes = {
  /**
   * Your component tree.
   */
  children: PropTypes.node,
  /**
   * By default, the styles are injected last in the <head> element of the page.
   * As a result, they gain more specificity than any other style sheet.
   * If you want to override MUI's styles, set this prop.
   */
  injectFirst: PropTypes.bool
} : void 0;

function isEmpty$3(obj) {
  return obj === undefined || obj === null || Object.keys(obj).length === 0;
}
function GlobalStyles$2(props) {
  const {
    styles,
    defaultTheme = {}
  } = props;
  const globalStyles = typeof styles === 'function' ? themeInput => styles(isEmpty$3(themeInput) ? defaultTheme : themeInput) : styles;
  return /*#__PURE__*/jsxRuntimeExports.jsx(Global, {
    styles: globalStyles
  });
}
process.env.NODE_ENV !== "production" ? GlobalStyles$2.propTypes = {
  defaultTheme: PropTypes.object,
  styles: PropTypes.oneOfType([PropTypes.array, PropTypes.string, PropTypes.object, PropTypes.func])
} : void 0;

/**
 * @mui/styled-engine v5.16.6
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
function styled$2(tag, options) {
  const stylesFactory = newStyled(tag, options);
  if (process.env.NODE_ENV !== 'production') {
    return (...styles) => {
      const component = typeof tag === 'string' ? `"${tag}"` : 'component';
      if (styles.length === 0) {
        console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join('\n'));
      } else if (styles.some(style => style === undefined)) {
        console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
      }
      return stylesFactory(...styles);
    };
  }
  return stylesFactory;
}

// eslint-disable-next-line @typescript-eslint/naming-convention
const internal_processStyles = (tag, processor) => {
  // Emotion attaches all the styles as `__emotion_styles`.
  // Ref: https://github.com/emotion-js/emotion/blob/16d971d0da229596d6bcc39d282ba9753c9ee7cf/packages/styled/src/base.js#L186
  if (Array.isArray(tag.__emotion_styles)) {
    tag.__emotion_styles = processor(tag.__emotion_styles);
  }
};

var styledEngine = /*#__PURE__*/Object.freeze({
	__proto__: null,
	GlobalStyles: GlobalStyles$2,
	StyledEngineProvider: StyledEngineProvider,
	ThemeContext: ThemeContext,
	css: css,
	default: styled$2,
	internal_processStyles: internal_processStyles,
	keyframes: keyframes
});

function _objectWithoutPropertiesLoose$2(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (e.includes(n)) continue;
    t[n] = r[n];
  }
  return t;
}

// https://github.com/sindresorhus/is-plain-obj/blob/main/index.js
function isPlainObject(item) {
  if (typeof item !== 'object' || item === null) {
    return false;
  }
  const prototype = Object.getPrototypeOf(item);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);
}
function deepClone(source) {
  if (!isPlainObject(source)) {
    return source;
  }
  const output = {};
  Object.keys(source).forEach(key => {
    output[key] = deepClone(source[key]);
  });
  return output;
}
function deepmerge$1(target, source, options = {
  clone: true
}) {
  const output = options.clone ? _extends$i({}, target) : target;
  if (isPlainObject(target) && isPlainObject(source)) {
    Object.keys(source).forEach(key => {
      if (isPlainObject(source[key]) &&
      // Avoid prototype pollution
      Object.prototype.hasOwnProperty.call(target, key) && isPlainObject(target[key])) {
        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.
        output[key] = deepmerge$1(target[key], source[key], options);
      } else if (options.clone) {
        output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];
      } else {
        output[key] = source[key];
      }
    });
  }
  return output;
}

var deepmerge = /*#__PURE__*/Object.freeze({
	__proto__: null,
	default: deepmerge$1,
	isPlainObject: isPlainObject
});

const _excluded$m = ["values", "unit", "step"];
const sortBreakpointsValues = values => {
  const breakpointsAsArray = Object.keys(values).map(key => ({
    key,
    val: values[key]
  })) || [];
  // Sort in ascending order
  breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
  return breakpointsAsArray.reduce((acc, obj) => {
    return _extends$i({}, acc, {
      [obj.key]: obj.val
    });
  }, {});
};

// Keep in mind that @media is inclusive by the CSS specification.
function createBreakpoints(breakpoints) {
  const {
      // The breakpoint **start** at this value.
      // For instance with the first breakpoint xs: [xs, sm).
      values = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536 // large screen
      },
      unit = 'px',
      step = 5
    } = breakpoints,
    other = _objectWithoutPropertiesLoose$2(breakpoints, _excluded$m);
  const sortedValues = sortBreakpointsValues(values);
  const keys = Object.keys(sortedValues);
  function up(key) {
    const value = typeof values[key] === 'number' ? values[key] : key;
    return `@media (min-width:${value}${unit})`;
  }
  function down(key) {
    const value = typeof values[key] === 'number' ? values[key] : key;
    return `@media (max-width:${value - step / 100}${unit})`;
  }
  function between(start, end) {
    const endIndex = keys.indexOf(end);
    return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
  }
  function only(key) {
    if (keys.indexOf(key) + 1 < keys.length) {
      return between(key, keys[keys.indexOf(key) + 1]);
    }
    return up(key);
  }
  function not(key) {
    // handle first and last key separately, for better readability
    const keyIndex = keys.indexOf(key);
    if (keyIndex === 0) {
      return up(keys[1]);
    }
    if (keyIndex === keys.length - 1) {
      return down(keys[keyIndex]);
    }
    return between(key, keys[keys.indexOf(key) + 1]).replace('@media', '@media not all and');
  }
  return _extends$i({
    keys,
    values: sortedValues,
    up,
    down,
    between,
    only,
    not,
    unit
  }, other);
}

const shape = {
  borderRadius: 4
};

const responsivePropType = process.env.NODE_ENV !== 'production' ? PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.object, PropTypes.array]) : {};

function merge(acc, item) {
  if (!item) {
    return acc;
  }
  return deepmerge$1(acc, item, {
    clone: false // No need to clone deep, it's way faster.
  });
}

// The breakpoint **start** at this value.
// For instance with the first breakpoint xs: [xs, sm[.
const values = {
  xs: 0,
  // phone
  sm: 600,
  // tablet
  md: 900,
  // small laptop
  lg: 1200,
  // desktop
  xl: 1536 // large screen
};
const defaultBreakpoints = {
  // Sorted ASC by size. That's important.
  // It can't be configured as it's used statically for propTypes.
  keys: ['xs', 'sm', 'md', 'lg', 'xl'],
  up: key => `@media (min-width:${values[key]}px)`
};
function handleBreakpoints(props, propValue, styleFromPropValue) {
  const theme = props.theme || {};
  if (Array.isArray(propValue)) {
    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
    return propValue.reduce((acc, item, index) => {
      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
      return acc;
    }, {});
  }
  if (typeof propValue === 'object') {
    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
    return Object.keys(propValue).reduce((acc, breakpoint) => {
      // key is breakpoint
      if (Object.keys(themeBreakpoints.values || values).indexOf(breakpoint) !== -1) {
        const mediaKey = themeBreakpoints.up(breakpoint);
        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
      } else {
        const cssKey = breakpoint;
        acc[cssKey] = propValue[cssKey];
      }
      return acc;
    }, {});
  }
  const output = styleFromPropValue(propValue);
  return output;
}
function createEmptyBreakpointObject(breakpointsInput = {}) {
  var _breakpointsInput$key;
  const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
    const breakpointStyleKey = breakpointsInput.up(key);
    acc[breakpointStyleKey] = {};
    return acc;
  }, {});
  return breakpointsInOrder || {};
}
function removeUnusedBreakpoints(breakpointKeys, style) {
  return breakpointKeys.reduce((acc, key) => {
    const breakpointOutput = acc[key];
    const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
    if (isBreakpointUnused) {
      delete acc[key];
    }
    return acc;
  }, style);
}
function mergeBreakpointsInOrder(breakpointsInput, ...styles) {
  const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
  const mergedOutput = [emptyBreakpoints, ...styles].reduce((prev, next) => deepmerge$1(prev, next), {});
  return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
}

// compute base for responsive values; e.g.,
// [1,2,3] => {xs: true, sm: true, md: true}
// {xs: 1, sm: 2, md: 3} => {xs: true, sm: true, md: true}
function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
  // fixed value
  if (typeof breakpointValues !== 'object') {
    return {};
  }
  const base = {};
  const breakpointsKeys = Object.keys(themeBreakpoints);
  if (Array.isArray(breakpointValues)) {
    breakpointsKeys.forEach((breakpoint, i) => {
      if (i < breakpointValues.length) {
        base[breakpoint] = true;
      }
    });
  } else {
    breakpointsKeys.forEach(breakpoint => {
      if (breakpointValues[breakpoint] != null) {
        base[breakpoint] = true;
      }
    });
  }
  return base;
}
function resolveBreakpointValues({
  values: breakpointValues,
  breakpoints: themeBreakpoints,
  base: customBase
}) {
  const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
  const keys = Object.keys(base);
  if (keys.length === 0) {
    return breakpointValues;
  }
  let previous;
  return keys.reduce((acc, breakpoint, i) => {
    if (Array.isArray(breakpointValues)) {
      acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
      previous = i;
    } else if (typeof breakpointValues === 'object') {
      acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
      previous = breakpoint;
    } else {
      acc[breakpoint] = breakpointValues;
    }
    return acc;
  }, {});
}

// It should to be noted that this function isn't equivalent to `text-transform: capitalize`.
//
// A strict capitalization should uppercase the first letter of each word in the sentence.
// We only handle the first word.
function capitalize$1(string) {
  if (typeof string !== 'string') {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: \`capitalize(string)\` expects a string argument.` : formatMuiErrorMessage$1(7));
  }
  return string.charAt(0).toUpperCase() + string.slice(1);
}

var capitalize = /*#__PURE__*/Object.freeze({
	__proto__: null,
	default: capitalize$1
});

function getPath(obj, path, checkVars = true) {
  if (!path || typeof path !== 'string') {
    return null;
  }

  // Check if CSS variables are used
  if (obj && obj.vars && checkVars) {
    const val = `vars.${path}`.split('.').reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
    if (val != null) {
      return val;
    }
  }
  return path.split('.').reduce((acc, item) => {
    if (acc && acc[item] != null) {
      return acc[item];
    }
    return null;
  }, obj);
}
function getStyleValue$1(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
  let value;
  if (typeof themeMapping === 'function') {
    value = themeMapping(propValueFinal);
  } else if (Array.isArray(themeMapping)) {
    value = themeMapping[propValueFinal] || userValue;
  } else {
    value = getPath(themeMapping, propValueFinal) || userValue;
  }
  if (transform) {
    value = transform(value, userValue, themeMapping);
  }
  return value;
}
function style$2(options) {
  const {
    prop,
    cssProperty = options.prop,
    themeKey,
    transform
  } = options;

  // false positive
  // eslint-disable-next-line react/function-component-definition
  const fn = props => {
    if (props[prop] == null) {
      return null;
    }
    const propValue = props[prop];
    const theme = props.theme;
    const themeMapping = getPath(theme, themeKey) || {};
    const styleFromPropValue = propValueFinal => {
      let value = getStyleValue$1(themeMapping, transform, propValueFinal);
      if (propValueFinal === value && typeof propValueFinal === 'string') {
        // Haven't found value
        value = getStyleValue$1(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize$1(propValueFinal)}`, propValueFinal);
      }
      if (cssProperty === false) {
        return value;
      }
      return {
        [cssProperty]: value
      };
    };
    return handleBreakpoints(props, propValue, styleFromPropValue);
  };
  fn.propTypes = process.env.NODE_ENV !== 'production' ? {
    [prop]: responsivePropType
  } : {};
  fn.filterProps = [prop];
  return fn;
}

function memoize(fn) {
  const cache = {};
  return arg => {
    if (cache[arg] === undefined) {
      cache[arg] = fn(arg);
    }
    return cache[arg];
  };
}

const properties = {
  m: 'margin',
  p: 'padding'
};
const directions = {
  t: 'Top',
  r: 'Right',
  b: 'Bottom',
  l: 'Left',
  x: ['Left', 'Right'],
  y: ['Top', 'Bottom']
};
const aliases = {
  marginX: 'mx',
  marginY: 'my',
  paddingX: 'px',
  paddingY: 'py'
};

// memoize() impact:
// From 300,000 ops/sec
// To 350,000 ops/sec
const getCssProperties = memoize(prop => {
  // It's not a shorthand notation.
  if (prop.length > 2) {
    if (aliases[prop]) {
      prop = aliases[prop];
    } else {
      return [prop];
    }
  }
  const [a, b] = prop.split('');
  const property = properties[a];
  const direction = directions[b] || '';
  return Array.isArray(direction) ? direction.map(dir => property + dir) : [property + direction];
});
const marginKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'marginInline', 'marginInlineStart', 'marginInlineEnd', 'marginBlock', 'marginBlockStart', 'marginBlockEnd'];
const paddingKeys = ['p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY', 'paddingInline', 'paddingInlineStart', 'paddingInlineEnd', 'paddingBlock', 'paddingBlockStart', 'paddingBlockEnd'];
const spacingKeys = [...marginKeys, ...paddingKeys];
function createUnaryUnit(theme, themeKey, defaultValue, propName) {
  var _getPath;
  const themeSpacing = (_getPath = getPath(theme, themeKey, false)) != null ? _getPath : defaultValue;
  if (typeof themeSpacing === 'number') {
    return abs => {
      if (typeof abs === 'string') {
        return abs;
      }
      if (process.env.NODE_ENV !== 'production') {
        if (typeof abs !== 'number') {
          console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs}.`);
        }
      }
      return themeSpacing * abs;
    };
  }
  if (Array.isArray(themeSpacing)) {
    return abs => {
      if (typeof abs === 'string') {
        return abs;
      }
      if (process.env.NODE_ENV !== 'production') {
        if (!Number.isInteger(abs)) {
          console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.` + `You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join('\n'));
        } else if (abs > themeSpacing.length - 1) {
          console.error([`MUI: The value provided (${abs}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs} > ${themeSpacing.length - 1}, you need to add the missing values.`].join('\n'));
        }
      }
      return themeSpacing[abs];
    };
  }
  if (typeof themeSpacing === 'function') {
    return themeSpacing;
  }
  if (process.env.NODE_ENV !== 'production') {
    console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, 'It should be a number, an array or a function.'].join('\n'));
  }
  return () => undefined;
}
function createUnarySpacing(theme) {
  return createUnaryUnit(theme, 'spacing', 8, 'spacing');
}
function getValue(transformer, propValue) {
  if (typeof propValue === 'string' || propValue == null) {
    return propValue;
  }
  const abs = Math.abs(propValue);
  const transformed = transformer(abs);
  if (propValue >= 0) {
    return transformed;
  }
  if (typeof transformed === 'number') {
    return -transformed;
  }
  return `-${transformed}`;
}
function getStyleFromPropValue(cssProperties, transformer) {
  return propValue => cssProperties.reduce((acc, cssProperty) => {
    acc[cssProperty] = getValue(transformer, propValue);
    return acc;
  }, {});
}
function resolveCssProperty(props, keys, prop, transformer) {
  // Using a hash computation over an array iteration could be faster, but with only 28 items,
  // it's doesn't worth the bundle size.
  if (keys.indexOf(prop) === -1) {
    return null;
  }
  const cssProperties = getCssProperties(prop);
  const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
  const propValue = props[prop];
  return handleBreakpoints(props, propValue, styleFromPropValue);
}
function style$1(props, keys) {
  const transformer = createUnarySpacing(props.theme);
  return Object.keys(props).map(prop => resolveCssProperty(props, keys, prop, transformer)).reduce(merge, {});
}
function margin(props) {
  return style$1(props, marginKeys);
}
margin.propTypes = process.env.NODE_ENV !== 'production' ? marginKeys.reduce((obj, key) => {
  obj[key] = responsivePropType;
  return obj;
}, {}) : {};
margin.filterProps = marginKeys;
function padding(props) {
  return style$1(props, paddingKeys);
}
padding.propTypes = process.env.NODE_ENV !== 'production' ? paddingKeys.reduce((obj, key) => {
  obj[key] = responsivePropType;
  return obj;
}, {}) : {};
padding.filterProps = paddingKeys;
process.env.NODE_ENV !== 'production' ? spacingKeys.reduce((obj, key) => {
  obj[key] = responsivePropType;
  return obj;
}, {}) : {};

// The different signatures imply different meaning for their arguments that can't be expressed structurally.
// We express the difference with variable names.

function createSpacing(spacingInput = 8) {
  // Already transformed.
  if (spacingInput.mui) {
    return spacingInput;
  }

  // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
  // Smaller components, such as icons, can align to a 4dp grid.
  // https://m2.material.io/design/layout/understanding-layout.html
  const transform = createUnarySpacing({
    spacing: spacingInput
  });
  const spacing = (...argsInput) => {
    if (process.env.NODE_ENV !== 'production') {
      if (!(argsInput.length <= 4)) {
        console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
      }
    }
    const args = argsInput.length === 0 ? [1] : argsInput;
    return args.map(argument => {
      const output = transform(argument);
      return typeof output === 'number' ? `${output}px` : output;
    }).join(' ');
  };
  spacing.mui = true;
  return spacing;
}

function compose(...styles) {
  const handlers = styles.reduce((acc, style) => {
    style.filterProps.forEach(prop => {
      acc[prop] = style;
    });
    return acc;
  }, {});

  // false positive
  // eslint-disable-next-line react/function-component-definition
  const fn = props => {
    return Object.keys(props).reduce((acc, prop) => {
      if (handlers[prop]) {
        return merge(acc, handlers[prop](props));
      }
      return acc;
    }, {});
  };
  fn.propTypes = process.env.NODE_ENV !== 'production' ? styles.reduce((acc, style) => Object.assign(acc, style.propTypes), {}) : {};
  fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);
  return fn;
}

function borderTransform(value) {
  if (typeof value !== 'number') {
    return value;
  }
  return `${value}px solid`;
}
function createBorderStyle(prop, transform) {
  return style$2({
    prop,
    themeKey: 'borders',
    transform
  });
}
const border = createBorderStyle('border', borderTransform);
const borderTop = createBorderStyle('borderTop', borderTransform);
const borderRight = createBorderStyle('borderRight', borderTransform);
const borderBottom = createBorderStyle('borderBottom', borderTransform);
const borderLeft = createBorderStyle('borderLeft', borderTransform);
const borderColor = createBorderStyle('borderColor');
const borderTopColor = createBorderStyle('borderTopColor');
const borderRightColor = createBorderStyle('borderRightColor');
const borderBottomColor = createBorderStyle('borderBottomColor');
const borderLeftColor = createBorderStyle('borderLeftColor');
const outline = createBorderStyle('outline', borderTransform);
const outlineColor = createBorderStyle('outlineColor');

// false positive
// eslint-disable-next-line react/function-component-definition
const borderRadius = props => {
  if (props.borderRadius !== undefined && props.borderRadius !== null) {
    const transformer = createUnaryUnit(props.theme, 'shape.borderRadius', 4, 'borderRadius');
    const styleFromPropValue = propValue => ({
      borderRadius: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
  }
  return null;
};
borderRadius.propTypes = process.env.NODE_ENV !== 'production' ? {
  borderRadius: responsivePropType
} : {};
borderRadius.filterProps = ['borderRadius'];
compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius, outline, outlineColor);

// false positive
// eslint-disable-next-line react/function-component-definition
const gap = props => {
  if (props.gap !== undefined && props.gap !== null) {
    const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'gap');
    const styleFromPropValue = propValue => ({
      gap: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.gap, styleFromPropValue);
  }
  return null;
};
gap.propTypes = process.env.NODE_ENV !== 'production' ? {
  gap: responsivePropType
} : {};
gap.filterProps = ['gap'];

// false positive
// eslint-disable-next-line react/function-component-definition
const columnGap = props => {
  if (props.columnGap !== undefined && props.columnGap !== null) {
    const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'columnGap');
    const styleFromPropValue = propValue => ({
      columnGap: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.columnGap, styleFromPropValue);
  }
  return null;
};
columnGap.propTypes = process.env.NODE_ENV !== 'production' ? {
  columnGap: responsivePropType
} : {};
columnGap.filterProps = ['columnGap'];

// false positive
// eslint-disable-next-line react/function-component-definition
const rowGap = props => {
  if (props.rowGap !== undefined && props.rowGap !== null) {
    const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'rowGap');
    const styleFromPropValue = propValue => ({
      rowGap: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.rowGap, styleFromPropValue);
  }
  return null;
};
rowGap.propTypes = process.env.NODE_ENV !== 'production' ? {
  rowGap: responsivePropType
} : {};
rowGap.filterProps = ['rowGap'];
const gridColumn = style$2({
  prop: 'gridColumn'
});
const gridRow = style$2({
  prop: 'gridRow'
});
const gridAutoFlow = style$2({
  prop: 'gridAutoFlow'
});
const gridAutoColumns = style$2({
  prop: 'gridAutoColumns'
});
const gridAutoRows = style$2({
  prop: 'gridAutoRows'
});
const gridTemplateColumns = style$2({
  prop: 'gridTemplateColumns'
});
const gridTemplateRows = style$2({
  prop: 'gridTemplateRows'
});
const gridTemplateAreas = style$2({
  prop: 'gridTemplateAreas'
});
const gridArea = style$2({
  prop: 'gridArea'
});
compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);

function paletteTransform(value, userValue) {
  if (userValue === 'grey') {
    return userValue;
  }
  return value;
}
const color = style$2({
  prop: 'color',
  themeKey: 'palette',
  transform: paletteTransform
});
const bgcolor = style$2({
  prop: 'bgcolor',
  cssProperty: 'backgroundColor',
  themeKey: 'palette',
  transform: paletteTransform
});
const backgroundColor = style$2({
  prop: 'backgroundColor',
  themeKey: 'palette',
  transform: paletteTransform
});
compose(color, bgcolor, backgroundColor);

function sizingTransform(value) {
  return value <= 1 && value !== 0 ? `${value * 100}%` : value;
}
const width = style$2({
  prop: 'width',
  transform: sizingTransform
});
const maxWidth = props => {
  if (props.maxWidth !== undefined && props.maxWidth !== null) {
    const styleFromPropValue = propValue => {
      var _props$theme, _props$theme2;
      const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || values[propValue];
      if (!breakpoint) {
        return {
          maxWidth: sizingTransform(propValue)
        };
      }
      if (((_props$theme2 = props.theme) == null || (_props$theme2 = _props$theme2.breakpoints) == null ? void 0 : _props$theme2.unit) !== 'px') {
        return {
          maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
        };
      }
      return {
        maxWidth: breakpoint
      };
    };
    return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
  }
  return null;
};
maxWidth.filterProps = ['maxWidth'];
const minWidth = style$2({
  prop: 'minWidth',
  transform: sizingTransform
});
const height = style$2({
  prop: 'height',
  transform: sizingTransform
});
const maxHeight = style$2({
  prop: 'maxHeight',
  transform: sizingTransform
});
const minHeight = style$2({
  prop: 'minHeight',
  transform: sizingTransform
});
style$2({
  prop: 'size',
  cssProperty: 'width',
  transform: sizingTransform
});
style$2({
  prop: 'size',
  cssProperty: 'height',
  transform: sizingTransform
});
const boxSizing = style$2({
  prop: 'boxSizing'
});
compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);

const defaultSxConfig = {
  // borders
  border: {
    themeKey: 'borders',
    transform: borderTransform
  },
  borderTop: {
    themeKey: 'borders',
    transform: borderTransform
  },
  borderRight: {
    themeKey: 'borders',
    transform: borderTransform
  },
  borderBottom: {
    themeKey: 'borders',
    transform: borderTransform
  },
  borderLeft: {
    themeKey: 'borders',
    transform: borderTransform
  },
  borderColor: {
    themeKey: 'palette'
  },
  borderTopColor: {
    themeKey: 'palette'
  },
  borderRightColor: {
    themeKey: 'palette'
  },
  borderBottomColor: {
    themeKey: 'palette'
  },
  borderLeftColor: {
    themeKey: 'palette'
  },
  outline: {
    themeKey: 'borders',
    transform: borderTransform
  },
  outlineColor: {
    themeKey: 'palette'
  },
  borderRadius: {
    themeKey: 'shape.borderRadius',
    style: borderRadius
  },
  // palette
  color: {
    themeKey: 'palette',
    transform: paletteTransform
  },
  bgcolor: {
    themeKey: 'palette',
    cssProperty: 'backgroundColor',
    transform: paletteTransform
  },
  backgroundColor: {
    themeKey: 'palette',
    transform: paletteTransform
  },
  // spacing
  p: {
    style: padding
  },
  pt: {
    style: padding
  },
  pr: {
    style: padding
  },
  pb: {
    style: padding
  },
  pl: {
    style: padding
  },
  px: {
    style: padding
  },
  py: {
    style: padding
  },
  padding: {
    style: padding
  },
  paddingTop: {
    style: padding
  },
  paddingRight: {
    style: padding
  },
  paddingBottom: {
    style: padding
  },
  paddingLeft: {
    style: padding
  },
  paddingX: {
    style: padding
  },
  paddingY: {
    style: padding
  },
  paddingInline: {
    style: padding
  },
  paddingInlineStart: {
    style: padding
  },
  paddingInlineEnd: {
    style: padding
  },
  paddingBlock: {
    style: padding
  },
  paddingBlockStart: {
    style: padding
  },
  paddingBlockEnd: {
    style: padding
  },
  m: {
    style: margin
  },
  mt: {
    style: margin
  },
  mr: {
    style: margin
  },
  mb: {
    style: margin
  },
  ml: {
    style: margin
  },
  mx: {
    style: margin
  },
  my: {
    style: margin
  },
  margin: {
    style: margin
  },
  marginTop: {
    style: margin
  },
  marginRight: {
    style: margin
  },
  marginBottom: {
    style: margin
  },
  marginLeft: {
    style: margin
  },
  marginX: {
    style: margin
  },
  marginY: {
    style: margin
  },
  marginInline: {
    style: margin
  },
  marginInlineStart: {
    style: margin
  },
  marginInlineEnd: {
    style: margin
  },
  marginBlock: {
    style: margin
  },
  marginBlockStart: {
    style: margin
  },
  marginBlockEnd: {
    style: margin
  },
  // display
  displayPrint: {
    cssProperty: false,
    transform: value => ({
      '@media print': {
        display: value
      }
    })
  },
  display: {},
  overflow: {},
  textOverflow: {},
  visibility: {},
  whiteSpace: {},
  // flexbox
  flexBasis: {},
  flexDirection: {},
  flexWrap: {},
  justifyContent: {},
  alignItems: {},
  alignContent: {},
  order: {},
  flex: {},
  flexGrow: {},
  flexShrink: {},
  alignSelf: {},
  justifyItems: {},
  justifySelf: {},
  // grid
  gap: {
    style: gap
  },
  rowGap: {
    style: rowGap
  },
  columnGap: {
    style: columnGap
  },
  gridColumn: {},
  gridRow: {},
  gridAutoFlow: {},
  gridAutoColumns: {},
  gridAutoRows: {},
  gridTemplateColumns: {},
  gridTemplateRows: {},
  gridTemplateAreas: {},
  gridArea: {},
  // positions
  position: {},
  zIndex: {
    themeKey: 'zIndex'
  },
  top: {},
  right: {},
  bottom: {},
  left: {},
  // shadows
  boxShadow: {
    themeKey: 'shadows'
  },
  // sizing
  width: {
    transform: sizingTransform
  },
  maxWidth: {
    style: maxWidth
  },
  minWidth: {
    transform: sizingTransform
  },
  height: {
    transform: sizingTransform
  },
  maxHeight: {
    transform: sizingTransform
  },
  minHeight: {
    transform: sizingTransform
  },
  boxSizing: {},
  // typography
  fontFamily: {
    themeKey: 'typography'
  },
  fontSize: {
    themeKey: 'typography'
  },
  fontStyle: {
    themeKey: 'typography'
  },
  fontWeight: {
    themeKey: 'typography'
  },
  letterSpacing: {},
  textTransform: {},
  lineHeight: {},
  textAlign: {},
  typography: {
    cssProperty: false,
    themeKey: 'typography'
  }
};

function objectsHaveSameKeys(...objects) {
  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
  const union = new Set(allKeys);
  return objects.every(object => union.size === Object.keys(object).length);
}
function callIfFn(maybeFn, arg) {
  return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;
}

// eslint-disable-next-line @typescript-eslint/naming-convention
function unstable_createStyleFunctionSx() {
  function getThemeValue(prop, val, theme, config) {
    const props = {
      [prop]: val,
      theme
    };
    const options = config[prop];
    if (!options) {
      return {
        [prop]: val
      };
    }
    const {
      cssProperty = prop,
      themeKey,
      transform,
      style
    } = options;
    if (val == null) {
      return null;
    }

    // TODO v6: remove, see https://github.com/mui/material-ui/pull/38123
    if (themeKey === 'typography' && val === 'inherit') {
      return {
        [prop]: val
      };
    }
    const themeMapping = getPath(theme, themeKey) || {};
    if (style) {
      return style(props);
    }
    const styleFromPropValue = propValueFinal => {
      let value = getStyleValue$1(themeMapping, transform, propValueFinal);
      if (propValueFinal === value && typeof propValueFinal === 'string') {
        // Haven't found value
        value = getStyleValue$1(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize$1(propValueFinal)}`, propValueFinal);
      }
      if (cssProperty === false) {
        return value;
      }
      return {
        [cssProperty]: value
      };
    };
    return handleBreakpoints(props, val, styleFromPropValue);
  }
  function styleFunctionSx(props) {
    var _theme$unstable_sxCon;
    const {
      sx,
      theme = {}
    } = props || {};
    if (!sx) {
      return null; // Emotion & styled-components will neglect null
    }
    const config = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : defaultSxConfig;

    /*
     * Receive `sxInput` as object or callback
     * and then recursively check keys & values to create media query object styles.
     * (the result will be used in `styled`)
     */
    function traverse(sxInput) {
      let sxObject = sxInput;
      if (typeof sxInput === 'function') {
        sxObject = sxInput(theme);
      } else if (typeof sxInput !== 'object') {
        // value
        return sxInput;
      }
      if (!sxObject) {
        return null;
      }
      const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
      const breakpointsKeys = Object.keys(emptyBreakpoints);
      let css = emptyBreakpoints;
      Object.keys(sxObject).forEach(styleKey => {
        const value = callIfFn(sxObject[styleKey], theme);
        if (value !== null && value !== undefined) {
          if (typeof value === 'object') {
            if (config[styleKey]) {
              css = merge(css, getThemeValue(styleKey, value, theme, config));
            } else {
              const breakpointsValues = handleBreakpoints({
                theme
              }, value, x => ({
                [styleKey]: x
              }));
              if (objectsHaveSameKeys(breakpointsValues, value)) {
                css[styleKey] = styleFunctionSx({
                  sx: value,
                  theme
                });
              } else {
                css = merge(css, breakpointsValues);
              }
            }
          } else {
            css = merge(css, getThemeValue(styleKey, value, theme, config));
          }
        }
      });
      return removeUnusedBreakpoints(breakpointsKeys, css);
    }
    return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
  }
  return styleFunctionSx;
}
const styleFunctionSx$1 = unstable_createStyleFunctionSx();
styleFunctionSx$1.filterProps = ['sx'];

/**
 * A universal utility to style components with multiple color modes. Always use it from the theme object.
 * It works with:
 *  - [Basic theme](https://mui.com/material-ui/customization/dark-mode/)
 *  - [CSS theme variables](https://mui.com/material-ui/experimental-api/css-theme-variables/overview/)
 *  - Zero-runtime engine
 *
 * Tips: Use an array over object spread and place `theme.applyStyles()` last.
 *
 * ✅ [{ background: '#e5e5e5' }, theme.applyStyles('dark', { background: '#1c1c1c' })]
 *
 * 🚫 { background: '#e5e5e5', ...theme.applyStyles('dark', { background: '#1c1c1c' })}
 *
 * @example
 * 1. using with `styled`:
 * ```jsx
 *   const Component = styled('div')(({ theme }) => [
 *     { background: '#e5e5e5' },
 *     theme.applyStyles('dark', {
 *       background: '#1c1c1c',
 *       color: '#fff',
 *     }),
 *   ]);
 * ```
 *
 * @example
 * 2. using with `sx` prop:
 * ```jsx
 *   <Box sx={theme => [
 *     { background: '#e5e5e5' },
 *     theme.applyStyles('dark', {
 *        background: '#1c1c1c',
 *        color: '#fff',
 *      }),
 *     ]}
 *   />
 * ```
 *
 * @example
 * 3. theming a component:
 * ```jsx
 *   extendTheme({
 *     components: {
 *       MuiButton: {
 *         styleOverrides: {
 *           root: ({ theme }) => [
 *             { background: '#e5e5e5' },
 *             theme.applyStyles('dark', {
 *               background: '#1c1c1c',
 *               color: '#fff',
 *             }),
 *           ],
 *         },
 *       }
 *     }
 *   })
 *```
 */
function applyStyles$2(key, styles) {
  // @ts-expect-error this is 'any' type
  const theme = this;
  if (theme.vars && typeof theme.getColorSchemeSelector === 'function') {
    // If CssVarsProvider is used as a provider,
    // returns '* :where([data-mui-color-scheme="light|dark"]) &'
    const selector = theme.getColorSchemeSelector(key).replace(/(\[[^\]]+\])/, '*:where($1)');
    return {
      [selector]: styles
    };
  }
  if (theme.palette.mode === key) {
    return styles;
  }
  return {};
}

const _excluded$l = ["breakpoints", "palette", "spacing", "shape"];
function createTheme$2(options = {}, ...args) {
  const {
      breakpoints: breakpointsInput = {},
      palette: paletteInput = {},
      spacing: spacingInput,
      shape: shapeInput = {}
    } = options,
    other = _objectWithoutPropertiesLoose$2(options, _excluded$l);
  const breakpoints = createBreakpoints(breakpointsInput);
  const spacing = createSpacing(spacingInput);
  let muiTheme = deepmerge$1({
    breakpoints,
    direction: 'ltr',
    components: {},
    // Inject component definitions.
    palette: _extends$i({
      mode: 'light'
    }, paletteInput),
    spacing,
    shape: _extends$i({}, shape, shapeInput)
  }, other);
  muiTheme.applyStyles = applyStyles$2;
  muiTheme = args.reduce((acc, argument) => deepmerge$1(acc, argument), muiTheme);
  muiTheme.unstable_sxConfig = _extends$i({}, defaultSxConfig, other == null ? void 0 : other.unstable_sxConfig);
  muiTheme.unstable_sx = function sx(props) {
    return styleFunctionSx$1({
      sx: props,
      theme: this
    });
  };
  return muiTheme;
}

var createTheme$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	default: createTheme$2,
	private_createBreakpoints: createBreakpoints,
	unstable_applyStyles: applyStyles$2
});

function isObjectEmpty(obj) {
  return Object.keys(obj).length === 0;
}
function useTheme$2(defaultTheme = null) {
  const contextTheme = React$1.useContext(ThemeContext);
  return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
}

const systemDefaultTheme$2 = createTheme$2();
function useTheme$1(defaultTheme = systemDefaultTheme$2) {
  return useTheme$2(defaultTheme);
}

function GlobalStyles$1({
  styles,
  themeId,
  defaultTheme = {}
}) {
  const upperTheme = useTheme$1(defaultTheme);
  const globalStyles = typeof styles === 'function' ? styles(themeId ? upperTheme[themeId] || upperTheme : upperTheme) : styles;
  return /*#__PURE__*/jsxRuntimeExports.jsx(GlobalStyles$2, {
    styles: globalStyles
  });
}
process.env.NODE_ENV !== "production" ? GlobalStyles$1.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  defaultTheme: PropTypes.object,
  /**
   * @ignore
   */
  styles: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.array, PropTypes.func, PropTypes.number, PropTypes.object, PropTypes.string, PropTypes.bool]),
  /**
   * @ignore
   */
  themeId: PropTypes.string
} : void 0;

const _excluded$k = ["sx"];
const splitProps = props => {
  var _props$theme$unstable, _props$theme;
  const result = {
    systemProps: {},
    otherProps: {}
  };
  const config = (_props$theme$unstable = props == null || (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : defaultSxConfig;
  Object.keys(props).forEach(prop => {
    if (config[prop]) {
      result.systemProps[prop] = props[prop];
    } else {
      result.otherProps[prop] = props[prop];
    }
  });
  return result;
};
function extendSxProp(props) {
  const {
      sx: inSx
    } = props,
    other = _objectWithoutPropertiesLoose$2(props, _excluded$k);
  const {
    systemProps,
    otherProps
  } = splitProps(other);
  let finalSx;
  if (Array.isArray(inSx)) {
    finalSx = [systemProps, ...inSx];
  } else if (typeof inSx === 'function') {
    finalSx = (...args) => {
      const result = inSx(...args);
      if (!isPlainObject(result)) {
        return systemProps;
      }
      return _extends$i({}, systemProps, result);
    };
  } else {
    finalSx = _extends$i({}, systemProps, inSx);
  }
  return _extends$i({}, otherProps, {
    sx: finalSx
  });
}

var styleFunctionSx = /*#__PURE__*/Object.freeze({
	__proto__: null,
	default: styleFunctionSx$1,
	extendSxProp: extendSxProp,
	unstable_createStyleFunctionSx: unstable_createStyleFunctionSx,
	unstable_defaultSxConfig: defaultSxConfig
});

const defaultGenerator = componentName => componentName;
const createClassNameGenerator = () => {
  let generate = defaultGenerator;
  return {
    configure(generator) {
      generate = generator;
    },
    generate(componentName) {
      return generate(componentName);
    },
    reset() {
      generate = defaultGenerator;
    }
  };
};
const ClassNameGenerator = createClassNameGenerator();

function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);}else for(f in e)e[f]&&(n&&(n+=" "),n+=f);return n}function clsx(){for(var e,t,f=0,n="",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}

const _excluded$j = ["className", "component"];
function createBox(options = {}) {
  const {
    themeId,
    defaultTheme,
    defaultClassName = 'MuiBox-root',
    generateClassName
  } = options;
  const BoxRoot = styled$2('div', {
    shouldForwardProp: prop => prop !== 'theme' && prop !== 'sx' && prop !== 'as'
  })(styleFunctionSx$1);
  const Box = /*#__PURE__*/React$1.forwardRef(function Box(inProps, ref) {
    const theme = useTheme$1(defaultTheme);
    const _extendSxProp = extendSxProp(inProps),
      {
        className,
        component = 'div'
      } = _extendSxProp,
      other = _objectWithoutPropertiesLoose$2(_extendSxProp, _excluded$j);
    return /*#__PURE__*/jsxRuntimeExports.jsx(BoxRoot, _extends$i({
      as: component,
      ref: ref,
      className: clsx(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
      theme: themeId ? theme[themeId] || theme : theme
    }, other));
  });
  return Box;
}

const globalStateClasses = {
  active: 'active',
  checked: 'checked',
  completed: 'completed',
  disabled: 'disabled',
  error: 'error',
  expanded: 'expanded',
  focused: 'focused',
  focusVisible: 'focusVisible',
  open: 'open',
  readOnly: 'readOnly',
  required: 'required',
  selected: 'selected'
};
function generateUtilityClass(componentName, slot, globalStatePrefix = 'Mui') {
  const globalStateClass = globalStateClasses[slot];
  return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator.generate(componentName)}-${slot}`;
}

function generateUtilityClasses(componentName, slots, globalStatePrefix = 'Mui') {
  const result = {};
  slots.forEach(slot => {
    result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
  });
  return result;
}

const boxClasses$1 = generateUtilityClasses('MuiBox', ['root']);

const Box$1 = createBox({
  defaultClassName: boxClasses$1.root,
  generateClassName: ClassNameGenerator.generate
});
process.env.NODE_ENV !== "production" ? Box$1.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
} : void 0;

var reactIs = {exports: {}};

var reactIs_production_min = {};

/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_production_min;

function requireReactIs_production_min () {
	if (hasRequiredReactIs_production_min) return reactIs_production_min;
	hasRequiredReactIs_production_min = 1;
var b=Symbol.for("react.element"),c=Symbol.for("react.portal"),d=Symbol.for("react.fragment"),e=Symbol.for("react.strict_mode"),f=Symbol.for("react.profiler"),g=Symbol.for("react.provider"),h=Symbol.for("react.context"),k=Symbol.for("react.server_context"),l=Symbol.for("react.forward_ref"),m=Symbol.for("react.suspense"),n=Symbol.for("react.suspense_list"),p=Symbol.for("react.memo"),q=Symbol.for("react.lazy"),t=Symbol.for("react.offscreen"),u;u=Symbol.for("react.module.reference");
	function v(a){if("object"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}reactIs_production_min.ContextConsumer=h;reactIs_production_min.ContextProvider=g;reactIs_production_min.Element=b;reactIs_production_min.ForwardRef=l;reactIs_production_min.Fragment=d;reactIs_production_min.Lazy=q;reactIs_production_min.Memo=p;reactIs_production_min.Portal=c;reactIs_production_min.Profiler=f;reactIs_production_min.StrictMode=e;reactIs_production_min.Suspense=m;
	reactIs_production_min.SuspenseList=n;reactIs_production_min.isAsyncMode=function(){return !1};reactIs_production_min.isConcurrentMode=function(){return !1};reactIs_production_min.isContextConsumer=function(a){return v(a)===h};reactIs_production_min.isContextProvider=function(a){return v(a)===g};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===b};reactIs_production_min.isForwardRef=function(a){return v(a)===l};reactIs_production_min.isFragment=function(a){return v(a)===d};reactIs_production_min.isLazy=function(a){return v(a)===q};reactIs_production_min.isMemo=function(a){return v(a)===p};
	reactIs_production_min.isPortal=function(a){return v(a)===c};reactIs_production_min.isProfiler=function(a){return v(a)===f};reactIs_production_min.isStrictMode=function(a){return v(a)===e};reactIs_production_min.isSuspense=function(a){return v(a)===m};reactIs_production_min.isSuspenseList=function(a){return v(a)===n};
	reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||"object"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};reactIs_production_min.typeOf=v;
	return reactIs_production_min;
}

var reactIs_development = {};

/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_development;

function requireReactIs_development () {
	if (hasRequiredReactIs_development) return reactIs_development;
	hasRequiredReactIs_development = 1;

	if (process.env.NODE_ENV !== "production") {
	  (function() {

	// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types.
	var REACT_ELEMENT_TYPE = Symbol.for('react.element');
	var REACT_PORTAL_TYPE = Symbol.for('react.portal');
	var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
	var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
	var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
	var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
	var REACT_CONTEXT_TYPE = Symbol.for('react.context');
	var REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');
	var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
	var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
	var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
	var REACT_MEMO_TYPE = Symbol.for('react.memo');
	var REACT_LAZY_TYPE = Symbol.for('react.lazy');
	var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');

	// -----------------------------------------------------------------------------

	var enableScopeAPI = false; // Experimental Create Event Handle API.
	var enableCacheElement = false;
	var enableTransitionTracing = false; // No known bugs, but needs performance testing

	var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
	// stuff. Intended to enable React core members to more easily debug scheduling
	// issues in DEV builds.

	var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

	var REACT_MODULE_REFERENCE;

	{
	  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
	}

	function isValidElementType(type) {
	  if (typeof type === 'string' || typeof type === 'function') {
	    return true;
	  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


	  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
	    return true;
	  }

	  if (typeof type === 'object' && type !== null) {
	    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
	    // types supported by any Flight configuration anywhere since
	    // we don't know which Flight build this will end up being used
	    // with.
	    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
	      return true;
	    }
	  }

	  return false;
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	          case REACT_SUSPENSE_LIST_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_SERVER_CONTEXT_TYPE:
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	}
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false;
	var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
	    }
	  }

	  return false;
	}
	function isConcurrentMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
	      hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
	    }
	  }

	  return false;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}
	function isSuspenseList(object) {
	  return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
	}

	reactIs_development.ContextConsumer = ContextConsumer;
	reactIs_development.ContextProvider = ContextProvider;
	reactIs_development.Element = Element;
	reactIs_development.ForwardRef = ForwardRef;
	reactIs_development.Fragment = Fragment;
	reactIs_development.Lazy = Lazy;
	reactIs_development.Memo = Memo;
	reactIs_development.Portal = Portal;
	reactIs_development.Profiler = Profiler;
	reactIs_development.StrictMode = StrictMode;
	reactIs_development.Suspense = Suspense;
	reactIs_development.SuspenseList = SuspenseList;
	reactIs_development.isAsyncMode = isAsyncMode;
	reactIs_development.isConcurrentMode = isConcurrentMode;
	reactIs_development.isContextConsumer = isContextConsumer;
	reactIs_development.isContextProvider = isContextProvider;
	reactIs_development.isElement = isElement;
	reactIs_development.isForwardRef = isForwardRef;
	reactIs_development.isFragment = isFragment;
	reactIs_development.isLazy = isLazy;
	reactIs_development.isMemo = isMemo;
	reactIs_development.isPortal = isPortal;
	reactIs_development.isProfiler = isProfiler;
	reactIs_development.isStrictMode = isStrictMode;
	reactIs_development.isSuspense = isSuspense;
	reactIs_development.isSuspenseList = isSuspenseList;
	reactIs_development.isValidElementType = isValidElementType;
	reactIs_development.typeOf = typeOf;
	  })();
	}
	return reactIs_development;
}

if (process.env.NODE_ENV === 'production') {
  reactIs.exports = requireReactIs_production_min();
} else {
  reactIs.exports = requireReactIs_development();
}

var reactIsExports = reactIs.exports;

// Simplified polyfill for IE11 support
// https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3
const fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
function getFunctionName(fn) {
  const match = `${fn}`.match(fnNameMatchRegex);
  const name = match && match[1];
  return name || '';
}
function getFunctionComponentName(Component, fallback = '') {
  return Component.displayName || Component.name || getFunctionName(Component) || fallback;
}
function getWrappedName(outerType, innerType, wrapperName) {
  const functionName = getFunctionComponentName(innerType);
  return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);
}

/**
 * cherry-pick from
 * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js
 * originally forked from recompose/getDisplayName with added IE11 support
 */
function getDisplayName$1(Component) {
  if (Component == null) {
    return undefined;
  }
  if (typeof Component === 'string') {
    return Component;
  }
  if (typeof Component === 'function') {
    return getFunctionComponentName(Component, 'Component');
  }

  // TypeScript can't have components as objects but they exist in the form of `memo` or `Suspense`
  if (typeof Component === 'object') {
    switch (Component.$$typeof) {
      case reactIsExports.ForwardRef:
        return getWrappedName(Component, Component.render, 'ForwardRef');
      case reactIsExports.Memo:
        return getWrappedName(Component, Component.type, 'memo');
      default:
        return undefined;
    }
  }
  return undefined;
}

var getDisplayName = /*#__PURE__*/Object.freeze({
	__proto__: null,
	default: getDisplayName$1,
	getFunctionName: getFunctionName
});

const _excluded$i = ["ownerState"],
  _excluded2$1 = ["variants"],
  _excluded3$1 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
function isEmpty$2(obj) {
  return Object.keys(obj).length === 0;
}

// https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40
function isStringTag$1(tag) {
  return typeof tag === 'string' &&
  // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96;
}

// Update /system/styled/#api in case if this changes
function shouldForwardProp$1(prop) {
  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
}
const systemDefaultTheme$1 = createTheme$2();
const lowercaseFirstLetter$1 = string => {
  if (!string) {
    return string;
  }
  return string.charAt(0).toLowerCase() + string.slice(1);
};
function resolveTheme$1({
  defaultTheme,
  theme,
  themeId
}) {
  return isEmpty$2(theme) ? defaultTheme : theme[themeId] || theme;
}
function defaultOverridesResolver$1(slot) {
  if (!slot) {
    return null;
  }
  return (props, styles) => styles[slot];
}
function processStyleArg$1(callableStyle, _ref) {
  let {
      ownerState
    } = _ref,
    props = _objectWithoutPropertiesLoose$2(_ref, _excluded$i);
  const resolvedStylesArg = typeof callableStyle === 'function' ? callableStyle(_extends$i({
    ownerState
  }, props)) : callableStyle;
  if (Array.isArray(resolvedStylesArg)) {
    return resolvedStylesArg.flatMap(resolvedStyle => processStyleArg$1(resolvedStyle, _extends$i({
      ownerState
    }, props)));
  }
  if (!!resolvedStylesArg && typeof resolvedStylesArg === 'object' && Array.isArray(resolvedStylesArg.variants)) {
    const {
        variants = []
      } = resolvedStylesArg,
      otherStyles = _objectWithoutPropertiesLoose$2(resolvedStylesArg, _excluded2$1);
    let result = otherStyles;
    variants.forEach(variant => {
      let isMatch = true;
      if (typeof variant.props === 'function') {
        isMatch = variant.props(_extends$i({
          ownerState
        }, props, ownerState));
      } else {
        Object.keys(variant.props).forEach(key => {
          if ((ownerState == null ? void 0 : ownerState[key]) !== variant.props[key] && props[key] !== variant.props[key]) {
            isMatch = false;
          }
        });
      }
      if (isMatch) {
        if (!Array.isArray(result)) {
          result = [result];
        }
        result.push(typeof variant.style === 'function' ? variant.style(_extends$i({
          ownerState
        }, props, ownerState)) : variant.style);
      }
    });
    return result;
  }
  return resolvedStylesArg;
}
function createStyled$2(input = {}) {
  const {
    themeId,
    defaultTheme = systemDefaultTheme$1,
    rootShouldForwardProp = shouldForwardProp$1,
    slotShouldForwardProp = shouldForwardProp$1
  } = input;
  const systemSx = props => {
    return styleFunctionSx$1(_extends$i({}, props, {
      theme: resolveTheme$1(_extends$i({}, props, {
        defaultTheme,
        themeId
      }))
    }));
  };
  systemSx.__mui_systemSx = true;
  return (tag, inputOptions = {}) => {
    // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.
    internal_processStyles(tag, styles => styles.filter(style => !(style != null && style.__mui_systemSx)));
    const {
        name: componentName,
        slot: componentSlot,
        skipVariantsResolver: inputSkipVariantsResolver,
        skipSx: inputSkipSx,
        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        overridesResolver = defaultOverridesResolver$1(lowercaseFirstLetter$1(componentSlot))
      } = inputOptions,
      options = _objectWithoutPropertiesLoose$2(inputOptions, _excluded3$1);

    // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver :
    // TODO v6: remove `Root` in the next major release
    // For more details: https://github.com/mui/material-ui/pull/37908
    componentSlot && componentSlot !== 'Root' && componentSlot !== 'root' || false;
    const skipSx = inputSkipSx || false;
    let label;
    if (process.env.NODE_ENV !== 'production') {
      if (componentName) {
        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        label = `${componentName}-${lowercaseFirstLetter$1(componentSlot || 'Root')}`;
      }
    }
    let shouldForwardPropOption = shouldForwardProp$1;

    // TODO v6: remove `Root` in the next major release
    // For more details: https://github.com/mui/material-ui/pull/37908
    if (componentSlot === 'Root' || componentSlot === 'root') {
      shouldForwardPropOption = rootShouldForwardProp;
    } else if (componentSlot) {
      // any other slot specified
      shouldForwardPropOption = slotShouldForwardProp;
    } else if (isStringTag$1(tag)) {
      // for string (html) tag, preserve the behavior in emotion & styled-components.
      shouldForwardPropOption = undefined;
    }
    const defaultStyledResolver = styled$2(tag, _extends$i({
      shouldForwardProp: shouldForwardPropOption,
      label
    }, options));
    const transformStyleArg = stylesArg => {
      // On the server Emotion doesn't use React.forwardRef for creating components, so the created
      // component stays as a function. This condition makes sure that we do not interpolate functions
      // which are basically components used as a selectors.
      if (typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg || isPlainObject(stylesArg)) {
        return props => processStyleArg$1(stylesArg, _extends$i({}, props, {
          theme: resolveTheme$1({
            theme: props.theme,
            defaultTheme,
            themeId
          })
        }));
      }
      return stylesArg;
    };
    const muiStyledResolver = (styleArg, ...expressions) => {
      let transformedStyleArg = transformStyleArg(styleArg);
      const expressionsWithDefaultTheme = expressions ? expressions.map(transformStyleArg) : [];
      if (componentName && overridesResolver) {
        expressionsWithDefaultTheme.push(props => {
          const theme = resolveTheme$1(_extends$i({}, props, {
            defaultTheme,
            themeId
          }));
          if (!theme.components || !theme.components[componentName] || !theme.components[componentName].styleOverrides) {
            return null;
          }
          const styleOverrides = theme.components[componentName].styleOverrides;
          const resolvedStyleOverrides = {};
          // TODO: v7 remove iteration and use `resolveStyleArg(styleOverrides[slot])` directly
          Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
            resolvedStyleOverrides[slotKey] = processStyleArg$1(slotStyle, _extends$i({}, props, {
              theme
            }));
          });
          return overridesResolver(props, resolvedStyleOverrides);
        });
      }
      if (componentName && !skipVariantsResolver) {
        expressionsWithDefaultTheme.push(props => {
          var _theme$components;
          const theme = resolveTheme$1(_extends$i({}, props, {
            defaultTheme,
            themeId
          }));
          const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[componentName]) == null ? void 0 : _theme$components.variants;
          return processStyleArg$1({
            variants: themeVariants
          }, _extends$i({}, props, {
            theme
          }));
        });
      }
      if (!skipSx) {
        expressionsWithDefaultTheme.push(systemSx);
      }
      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
        const placeholders = new Array(numOfCustomFnsApplied).fill('');
        // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
        transformedStyleArg = [...styleArg, ...placeholders];
        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
      }
      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
      if (process.env.NODE_ENV !== 'production') {
        let displayName;
        if (componentName) {
          displayName = `${componentName}${capitalize$1(componentSlot || '')}`;
        }
        if (displayName === undefined) {
          displayName = `Styled(${getDisplayName$1(tag)})`;
        }
        Component.displayName = displayName;
      }
      if (tag.muiName) {
        Component.muiName = tag.muiName;
      }
      return Component;
    };
    if (defaultStyledResolver.withConfig) {
      muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
    }
    return muiStyledResolver;
  };
}

const styled$1 = createStyled$2();

/**
 * Add keys, values of `defaultProps` that does not exist in `props`
 * @param {object} defaultProps
 * @param {object} props
 * @returns {object} resolved props
 */
function resolveProps(defaultProps, props) {
  const output = _extends$i({}, props);
  Object.keys(defaultProps).forEach(propName => {
    if (propName.toString().match(/^(components|slots)$/)) {
      output[propName] = _extends$i({}, defaultProps[propName], output[propName]);
    } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
      const defaultSlotProps = defaultProps[propName] || {};
      const slotProps = props[propName];
      output[propName] = {};
      if (!slotProps || !Object.keys(slotProps)) {
        // Reduce the iteration if the slot props is empty
        output[propName] = defaultSlotProps;
      } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
        // Reduce the iteration if the default slot props is empty
        output[propName] = slotProps;
      } else {
        output[propName] = _extends$i({}, slotProps);
        Object.keys(defaultSlotProps).forEach(slotPropName => {
          output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
        });
      }
    } else if (output[propName] === undefined) {
      output[propName] = defaultProps[propName];
    }
  });
  return output;
}

function getThemeProps$1(params) {
  const {
    theme,
    name,
    props
  } = params;
  if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
    return props;
  }
  return resolveProps(theme.components[name].defaultProps, props);
}

function useThemeProps({
  props,
  name,
  defaultTheme,
  themeId
}) {
  let theme = useTheme$1(defaultTheme);
  if (themeId) {
    theme = theme[themeId] || theme;
  }
  const mergedProps = getThemeProps$1({
    theme,
    name,
    props
  });
  return mergedProps;
}

/**
 * A version of `React.useLayoutEffect` that does not show a warning when server-side rendering.
 * This is useful for effects that are only needed for client-side rendering but not for SSR.
 *
 * Before you use this hook, make sure to read https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85
 * and confirm it doesn't apply to your use-case.
 */
const useEnhancedEffect = typeof window !== 'undefined' ? React$1.useLayoutEffect : React$1.useEffect;

function clamp$1(val, min = Number.MIN_SAFE_INTEGER, max = Number.MAX_SAFE_INTEGER) {
  return Math.max(min, Math.min(val, max));
}

var clamp = /*#__PURE__*/Object.freeze({
	__proto__: null,
	default: clamp$1
});

/**
 * Returns a number whose value is limited to the given range.
 * @param {number} value The value to be clamped
 * @param {number} min The lower boundary of the output range
 * @param {number} max The upper boundary of the output range
 * @returns {number} A number in the range [min, max]
 */
function clampWrapper$1(value, min = 0, max = 1) {
  if (process.env.NODE_ENV !== 'production') {
    if (value < min || value > max) {
      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
    }
  }
  return clamp$1(value, min, max);
}

/**
 * Converts a color from CSS hex format to CSS rgb format.
 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
 * @returns {string} A CSS rgb color string
 */
function hexToRgb$1(color) {
  color = color.slice(1);
  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');
  let colors = color.match(re);
  if (colors && colors[0].length === 1) {
    colors = colors.map(n => n + n);
  }
  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {
    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
  }).join(', ')})` : '';
}

/**
 * Returns an object with the type and values of a color.
 *
 * Note: Does not support rgb % values.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @returns {object} - A MUI color object: {type: string, values: number[]}
 */
function decomposeColor$1(color) {
  // Idempotent
  if (color.type) {
    return color;
  }
  if (color.charAt(0) === '#') {
    return decomposeColor$1(hexToRgb$1(color));
  }
  const marker = color.indexOf('(');
  const type = color.substring(0, marker);
  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Unsupported \`${color}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : formatMuiErrorMessage$1(9, color));
  }
  let values = color.substring(marker + 1, color.length - 1);
  let colorSpace;
  if (type === 'color') {
    values = values.split(' ');
    colorSpace = values.shift();
    if (values.length === 4 && values[3].charAt(0) === '/') {
      values[3] = values[3].slice(1);
    }
    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : formatMuiErrorMessage$1(10, colorSpace));
    }
  } else {
    values = values.split(',');
  }
  values = values.map(value => parseFloat(value));
  return {
    type,
    values,
    colorSpace
  };
}

/**
 * Converts a color object with type and values to a string.
 * @param {object} color - Decomposed color
 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'
 * @param {array} color.values - [n,n,n] or [n,n,n,n]
 * @returns {string} A CSS color string
 */
function recomposeColor$1(color) {
  const {
    type,
    colorSpace
  } = color;
  let {
    values
  } = color;
  if (type.indexOf('rgb') !== -1) {
    // Only convert the first 3 values to int (i.e. not alpha)
    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);
  } else if (type.indexOf('hsl') !== -1) {
    values[1] = `${values[1]}%`;
    values[2] = `${values[2]}%`;
  }
  if (type.indexOf('color') !== -1) {
    values = `${colorSpace} ${values.join(' ')}`;
  } else {
    values = `${values.join(', ')}`;
  }
  return `${type}(${values})`;
}

/**
 * Sets the absolute transparency of a color.
 * Any existing alpha values are overwritten.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} value - value to set the alpha channel to in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */
function alpha$1(color, value) {
  color = decomposeColor$1(color);
  value = clampWrapper$1(value);
  if (color.type === 'rgb' || color.type === 'hsl') {
    color.type += 'a';
  }
  if (color.type === 'color') {
    color.values[3] = `/${value}`;
  } else {
    color.values[3] = value;
  }
  return recomposeColor$1(color);
}

function chainPropTypes(propType1, propType2) {
  if (process.env.NODE_ENV === 'production') {
    return () => null;
  }
  return function validate(...args) {
    return propType1(...args) || propType2(...args);
  };
}

function isClassComponent$1(elementType) {
  // elementType.prototype?.isReactComponent
  const {
    prototype = {}
  } = elementType;
  return Boolean(prototype.isReactComponent);
}
function acceptingRef(props, propName, componentName, location, propFullName) {
  const element = props[propName];
  const safePropName = propFullName || propName;
  if (element == null ||
  // When server-side rendering React doesn't warn either.
  // This is not an accurate check for SSR.
  // This is only in place for Emotion compat.
  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
  typeof window === 'undefined') {
    return null;
  }
  let warningHint;
  const elementType = element.type;
  /**
   * Blacklisting instead of whitelisting
   *
   * Blacklisting will miss some components, such as React.Fragment. Those will at least
   * trigger a warning in React.
   * We can't whitelist because there is no safe way to detect React.forwardRef
   * or class components. "Safe" means there's no public API.
   *
   */
  if (typeof elementType === 'function' && !isClassComponent$1(elementType)) {
    warningHint = 'Did you accidentally use a plain function component for an element instead?';
  }
  if (warningHint !== undefined) {
    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
  }
  return null;
}
const elementAcceptingRef = chainPropTypes(PropTypes.element, acceptingRef);
elementAcceptingRef.isRequired = chainPropTypes(PropTypes.element.isRequired, acceptingRef);

function isClassComponent(elementType) {
  // elementType.prototype?.isReactComponent
  const {
    prototype = {}
  } = elementType;
  return Boolean(prototype.isReactComponent);
}
function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
  const propValue = props[propName];
  const safePropName = propFullName || propName;
  if (propValue == null ||
  // When server-side rendering React doesn't warn either.
  // This is not an accurate check for SSR.
  // This is only in place for emotion compat.
  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
  typeof window === 'undefined') {
    return null;
  }
  let warningHint;

  /**
   * Blacklisting instead of whitelisting
   *
   * Blacklisting will miss some components, such as React.Fragment. Those will at least
   * trigger a warning in React.
   * We can't whitelist because there is no safe way to detect React.forwardRef
   * or class components. "Safe" means there's no public API.
   *
   */
  if (typeof propValue === 'function' && !isClassComponent(propValue)) {
    warningHint = 'Did you accidentally provide a plain function component instead?';
  }
  if (warningHint !== undefined) {
    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element type that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
  }
  return null;
}
var elementTypeAcceptingRef$1 = chainPropTypes(PropTypes.elementType, elementTypeAcceptingRef);

// This module is based on https://github.com/airbnb/prop-types-exact repository.
// However, in order to reduce the number of dependencies and to remove some extra safe checks
// the module was forked.

const specialProperty = 'exact-prop: \u200b';
function exactProp(propTypes) {
  if (process.env.NODE_ENV === 'production') {
    return propTypes;
  }
  return _extends$i({}, propTypes, {
    [specialProperty]: props => {
      const unsupportedProps = Object.keys(props).filter(prop => !propTypes.hasOwnProperty(prop));
      if (unsupportedProps.length > 0) {
        return new Error(`The following props are not supported: ${unsupportedProps.map(prop => `\`${prop}\``).join(', ')}. Please remove them.`);
      }
      return null;
    }
  });
}

function HTMLElementType(props, propName, componentName, location, propFullName) {
  if (process.env.NODE_ENV === 'production') {
    return null;
  }
  const propValue = props[propName];
  const safePropName = propFullName || propName;
  if (propValue == null) {
    return null;
  }
  if (propValue && propValue.nodeType !== 1) {
    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an HTMLElement.`);
  }
  return null;
}

const refType = PropTypes.oneOfType([PropTypes.func, PropTypes.object]);

/**
 * Safe chained function.
 *
 * Will only create a new function if needed,
 * otherwise will pass back existing functions or null.
 */
function createChainedFunction(...funcs) {
  return funcs.reduce((acc, func) => {
    if (func == null) {
      return acc;
    }
    return function chainedFunction(...args) {
      acc.apply(this, args);
      func.apply(this, args);
    };
  }, () => {});
}

// Corresponds to 10 frames at 60 Hz.
// A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
function debounce$3(func, wait = 166) {
  let timeout;
  function debounced(...args) {
    const later = () => {
      // @ts-ignore
      func.apply(this, args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  }
  debounced.clear = () => {
    clearTimeout(timeout);
  };
  return debounced;
}

function ownerDocument(node) {
  return node && node.ownerDocument || document;
}

function ownerWindow(node) {
  const doc = ownerDocument(node);
  return doc.defaultView || window;
}

/**
 * TODO v5: consider making it private
 *
 * passes {value} to {ref}
 *
 * WARNING: Be sure to only call this inside a callback that is passed as a ref.
 * Otherwise, make sure to cleanup the previous {ref} if it changes. See
 * https://github.com/mui/material-ui/issues/13539
 *
 * Useful if you want to expose the ref of an inner component to the public API
 * while still using it inside the component.
 * @param ref A ref callback or ref object. If anything falsy, this is a no-op.
 */
function setRef(ref, value) {
  if (typeof ref === 'function') {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
}

let globalId = 0;
function useGlobalId(idOverride) {
  const [defaultId, setDefaultId] = React$1.useState(idOverride);
  const id = idOverride || defaultId;
  React$1.useEffect(() => {
    if (defaultId == null) {
      // Fallback to this default id when possible.
      // Use the incrementing value for client-side rendering only.
      // We can't use it server-side.
      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem
      globalId += 1;
      setDefaultId(`mui-${globalId}`);
    }
  }, [defaultId]);
  return id;
}

// downstream bundlers may remove unnecessary concatenation, but won't remove toString call -- Workaround for https://github.com/webpack/webpack/issues/14814
const maybeReactUseId = React$1['useId'.toString()];
/**
 *
 * @example <div id={useId()} />
 * @param idOverride
 * @returns {string}
 */
function useId(idOverride) {
  if (maybeReactUseId !== undefined) {
    const reactId = maybeReactUseId();
    return idOverride != null ? idOverride : reactId;
  }
  // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.
  return useGlobalId(idOverride);
}

/**
 * Inspired by https://github.com/facebook/react/issues/14099#issuecomment-440013892
 * See RFC in https://github.com/reactjs/rfcs/pull/220
 */

function useEventCallback(fn) {
  const ref = React$1.useRef(fn);
  useEnhancedEffect(() => {
    ref.current = fn;
  });
  return React$1.useRef((...args) =>
  // @ts-expect-error hide `this`
  (0, ref.current)(...args)).current;
}

function useForkRef(...refs) {
  /**
   * This will create a new function if the refs passed to this hook change and are all defined.
   * This means react will call the old forkRef with `null` and the new forkRef
   * with the ref. Cleanup naturally emerges from this behavior.
   */
  return React$1.useMemo(() => {
    if (refs.every(ref => ref == null)) {
      return null;
    }
    return instance => {
      refs.forEach(ref => {
        setRef(ref, instance);
      });
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, refs);
}

// A change of the browser zoom change the scrollbar size.
// Credit https://github.com/twbs/bootstrap/blob/488fd8afc535ca3a6ad4dc581f5e89217b6a36ac/js/src/util/scrollbar.js#L14-L18
function getScrollbarSize(doc) {
  // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
  const documentWidth = doc.documentElement.clientWidth;
  return Math.abs(window.innerWidth - documentWidth);
}

function getTypeByValue(value) {
  const valueType = typeof value;
  switch (valueType) {
    case 'number':
      if (Number.isNaN(value)) {
        return 'NaN';
      }
      if (!Number.isFinite(value)) {
        return 'Infinity';
      }
      if (value !== Math.floor(value)) {
        return 'float';
      }
      return 'number';
    case 'object':
      if (value === null) {
        return 'null';
      }
      return value.constructor.name;
    default:
      return valueType;
  }
}

// IE 11 support
function ponyfillIsInteger(x) {
  // eslint-disable-next-line no-restricted-globals
  return typeof x === 'number' && isFinite(x) && Math.floor(x) === x;
}
const isInteger = Number.isInteger || ponyfillIsInteger;
function requiredInteger(props, propName, componentName, location) {
  const propValue = props[propName];
  if (propValue == null || !isInteger(propValue)) {
    const propType = getTypeByValue(propValue);
    return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
  }
  return null;
}
function validator(props, propName, ...other) {
  const propValue = props[propName];
  if (propValue === undefined) {
    return null;
  }
  return requiredInteger(props, propName, ...other);
}
function validatorNoop() {
  return null;
}
validator.isRequired = requiredInteger;
validatorNoop.isRequired = validatorNoop;
var integerPropType = process.env.NODE_ENV === 'production' ? validatorNoop : validator;

function composeClasses(slots, getUtilityClass, classes = undefined) {
  const output = {};
  Object.keys(slots).forEach(
  // `Object.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
  // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
  slot => {
    output[slot] = slots[slot].reduce((acc, key) => {
      if (key) {
        const utilityClass = getUtilityClass(key);
        if (utilityClass !== '') {
          acc.push(utilityClass);
        }
        if (classes && classes[key]) {
          acc.push(classes[key]);
        }
      }
      return acc;
    }, []).join(' ');
  });
  return output;
}

/**
 * Determines if a given element is a DOM element name (i.e. not a React component).
 */
function isHostComponent(element) {
  return typeof element === 'string';
}

/**
 * Type of the ownerState based on the type of an element it applies to.
 * This resolves to the provided OwnerState for React components and `undefined` for host components.
 * Falls back to `OwnerState | undefined` when the exact type can't be determined in development time.
 */

/**
 * Appends the ownerState object to the props, merging with the existing one if necessary.
 *
 * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node or undefined, `ownerState` is not applied.
 * @param otherProps Props of the element.
 * @param ownerState
 */
function appendOwnerState(elementType, otherProps, ownerState) {
  if (elementType === undefined || isHostComponent(elementType)) {
    return otherProps;
  }
  return _extends$i({}, otherProps, {
    ownerState: _extends$i({}, otherProps.ownerState, ownerState)
  });
}

/**
 * Extracts event handlers from a given object.
 * A prop is considered an event handler if it is a function and its name starts with `on`.
 *
 * @param object An object to extract event handlers from.
 * @param excludeKeys An array of keys to exclude from the returned object.
 */
function extractEventHandlers(object, excludeKeys = []) {
  if (object === undefined) {
    return {};
  }
  const result = {};
  Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {
    result[prop] = object[prop];
  });
  return result;
}

/**
 * Removes event handlers from the given object.
 * A field is considered an event handler if it is a function with a name beginning with `on`.
 *
 * @param object Object to remove event handlers from.
 * @returns Object with event handlers removed.
 */
function omitEventHandlers(object) {
  if (object === undefined) {
    return {};
  }
  const result = {};
  Object.keys(object).filter(prop => !(prop.match(/^on[A-Z]/) && typeof object[prop] === 'function')).forEach(prop => {
    result[prop] = object[prop];
  });
  return result;
}

/**
 * Merges the slot component internal props (usually coming from a hook)
 * with the externally provided ones.
 *
 * The merge order is (the latter overrides the former):
 * 1. The internal props (specified as a getter function to work with get*Props hook result)
 * 2. Additional props (specified internally on a Base UI component)
 * 3. External props specified on the owner component. These should only be used on a root slot.
 * 4. External props specified in the `slotProps.*` prop.
 * 5. The `className` prop - combined from all the above.
 * @param parameters
 * @returns
 */
function mergeSlotProps(parameters) {
  const {
    getSlotProps,
    additionalProps,
    externalSlotProps,
    externalForwardedProps,
    className
  } = parameters;
  if (!getSlotProps) {
    // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,
    // so we can simply merge all the props without having to worry about extracting event handlers.
    const joinedClasses = clsx(additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
    const mergedStyle = _extends$i({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
    const props = _extends$i({}, additionalProps, externalForwardedProps, externalSlotProps);
    if (joinedClasses.length > 0) {
      props.className = joinedClasses;
    }
    if (Object.keys(mergedStyle).length > 0) {
      props.style = mergedStyle;
    }
    return {
      props,
      internalRef: undefined
    };
  }

  // In this case, getSlotProps is responsible for calling the external event handlers.
  // We don't need to include them in the merged props because of this.

  const eventHandlers = extractEventHandlers(_extends$i({}, externalForwardedProps, externalSlotProps));
  const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);
  const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);
  const internalSlotProps = getSlotProps(eventHandlers);

  // The order of classes is important here.
  // Emotion (that we use in libraries consuming Base UI) depends on this order
  // to properly override style. It requires the most important classes to be last
  // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.
  const joinedClasses = clsx(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
  const mergedStyle = _extends$i({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
  const props = _extends$i({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
  if (joinedClasses.length > 0) {
    props.className = joinedClasses;
  }
  if (Object.keys(mergedStyle).length > 0) {
    props.style = mergedStyle;
  }
  return {
    props,
    internalRef: internalSlotProps.ref
  };
}

/**
 * If `componentProps` is a function, calls it with the provided `ownerState`.
 * Otherwise, just returns `componentProps`.
 */
function resolveComponentProps(componentProps, ownerState, slotState) {
  if (typeof componentProps === 'function') {
    return componentProps(ownerState, slotState);
  }
  return componentProps;
}

const _excluded$h = ["elementType", "externalSlotProps", "ownerState", "skipResolvingSlotProps"];
/**
 * @ignore - do not document.
 * Builds the props to be passed into the slot of an unstyled component.
 * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.
 * If the slot component is not a host component, it also merges in the `ownerState`.
 *
 * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.
 */
function useSlotProps(parameters) {
  var _parameters$additiona;
  const {
      elementType,
      externalSlotProps,
      ownerState,
      skipResolvingSlotProps = false
    } = parameters,
    rest = _objectWithoutPropertiesLoose$2(parameters, _excluded$h);
  const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);
  const {
    props: mergedProps,
    internalRef
  } = mergeSlotProps(_extends$i({}, rest, {
    externalSlotProps: resolvedComponentsProps
  }));
  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
  const props = appendOwnerState(elementType, _extends$i({}, mergedProps, {
    ref
  }), ownerState);
  return props;
}

const PropsContext = /*#__PURE__*/React$1.createContext(undefined);
process.env.NODE_ENV !== "production" ? {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * @ignore
   */
  value: PropTypes.object
} : void 0;
function getThemeProps(params) {
  const {
    theme,
    name,
    props
  } = params;
  if (!theme || !theme.components || !theme.components[name]) {
    return props;
  }
  const config = theme.components[name];
  if (config.defaultProps) {
    // compatible with v5 signature
    return resolveProps(config.defaultProps, props);
  }
  if (!config.styleOverrides && !config.variants) {
    // v6 signature, no property 'defaultProps'
    return resolveProps(config, props);
  }
  return props;
}
function useDefaultProps$1({
  props,
  name
}) {
  const ctx = React$1.useContext(PropsContext);
  return getThemeProps({
    props,
    name,
    theme: {
      components: ctx
    }
  });
}

const _excluded$g = ["component", "direction", "spacing", "divider", "children", "className", "useFlexGap"];
const defaultTheme$2 = createTheme$2();
// widening Theme to any so that the consumer can own the theme structure.
const defaultCreateStyledComponent = styled$1('div', {
  name: 'MuiStack',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
});
function useThemePropsDefault(props) {
  return useThemeProps({
    props,
    name: 'MuiStack',
    defaultTheme: defaultTheme$2
  });
}

/**
 * Return an array with the separator React element interspersed between
 * each React node of the input children.
 *
 * > joinChildren([1,2,3], 0)
 * [1,0,2,0,3]
 */
function joinChildren(children, separator) {
  const childrenArray = React$1.Children.toArray(children).filter(Boolean);
  return childrenArray.reduce((output, child, index) => {
    output.push(child);
    if (index < childrenArray.length - 1) {
      output.push( /*#__PURE__*/React$1.cloneElement(separator, {
        key: `separator-${index}`
      }));
    }
    return output;
  }, []);
}
const getSideFromDirection = direction => {
  return {
    row: 'Left',
    'row-reverse': 'Right',
    column: 'Top',
    'column-reverse': 'Bottom'
  }[direction];
};
const style = ({
  ownerState,
  theme
}) => {
  let styles = _extends$i({
    display: 'flex',
    flexDirection: 'column'
  }, handleBreakpoints({
    theme
  }, resolveBreakpointValues({
    values: ownerState.direction,
    breakpoints: theme.breakpoints.values
  }), propValue => ({
    flexDirection: propValue
  })));
  if (ownerState.spacing) {
    const transformer = createUnarySpacing(theme);
    const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {
      if (typeof ownerState.spacing === 'object' && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === 'object' && ownerState.direction[breakpoint] != null) {
        acc[breakpoint] = true;
      }
      return acc;
    }, {});
    const directionValues = resolveBreakpointValues({
      values: ownerState.direction,
      base
    });
    const spacingValues = resolveBreakpointValues({
      values: ownerState.spacing,
      base
    });
    if (typeof directionValues === 'object') {
      Object.keys(directionValues).forEach((breakpoint, index, breakpoints) => {
        const directionValue = directionValues[breakpoint];
        if (!directionValue) {
          const previousDirectionValue = index > 0 ? directionValues[breakpoints[index - 1]] : 'column';
          directionValues[breakpoint] = previousDirectionValue;
        }
      });
    }
    const styleFromPropValue = (propValue, breakpoint) => {
      if (ownerState.useFlexGap) {
        return {
          gap: getValue(transformer, propValue)
        };
      }
      return {
        // The useFlexGap={false} implement relies on each child to give up control of the margin.
        // We need to reset the margin to avoid double spacing.
        '& > :not(style):not(style)': {
          margin: 0
        },
        '& > :not(style) ~ :not(style)': {
          [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: getValue(transformer, propValue)
        }
      };
    };
    styles = deepmerge$1(styles, handleBreakpoints({
      theme
    }, spacingValues, styleFromPropValue));
  }
  styles = mergeBreakpointsInOrder(theme.breakpoints, styles);
  return styles;
};
function createStack(options = {}) {
  const {
    // This will allow adding custom styled fn (for example for custom sx style function)
    createStyledComponent = defaultCreateStyledComponent,
    useThemeProps = useThemePropsDefault,
    componentName = 'MuiStack'
  } = options;
  const useUtilityClasses = () => {
    const slots = {
      root: ['root']
    };
    return composeClasses(slots, slot => generateUtilityClass(componentName, slot), {});
  };
  const StackRoot = createStyledComponent(style);
  const Stack = /*#__PURE__*/React$1.forwardRef(function Grid(inProps, ref) {
    const themeProps = useThemeProps(inProps);
    const props = extendSxProp(themeProps); // `color` type conflicts with html color attribute.
    const {
        component = 'div',
        direction = 'column',
        spacing = 0,
        divider,
        children,
        className,
        useFlexGap = false
      } = props,
      other = _objectWithoutPropertiesLoose$2(props, _excluded$g);
    const ownerState = {
      direction,
      spacing,
      useFlexGap
    };
    const classes = useUtilityClasses();
    return /*#__PURE__*/jsxRuntimeExports.jsx(StackRoot, _extends$i({
      as: component,
      ownerState: ownerState,
      ref: ref,
      className: clsx(classes.root, className)
    }, other, {
      children: divider ? joinChildren(children, divider) : children
    }));
  });
  process.env.NODE_ENV !== "production" ? Stack.propTypes /* remove-proptypes */ = {
    children: PropTypes.node,
    direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),
    divider: PropTypes.node,
    spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  return Stack;
}

/**
 *
 * Demos:
 *
 * - [Stack (Joy UI)](https://mui.com/joy-ui/react-stack/)
 * - [Stack (Material UI)](https://mui.com/material-ui/react-stack/)
 * - [Stack (MUI System)](https://mui.com/system/react-stack/)
 *
 * API:
 *
 * - [Stack API](https://mui.com/system/api/stack/)
 */
const Stack$1 = createStack();
process.env.NODE_ENV !== "production" ? Stack$1.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: PropTypes.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * Defines the `flex-direction` style property.
   * It is applied for all screen sizes.
   * @default 'column'
   */
  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),
  /**
   * Add an element between each child.
   */
  divider: PropTypes.node,
  /**
   * Defines the space between immediate children.
   * @default 0
   */
  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
  /**
   * The system prop, which allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.
   *
   * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),
   * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.
   *
   * To enable this flag globally, follow the theme's default props configuration.
   * @default false
   */
  useFlexGap: PropTypes.bool
} : void 0;

function _defineProperty$2(e, r, t) {
  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}

function _taggedTemplateLiteral(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, {
    raw: {
      value: Object.freeze(t)
    }
  }));
}

var PALETTE = {
  primary: {
    indigo: '#2E2657',
    navy: '#0D2839',
    offWhite: '#F8F8F8'
  },
  secondary: {
    blue: {
      1: '#89AFFF',
      2: '#6596FF',
      3: '#1D62F6',
      4: '#0042CF',
      5: '#003098'
    },
    green: {
      1: '#D6FFF0',
      2: '#90F7D2',
      3: '#0AE799',
      4: '#12D08D',
      5: '#129A6A'
    },
    orange: {
      1: '#FFF3DD',
      2: '#FFD7B2',
      3: '#FD9B41',
      4: '#F28521',
      5: '#E06E04'
    },
    purple: {
      1: '#A594FF',
      2: '#7B61FF',
      3: '#584AA4',
      4: '#2E2657',
      5: '#221D3D'
    },
    pink: {
      1: '#FDD2ED',
      2: '#F9A6DA',
      3: '#F279C5',
      4: '#E758B2',
      5: '#D92E99'
    },
    grey: {
      1: '#F7F7F7',
      2: '#EBEBEB',
      3: '#A9A9A9',
      4: '#787878',
      5: '#3C3C43'
    },
    red: {
      1: '#ffd1d9',
      2: '#ff99aa',
      3: '#ff5c78',
      4: '#e8092f',
      5: '#b0001d'
    },
    yellow: {
      1: '#fffdd1',
      2: '#fffb9c',
      3: '#fff95c',
      4: '#f2eb00',
      5: '#dbd400'
    }
  },
  font: {
    light: '#F8F8F8',
    dark: '#0D2839'
  },
  system: {
    green: '#09D08A',
    orange: '#FD9B41',
    red: '#FC5C5C'
  }
};

function ownKeys$a(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$8(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$a(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$a(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var DEFAULT_FONT_WEIGHT = 360;
var BOLD_FONT_WEIGHT$1 = 500;
var getMaxLinesStyle = function getMaxLinesStyle(n) {
  return {
    display: '-webkit-box',
    overflow: 'hidden',
    WebkitBoxOrient: 'vertical',
    WebkitLineClamp: n
    //wordBreak: "break-word",
  };
};
var FONT_SIZES = {
  h0: 80,
  h1: 56,
  h2: 48,
  h3: 40,
  h4: 32,
  h5: 24,
  large: 20,
  medium: 18,
  normal: 16,
  small: 14,
  tiny: 10
};
var LINE_HEIGHTS = {
  h0: 80,
  h1: 62,
  h2: 53,
  h3: 44,
  h4: 35,
  h5: 26,
  large: 28,
  medium: 25,
  normal: 22,
  small: 20,
  tiny: 11
};
var DEFAULT_BOLD = ['h0', 'h1', 'h2', 'h3', 'h4', 'h5'];
function Typography$1(props) {
  var _props$variant, _props$variant2;
  return jsxRuntimeExports.jsx(Box$1, {
    color: props.color || PALETTE.font.dark,
    fontSize: "".concat((props.scale || 1) * FONT_SIZES[(_props$variant = props.variant) !== null && _props$variant !== void 0 ? _props$variant : 'normal'], "px"),
    fontWeight: props.bold || props.variant && DEFAULT_BOLD.includes(props.variant) ? BOLD_FONT_WEIGHT$1 : DEFAULT_FONT_WEIGHT,
    lineHeight: "".concat((props.scale || 1) * LINE_HEIGHTS[(_props$variant2 = props.variant) !== null && _props$variant2 !== void 0 ? _props$variant2 : 'normal'], "px"),
    maxWidth: "fit-content",
    onClick: props.onClick,
    //@ts-expect-error
    sx: _objectSpread$8(_objectSpread$8(_objectSpread$8(_objectSpread$8(_objectSpread$8({}, props.sx), props.faded ? {
      opacity: 0.6
    } : null), props.noWrap ? {
      whiteSpace: 'nowrap',
      overflow: 'hidden',
      textOverflow: 'ellipsis'
    } : null), props.maxLines ? getMaxLinesStyle(props.maxLines) : null), {}, {
      transition: '0.2s'
    }),
    children: props.htmlTag ? jsxRuntimeExports.jsx(props.htmlTag, {
      style: {
        fontFamily: 'inherit',
        fontSize: 'inherit',
        fontWeight: 'inherit',
        lineHeight: 'inherit',
        display: 'contents'
      },
      children: props.children
    }) : props.children
  });
}

var _templateObject$6;
function ownKeys$9(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$7(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$9(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$9(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var spin$1 = keyframes(_templateObject$6 || (_templateObject$6 = _taggedTemplateLiteral(["\nfrom {\n  transform: rotate(0deg);\n}\nto {\n  transform: rotate(180deg);\n}\n"])));
var HEIGHTS = {
  large: 52,
  medium: 42,
  small: 28,
  tiny: 20
};
var ICON_SIZES = {
  large: 26,
  medium: 20,
  small: 20,
  tiny: 16
};
var PADDINGS = {
  large: {
    x: 32,
    y: 12
  },
  medium: {
    x: 24,
    y: 8
  },
  small: {
    x: 16,
    y: 4
  },
  tiny: {
    x: 12,
    y: 2
  }
};
var BACKGROUND_COLORS = {
  light: {
    primary: {
      enabled: PALETTE.primary.indigo,
      hover: PALETTE.secondary.purple[2],
      pressed: PALETTE.secondary.purple[3]
    },
    secondary: {
      enabled: PALETTE.font.light,
      hover: PALETTE.font.light,
      pressed: PALETTE.secondary.grey[2]
    }
  },
  dark: {
    primary: {
      enabled: 'rgb(255,255,255)',
      hover: PALETTE.secondary.purple[2],
      pressed: PALETTE.secondary.grey[1]
    },
    tertiary: {
      enabled: PALETTE.secondary.purple[2],
      hover: PALETTE.secondary.purple[3],
      pressed: PALETTE.secondary.purple[1]
    }
  }
};
var FONT_COLORS = {
  light: {
    primary: {
      enabled: PALETTE.font.light,
      hover: PALETTE.font.light,
      pressed: PALETTE.font.light
    },
    secondary: {
      enabled: PALETTE.primary.indigo,
      hover: PALETTE.secondary.purple[2],
      pressed: PALETTE.primary.indigo
    }
  },
  dark: {
    primary: {
      enabled: PALETTE.font.dark,
      hover: PALETTE.font.light,
      pressed: PALETTE.secondary.purple[2]
    },
    secondary: {
      enabled: PALETTE.font.light,
      hover: PALETTE.secondary.purple[2],
      pressed: PALETTE.secondary.grey[3]
    },
    tertiary: {
      enabled: PALETTE.font.light,
      hover: PALETTE.font.light,
      pressed: PALETTE.font.light
    }
  }
};
var BORDER_COLORS = {
  light: {
    secondary: {
      enabled: PALETTE.primary.indigo,
      hover: PALETTE.secondary.purple[2],
      pressed: PALETTE.primary.indigo
    }
  },
  dark: {
    secondary: {
      enabled: PALETTE.font.light,
      hover: PALETTE.secondary.purple[2],
      pressed: PALETTE.secondary.grey[3]
    }
  }
};
function UrsorButton(props) {
  var _props$variant, _props$size, _BACKGROUND_COLORS$mo, _BORDER_COLORS$mode$v, _FONT_COLORS$mode$var, _ref, _props$fontColor, _FONT_COLORS$mode$var2;
  var mode = props.dark ? 'dark' : 'light';
  var variant = (_props$variant = props.variant) !== null && _props$variant !== void 0 ? _props$variant : 'primary';
  var size = (_props$size = props.size) !== null && _props$size !== void 0 ? _props$size : 'medium';
  var _useState = useState(false),
    _useState2 = _slicedToArray$2(_useState, 2),
    hovering = _useState2[0],
    setHovering = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray$2(_useState3, 2),
    pressed = _useState4[0],
    setPressed = _useState4[1];
  var _useState5 = useState('enabled'),
    _useState6 = _slicedToArray$2(_useState5, 2),
    state = _useState6[0],
    setState = _useState6[1];
  useEffect(function () {
    if (pressed) {
      setState('pressed');
    } else if (hovering) {
      setState('hover');
    } else {
      setState('enabled');
    }
  }, [hovering, pressed]);
  return jsxRuntimeExports.jsxs(Stack$1, {
    alignItems: "center",
    bgcolor: (_BACKGROUND_COLORS$mo = BACKGROUND_COLORS[mode][variant]) === null || _BACKGROUND_COLORS$mo === void 0 ? void 0 : _BACKGROUND_COLORS$mo[state],
    border: "2px solid ".concat(props.borderColor || ((_BORDER_COLORS$mode$v = BORDER_COLORS[mode][variant]) === null || _BORDER_COLORS$mode$v === void 0 ? void 0 : _BORDER_COLORS$mode$v[state])),
    borderRadius: "".concat(HEIGHTS[size] / 2, "px"),
    boxSizing: "border-box",
    direction: "row",
    height: props.height || HEIGHTS[size],
    justifyContent: "center",
    onClick: props.onClick,
    onMouseDown: function onMouseDown() {
      setPressed(true);
    },
    onMouseEnter: function onMouseEnter() {
      setHovering(true);
    },
    onMouseLeave: function onMouseLeave() {
      setHovering(false);
      setPressed(false);
    },
    onMouseUp: function onMouseUp() {
      setPressed(false);
    },
    px: props.paddingX || "".concat(PADDINGS[size].x, "px"),
    pl: props.startIcon && !props.paddingX ? "".concat(0.7 * PADDINGS[size].x, "px") : undefined,
    pr: props.endIcon && !props.paddingX ? "".concat(0.7 * PADDINGS[size].x, "px") : undefined,
    spacing: "12px",
    boxShadow:
    // eslint-disable-next-line no-nested-ternary -- no tyme to fiks dis
    props.strongShadow ? '0 0 25px rgba(0,0,0,0.08)' : props.shadow ? '0 0 20px rgba(0,0,0,0.05)' : undefined,
    sx: {
      cursor: 'pointer',
      pointerEvents: props.disabled ? 'none' : undefined,
      transition: '0.2s',
      background: props.backgroundColor,
      // eslint-disable-next-line no-nested-ternary -- annoying
      opacity: props.disabled ? 0.35 : state === 'hover' ? props.hoverOpacity : undefined,
      svg: {
        animation: props.iconSpin ? "".concat(spin$1, " 6s linear infinite") : undefined,
        path: {
          fill: props.useNaturalIconColor ? undefined : props.iconColor || props.fontColor || ((_FONT_COLORS$mode$var = FONT_COLORS[mode][variant]) === null || _FONT_COLORS$mode$var === void 0 ? void 0 : _FONT_COLORS$mode$var[state]) || PALETTE.font.light,
          transition: '0.2s'
        }
      }
    },
    width: props.width || 'fit-content',
    children: [props.startIcon ? jsxRuntimeExports.jsx(props.startIcon, {
      height: props.iconSize || ICON_SIZES[props.size || 'medium'],
      width: props.iconSize || ICON_SIZES[props.size || 'medium']
    }) : null, jsxRuntimeExports.jsx(Typography$1, {
      bold: true,
      color: (_ref = (_props$fontColor = props.fontColor) !== null && _props$fontColor !== void 0 ? _props$fontColor : (_FONT_COLORS$mode$var2 = FONT_COLORS[mode][variant]) === null || _FONT_COLORS$mode$var2 === void 0 ? void 0 : _FONT_COLORS$mode$var2[state]) !== null && _ref !== void 0 ? _ref : PALETTE.font.dark,
      noWrap: true,
      sx: _objectSpread$7({
        transition: '0.2s',
        paddingY: props.paddingY
      }, props.fontSize ? {
        fontSize: props.fontSize
      } : {}),
      variant: size,
      children: props.children
    }), props.endIcon ? jsxRuntimeExports.jsx(props.endIcon, {
      height: props.iconSize || ICON_SIZES[props.size || 'medium'],
      width: props.iconSize || ICON_SIZES[props.size || 'medium']
    }) : null]
  });
}

const common = {
  black: '#000',
  white: '#fff'
};

const red = {
  50: '#ffebee',
  100: '#ffcdd2',
  200: '#ef9a9a',
  300: '#e57373',
  400: '#ef5350',
  500: '#f44336',
  600: '#e53935',
  700: '#d32f2f',
  800: '#c62828',
  900: '#b71c1c',
  A100: '#ff8a80',
  A200: '#ff5252',
  A400: '#ff1744',
  A700: '#d50000'
};

const purple = {
  50: '#f3e5f5',
  100: '#e1bee7',
  200: '#ce93d8',
  300: '#ba68c8',
  400: '#ab47bc',
  500: '#9c27b0',
  600: '#8e24aa',
  700: '#7b1fa2',
  800: '#6a1b9a',
  900: '#4a148c',
  A100: '#ea80fc',
  A200: '#e040fb',
  A400: '#d500f9',
  A700: '#aa00ff'
};

const blue = {
  50: '#e3f2fd',
  100: '#bbdefb',
  200: '#90caf9',
  300: '#64b5f6',
  400: '#42a5f5',
  500: '#2196f3',
  600: '#1e88e5',
  700: '#1976d2',
  800: '#1565c0',
  900: '#0d47a1',
  A100: '#82b1ff',
  A200: '#448aff',
  A400: '#2979ff',
  A700: '#2962ff'
};

const lightBlue = {
  50: '#e1f5fe',
  100: '#b3e5fc',
  200: '#81d4fa',
  300: '#4fc3f7',
  400: '#29b6f6',
  500: '#03a9f4',
  600: '#039be5',
  700: '#0288d1',
  800: '#0277bd',
  900: '#01579b',
  A100: '#80d8ff',
  A200: '#40c4ff',
  A400: '#00b0ff',
  A700: '#0091ea'
};

const green = {
  50: '#e8f5e9',
  100: '#c8e6c9',
  200: '#a5d6a7',
  300: '#81c784',
  400: '#66bb6a',
  500: '#4caf50',
  600: '#43a047',
  700: '#388e3c',
  800: '#2e7d32',
  900: '#1b5e20',
  A100: '#b9f6ca',
  A200: '#69f0ae',
  A400: '#00e676',
  A700: '#00c853'
};

const orange = {
  50: '#fff3e0',
  100: '#ffe0b2',
  200: '#ffcc80',
  300: '#ffb74d',
  400: '#ffa726',
  500: '#ff9800',
  600: '#fb8c00',
  700: '#f57c00',
  800: '#ef6c00',
  900: '#e65100',
  A100: '#ffd180',
  A200: '#ffab40',
  A400: '#ff9100',
  A700: '#ff6d00'
};

const grey = {
  50: '#fafafa',
  100: '#f5f5f5',
  200: '#eeeeee',
  300: '#e0e0e0',
  400: '#bdbdbd',
  500: '#9e9e9e',
  600: '#757575',
  700: '#616161',
  800: '#424242',
  900: '#212121',
  A100: '#f5f5f5',
  A200: '#eeeeee',
  A400: '#bdbdbd',
  A700: '#616161'
};

var THEME_ID = '$$material';

function createMixins(breakpoints, mixins) {
  return _extends$i({
    toolbar: {
      minHeight: 56,
      [breakpoints.up('xs')]: {
        '@media (orientation: landscape)': {
          minHeight: 48
        }
      },
      [breakpoints.up('sm')]: {
        minHeight: 64
      }
    }
  }, mixins);
}

var colorManipulator = {};

var interopRequireDefault = {exports: {}};

(function (module) {
	function _interopRequireDefault(e) {
	  return e && e.__esModule ? e : {
	    "default": e
	  };
	}
	module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports; 
} (interopRequireDefault));

var interopRequireDefaultExports = interopRequireDefault.exports;

var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(formatMuiErrorMessage);

var require$$2 = /*@__PURE__*/getAugmentedNamespace(clamp);

var _interopRequireDefault$1 = interopRequireDefaultExports;
Object.defineProperty(colorManipulator, "__esModule", {
  value: true
});
var alpha_1 = colorManipulator.alpha = alpha;
colorManipulator.blend = blend;
colorManipulator.colorChannel = void 0;
var darken_1 = colorManipulator.darken = darken;
colorManipulator.decomposeColor = decomposeColor;
colorManipulator.emphasize = emphasize;
var getContrastRatio_1 = colorManipulator.getContrastRatio = getContrastRatio;
colorManipulator.getLuminance = getLuminance;
colorManipulator.hexToRgb = hexToRgb;
colorManipulator.hslToRgb = hslToRgb;
var lighten_1 = colorManipulator.lighten = lighten;
colorManipulator.private_safeAlpha = private_safeAlpha;
colorManipulator.private_safeColorChannel = void 0;
colorManipulator.private_safeDarken = private_safeDarken;
colorManipulator.private_safeEmphasize = private_safeEmphasize;
colorManipulator.private_safeLighten = private_safeLighten;
colorManipulator.recomposeColor = recomposeColor;
colorManipulator.rgbToHex = rgbToHex;
var _formatMuiErrorMessage2 = _interopRequireDefault$1(require$$1$1);
var _clamp = _interopRequireDefault$1(require$$2);
/* eslint-disable @typescript-eslint/naming-convention */

/**
 * Returns a number whose value is limited to the given range.
 * @param {number} value The value to be clamped
 * @param {number} min The lower boundary of the output range
 * @param {number} max The upper boundary of the output range
 * @returns {number} A number in the range [min, max]
 */
function clampWrapper(value, min = 0, max = 1) {
  if (process.env.NODE_ENV !== 'production') {
    if (value < min || value > max) {
      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
    }
  }
  return (0, _clamp.default)(value, min, max);
}

/**
 * Converts a color from CSS hex format to CSS rgb format.
 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
 * @returns {string} A CSS rgb color string
 */
function hexToRgb(color) {
  color = color.slice(1);
  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');
  let colors = color.match(re);
  if (colors && colors[0].length === 1) {
    colors = colors.map(n => n + n);
  }
  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {
    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
  }).join(', ')})` : '';
}
function intToHex(int) {
  const hex = int.toString(16);
  return hex.length === 1 ? `0${hex}` : hex;
}

/**
 * Returns an object with the type and values of a color.
 *
 * Note: Does not support rgb % values.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @returns {object} - A MUI color object: {type: string, values: number[]}
 */
function decomposeColor(color) {
  // Idempotent
  if (color.type) {
    return color;
  }
  if (color.charAt(0) === '#') {
    return decomposeColor(hexToRgb(color));
  }
  const marker = color.indexOf('(');
  const type = color.substring(0, marker);
  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Unsupported \`${color}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, _formatMuiErrorMessage2.default)(9, color));
  }
  let values = color.substring(marker + 1, color.length - 1);
  let colorSpace;
  if (type === 'color') {
    values = values.split(' ');
    colorSpace = values.shift();
    if (values.length === 4 && values[3].charAt(0) === '/') {
      values[3] = values[3].slice(1);
    }
    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, _formatMuiErrorMessage2.default)(10, colorSpace));
    }
  } else {
    values = values.split(',');
  }
  values = values.map(value => parseFloat(value));
  return {
    type,
    values,
    colorSpace
  };
}

/**
 * Returns a channel created from the input color.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @returns {string} - The channel for the color, that can be used in rgba or hsla colors
 */
const colorChannel = color => {
  const decomposedColor = decomposeColor(color);
  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? `${val}%` : val).join(' ');
};
colorManipulator.colorChannel = colorChannel;
const private_safeColorChannel = (color, warning) => {
  try {
    return colorChannel(color);
  } catch (error) {
    if (warning && process.env.NODE_ENV !== 'production') {
      console.warn(warning);
    }
    return color;
  }
};

/**
 * Converts a color object with type and values to a string.
 * @param {object} color - Decomposed color
 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'
 * @param {array} color.values - [n,n,n] or [n,n,n,n]
 * @returns {string} A CSS color string
 */
colorManipulator.private_safeColorChannel = private_safeColorChannel;
function recomposeColor(color) {
  const {
    type,
    colorSpace
  } = color;
  let {
    values
  } = color;
  if (type.indexOf('rgb') !== -1) {
    // Only convert the first 3 values to int (i.e. not alpha)
    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);
  } else if (type.indexOf('hsl') !== -1) {
    values[1] = `${values[1]}%`;
    values[2] = `${values[2]}%`;
  }
  if (type.indexOf('color') !== -1) {
    values = `${colorSpace} ${values.join(' ')}`;
  } else {
    values = `${values.join(', ')}`;
  }
  return `${type}(${values})`;
}

/**
 * Converts a color from CSS rgb format to CSS hex format.
 * @param {string} color - RGB color, i.e. rgb(n, n, n)
 * @returns {string} A CSS rgb color string, i.e. #nnnnnn
 */
function rgbToHex(color) {
  // Idempotent
  if (color.indexOf('#') === 0) {
    return color;
  }
  const {
    values
  } = decomposeColor(color);
  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;
}

/**
 * Converts a color from hsl format to rgb format.
 * @param {string} color - HSL color values
 * @returns {string} rgb color values
 */
function hslToRgb(color) {
  color = decomposeColor(color);
  const {
    values
  } = color;
  const h = values[0];
  const s = values[1] / 100;
  const l = values[2] / 100;
  const a = s * Math.min(l, 1 - l);
  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
  let type = 'rgb';
  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
  if (color.type === 'hsla') {
    type += 'a';
    rgb.push(values[3]);
  }
  return recomposeColor({
    type,
    values: rgb
  });
}
/**
 * The relative brightness of any point in a color space,
 * normalized to 0 for darkest black and 1 for lightest white.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @returns {number} The relative brightness of the color in the range 0 - 1
 */
function getLuminance(color) {
  color = decomposeColor(color);
  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;
  rgb = rgb.map(val => {
    if (color.type !== 'color') {
      val /= 255; // normalized
    }
    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
  });

  // Truncate at 3 digits
  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
}

/**
 * Calculates the contrast ratio between two colors.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {number} A contrast ratio value in the range 0 - 21.
 */
function getContrastRatio(foreground, background) {
  const lumA = getLuminance(foreground);
  const lumB = getLuminance(background);
  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
}

/**
 * Sets the absolute transparency of a color.
 * Any existing alpha values are overwritten.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} value - value to set the alpha channel to in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */
function alpha(color, value) {
  color = decomposeColor(color);
  value = clampWrapper(value);
  if (color.type === 'rgb' || color.type === 'hsl') {
    color.type += 'a';
  }
  if (color.type === 'color') {
    color.values[3] = `/${value}`;
  } else {
    color.values[3] = value;
  }
  return recomposeColor(color);
}
function private_safeAlpha(color, value, warning) {
  try {
    return alpha(color, value);
  } catch (error) {
    if (warning && process.env.NODE_ENV !== 'production') {
      console.warn(warning);
    }
    return color;
  }
}

/**
 * Darkens a color.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */
function darken(color, coefficient) {
  color = decomposeColor(color);
  coefficient = clampWrapper(coefficient);
  if (color.type.indexOf('hsl') !== -1) {
    color.values[2] *= 1 - coefficient;
  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {
    for (let i = 0; i < 3; i += 1) {
      color.values[i] *= 1 - coefficient;
    }
  }
  return recomposeColor(color);
}
function private_safeDarken(color, coefficient, warning) {
  try {
    return darken(color, coefficient);
  } catch (error) {
    if (warning && process.env.NODE_ENV !== 'production') {
      console.warn(warning);
    }
    return color;
  }
}

/**
 * Lightens a color.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */
function lighten(color, coefficient) {
  color = decomposeColor(color);
  coefficient = clampWrapper(coefficient);
  if (color.type.indexOf('hsl') !== -1) {
    color.values[2] += (100 - color.values[2]) * coefficient;
  } else if (color.type.indexOf('rgb') !== -1) {
    for (let i = 0; i < 3; i += 1) {
      color.values[i] += (255 - color.values[i]) * coefficient;
    }
  } else if (color.type.indexOf('color') !== -1) {
    for (let i = 0; i < 3; i += 1) {
      color.values[i] += (1 - color.values[i]) * coefficient;
    }
  }
  return recomposeColor(color);
}
function private_safeLighten(color, coefficient, warning) {
  try {
    return lighten(color, coefficient);
  } catch (error) {
    if (warning && process.env.NODE_ENV !== 'production') {
      console.warn(warning);
    }
    return color;
  }
}

/**
 * Darken or lighten a color, depending on its luminance.
 * Light colors are darkened, dark colors are lightened.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */
function emphasize(color, coefficient = 0.15) {
  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
}
function private_safeEmphasize(color, coefficient, warning) {
  try {
    return emphasize(color, coefficient);
  } catch (error) {
    if (warning && process.env.NODE_ENV !== 'production') {
      console.warn(warning);
    }
    return color;
  }
}

/**
 * Blend a transparent overlay color with a background color, resulting in a single
 * RGB color.
 * @param {string} background - CSS color
 * @param {string} overlay - CSS color
 * @param {number} opacity - Opacity multiplier in the range 0 - 1
 * @param {number} [gamma=1.0] - Gamma correction factor. For gamma-correct blending, 2.2 is usual.
 */
function blend(background, overlay, opacity, gamma = 1.0) {
  const blendChannel = (b, o) => Math.round((b ** (1 / gamma) * (1 - opacity) + o ** (1 / gamma) * opacity) ** gamma);
  const backgroundColor = decomposeColor(background);
  const overlayColor = decomposeColor(overlay);
  const rgb = [blendChannel(backgroundColor.values[0], overlayColor.values[0]), blendChannel(backgroundColor.values[1], overlayColor.values[1]), blendChannel(backgroundColor.values[2], overlayColor.values[2])];
  return recomposeColor({
    type: 'rgb',
    values: rgb
  });
}

const _excluded$f = ["mode", "contrastThreshold", "tonalOffset"];
const light = {
  // The colors used to style the text.
  text: {
    // The most important text.
    primary: 'rgba(0, 0, 0, 0.87)',
    // Secondary text.
    secondary: 'rgba(0, 0, 0, 0.6)',
    // Disabled text have even lower visual prominence.
    disabled: 'rgba(0, 0, 0, 0.38)'
  },
  // The color used to divide different elements.
  divider: 'rgba(0, 0, 0, 0.12)',
  // The background colors used to style the surfaces.
  // Consistency between these values is important.
  background: {
    paper: common.white,
    default: common.white
  },
  // The colors used to style the action elements.
  action: {
    // The color of an active action like an icon button.
    active: 'rgba(0, 0, 0, 0.54)',
    // The color of an hovered action.
    hover: 'rgba(0, 0, 0, 0.04)',
    hoverOpacity: 0.04,
    // The color of a selected action.
    selected: 'rgba(0, 0, 0, 0.08)',
    selectedOpacity: 0.08,
    // The color of a disabled action.
    disabled: 'rgba(0, 0, 0, 0.26)',
    // The background color of a disabled action.
    disabledBackground: 'rgba(0, 0, 0, 0.12)',
    disabledOpacity: 0.38,
    focus: 'rgba(0, 0, 0, 0.12)',
    focusOpacity: 0.12,
    activatedOpacity: 0.12
  }
};
const dark = {
  text: {
    primary: common.white,
    secondary: 'rgba(255, 255, 255, 0.7)',
    disabled: 'rgba(255, 255, 255, 0.5)',
    icon: 'rgba(255, 255, 255, 0.5)'
  },
  divider: 'rgba(255, 255, 255, 0.12)',
  background: {
    paper: '#121212',
    default: '#121212'
  },
  action: {
    active: common.white,
    hover: 'rgba(255, 255, 255, 0.08)',
    hoverOpacity: 0.08,
    selected: 'rgba(255, 255, 255, 0.16)',
    selectedOpacity: 0.16,
    disabled: 'rgba(255, 255, 255, 0.3)',
    disabledBackground: 'rgba(255, 255, 255, 0.12)',
    disabledOpacity: 0.38,
    focus: 'rgba(255, 255, 255, 0.12)',
    focusOpacity: 0.12,
    activatedOpacity: 0.24
  }
};
function addLightOrDark(intent, direction, shade, tonalOffset) {
  const tonalOffsetLight = tonalOffset.light || tonalOffset;
  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
  if (!intent[direction]) {
    if (intent.hasOwnProperty(shade)) {
      intent[direction] = intent[shade];
    } else if (direction === 'light') {
      intent.light = lighten_1(intent.main, tonalOffsetLight);
    } else if (direction === 'dark') {
      intent.dark = darken_1(intent.main, tonalOffsetDark);
    }
  }
}
function getDefaultPrimary(mode = 'light') {
  if (mode === 'dark') {
    return {
      main: blue[200],
      light: blue[50],
      dark: blue[400]
    };
  }
  return {
    main: blue[700],
    light: blue[400],
    dark: blue[800]
  };
}
function getDefaultSecondary(mode = 'light') {
  if (mode === 'dark') {
    return {
      main: purple[200],
      light: purple[50],
      dark: purple[400]
    };
  }
  return {
    main: purple[500],
    light: purple[300],
    dark: purple[700]
  };
}
function getDefaultError(mode = 'light') {
  if (mode === 'dark') {
    return {
      main: red[500],
      light: red[300],
      dark: red[700]
    };
  }
  return {
    main: red[700],
    light: red[400],
    dark: red[800]
  };
}
function getDefaultInfo(mode = 'light') {
  if (mode === 'dark') {
    return {
      main: lightBlue[400],
      light: lightBlue[300],
      dark: lightBlue[700]
    };
  }
  return {
    main: lightBlue[700],
    light: lightBlue[500],
    dark: lightBlue[900]
  };
}
function getDefaultSuccess(mode = 'light') {
  if (mode === 'dark') {
    return {
      main: green[400],
      light: green[300],
      dark: green[700]
    };
  }
  return {
    main: green[800],
    light: green[500],
    dark: green[900]
  };
}
function getDefaultWarning(mode = 'light') {
  if (mode === 'dark') {
    return {
      main: orange[400],
      light: orange[300],
      dark: orange[700]
    };
  }
  return {
    main: '#ed6c02',
    // closest to orange[800] that pass 3:1.
    light: orange[500],
    dark: orange[900]
  };
}
function createPalette(palette) {
  const {
      mode = 'light',
      contrastThreshold = 3,
      tonalOffset = 0.2
    } = palette,
    other = _objectWithoutPropertiesLoose$2(palette, _excluded$f);
  const primary = palette.primary || getDefaultPrimary(mode);
  const secondary = palette.secondary || getDefaultSecondary(mode);
  const error = palette.error || getDefaultError(mode);
  const info = palette.info || getDefaultInfo(mode);
  const success = palette.success || getDefaultSuccess(mode);
  const warning = palette.warning || getDefaultWarning(mode);

  // Use the same logic as
  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54
  function getContrastText(background) {
    const contrastText = getContrastRatio_1(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
    if (process.env.NODE_ENV !== 'production') {
      const contrast = getContrastRatio_1(background, contrastText);
      if (contrast < 3) {
        console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\n'));
      }
    }
    return contrastText;
  }
  const augmentColor = ({
    color,
    name,
    mainShade = 500,
    lightShade = 300,
    darkShade = 700
  }) => {
    color = _extends$i({}, color);
    if (!color.main && color[mainShade]) {
      color.main = color[mainShade];
    }
    if (!color.hasOwnProperty('main')) {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : formatMuiErrorMessage$1(11, name ? ` (${name})` : '', mainShade));
    }
    if (typeof color.main !== 'string') {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : formatMuiErrorMessage$1(12, name ? ` (${name})` : '', JSON.stringify(color.main)));
    }
    addLightOrDark(color, 'light', lightShade, tonalOffset);
    addLightOrDark(color, 'dark', darkShade, tonalOffset);
    if (!color.contrastText) {
      color.contrastText = getContrastText(color.main);
    }
    return color;
  };
  const modes = {
    dark,
    light
  };
  if (process.env.NODE_ENV !== 'production') {
    if (!modes[mode]) {
      console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
    }
  }
  const paletteOutput = deepmerge$1(_extends$i({
    // A collection of common colors.
    common: _extends$i({}, common),
    // prevent mutable object.
    // The palette mode, can be light or dark.
    mode,
    // The colors used to represent primary interface elements for a user.
    primary: augmentColor({
      color: primary,
      name: 'primary'
    }),
    // The colors used to represent secondary interface elements for a user.
    secondary: augmentColor({
      color: secondary,
      name: 'secondary',
      mainShade: 'A400',
      lightShade: 'A200',
      darkShade: 'A700'
    }),
    // The colors used to represent interface elements that the user should be made aware of.
    error: augmentColor({
      color: error,
      name: 'error'
    }),
    // The colors used to represent potentially dangerous actions or important messages.
    warning: augmentColor({
      color: warning,
      name: 'warning'
    }),
    // The colors used to present information to the user that is neutral and not necessarily important.
    info: augmentColor({
      color: info,
      name: 'info'
    }),
    // The colors used to indicate the successful completion of an action that user triggered.
    success: augmentColor({
      color: success,
      name: 'success'
    }),
    // The grey colors.
    grey,
    // Used by `getContrastText()` to maximize the contrast between
    // the background and the text.
    contrastThreshold,
    // Takes a background color and returns the text color that maximizes the contrast.
    getContrastText,
    // Generate a rich color object.
    augmentColor,
    // Used by the functions below to shift a color's luminance by approximately
    // two indexes within its tonal palette.
    // E.g., shift from Red 500 to Red 300 or Red 700.
    tonalOffset
  }, modes[mode]), other);
  return paletteOutput;
}

const _excluded$e = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
function round$1(value) {
  return Math.round(value * 1e5) / 1e5;
}
const caseAllCaps = {
  textTransform: 'uppercase'
};
const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';

/**
 * @see @link{https://m2.material.io/design/typography/the-type-system.html}
 * @see @link{https://m2.material.io/design/typography/understanding-typography.html}
 */
function createTypography(palette, typography) {
  const _ref = typeof typography === 'function' ? typography(palette) : typography,
    {
      fontFamily = defaultFontFamily,
      // The default font size of the Material Specification.
      fontSize = 14,
      // px
      fontWeightLight = 300,
      fontWeightRegular = 400,
      fontWeightMedium = 500,
      fontWeightBold = 700,
      // Tell MUI what's the font-size on the html element.
      // 16px is the default font-size used by browsers.
      htmlFontSize = 16,
      // Apply the CSS properties to all the variants.
      allVariants,
      pxToRem: pxToRem2
    } = _ref,
    other = _objectWithoutPropertiesLoose$2(_ref, _excluded$e);
  if (process.env.NODE_ENV !== 'production') {
    if (typeof fontSize !== 'number') {
      console.error('MUI: `fontSize` is required to be a number.');
    }
    if (typeof htmlFontSize !== 'number') {
      console.error('MUI: `htmlFontSize` is required to be a number.');
    }
  }
  const coef = fontSize / 14;
  const pxToRem = pxToRem2 || (size => `${size / htmlFontSize * coef}rem`);
  const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends$i({
    fontFamily,
    fontWeight,
    fontSize: pxToRem(size),
    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
    lineHeight
  }, fontFamily === defaultFontFamily ? {
    letterSpacing: `${round$1(letterSpacing / size)}em`
  } : {}, casing, allVariants);
  const variants = {
    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
    // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
    inherit: {
      fontFamily: 'inherit',
      fontWeight: 'inherit',
      fontSize: 'inherit',
      lineHeight: 'inherit',
      letterSpacing: 'inherit'
    }
  };
  return deepmerge$1(_extends$i({
    htmlFontSize,
    pxToRem,
    fontFamily,
    fontSize,
    fontWeightLight,
    fontWeightRegular,
    fontWeightMedium,
    fontWeightBold
  }, variants), other, {
    clone: false // No need to clone deep
  });
}

const shadowKeyUmbraOpacity = 0.2;
const shadowKeyPenumbraOpacity = 0.14;
const shadowAmbientShadowOpacity = 0.12;
function createShadow(...px) {
  return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(',');
}

// Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss
const shadows = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];

const _excluded$d = ["duration", "easing", "delay"];
// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
// to learn the context in which each easing should be used.
const easing = {
  // This is the most common easing curve.
  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
  // Objects enter the screen at full velocity from off-screen and
  // slowly decelerate to a resting point.
  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
  // The sharp curve is used by objects that may return to the screen at any time.
  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
};

// Follow https://m2.material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
// to learn when use what timing
const duration = {
  shortest: 150,
  shorter: 200,
  short: 250,
  // most basic recommended timing
  standard: 300,
  // this is to be used in complex animations
  complex: 375,
  // recommended when something is entering screen
  enteringScreen: 225,
  // recommended when something is leaving screen
  leavingScreen: 195
};
function formatMs(milliseconds) {
  return `${Math.round(milliseconds)}ms`;
}
function getAutoHeightDuration(height) {
  if (!height) {
    return 0;
  }
  const constant = height / 36;

  // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10
  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
}
function createTransitions(inputTransitions) {
  const mergedEasing = _extends$i({}, easing, inputTransitions.easing);
  const mergedDuration = _extends$i({}, duration, inputTransitions.duration);
  const create = (props = ['all'], options = {}) => {
    const {
        duration: durationOption = mergedDuration.standard,
        easing: easingOption = mergedEasing.easeInOut,
        delay = 0
      } = options,
      other = _objectWithoutPropertiesLoose$2(options, _excluded$d);
    if (process.env.NODE_ENV !== 'production') {
      const isString = value => typeof value === 'string';
      // IE11 support, replace with Number.isNaN
      // eslint-disable-next-line no-restricted-globals
      const isNumber = value => !isNaN(parseFloat(value));
      if (!isString(props) && !Array.isArray(props)) {
        console.error('MUI: Argument "props" must be a string or Array.');
      }
      if (!isNumber(durationOption) && !isString(durationOption)) {
        console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
      }
      if (!isString(easingOption)) {
        console.error('MUI: Argument "easing" must be a string.');
      }
      if (!isNumber(delay) && !isString(delay)) {
        console.error('MUI: Argument "delay" must be a number or a string.');
      }
      if (typeof options !== 'object') {
        console.error(['MUI: Secong argument of transition.create must be an object.', "Arguments should be either `create('prop1', options)` or `create(['prop1', 'prop2'], options)`"].join('\n'));
      }
      if (Object.keys(other).length !== 0) {
        console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(',')}].`);
      }
    }
    return (Array.isArray(props) ? props : [props]).map(animatedProp => `${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`).join(',');
  };
  return _extends$i({
    getAutoHeightDuration,
    create
  }, inputTransitions, {
    easing: mergedEasing,
    duration: mergedDuration
  });
}

// We need to centralize the zIndex definitions as they work
// like global values in the browser.
const zIndex = {
  mobileStepper: 1000,
  fab: 1050,
  speedDial: 1050,
  appBar: 1100,
  drawer: 1200,
  modal: 1300,
  snackbar: 1400,
  tooltip: 1500
};

const _excluded$c = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
function createTheme(options = {}, ...args) {
  const {
      mixins: mixinsInput = {},
      palette: paletteInput = {},
      transitions: transitionsInput = {},
      typography: typographyInput = {}
    } = options,
    other = _objectWithoutPropertiesLoose$2(options, _excluded$c);
  if (options.vars) {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.` : formatMuiErrorMessage$1(18));
  }
  const palette = createPalette(paletteInput);
  const systemTheme = createTheme$2(options);
  let muiTheme = deepmerge$1(systemTheme, {
    mixins: createMixins(systemTheme.breakpoints, mixinsInput),
    palette,
    // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
    shadows: shadows.slice(),
    typography: createTypography(palette, typographyInput),
    transitions: createTransitions(transitionsInput),
    zIndex: _extends$i({}, zIndex)
  });
  muiTheme = deepmerge$1(muiTheme, other);
  muiTheme = args.reduce((acc, argument) => deepmerge$1(acc, argument), muiTheme);
  if (process.env.NODE_ENV !== 'production') {
    // TODO v6: Refactor to use globalStateClassesMapping from @mui/utils once `readOnly` state class is used in Rating component.
    const stateClasses = ['active', 'checked', 'completed', 'disabled', 'error', 'expanded', 'focused', 'focusVisible', 'required', 'selected'];
    const traverse = (node, component) => {
      let key;

      // eslint-disable-next-line guard-for-in, no-restricted-syntax
      for (key in node) {
        const child = node[key];
        if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
          if (process.env.NODE_ENV !== 'production') {
            const stateClass = generateUtilityClass('', key);
            console.error([`MUI: The \`${component}\` component increases ` + `the CSS specificity of the \`${key}\` internal state.`, 'You can not override it like this: ', JSON.stringify(node, null, 2), '', `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
              root: {
                [`&.${stateClass}`]: child
              }
            }, null, 2), '', 'https://mui.com/r/state-classes-guide'].join('\n'));
          }
          // Remove the style to prevent global conflicts.
          node[key] = {};
        }
      }
    };
    Object.keys(muiTheme.components).forEach(component => {
      const styleOverrides = muiTheme.components[component].styleOverrides;
      if (styleOverrides && component.indexOf('Mui') === 0) {
        traverse(styleOverrides, component);
      }
    });
  }
  muiTheme.unstable_sxConfig = _extends$i({}, defaultSxConfig, other == null ? void 0 : other.unstable_sxConfig);
  muiTheme.unstable_sx = function sx(props) {
    return styleFunctionSx$1({
      sx: props,
      theme: this
    });
  };
  return muiTheme;
}

const defaultTheme$1 = createTheme();

function useTheme() {
  const theme = useTheme$1(defaultTheme$1);
  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React$1.useDebugValue(theme);
  }
  return theme[THEME_ID] || theme;
}

var createStyled$1 = {};

var _extends$h = {exports: {}};

var hasRequired_extends;

function require_extends () {
	if (hasRequired_extends) return _extends$h.exports;
	hasRequired_extends = 1;
	(function (module) {
		function _extends() {
		  return module.exports = _extends = Object.assign ? Object.assign.bind() : function (n) {
		    for (var e = 1; e < arguments.length; e++) {
		      var t = arguments[e];
		      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
		    }
		    return n;
		  }, module.exports.__esModule = true, module.exports["default"] = module.exports, _extends.apply(null, arguments);
		}
		module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (_extends$h));
	return _extends$h.exports;
}

var objectWithoutPropertiesLoose = {exports: {}};

var hasRequiredObjectWithoutPropertiesLoose;

function requireObjectWithoutPropertiesLoose () {
	if (hasRequiredObjectWithoutPropertiesLoose) return objectWithoutPropertiesLoose.exports;
	hasRequiredObjectWithoutPropertiesLoose = 1;
	(function (module) {
		function _objectWithoutPropertiesLoose(r, e) {
		  if (null == r) return {};
		  var t = {};
		  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
		    if (e.includes(n)) continue;
		    t[n] = r[n];
		  }
		  return t;
		}
		module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (objectWithoutPropertiesLoose));
	return objectWithoutPropertiesLoose.exports;
}

var require$$1 = /*@__PURE__*/getAugmentedNamespace(styledEngine);

var require$$4 = /*@__PURE__*/getAugmentedNamespace(deepmerge);

var require$$5 = /*@__PURE__*/getAugmentedNamespace(capitalize);

var require$$6 = /*@__PURE__*/getAugmentedNamespace(getDisplayName);

var require$$7 = /*@__PURE__*/getAugmentedNamespace(createTheme$1);

var require$$8 = /*@__PURE__*/getAugmentedNamespace(styleFunctionSx);

var _interopRequireDefault = interopRequireDefaultExports;
Object.defineProperty(createStyled$1, "__esModule", {
  value: true
});
var _default = createStyled$1.default = createStyled;
createStyled$1.shouldForwardProp = shouldForwardProp;
createStyled$1.systemDefaultTheme = void 0;
var _extends2 = _interopRequireDefault(require_extends());
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
var _styledEngine = _interopRequireWildcard(require$$1);
var _deepmerge = require$$4;
var _capitalize = _interopRequireDefault(require$$5);
var _getDisplayName = _interopRequireDefault(require$$6);
var _createTheme = _interopRequireDefault(require$$7);
var _styleFunctionSx = _interopRequireDefault(require$$8);
const _excluded$b = ["ownerState"],
  _excluded2 = ["variants"],
  _excluded3 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
/* eslint-disable no-underscore-dangle */
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function isEmpty$1(obj) {
  return Object.keys(obj).length === 0;
}

// https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40
function isStringTag(tag) {
  return typeof tag === 'string' &&
  // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96;
}

// Update /system/styled/#api in case if this changes
function shouldForwardProp(prop) {
  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
}
const systemDefaultTheme = createStyled$1.systemDefaultTheme = (0, _createTheme.default)();
const lowercaseFirstLetter = string => {
  if (!string) {
    return string;
  }
  return string.charAt(0).toLowerCase() + string.slice(1);
};
function resolveTheme({
  defaultTheme,
  theme,
  themeId
}) {
  return isEmpty$1(theme) ? defaultTheme : theme[themeId] || theme;
}
function defaultOverridesResolver(slot) {
  if (!slot) {
    return null;
  }
  return (props, styles) => styles[slot];
}
function processStyleArg(callableStyle, _ref) {
  let {
      ownerState
    } = _ref,
    props = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded$b);
  const resolvedStylesArg = typeof callableStyle === 'function' ? callableStyle((0, _extends2.default)({
    ownerState
  }, props)) : callableStyle;
  if (Array.isArray(resolvedStylesArg)) {
    return resolvedStylesArg.flatMap(resolvedStyle => processStyleArg(resolvedStyle, (0, _extends2.default)({
      ownerState
    }, props)));
  }
  if (!!resolvedStylesArg && typeof resolvedStylesArg === 'object' && Array.isArray(resolvedStylesArg.variants)) {
    const {
        variants = []
      } = resolvedStylesArg,
      otherStyles = (0, _objectWithoutPropertiesLoose2.default)(resolvedStylesArg, _excluded2);
    let result = otherStyles;
    variants.forEach(variant => {
      let isMatch = true;
      if (typeof variant.props === 'function') {
        isMatch = variant.props((0, _extends2.default)({
          ownerState
        }, props, ownerState));
      } else {
        Object.keys(variant.props).forEach(key => {
          if ((ownerState == null ? void 0 : ownerState[key]) !== variant.props[key] && props[key] !== variant.props[key]) {
            isMatch = false;
          }
        });
      }
      if (isMatch) {
        if (!Array.isArray(result)) {
          result = [result];
        }
        result.push(typeof variant.style === 'function' ? variant.style((0, _extends2.default)({
          ownerState
        }, props, ownerState)) : variant.style);
      }
    });
    return result;
  }
  return resolvedStylesArg;
}
function createStyled(input = {}) {
  const {
    themeId,
    defaultTheme = systemDefaultTheme,
    rootShouldForwardProp = shouldForwardProp,
    slotShouldForwardProp = shouldForwardProp
  } = input;
  const systemSx = props => {
    return (0, _styleFunctionSx.default)((0, _extends2.default)({}, props, {
      theme: resolveTheme((0, _extends2.default)({}, props, {
        defaultTheme,
        themeId
      }))
    }));
  };
  systemSx.__mui_systemSx = true;
  return (tag, inputOptions = {}) => {
    // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.
    (0, _styledEngine.internal_processStyles)(tag, styles => styles.filter(style => !(style != null && style.__mui_systemSx)));
    const {
        name: componentName,
        slot: componentSlot,
        skipVariantsResolver: inputSkipVariantsResolver,
        skipSx: inputSkipSx,
        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        overridesResolver = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
      } = inputOptions,
      options = (0, _objectWithoutPropertiesLoose2.default)(inputOptions, _excluded3);

    // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver :
    // TODO v6: remove `Root` in the next major release
    // For more details: https://github.com/mui/material-ui/pull/37908
    componentSlot && componentSlot !== 'Root' && componentSlot !== 'root' || false;
    const skipSx = inputSkipSx || false;
    let label;
    if (process.env.NODE_ENV !== 'production') {
      if (componentName) {
        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
      }
    }
    let shouldForwardPropOption = shouldForwardProp;

    // TODO v6: remove `Root` in the next major release
    // For more details: https://github.com/mui/material-ui/pull/37908
    if (componentSlot === 'Root' || componentSlot === 'root') {
      shouldForwardPropOption = rootShouldForwardProp;
    } else if (componentSlot) {
      // any other slot specified
      shouldForwardPropOption = slotShouldForwardProp;
    } else if (isStringTag(tag)) {
      // for string (html) tag, preserve the behavior in emotion & styled-components.
      shouldForwardPropOption = undefined;
    }
    const defaultStyledResolver = (0, _styledEngine.default)(tag, (0, _extends2.default)({
      shouldForwardProp: shouldForwardPropOption,
      label
    }, options));
    const transformStyleArg = stylesArg => {
      // On the server Emotion doesn't use React.forwardRef for creating components, so the created
      // component stays as a function. This condition makes sure that we do not interpolate functions
      // which are basically components used as a selectors.
      if (typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg || (0, _deepmerge.isPlainObject)(stylesArg)) {
        return props => processStyleArg(stylesArg, (0, _extends2.default)({}, props, {
          theme: resolveTheme({
            theme: props.theme,
            defaultTheme,
            themeId
          })
        }));
      }
      return stylesArg;
    };
    const muiStyledResolver = (styleArg, ...expressions) => {
      let transformedStyleArg = transformStyleArg(styleArg);
      const expressionsWithDefaultTheme = expressions ? expressions.map(transformStyleArg) : [];
      if (componentName && overridesResolver) {
        expressionsWithDefaultTheme.push(props => {
          const theme = resolveTheme((0, _extends2.default)({}, props, {
            defaultTheme,
            themeId
          }));
          if (!theme.components || !theme.components[componentName] || !theme.components[componentName].styleOverrides) {
            return null;
          }
          const styleOverrides = theme.components[componentName].styleOverrides;
          const resolvedStyleOverrides = {};
          // TODO: v7 remove iteration and use `resolveStyleArg(styleOverrides[slot])` directly
          Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
            resolvedStyleOverrides[slotKey] = processStyleArg(slotStyle, (0, _extends2.default)({}, props, {
              theme
            }));
          });
          return overridesResolver(props, resolvedStyleOverrides);
        });
      }
      if (componentName && !skipVariantsResolver) {
        expressionsWithDefaultTheme.push(props => {
          var _theme$components;
          const theme = resolveTheme((0, _extends2.default)({}, props, {
            defaultTheme,
            themeId
          }));
          const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[componentName]) == null ? void 0 : _theme$components.variants;
          return processStyleArg({
            variants: themeVariants
          }, (0, _extends2.default)({}, props, {
            theme
          }));
        });
      }
      if (!skipSx) {
        expressionsWithDefaultTheme.push(systemSx);
      }
      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
        const placeholders = new Array(numOfCustomFnsApplied).fill('');
        // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
        transformedStyleArg = [...styleArg, ...placeholders];
        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
      }
      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
      if (process.env.NODE_ENV !== 'production') {
        let displayName;
        if (componentName) {
          displayName = `${componentName}${(0, _capitalize.default)(componentSlot || '')}`;
        }
        if (displayName === undefined) {
          displayName = `Styled(${(0, _getDisplayName.default)(tag)})`;
        }
        Component.displayName = displayName;
      }
      if (tag.muiName) {
        Component.muiName = tag.muiName;
      }
      return Component;
    };
    if (defaultStyledResolver.withConfig) {
      muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
    }
    return muiStyledResolver;
  };
}

// copied from @mui/system/createStyled
function slotShouldForwardProp(prop) {
  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
}

const rootShouldForwardProp = prop => slotShouldForwardProp(prop) && prop !== 'classes';

const styled = _default({
  themeId: THEME_ID,
  defaultTheme: defaultTheme$1,
  rootShouldForwardProp
});

// Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61
const getOverlayAlpha = elevation => {
  let alphaValue;
  if (elevation < 1) {
    alphaValue = 5.11916 * elevation ** 2;
  } else {
    alphaValue = 4.5 * Math.log(elevation + 1) + 2;
  }
  return (alphaValue / 100).toFixed(2);
};

process.env.NODE_ENV !== "production" ? {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * @ignore
   */
  value: PropTypes.object.isRequired
} : void 0;
function useDefaultProps(params) {
  return useDefaultProps$1(params);
}

function _setPrototypeOf$1(t, e) {
  return _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
    return t.__proto__ = e, t;
  }, _setPrototypeOf$1(t, e);
}

function _inheritsLoose(t, o) {
  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf$1(t, o);
}

var config = {
  disabled: false
};

var timeoutsShape = process.env.NODE_ENV !== 'production' ? PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
  enter: PropTypes.number,
  exit: PropTypes.number,
  appear: PropTypes.number
}).isRequired]) : null;
process.env.NODE_ENV !== 'production' ? PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
  enter: PropTypes.string,
  exit: PropTypes.string,
  active: PropTypes.string
}), PropTypes.shape({
  enter: PropTypes.string,
  enterDone: PropTypes.string,
  enterActive: PropTypes.string,
  exit: PropTypes.string,
  exitDone: PropTypes.string,
  exitActive: PropTypes.string
})]) : null;

var TransitionGroupContext = React__default$1.createContext(null);

var forceReflow = function forceReflow(node) {
  return node.scrollTop;
};

var UNMOUNTED = 'unmounted';
var EXITED = 'exited';
var ENTERING = 'entering';
var ENTERED = 'entered';
var EXITING = 'exiting';
/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * ---
 *
 * **Note**: `Transition` is a platform-agnostic base component. If you're using
 * transitions in CSS, you'll probably want to use
 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
 * instead. It inherits all the features of `Transition`, but contains
 * additional features necessary to play nice with CSS transitions (hence the
 * name of the component).
 *
 * ---
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the
 * components. It's up to you to give meaning and effect to those states. For
 * example we can add styles to a component when it enters or exits:
 *
 * ```jsx
 * import { Transition } from 'react-transition-group';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 1 },
 *   entered:  { opacity: 1 },
 *   exiting:  { opacity: 0 },
 *   exited:  { opacity: 0 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {state => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component
 * begins the "Enter" stage. During this stage, the component will shift from
 * its current transition state, to `'entering'` for the duration of the
 * transition and then to the `'entered'` stage once it's complete. Let's take
 * the following example (we'll use the
 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <Transition in={inProp} timeout={500}>
 *         {state => (
 *           // ...
 *         )}
 *       </Transition>
 *       <button onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state
 * and stay there for 500ms (the value of `timeout`) before it finally switches
 * to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from
 * `'exiting'` to `'exited'`.
 */

var Transition = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Transition, _React$Component);

  function Transition(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;

    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }

    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }

  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;

    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }

    return null;
  } // getSnapshotBeforeUpdate(prevProps) {
  //   let nextStatus = null
  //   if (prevProps !== this.props) {
  //     const { status } = this.state
  //     if (this.props.in) {
  //       if (status !== ENTERING && status !== ENTERED) {
  //         nextStatus = ENTERING
  //       }
  //     } else {
  //       if (status === ENTERING || status === ENTERED) {
  //         nextStatus = EXITING
  //       }
  //     }
  //   }
  //   return { nextStatus }
  // }
  ;

  var _proto = Transition.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;

    if (prevProps !== this.props) {
      var status = this.state.status;

      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }

    this.updateStatus(false, nextStatus);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };

  _proto.getTimeouts = function getTimeouts() {
    var timeout = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout;

    if (timeout != null && typeof timeout !== 'number') {
      exit = timeout.exit;
      enter = timeout.enter; // TODO: remove fallback for next major

      appear = timeout.appear !== undefined ? timeout.appear : enter;
    }

    return {
      exit: exit,
      enter: enter,
      appear: appear
    };
  };

  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }

    if (nextStatus !== null) {
      // nextStatus will always be ENTERING or EXITING.
      this.cancelNextCallback();

      if (nextStatus === ENTERING) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM__default.findDOMNode(this); // https://github.com/reactjs/react-transition-group/pull/749
          // With unmountOnExit or mountOnEnter, the enter animation should happen at the transition between `exited` and `entering`.
          // To make the animation happen,  we have to separate each rendering and avoid being processed as batched.

          if (node) forceReflow(node);
        }

        this.performEnter(mounting);
      } else {
        this.performExit();
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };

  _proto.performEnter = function performEnter(mounting) {
    var _this2 = this;

    var enter = this.props.enter;
    var appearing = this.context ? this.context.isMounting : mounting;

    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM__default.findDOMNode(this), appearing],
        maybeNode = _ref2[0],
        maybeAppearing = _ref2[1];

    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
    // if we are mounting and running this it means appear _must_ be set

    if (!mounting && !enter || config.disabled) {
      this.safeSetState({
        status: ENTERED
      }, function () {
        _this2.props.onEntered(maybeNode);
      });
      return;
    }

    this.props.onEnter(maybeNode, maybeAppearing);
    this.safeSetState({
      status: ENTERING
    }, function () {
      _this2.props.onEntering(maybeNode, maybeAppearing);

      _this2.onTransitionEnd(enterTimeout, function () {
        _this2.safeSetState({
          status: ENTERED
        }, function () {
          _this2.props.onEntered(maybeNode, maybeAppearing);
        });
      });
    });
  };

  _proto.performExit = function performExit() {
    var _this3 = this;

    var exit = this.props.exit;
    var timeouts = this.getTimeouts();
    var maybeNode = this.props.nodeRef ? undefined : ReactDOM__default.findDOMNode(this); // no exit animation skip right to EXITED

    if (!exit || config.disabled) {
      this.safeSetState({
        status: EXITED
      }, function () {
        _this3.props.onExited(maybeNode);
      });
      return;
    }

    this.props.onExit(maybeNode);
    this.safeSetState({
      status: EXITING
    }, function () {
      _this3.props.onExiting(maybeNode);

      _this3.onTransitionEnd(timeouts.exit, function () {
        _this3.safeSetState({
          status: EXITED
        }, function () {
          _this3.props.onExited(maybeNode);
        });
      });
    });
  };

  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };

  _proto.safeSetState = function safeSetState(nextState, callback) {
    // This shouldn't be necessary, but there are weird race conditions with
    // setState callbacks and unmounting in testing, so always make sure that
    // we can cancel any pending setState callbacks after we unmount.
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };

  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;

    var active = true;

    this.nextCallback = function (event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };

    this.nextCallback.cancel = function () {
      active = false;
    };

    return this.nextCallback;
  };

  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
    this.setNextCallback(handler);
    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM__default.findDOMNode(this);
    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }

    if (this.props.addEndListener) {
      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
          maybeNode = _ref3[0],
          maybeNextCallback = _ref3[1];

      this.props.addEndListener(maybeNode, maybeNextCallback);
    }

    if (timeout != null) {
      setTimeout(this.nextCallback, timeout);
    }
  };

  _proto.render = function render() {
    var status = this.state.status;

    if (status === UNMOUNTED) {
      return null;
    }

    var _this$props = this.props,
        children = _this$props.children;
        _this$props.in;
        _this$props.mountOnEnter;
        _this$props.unmountOnExit;
        _this$props.appear;
        _this$props.enter;
        _this$props.exit;
        _this$props.timeout;
        _this$props.addEndListener;
        _this$props.onEnter;
        _this$props.onEntering;
        _this$props.onEntered;
        _this$props.onExit;
        _this$props.onExiting;
        _this$props.onExited;
        _this$props.nodeRef;
        var childProps = _objectWithoutPropertiesLoose$2(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

    return (
      /*#__PURE__*/
      // allows for nested Transitions
      React__default$1.createElement(TransitionGroupContext.Provider, {
        value: null
      }, typeof children === 'function' ? children(status, childProps) : React__default$1.cloneElement(React__default$1.Children.only(children), childProps))
    );
  };

  return Transition;
}(React__default$1.Component);

Transition.contextType = TransitionGroupContext;
Transition.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * A React reference to DOM element that need to transition:
   * https://stackoverflow.com/a/51127130/4671932
   *
   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
   *      (e.g. `onEnter`) because user already has direct access to the node.
   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
   *     (see
   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
   */
  nodeRef: PropTypes.shape({
    current: typeof Element === 'undefined' ? PropTypes.any : function (propValue, key, componentName, location, propFullName, secret) {
      var value = propValue[key];
      return PropTypes.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
    }
  }),

  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,

  /**
   * Show the component; triggers the enter or exit states
   */
  in: PropTypes.bool,

  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: PropTypes.bool,

  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: PropTypes.bool,

  /**
   * By default the child component does not perform the enter transition when
   * it first mounts, regardless of the value of `in`. If you want this
   * behavior, set both `appear` and `in` to `true`.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */
  appear: PropTypes.bool,

  /**
   * Enable or disable enter transitions.
   */
  enter: PropTypes.bool,

  /**
   * Enable or disable exit transitions.
   */
  exit: PropTypes.bool,

  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function timeout(props) {
    var pt = timeoutsShape;
    if (!props.addEndListener) pt = pt.isRequired;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return pt.apply(void 0, [props].concat(args));
  },

  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. Timeouts are still used as a fallback if provided.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: PropTypes.func,

  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: PropTypes.func,

  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: PropTypes.func,

  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: PropTypes.func,

  /**
   * Callback fired before the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: PropTypes.func,

  /**
   * Callback fired after the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: PropTypes.func,

  /**
   * Callback fired after the "exited" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: PropTypes.func
} : {}; // Name the function so it is clearer in the documentation

function noop() {}

Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;

const reflow = node => node.scrollTop;
function getTransitionProps(props, options) {
  var _style$transitionDura, _style$transitionTimi;
  const {
    timeout,
    easing,
    style = {}
  } = props;
  return {
    duration: (_style$transitionDura = style.transitionDuration) != null ? _style$transitionDura : typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,
    easing: (_style$transitionTimi = style.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing === 'object' ? easing[options.mode] : easing,
    delay: style.transitionDelay
  };
}

function getPaperUtilityClass(slot) {
  return generateUtilityClass('MuiPaper', slot);
}
generateUtilityClasses('MuiPaper', ['root', 'rounded', 'outlined', 'elevation', 'elevation0', 'elevation1', 'elevation2', 'elevation3', 'elevation4', 'elevation5', 'elevation6', 'elevation7', 'elevation8', 'elevation9', 'elevation10', 'elevation11', 'elevation12', 'elevation13', 'elevation14', 'elevation15', 'elevation16', 'elevation17', 'elevation18', 'elevation19', 'elevation20', 'elevation21', 'elevation22', 'elevation23', 'elevation24']);

const _excluded$a = ["className", "component", "elevation", "square", "variant"];
const useUtilityClasses$7 = ownerState => {
  const {
    square,
    elevation,
    variant,
    classes
  } = ownerState;
  const slots = {
    root: ['root', variant, !square && 'rounded', variant === 'elevation' && `elevation${elevation}`]
  };
  return composeClasses(slots, getPaperUtilityClass, classes);
};
const PaperRoot = styled('div', {
  name: 'MuiPaper',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, styles[ownerState.variant], !ownerState.square && styles.rounded, ownerState.variant === 'elevation' && styles[`elevation${ownerState.elevation}`]];
  }
})(({
  theme,
  ownerState
}) => {
  var _theme$vars$overlays;
  return _extends$i({
    backgroundColor: (theme.vars || theme).palette.background.paper,
    color: (theme.vars || theme).palette.text.primary,
    transition: theme.transitions.create('box-shadow')
  }, !ownerState.square && {
    borderRadius: theme.shape.borderRadius
  }, ownerState.variant === 'outlined' && {
    border: `1px solid ${(theme.vars || theme).palette.divider}`
  }, ownerState.variant === 'elevation' && _extends$i({
    boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
  }, !theme.vars && theme.palette.mode === 'dark' && {
    backgroundImage: `linear-gradient(${alpha_1('#fff', getOverlayAlpha(ownerState.elevation))}, ${alpha_1('#fff', getOverlayAlpha(ownerState.elevation))})`
  }, theme.vars && {
    backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
  }));
});
const Paper = /*#__PURE__*/React$1.forwardRef(function Paper(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: 'MuiPaper'
  });
  const {
      className,
      component = 'div',
      elevation = 1,
      square = false,
      variant = 'elevation'
    } = props,
    other = _objectWithoutPropertiesLoose$2(props, _excluded$a);
  const ownerState = _extends$i({}, props, {
    component,
    elevation,
    square,
    variant
  });
  const classes = useUtilityClasses$7(ownerState);
  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const theme = useTheme();
    if (theme.shadows[elevation] === undefined) {
      console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join('\n'));
    }
  }
  return /*#__PURE__*/jsxRuntimeExports.jsx(PaperRoot, _extends$i({
    as: component,
    ownerState: ownerState,
    className: clsx(classes.root, className),
    ref: ref
  }, other));
});
process.env.NODE_ENV !== "production" ? Paper.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * Shadow depth, corresponds to `dp` in the spec.
   * It accepts values between 0 and 24 inclusive.
   * @default 1
   */
  elevation: chainPropTypes(integerPropType, props => {
    const {
      elevation,
      variant
    } = props;
    if (elevation > 0 && variant === 'outlined') {
      return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
    }
    return null;
  }),
  /**
   * If `true`, rounded corners are disabled.
   * @default false
   */
  square: PropTypes.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * The variant to use.
   * @default 'elevation'
   */
  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['elevation', 'outlined']), PropTypes.string])
} : void 0;

function getTypographyUtilityClass(slot) {
  return generateUtilityClass('MuiTypography', slot);
}
generateUtilityClasses('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);

const _excluded$9 = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
const useUtilityClasses$6 = ownerState => {
  const {
    align,
    gutterBottom,
    noWrap,
    paragraph,
    variant,
    classes
  } = ownerState;
  const slots = {
    root: ['root', variant, ownerState.align !== 'inherit' && `align${capitalize$1(align)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']
  };
  return composeClasses(slots, getTypographyUtilityClass, classes);
};
const TypographyRoot = styled('span', {
  name: 'MuiTypography',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== 'inherit' && styles[`align${capitalize$1(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];
  }
})(({
  theme,
  ownerState
}) => _extends$i({
  margin: 0
}, ownerState.variant === 'inherit' && {
  // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
  font: 'inherit'
}, ownerState.variant !== 'inherit' && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {
  textAlign: ownerState.align
}, ownerState.noWrap && {
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
}, ownerState.gutterBottom && {
  marginBottom: '0.35em'
}, ownerState.paragraph && {
  marginBottom: 16
}));
const defaultVariantMapping = {
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  subtitle1: 'h6',
  subtitle2: 'h6',
  body1: 'p',
  body2: 'p',
  inherit: 'p'
};

// TODO v6: deprecate these color values in v5.x and remove the transformation in v6
const colorTransformations = {
  primary: 'primary.main',
  textPrimary: 'text.primary',
  secondary: 'secondary.main',
  textSecondary: 'text.secondary',
  error: 'error.main'
};
const transformDeprecatedColors = color => {
  return colorTransformations[color] || color;
};
const Typography = /*#__PURE__*/React$1.forwardRef(function Typography(inProps, ref) {
  const themeProps = useDefaultProps({
    props: inProps,
    name: 'MuiTypography'
  });
  const color = transformDeprecatedColors(themeProps.color);
  const props = extendSxProp(_extends$i({}, themeProps, {
    color
  }));
  const {
      align = 'inherit',
      className,
      component,
      gutterBottom = false,
      noWrap = false,
      paragraph = false,
      variant = 'body1',
      variantMapping = defaultVariantMapping
    } = props,
    other = _objectWithoutPropertiesLoose$2(props, _excluded$9);
  const ownerState = _extends$i({}, props, {
    align,
    color,
    className,
    component,
    gutterBottom,
    noWrap,
    paragraph,
    variant,
    variantMapping
  });
  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';
  const classes = useUtilityClasses$6(ownerState);
  return /*#__PURE__*/jsxRuntimeExports.jsx(TypographyRoot, _extends$i({
    as: Component,
    ref: ref,
    ownerState: ownerState,
    className: clsx(classes.root, className)
  }, other));
});
process.env.NODE_ENV !== "production" ? Typography.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Set the text-align on the component.
   * @default 'inherit'
   */
  align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),
  /**
   * The content of the component.
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * If `true`, the text will have a bottom margin.
   * @default false
   */
  gutterBottom: PropTypes.bool,
  /**
   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
   *
   * Note that text overflow can only happen with block or inline-block level elements
   * (the element needs to have a width in order to overflow).
   * @default false
   */
  noWrap: PropTypes.bool,
  /**
   * If `true`, the element will be a paragraph element.
   * @default false
   */
  paragraph: PropTypes.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * Applies the theme typography styles.
   * @default 'body1'
   */
  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string]),
  /**
   * The component maps the variant prop to a range of different HTML element types.
   * For instance, subtitle1 to `<h6>`.
   * If you wish to change that mapping, you can provide your own.
   * Alternatively, you can use the `component` prop.
   * @default {
   *   h1: 'h1',
   *   h2: 'h2',
   *   h3: 'h3',
   *   h4: 'h4',
   *   h5: 'h5',
   *   h6: 'h6',
   *   subtitle1: 'h6',
   *   subtitle2: 'h6',
   *   body1: 'p',
   *   body2: 'p',
   *   inherit: 'p',
   * }
   */
  variantMapping: PropTypes /* @typescript-to-proptypes-ignore */.object
} : void 0;

var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM

var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers

var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}

function getWindow(node) {
  if (node == null) {
    return window;
  }

  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }

  return node;
}

function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}

function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}

function isShadowRoot(node) {
  // IE 11 has no ShadowRoot
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }

  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// and applies them to the HTMLElements such as popper and arrow

function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function (name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name]; // arrow is optional + virtual elements

    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    } // Flow doesn't support to extend this property, but it's the most
    // effective way to apply styles to an HTMLElement
    // $FlowFixMe[cannot-write]


    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function (name) {
      var value = attributes[name];

      if (value === false) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? '' : value);
      }
    });
  });
}

function effect$2(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: '0',
      top: '0',
      margin: '0'
    },
    arrow: {
      position: 'absolute'
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;

  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }

  return function () {
    Object.keys(state.elements).forEach(function (name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

      var style = styleProperties.reduce(function (style, property) {
        style[property] = '';
        return style;
      }, {}); // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
} // eslint-disable-next-line import/no-unused-modules


var applyStyles$1 = {
  name: 'applyStyles',
  enabled: true,
  phase: 'write',
  fn: applyStyles,
  effect: effect$2,
  requires: ['computeStyles']
};

function getBasePlacement(placement) {
  return placement.split('-')[0];
}

var max = Math.max;
var min = Math.min;
var round = Math.round;

function getUAString() {
  var uaData = navigator.userAgentData;

  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function (item) {
      return item.brand + "/" + item.version;
    }).join(' ');
  }

  return navigator.userAgent;
}

function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }

  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }

  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;

  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }

  var _ref = isElement(element) ? getWindow(element) : window,
      visualViewport = _ref.visualViewport;

  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width: width,
    height: height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x: x,
    y: y
  };
}

// means it doesn't take into account transforms.

function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
  // Fixes https://github.com/popperjs/popper-core/issues/1223

  var width = element.offsetWidth;
  var height = element.offsetHeight;

  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }

  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }

  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: width,
    height: height
  };
}

function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


  return false;
}

function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}

function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
}

function getDocumentElement(element) {
  // $FlowFixMe[incompatible-return]: assume body is always available
  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
  element.document) || window.document).documentElement;
}

function getParentNode(element) {
  if (getNodeName(element) === 'html') {
    return element;
  }

  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || ( // DOM Element detected
    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element) // fallback

  );
}

function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle(element).position === 'fixed') {
    return null;
  }

  return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block


function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());

  if (isIE && isHTMLElement(element)) {
    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
    var elementCss = getComputedStyle(element);

    if (elementCss.position === 'fixed') {
      return null;
    }
  }

  var currentNode = getParentNode(element);

  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }

  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
    // create a containing block.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }

  return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.


function getOffsetParent(element) {
  var window = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);

  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }

  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
    return window;
  }

  return offsetParent || getContainingBlock(element) || window;
}

function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}

function within(min$1, value, max$1) {
  return max(min$1, min(value, max$1));
}
function withinMaxClamp(min, value, max) {
  var v = within(min, value, max);
  return v > max ? max : v;
}

function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

var toPaddingObject = function toPaddingObject(padding, state) {
  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
};

function arrow(_ref) {
  var _state$modifiersData$;

  var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';

  if (!arrowElement || !popperOffsets) {
    return;
  }

  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === 'y' ? top : left;
  var maxProp = axis === 'y' ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
  // outside of the popper bounds

  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = within(min, center, max); // Prevents breaking syntax highlighting...

  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}

function effect$1(_ref2) {
  var state = _ref2.state,
      options = _ref2.options;
  var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

  if (arrowElement == null) {
    return;
  } // CSS selector


  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);

    if (!arrowElement) {
      return;
    }
  }

  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }

  state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules


var arrow$1 = {
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: effect$1,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
};

function getVariation(placement) {
  return placement.split('-')[1];
}

var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

function roundOffsetsByDPR(_ref, win) {
  var x = _ref.x,
      y = _ref.y;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}

function mapToStyles(_ref2) {
  var _Object$assign2;

  var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      variation = _ref2.variation,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets,
      isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x,
      x = _offsets$x === void 0 ? 0 : _offsets$x,
      _offsets$y = offsets.y,
      y = _offsets$y === void 0 ? 0 : _offsets$y;

  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
    x: x,
    y: y
  }) : {
    x: x,
    y: y
  };

  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = left;
  var sideY = top;
  var win = window;

  if (adaptive) {
    var offsetParent = getOffsetParent(popper);
    var heightProp = 'clientHeight';
    var widthProp = 'clientWidth';

    if (offsetParent === getWindow(popper)) {
      offsetParent = getDocumentElement(popper);

      if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
        heightProp = 'scrollHeight';
        widthProp = 'scrollWidth';
      }
    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


    offsetParent = offsetParent;

    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
      offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }

    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
      offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }

  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);

  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x: x,
    y: y
  }, getWindow(popper)) : {
    x: x,
    y: y
  };

  x = _ref4.x;
  y = _ref4.y;

  if (gpuAcceleration) {
    var _Object$assign;

    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }

  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}

function computeStyles(_ref5) {
  var state = _ref5.state,
      options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration,
    isFixed: state.options.strategy === 'fixed'
  };

  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive,
      roundOffsets: roundOffsets
    })));
  }

  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false,
      roundOffsets: roundOffsets
    })));
  }

  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-placement': state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


var computeStyles$1 = {
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
};

var passive = {
  passive: true
};

function effect(_ref) {
  var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
  var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
  var window = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }

  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }

  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
} // eslint-disable-next-line import/no-unused-modules


var eventListeners = {
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: effect,
  data: {}
};

var hash$1 = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash$1[matched];
  });
}

var hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return hash[matched];
  });
}

function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}

function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  // Popper 1 is broken in this case and never had a bug report so let's assume
  // it's not an issue. I don't think anyone ever specifies width on <html>
  // anyway.
  // Browsers where the left scrollbar doesn't cause an issue report `0` for
  // this (e.g. Edge 2019, IE11, Safari)
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;

  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();

    if (layoutViewport || !layoutViewport && strategy === 'fixed') {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }

  return {
    width: width,
    height: height,
    x: x + getWindowScrollBarX(element),
    y: y
  };
}

// of the `<html>` and `<body>` rect bounds if horizontally scrollable

function getDocumentRect(element) {
  var _element$ownerDocumen;

  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;

  if (getComputedStyle(body || html).direction === 'rtl') {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }

  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}

function isScrollParent(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  var _getComputedStyle = getComputedStyle(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;

  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
  }

  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }

  return getScrollParent(getParentNode(node));
}

/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

function listScrollParents(element, list) {
  var _element$ownerDocumen;

  if (list === void 0) {
    list = [];
  }

  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents(getParentNode(target)));
}

function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === 'fixed');
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}

function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`


function getClippingParents(element) {
  var clippingParents = listScrollParents(getParentNode(element));
  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

  if (!isElement(clipperElement)) {
    return [];
  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


  return clippingParents.filter(function (clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents


function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

function computeOffsets(_ref) {
  var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;

  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;

    case bottom:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;

    case right:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;

    case left:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;

    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }

  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';

    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
        break;

      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
        break;
    }
  }

  return offsets;
}

function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$strategy = _options.strategy,
      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
  // 0 or negative = within the clipping rect

  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

  if (elementContext === popper && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }

  return overflowOffsets;
}

function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
    return getVariation(placement) === variation;
  }) : basePlacements;
  var allowedPlacements = placements$1.filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  });

  if (allowedPlacements.length === 0) {
    allowedPlacements = placements$1;
  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


  var overflows = allowedPlacements.reduce(function (acc, placement) {
    acc[placement] = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[getBasePlacement(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}

function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }

  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}

function flip(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;

  if (state.modifiersData[name]._skip) {
    return;
  }

  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];

  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];

    var _basePlacement = getBasePlacement(placement);

    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }

    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];

    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }

    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }

    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }

    checksMap.set(placement, checks);
  }

  if (makeFallbackChecks) {
    // `2` may be desired in some cases – research later
    var numberOfChecks = flipVariations ? 3 : 1;

    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);

        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });

      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };

    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);

      if (_ret === "break") break;
    }
  }

  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
} // eslint-disable-next-line import/no-unused-modules


var flip$1 = {
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
};

function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }

  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}

function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function (side) {
    return overflow[side] >= 0;
  });
}

function hide(_ref) {
  var state = _ref.state,
      name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
} // eslint-disable-next-line import/no-unused-modules


var hide$1 = {
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
};

function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
    placement: placement
  })) : offset,
      skidding = _ref[0],
      distance = _ref[1];

  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}

function offset(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;

  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


var offset$1 = {
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
};

function popperOffsets(_ref) {
  var state = _ref.state,
      name = _ref.name;
  // Offsets are the actual position the popper needs to have to be
  // properly positioned near its reference element
  // This is the most basic placement, and will be adjusted by
  // the modifiers in the next step
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


var popperOffsets$1 = {
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
};

function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}

function preventOverflow(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };

  if (!popperOffsets) {
    return;
  }

  if (checkMainAxis) {
    var _offsetModifierState$;

    var mainSide = mainAxis === 'y' ? top : left;
    var altSide = mainAxis === 'y' ? bottom : right;
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min$1 = offset + overflow[mainSide];
    var max$1 = offset - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    // outside the reference bounds

    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    // to include its full size in the calculation. If the reference is small
    // and near the edge of a boundary, the popper can overflow even if the
    // reference is not overflowing as well (e.g. virtual elements with no
    // width or height)

    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
    popperOffsets[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset;
  }

  if (checkAltAxis) {
    var _offsetModifierState$2;

    var _mainSide = mainAxis === 'x' ? top : left;

    var _altSide = mainAxis === 'x' ? bottom : right;

    var _offset = popperOffsets[altAxis];

    var _len = altAxis === 'y' ? 'height' : 'width';

    var _min = _offset + overflow[_mainSide];

    var _max = _offset - overflow[_altSide];

    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

    popperOffsets[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


var preventOverflow$1 = {
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
};

function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.


function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };

  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }

    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  }); // On visiting object, check for its dependencies and visit them recursively

  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);

        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }

  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      // check for visited object
      sort(modifier);
    }
  });
  return result;
}

function orderModifiers(modifiers) {
  // order based on dependencies
  var orderedModifiers = order(modifiers); // order based on phase

  return modifierPhases.reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

function debounce$2(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }

    return pending;
  };
}

function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged;
  }, {}); // IE11 does not support Object.values

  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}

var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};

function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}

function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }

  var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }

    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(setOptionsAction) {
        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options);
        state.scrollParents = {
          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
          popper: listScrollParents(popper)
        }; // Orders the modifiers based on their dependencies and `phase`
        // properties

        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }

        var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
        // anymore

        if (!areValidElements(reference, popper)) {
          return;
        } // Store the reference and popper rects to be read by modifiers


        state.rects = {
          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
          popper: getLayoutRect(popper)
        }; // Modifiers have the ability to reset the current update cycle. The
        // most common use case for this is the `flip` modifier changing the
        // placement, which then needs to re-run all the modifiers, because the
        // logic was previously ran for the previous placement and is therefore
        // stale/incorrect

        state.reset = false;
        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
        // is filled with the initial data specified by the modifier. This means
        // it doesn't persist and is fresh on each update.
        // To ensure persistent data, use `${name}#persistent`

        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });

        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }

          var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;

          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce$2(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };

    if (!areValidElements(reference, popper)) {
      return instance;
    }

    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    }); // Modifiers have the ability to execute arbitrary code before the first
    // update cycle runs. They will be executed in the same order as the update
    // cycle. This is useful when a modifier adds some persistent data that
    // other modifiers need to use, but the modifier is run after the dependent
    // one.

    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref) {
        var name = _ref.name,
            _ref$options = _ref.options,
            options = _ref$options === void 0 ? {} : _ref$options,
            effect = _ref.effect;

        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });

          var noopFn = function noopFn() {};

          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }

    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }

    return instance;
  };
}

var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
var createPopper = /*#__PURE__*/popperGenerator({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

function getContainer$1(container) {
  return typeof container === 'function' ? container() : container;
}

/**
 * Portals provide a first-class way to render children into a DOM node
 * that exists outside the DOM hierarchy of the parent component.
 *
 * Demos:
 *
 * - [Portal](https://mui.com/material-ui/react-portal/)
 *
 * API:
 *
 * - [Portal API](https://mui.com/material-ui/api/portal/)
 */
const Portal = /*#__PURE__*/React$1.forwardRef(function Portal(props, forwardedRef) {
  const {
    children,
    container,
    disablePortal = false
  } = props;
  const [mountNode, setMountNode] = React$1.useState(null);
  // @ts-expect-error TODO upstream fix
  const handleRef = useForkRef( /*#__PURE__*/React$1.isValidElement(children) ? children.ref : null, forwardedRef);
  useEnhancedEffect(() => {
    if (!disablePortal) {
      setMountNode(getContainer$1(container) || document.body);
    }
  }, [container, disablePortal]);
  useEnhancedEffect(() => {
    if (mountNode && !disablePortal) {
      setRef(forwardedRef, mountNode);
      return () => {
        setRef(forwardedRef, null);
      };
    }
    return undefined;
  }, [forwardedRef, mountNode, disablePortal]);
  if (disablePortal) {
    if ( /*#__PURE__*/React$1.isValidElement(children)) {
      const newProps = {
        ref: handleRef
      };
      return /*#__PURE__*/React$1.cloneElement(children, newProps);
    }
    return /*#__PURE__*/jsxRuntimeExports.jsx(React$1.Fragment, {
      children: children
    });
  }
  return /*#__PURE__*/jsxRuntimeExports.jsx(React$1.Fragment, {
    children: mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode
  });
});
process.env.NODE_ENV !== "production" ? Portal.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The children to render into the `container`.
   */
  children: PropTypes.node,
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: PropTypes.bool
} : void 0;
if (process.env.NODE_ENV !== 'production') {
  // eslint-disable-next-line
  Portal['propTypes' + ''] = exactProp(Portal.propTypes);
}

const _excluded$8 = ["onChange", "maxRows", "minRows", "style", "value"];
function getStyleValue(value) {
  return parseInt(value, 10) || 0;
}
const styles$1 = {
  shadow: {
    // Visibility needed to hide the extra text area on iPads
    visibility: 'hidden',
    // Remove from the content flow
    position: 'absolute',
    // Ignore the scrollbar width
    overflow: 'hidden',
    height: 0,
    top: 0,
    left: 0,
    // Create a new layer, increase the isolation of the computed values
    transform: 'translateZ(0)'
  }
};
function isEmpty(obj) {
  return obj === undefined || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflowing;
}

/**
 *
 * Demos:
 *
 * - [Textarea Autosize](https://mui.com/material-ui/react-textarea-autosize/)
 *
 * API:
 *
 * - [TextareaAutosize API](https://mui.com/material-ui/api/textarea-autosize/)
 */
const TextareaAutosize = /*#__PURE__*/React$1.forwardRef(function TextareaAutosize(props, forwardedRef) {
  const {
      onChange,
      maxRows,
      minRows = 1,
      style,
      value
    } = props,
    other = _objectWithoutPropertiesLoose$2(props, _excluded$8);
  const {
    current: isControlled
  } = React$1.useRef(value != null);
  const inputRef = React$1.useRef(null);
  const handleRef = useForkRef(forwardedRef, inputRef);
  const heightRef = React$1.useRef(null);
  const shadowRef = React$1.useRef(null);
  const calculateTextareaStyles = React$1.useCallback(() => {
    const input = inputRef.current;
    const containerWindow = ownerWindow(input);
    const computedStyle = containerWindow.getComputedStyle(input);

    // If input's width is shrunk and it's not visible, don't sync height.
    if (computedStyle.width === '0px') {
      return {
        outerHeightStyle: 0,
        overflowing: false
      };
    }
    const inputShallow = shadowRef.current;
    inputShallow.style.width = computedStyle.width;
    inputShallow.value = input.value || props.placeholder || 'x';
    if (inputShallow.value.slice(-1) === '\n') {
      // Certain fonts which overflow the line height will cause the textarea
      // to report a different scrollHeight depending on whether the last line
      // is empty. Make it non-empty to avoid this issue.
      inputShallow.value += ' ';
    }
    const boxSizing = computedStyle.boxSizing;
    const padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);
    const border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);

    // The height of the inner content
    const innerHeight = inputShallow.scrollHeight;

    // Measure height of a textarea with a single row
    inputShallow.value = 'x';
    const singleRowHeight = inputShallow.scrollHeight;

    // The height of the outer content
    let outerHeight = innerHeight;
    if (minRows) {
      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
    }
    if (maxRows) {
      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
    }
    outerHeight = Math.max(outerHeight, singleRowHeight);

    // Take the box sizing into account for applying this value as a style.
    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);
    const overflowing = Math.abs(outerHeight - innerHeight) <= 1;
    return {
      outerHeightStyle,
      overflowing
    };
  }, [maxRows, minRows, props.placeholder]);
  const syncHeight = React$1.useCallback(() => {
    const textareaStyles = calculateTextareaStyles();
    if (isEmpty(textareaStyles)) {
      return;
    }
    const outerHeightStyle = textareaStyles.outerHeightStyle;
    const input = inputRef.current;
    if (heightRef.current !== outerHeightStyle) {
      heightRef.current = outerHeightStyle;
      input.style.height = `${outerHeightStyle}px`;
    }
    input.style.overflow = textareaStyles.overflowing ? 'hidden' : '';
  }, [calculateTextareaStyles]);
  useEnhancedEffect(() => {
    const handleResize = () => {
      syncHeight();
    };
    // Workaround a "ResizeObserver loop completed with undelivered notifications" error
    // in test.
    // Note that we might need to use this logic in production per https://github.com/WICG/resize-observer/issues/38
    // Also see https://github.com/mui/mui-x/issues/8733
    let rAF;
    const rAFHandleResize = () => {
      cancelAnimationFrame(rAF);
      rAF = requestAnimationFrame(() => {
        handleResize();
      });
    };
    const debounceHandleResize = debounce$3(handleResize);
    const input = inputRef.current;
    const containerWindow = ownerWindow(input);
    containerWindow.addEventListener('resize', debounceHandleResize);
    let resizeObserver;
    if (typeof ResizeObserver !== 'undefined') {
      resizeObserver = new ResizeObserver(process.env.NODE_ENV === 'test' ? rAFHandleResize : handleResize);
      resizeObserver.observe(input);
    }
    return () => {
      debounceHandleResize.clear();
      cancelAnimationFrame(rAF);
      containerWindow.removeEventListener('resize', debounceHandleResize);
      if (resizeObserver) {
        resizeObserver.disconnect();
      }
    };
  }, [calculateTextareaStyles, syncHeight]);
  useEnhancedEffect(() => {
    syncHeight();
  });
  const handleChange = event => {
    if (!isControlled) {
      syncHeight();
    }
    if (onChange) {
      onChange(event);
    }
  };
  return /*#__PURE__*/jsxRuntimeExports.jsxs(React$1.Fragment, {
    children: [/*#__PURE__*/jsxRuntimeExports.jsx("textarea", _extends$i({
      value: value,
      onChange: handleChange,
      ref: handleRef
      // Apply the rows prop to get a "correct" first SSR paint
      ,
      rows: minRows,
      style: style
    }, other)), /*#__PURE__*/jsxRuntimeExports.jsx("textarea", {
      "aria-hidden": true,
      className: props.className,
      readOnly: true,
      ref: shadowRef,
      tabIndex: -1,
      style: _extends$i({}, styles$1.shadow, style, {
        paddingTop: 0,
        paddingBottom: 0
      })
    })]
  });
});
process.env.NODE_ENV !== "production" ? TextareaAutosize.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * Maximum number of rows to display.
   */
  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /**
   * Minimum number of rows to display.
   * @default 1
   */
  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /**
   * @ignore
   */
  onChange: PropTypes.func,
  /**
   * @ignore
   */
  placeholder: PropTypes.string,
  /**
   * @ignore
   */
  style: PropTypes.object,
  /**
   * @ignore
   */
  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])
} : void 0;

function formControlState({
  props,
  states,
  muiFormControl
}) {
  return states.reduce((acc, state) => {
    acc[state] = props[state];
    if (muiFormControl) {
      if (typeof props[state] === 'undefined') {
        acc[state] = muiFormControl[state];
      }
    }
    return acc;
  }, {});
}

/**
 * @ignore - internal component.
 */
const FormControlContext = /*#__PURE__*/React$1.createContext(undefined);
if (process.env.NODE_ENV !== 'production') {
  FormControlContext.displayName = 'FormControlContext';
}

function useFormControl() {
  return React$1.useContext(FormControlContext);
}

function GlobalStyles(props) {
  return /*#__PURE__*/jsxRuntimeExports.jsx(GlobalStyles$1, _extends$i({}, props, {
    defaultTheme: defaultTheme$1,
    themeId: THEME_ID
  }));
}
process.env.NODE_ENV !== "production" ? GlobalStyles.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The styles you want to apply globally.
   */
  styles: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.array, PropTypes.func, PropTypes.number, PropTypes.object, PropTypes.string, PropTypes.bool])
} : void 0;

// Supports determination of isControlled().
// Controlled input accepts its current value as a prop.
//
// @see https://facebook.github.io/react/docs/forms.html#controlled-components
// @param value
// @returns {boolean} true if string (including '') or number (including zero)
function hasValue(value) {
  return value != null && !(Array.isArray(value) && value.length === 0);
}

// Determine if field is empty or filled.
// Response determines if label is presented above field or as placeholder.
//
// @param obj
// @param SSR
// @returns {boolean} False when not present or empty string.
//                    True when any number or string with length.
function isFilled(obj, SSR = false) {
  return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');
}

function getInputBaseUtilityClass(slot) {
  return generateUtilityClass('MuiInputBase', slot);
}
const inputBaseClasses = generateUtilityClasses('MuiInputBase', ['root', 'formControl', 'focused', 'disabled', 'adornedStart', 'adornedEnd', 'error', 'sizeSmall', 'multiline', 'colorSecondary', 'fullWidth', 'hiddenLabel', 'readOnly', 'input', 'inputSizeSmall', 'inputMultiline', 'inputTypeSearch', 'inputAdornedStart', 'inputAdornedEnd', 'inputHiddenLabel']);

const _excluded$7 = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "slotProps", "slots", "startAdornment", "type", "value"];
const rootOverridesResolver = (props, styles) => {
  const {
    ownerState
  } = props;
  return [styles.root, ownerState.formControl && styles.formControl, ownerState.startAdornment && styles.adornedStart, ownerState.endAdornment && styles.adornedEnd, ownerState.error && styles.error, ownerState.size === 'small' && styles.sizeSmall, ownerState.multiline && styles.multiline, ownerState.color && styles[`color${capitalize$1(ownerState.color)}`], ownerState.fullWidth && styles.fullWidth, ownerState.hiddenLabel && styles.hiddenLabel];
};
const inputOverridesResolver = (props, styles) => {
  const {
    ownerState
  } = props;
  return [styles.input, ownerState.size === 'small' && styles.inputSizeSmall, ownerState.multiline && styles.inputMultiline, ownerState.type === 'search' && styles.inputTypeSearch, ownerState.startAdornment && styles.inputAdornedStart, ownerState.endAdornment && styles.inputAdornedEnd, ownerState.hiddenLabel && styles.inputHiddenLabel];
};
const useUtilityClasses$5 = ownerState => {
  const {
    classes,
    color,
    disabled,
    error,
    endAdornment,
    focused,
    formControl,
    fullWidth,
    hiddenLabel,
    multiline,
    readOnly,
    size,
    startAdornment,
    type
  } = ownerState;
  const slots = {
    root: ['root', `color${capitalize$1(color)}`, disabled && 'disabled', error && 'error', fullWidth && 'fullWidth', focused && 'focused', formControl && 'formControl', size && size !== 'medium' && `size${capitalize$1(size)}`, multiline && 'multiline', startAdornment && 'adornedStart', endAdornment && 'adornedEnd', hiddenLabel && 'hiddenLabel', readOnly && 'readOnly'],
    input: ['input', disabled && 'disabled', type === 'search' && 'inputTypeSearch', multiline && 'inputMultiline', size === 'small' && 'inputSizeSmall', hiddenLabel && 'inputHiddenLabel', startAdornment && 'inputAdornedStart', endAdornment && 'inputAdornedEnd', readOnly && 'readOnly']
  };
  return composeClasses(slots, getInputBaseUtilityClass, classes);
};
const InputBaseRoot = styled('div', {
  name: 'MuiInputBase',
  slot: 'Root',
  overridesResolver: rootOverridesResolver
})(({
  theme,
  ownerState
}) => _extends$i({}, theme.typography.body1, {
  color: (theme.vars || theme).palette.text.primary,
  lineHeight: '1.4375em',
  // 23px
  boxSizing: 'border-box',
  // Prevent padding issue with fullWidth.
  position: 'relative',
  cursor: 'text',
  display: 'inline-flex',
  alignItems: 'center',
  [`&.${inputBaseClasses.disabled}`]: {
    color: (theme.vars || theme).palette.text.disabled,
    cursor: 'default'
  }
}, ownerState.multiline && _extends$i({
  padding: '4px 0 5px'
}, ownerState.size === 'small' && {
  paddingTop: 1
}), ownerState.fullWidth && {
  width: '100%'
}));
const InputBaseComponent = styled('input', {
  name: 'MuiInputBase',
  slot: 'Input',
  overridesResolver: inputOverridesResolver
})(({
  theme,
  ownerState
}) => {
  const light = theme.palette.mode === 'light';
  const placeholder = _extends$i({
    color: 'currentColor'
  }, theme.vars ? {
    opacity: theme.vars.opacity.inputPlaceholder
  } : {
    opacity: light ? 0.42 : 0.5
  }, {
    transition: theme.transitions.create('opacity', {
      duration: theme.transitions.duration.shorter
    })
  });
  const placeholderHidden = {
    opacity: '0 !important'
  };
  const placeholderVisible = theme.vars ? {
    opacity: theme.vars.opacity.inputPlaceholder
  } : {
    opacity: light ? 0.42 : 0.5
  };
  return _extends$i({
    font: 'inherit',
    letterSpacing: 'inherit',
    color: 'currentColor',
    padding: '4px 0 5px',
    border: 0,
    boxSizing: 'content-box',
    background: 'none',
    height: '1.4375em',
    // Reset 23pxthe native input line-height
    margin: 0,
    // Reset for Safari
    WebkitTapHighlightColor: 'transparent',
    display: 'block',
    // Make the flex item shrink with Firefox
    minWidth: 0,
    width: '100%',
    // Fix IE11 width issue
    animationName: 'mui-auto-fill-cancel',
    animationDuration: '10ms',
    '&::-webkit-input-placeholder': placeholder,
    '&::-moz-placeholder': placeholder,
    // Firefox 19+
    '&:-ms-input-placeholder': placeholder,
    // IE11
    '&::-ms-input-placeholder': placeholder,
    // Edge
    '&:focus': {
      outline: 0
    },
    // Reset Firefox invalid required input style
    '&:invalid': {
      boxShadow: 'none'
    },
    '&::-webkit-search-decoration': {
      // Remove the padding when type=search.
      WebkitAppearance: 'none'
    },
    // Show and hide the placeholder logic
    [`label[data-shrink=false] + .${inputBaseClasses.formControl} &`]: {
      '&::-webkit-input-placeholder': placeholderHidden,
      '&::-moz-placeholder': placeholderHidden,
      // Firefox 19+
      '&:-ms-input-placeholder': placeholderHidden,
      // IE11
      '&::-ms-input-placeholder': placeholderHidden,
      // Edge
      '&:focus::-webkit-input-placeholder': placeholderVisible,
      '&:focus::-moz-placeholder': placeholderVisible,
      // Firefox 19+
      '&:focus:-ms-input-placeholder': placeholderVisible,
      // IE11
      '&:focus::-ms-input-placeholder': placeholderVisible // Edge
    },
    [`&.${inputBaseClasses.disabled}`]: {
      opacity: 1,
      // Reset iOS opacity
      WebkitTextFillColor: (theme.vars || theme).palette.text.disabled // Fix opacity Safari bug
    },
    '&:-webkit-autofill': {
      animationDuration: '5000s',
      animationName: 'mui-auto-fill'
    }
  }, ownerState.size === 'small' && {
    paddingTop: 1
  }, ownerState.multiline && {
    height: 'auto',
    resize: 'none',
    padding: 0,
    paddingTop: 0
  }, ownerState.type === 'search' && {
    // Improve type search style.
    MozAppearance: 'textfield'
  });
});
const inputGlobalStyles = /*#__PURE__*/jsxRuntimeExports.jsx(GlobalStyles, {
  styles: {
    '@keyframes mui-auto-fill': {
      from: {
        display: 'block'
      }
    },
    '@keyframes mui-auto-fill-cancel': {
      from: {
        display: 'block'
      }
    }
  }
});

/**
 * `InputBase` contains as few styles as possible.
 * It aims to be a simple building block for creating an input.
 * It contains a load of style reset and some state logic.
 */
const InputBase = /*#__PURE__*/React$1.forwardRef(function InputBase(inProps, ref) {
  var _slotProps$input;
  const props = useDefaultProps({
    props: inProps,
    name: 'MuiInputBase'
  });
  const {
      'aria-describedby': ariaDescribedby,
      autoComplete,
      autoFocus,
      className,
      components = {},
      componentsProps = {},
      defaultValue,
      disabled,
      disableInjectingGlobalStyles,
      endAdornment,
      fullWidth = false,
      id,
      inputComponent = 'input',
      inputProps: inputPropsProp = {},
      inputRef: inputRefProp,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onClick,
      onFocus,
      onKeyDown,
      onKeyUp,
      placeholder,
      readOnly,
      renderSuffix,
      rows,
      slotProps = {},
      slots = {},
      startAdornment,
      type = 'text',
      value: valueProp
    } = props,
    other = _objectWithoutPropertiesLoose$2(props, _excluded$7);
  const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
  const {
    current: isControlled
  } = React$1.useRef(value != null);
  const inputRef = React$1.useRef();
  const handleInputRefWarning = React$1.useCallback(instance => {
    if (process.env.NODE_ENV !== 'production') {
      if (instance && instance.nodeName !== 'INPUT' && !instance.focus) {
        console.error(['MUI: You have provided a `inputComponent` to the input component', 'that does not correctly handle the `ref` prop.', 'Make sure the `ref` prop is called with a HTMLInputElement.'].join('\n'));
      }
    }
  }, []);
  const handleInputRef = useForkRef(inputRef, inputRefProp, inputPropsProp.ref, handleInputRefWarning);
  const [focused, setFocused] = React$1.useState(false);
  const muiFormControl = useFormControl();
  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React$1.useEffect(() => {
      if (muiFormControl) {
        return muiFormControl.registerEffect();
      }
      return undefined;
    }, [muiFormControl]);
  }
  const fcs = formControlState({
    props,
    muiFormControl,
    states: ['color', 'disabled', 'error', 'hiddenLabel', 'size', 'required', 'filled']
  });
  fcs.focused = muiFormControl ? muiFormControl.focused : focused;

  // The blur won't fire when the disabled state is set on a focused input.
  // We need to book keep the focused state manually.
  React$1.useEffect(() => {
    if (!muiFormControl && disabled && focused) {
      setFocused(false);
      if (onBlur) {
        onBlur();
      }
    }
  }, [muiFormControl, disabled, focused, onBlur]);
  const onFilled = muiFormControl && muiFormControl.onFilled;
  const onEmpty = muiFormControl && muiFormControl.onEmpty;
  const checkDirty = React$1.useCallback(obj => {
    if (isFilled(obj)) {
      if (onFilled) {
        onFilled();
      }
    } else if (onEmpty) {
      onEmpty();
    }
  }, [onFilled, onEmpty]);
  useEnhancedEffect(() => {
    if (isControlled) {
      checkDirty({
        value
      });
    }
  }, [value, checkDirty, isControlled]);
  const handleFocus = event => {
    // Fix a bug with IE11 where the focus/blur events are triggered
    // while the component is disabled.
    if (fcs.disabled) {
      event.stopPropagation();
      return;
    }
    if (onFocus) {
      onFocus(event);
    }
    if (inputPropsProp.onFocus) {
      inputPropsProp.onFocus(event);
    }
    if (muiFormControl && muiFormControl.onFocus) {
      muiFormControl.onFocus(event);
    } else {
      setFocused(true);
    }
  };
  const handleBlur = event => {
    if (onBlur) {
      onBlur(event);
    }
    if (inputPropsProp.onBlur) {
      inputPropsProp.onBlur(event);
    }
    if (muiFormControl && muiFormControl.onBlur) {
      muiFormControl.onBlur(event);
    } else {
      setFocused(false);
    }
  };
  const handleChange = (event, ...args) => {
    if (!isControlled) {
      const element = event.target || inputRef.current;
      if (element == null) {
        throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Expected valid input target. Did you use a custom \`inputComponent\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : formatMuiErrorMessage$1(1));
      }
      checkDirty({
        value: element.value
      });
    }
    if (inputPropsProp.onChange) {
      inputPropsProp.onChange(event, ...args);
    }

    // Perform in the willUpdate
    if (onChange) {
      onChange(event, ...args);
    }
  };

  // Check the input state on mount, in case it was filled by the user
  // or auto filled by the browser before the hydration (for SSR).
  React$1.useEffect(() => {
    checkDirty(inputRef.current);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  const handleClick = event => {
    if (inputRef.current && event.currentTarget === event.target) {
      inputRef.current.focus();
    }
    if (onClick) {
      onClick(event);
    }
  };
  let InputComponent = inputComponent;
  let inputProps = inputPropsProp;
  if (multiline && InputComponent === 'input') {
    if (rows) {
      if (process.env.NODE_ENV !== 'production') {
        if (minRows || maxRows) {
          console.warn('MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.');
        }
      }
      inputProps = _extends$i({
        type: undefined,
        minRows: rows,
        maxRows: rows
      }, inputProps);
    } else {
      inputProps = _extends$i({
        type: undefined,
        maxRows,
        minRows
      }, inputProps);
    }
    InputComponent = TextareaAutosize;
  }
  const handleAutoFill = event => {
    // Provide a fake value as Chrome might not let you access it for security reasons.
    checkDirty(event.animationName === 'mui-auto-fill-cancel' ? inputRef.current : {
      value: 'x'
    });
  };
  React$1.useEffect(() => {
    if (muiFormControl) {
      muiFormControl.setAdornedStart(Boolean(startAdornment));
    }
  }, [muiFormControl, startAdornment]);
  const ownerState = _extends$i({}, props, {
    color: fcs.color || 'primary',
    disabled: fcs.disabled,
    endAdornment,
    error: fcs.error,
    focused: fcs.focused,
    formControl: muiFormControl,
    fullWidth,
    hiddenLabel: fcs.hiddenLabel,
    multiline,
    size: fcs.size,
    startAdornment,
    type
  });
  const classes = useUtilityClasses$5(ownerState);
  const Root = slots.root || components.Root || InputBaseRoot;
  const rootProps = slotProps.root || componentsProps.root || {};
  const Input = slots.input || components.Input || InputBaseComponent;
  inputProps = _extends$i({}, inputProps, (_slotProps$input = slotProps.input) != null ? _slotProps$input : componentsProps.input);
  return /*#__PURE__*/jsxRuntimeExports.jsxs(React$1.Fragment, {
    children: [!disableInjectingGlobalStyles && inputGlobalStyles, /*#__PURE__*/jsxRuntimeExports.jsxs(Root, _extends$i({}, rootProps, !isHostComponent(Root) && {
      ownerState: _extends$i({}, ownerState, rootProps.ownerState)
    }, {
      ref: ref,
      onClick: handleClick
    }, other, {
      className: clsx(classes.root, rootProps.className, className, readOnly && 'MuiInputBase-readOnly'),
      children: [startAdornment, /*#__PURE__*/jsxRuntimeExports.jsx(FormControlContext.Provider, {
        value: null,
        children: /*#__PURE__*/jsxRuntimeExports.jsx(Input, _extends$i({
          ownerState: ownerState,
          "aria-invalid": fcs.error,
          "aria-describedby": ariaDescribedby,
          autoComplete: autoComplete,
          autoFocus: autoFocus,
          defaultValue: defaultValue,
          disabled: fcs.disabled,
          id: id,
          onAnimationStart: handleAutoFill,
          name: name,
          placeholder: placeholder,
          readOnly: readOnly,
          required: fcs.required,
          rows: rows,
          value: value,
          onKeyDown: onKeyDown,
          onKeyUp: onKeyUp,
          type: type
        }, inputProps, !isHostComponent(Input) && {
          as: InputComponent,
          ownerState: _extends$i({}, ownerState, inputProps.ownerState)
        }, {
          ref: handleInputRef,
          className: clsx(classes.input, inputProps.className, readOnly && 'MuiInputBase-readOnly'),
          onBlur: handleBlur,
          onChange: handleChange,
          onFocus: handleFocus
        }))
      }), endAdornment, renderSuffix ? renderSuffix(_extends$i({}, fcs, {
        startAdornment
      })) : null]
    }))]
  });
});
process.env.NODE_ENV !== "production" ? InputBase.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  'aria-describedby': PropTypes.string,
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: PropTypes.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: PropTypes.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */
  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `slots` prop.
   * It's recommended to use the `slots` prop instead.
   *
   * @default {}
   */
  components: PropTypes.shape({
    Input: PropTypes.elementType,
    Root: PropTypes.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `slotProps` prop.
   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
   *
   * @default {}
   */
  componentsProps: PropTypes.shape({
    input: PropTypes.object,
    root: PropTypes.object
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: PropTypes.any,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: PropTypes.bool,
  /**
   * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.
   * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.
   * @default false
   */
  disableInjectingGlobalStyles: PropTypes.bool,
  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: PropTypes.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: PropTypes.bool,
  /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */
  fullWidth: PropTypes.bool,
  /**
   * The id of the `input` element.
   */
  id: PropTypes.string,
  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */
  inputComponent: elementTypeAcceptingRef$1,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @default {}
   */
  inputProps: PropTypes.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: refType,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */
  margin: PropTypes.oneOf(['dense', 'none']),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /**
   * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
   * @default false
   */
  multiline: PropTypes.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: PropTypes.string,
  /**
   * Callback fired when the `input` is blurred.
   *
   * Notice that the first argument (event) might be undefined.
   */
  onBlur: PropTypes.func,
  /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: PropTypes.func,
  /**
   * @ignore
   */
  onClick: PropTypes.func,
  /**
   * @ignore
   */
  onFocus: PropTypes.func,
  /**
   * Callback fired when the `input` doesn't satisfy its constraints.
   */
  onInvalid: PropTypes.func,
  /**
   * @ignore
   */
  onKeyDown: PropTypes.func,
  /**
   * @ignore
   */
  onKeyUp: PropTypes.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: PropTypes.string,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: PropTypes.bool,
  /**
   * @ignore
   */
  renderSuffix: PropTypes.func,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: PropTypes.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /**
   * The size of the component.
   */
  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: PropTypes.shape({
    input: PropTypes.object,
    root: PropTypes.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: PropTypes.shape({
    input: PropTypes.elementType,
    root: PropTypes.elementType
  }),
  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: PropTypes.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */
  type: PropTypes.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: PropTypes.any
} : void 0;
var InputBase$1 = InputBase;

function getInputUtilityClass(slot) {
  return generateUtilityClass('MuiInput', slot);
}
const inputClasses = _extends$i({}, inputBaseClasses, generateUtilityClasses('MuiInput', ['root', 'underline', 'input']));

const _excluded$6 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
const styles = {
  entering: {
    opacity: 1
  },
  entered: {
    opacity: 1
  }
};

/**
 * The Fade transition is used by the [Modal](/material-ui/react-modal/) component.
 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
 */
const Fade = /*#__PURE__*/React$1.forwardRef(function Fade(props, ref) {
  const theme = useTheme();
  const defaultTimeout = {
    enter: theme.transitions.duration.enteringScreen,
    exit: theme.transitions.duration.leavingScreen
  };
  const {
      addEndListener,
      appear = true,
      children,
      easing,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style,
      timeout = defaultTimeout,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition
    } = props,
    other = _objectWithoutPropertiesLoose$2(props, _excluded$6);
  const nodeRef = React$1.useRef(null);
  const handleRef = useForkRef(nodeRef, children.ref, ref);
  const normalizedTransitionCallback = callback => maybeIsAppearing => {
    if (callback) {
      const node = nodeRef.current;

      // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
      if (maybeIsAppearing === undefined) {
        callback(node);
      } else {
        callback(node, maybeIsAppearing);
      }
    }
  };
  const handleEntering = normalizedTransitionCallback(onEntering);
  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
    reflow(node); // So the animation always start from the start.

    const transitionProps = getTransitionProps({
      style,
      timeout,
      easing
    }, {
      mode: 'enter'
    });
    node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
    node.style.transition = theme.transitions.create('opacity', transitionProps);
    if (onEnter) {
      onEnter(node, isAppearing);
    }
  });
  const handleEntered = normalizedTransitionCallback(onEntered);
  const handleExiting = normalizedTransitionCallback(onExiting);
  const handleExit = normalizedTransitionCallback(node => {
    const transitionProps = getTransitionProps({
      style,
      timeout,
      easing
    }, {
      mode: 'exit'
    });
    node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
    node.style.transition = theme.transitions.create('opacity', transitionProps);
    if (onExit) {
      onExit(node);
    }
  });
  const handleExited = normalizedTransitionCallback(onExited);
  const handleAddEndListener = next => {
    if (addEndListener) {
      // Old call signature before `react-transition-group` implemented `nodeRef`
      addEndListener(nodeRef.current, next);
    }
  };
  return /*#__PURE__*/jsxRuntimeExports.jsx(TransitionComponent, _extends$i({
    appear: appear,
    in: inProp,
    nodeRef: nodeRef ,
    onEnter: handleEnter,
    onEntered: handleEntered,
    onEntering: handleEntering,
    onExit: handleExit,
    onExited: handleExited,
    onExiting: handleExiting,
    addEndListener: handleAddEndListener,
    timeout: timeout
  }, other, {
    children: (state, childProps) => {
      return /*#__PURE__*/React$1.cloneElement(children, _extends$i({
        style: _extends$i({
          opacity: 0,
          visibility: state === 'exited' && !inProp ? 'hidden' : undefined
        }, styles[state], style, children.props.style),
        ref: handleRef
      }, childProps));
    }
  }));
});
process.env.NODE_ENV !== "production" ? Fade.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */
  addEndListener: PropTypes.func,
  /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */
  appear: PropTypes.bool,
  /**
   * A single child content element.
   */
  children: elementAcceptingRef.isRequired,
  /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   */
  easing: PropTypes.oneOfType([PropTypes.shape({
    enter: PropTypes.string,
    exit: PropTypes.string
  }), PropTypes.string]),
  /**
   * If `true`, the component will transition in.
   */
  in: PropTypes.bool,
  /**
   * @ignore
   */
  onEnter: PropTypes.func,
  /**
   * @ignore
   */
  onEntered: PropTypes.func,
  /**
   * @ignore
   */
  onEntering: PropTypes.func,
  /**
   * @ignore
   */
  onExit: PropTypes.func,
  /**
   * @ignore
   */
  onExited: PropTypes.func,
  /**
   * @ignore
   */
  onExiting: PropTypes.func,
  /**
   * @ignore
   */
  style: PropTypes.object,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
    appear: PropTypes.number,
    enter: PropTypes.number,
    exit: PropTypes.number
  })])
} : void 0;

function getBackdropUtilityClass(slot) {
  return generateUtilityClass('MuiBackdrop', slot);
}
generateUtilityClasses('MuiBackdrop', ['root', 'invisible']);

const _excluded$5 = ["children", "className", "component", "components", "componentsProps", "invisible", "open", "slotProps", "slots", "TransitionComponent", "transitionDuration"];
const useUtilityClasses$4 = ownerState => {
  const {
    classes,
    invisible
  } = ownerState;
  const slots = {
    root: ['root', invisible && 'invisible']
  };
  return composeClasses(slots, getBackdropUtilityClass, classes);
};
const BackdropRoot = styled('div', {
  name: 'MuiBackdrop',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, ownerState.invisible && styles.invisible];
  }
})(({
  ownerState
}) => _extends$i({
  position: 'fixed',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  right: 0,
  bottom: 0,
  top: 0,
  left: 0,
  backgroundColor: 'rgba(0, 0, 0, 0.5)',
  WebkitTapHighlightColor: 'transparent'
}, ownerState.invisible && {
  backgroundColor: 'transparent'
}));
const Backdrop = /*#__PURE__*/React$1.forwardRef(function Backdrop(inProps, ref) {
  var _slotProps$root, _ref, _slots$root;
  const props = useDefaultProps({
    props: inProps,
    name: 'MuiBackdrop'
  });
  const {
      children,
      className,
      component = 'div',
      components = {},
      componentsProps = {},
      invisible = false,
      open,
      slotProps = {},
      slots = {},
      TransitionComponent = Fade,
      transitionDuration
    } = props,
    other = _objectWithoutPropertiesLoose$2(props, _excluded$5);
  const ownerState = _extends$i({}, props, {
    component,
    invisible
  });
  const classes = useUtilityClasses$4(ownerState);
  const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
  return /*#__PURE__*/jsxRuntimeExports.jsx(TransitionComponent, _extends$i({
    in: open,
    timeout: transitionDuration
  }, other, {
    children: /*#__PURE__*/jsxRuntimeExports.jsx(BackdropRoot, _extends$i({
      "aria-hidden": true
    }, rootSlotProps, {
      as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : component,
      className: clsx(classes.root, className, rootSlotProps == null ? void 0 : rootSlotProps.className),
      ownerState: _extends$i({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
      classes: classes,
      ref: ref,
      children: children
    }))
  }));
});
process.env.NODE_ENV !== "production" ? Backdrop.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `slots` prop.
   * It's recommended to use the `slots` prop instead.
   *
   * @default {}
   */
  components: PropTypes.shape({
    Root: PropTypes.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `slotProps` prop.
   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
   *
   * @default {}
   */
  componentsProps: PropTypes.shape({
    root: PropTypes.object
  }),
  /**
   * If `true`, the backdrop is invisible.
   * It can be used when rendering a popover or a custom select component.
   * @default false
   */
  invisible: PropTypes.bool,
  /**
   * If `true`, the component is shown.
   */
  open: PropTypes.bool.isRequired,
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: PropTypes.shape({
    root: PropTypes.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: PropTypes.shape({
    root: PropTypes.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Fade
   */
  TransitionComponent: PropTypes.elementType,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   */
  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
    appear: PropTypes.number,
    enter: PropTypes.number,
    exit: PropTypes.number
  })])
} : void 0;

const boxClasses = generateUtilityClasses('MuiBox', ['root']);

const defaultTheme = createTheme();
const Box = createBox({
  themeId: THEME_ID,
  defaultTheme,
  defaultClassName: boxClasses.root,
  generateClassName: ClassNameGenerator.generate
});
process.env.NODE_ENV !== "production" ? Box.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
} : void 0;

// Is a vertical scrollbar displayed?
function isOverflowing(container) {
  const doc = ownerDocument(container);
  if (doc.body === container) {
    return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
  }
  return container.scrollHeight > container.clientHeight;
}
function ariaHidden(element, show) {
  if (show) {
    element.setAttribute('aria-hidden', 'true');
  } else {
    element.removeAttribute('aria-hidden');
  }
}
function getPaddingRight(element) {
  return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
}
function isAriaHiddenForbiddenOnElement(element) {
  // The forbidden HTML tags are the ones from ARIA specification that
  // can be children of body and can't have aria-hidden attribute.
  // cf. https://www.w3.org/TR/html-aria/#docconformance
  const forbiddenTagNames = ['TEMPLATE', 'SCRIPT', 'STYLE', 'LINK', 'MAP', 'META', 'NOSCRIPT', 'PICTURE', 'COL', 'COLGROUP', 'PARAM', 'SLOT', 'SOURCE', 'TRACK'];
  const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
  const isInputHidden = element.tagName === 'INPUT' && element.getAttribute('type') === 'hidden';
  return isForbiddenTagName || isInputHidden;
}
function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
  const blacklist = [mountElement, currentElement, ...elementsToExclude];
  [].forEach.call(container.children, element => {
    const isNotExcludedElement = blacklist.indexOf(element) === -1;
    const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
    if (isNotExcludedElement && isNotForbiddenElement) {
      ariaHidden(element, show);
    }
  });
}
function findIndexOf(items, callback) {
  let idx = -1;
  items.some((item, index) => {
    if (callback(item)) {
      idx = index;
      return true;
    }
    return false;
  });
  return idx;
}
function handleContainer(containerInfo, props) {
  const restoreStyle = [];
  const container = containerInfo.container;
  if (!props.disableScrollLock) {
    if (isOverflowing(container)) {
      // Compute the size before applying overflow hidden to avoid any scroll jumps.
      const scrollbarSize = getScrollbarSize(ownerDocument(container));
      restoreStyle.push({
        value: container.style.paddingRight,
        property: 'padding-right',
        el: container
      });
      // Use computed style, here to get the real padding to add our scrollbar width.
      container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;

      // .mui-fixed is a global helper.
      const fixedElements = ownerDocument(container).querySelectorAll('.mui-fixed');
      [].forEach.call(fixedElements, element => {
        restoreStyle.push({
          value: element.style.paddingRight,
          property: 'padding-right',
          el: element
        });
        element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
      });
    }
    let scrollContainer;
    if (container.parentNode instanceof DocumentFragment) {
      scrollContainer = ownerDocument(container).body;
    } else {
      // Support html overflow-y: auto for scroll stability between pages
      // https://css-tricks.com/snippets/css/force-vertical-scrollbar/
      const parent = container.parentElement;
      const containerWindow = ownerWindow(container);
      scrollContainer = (parent == null ? void 0 : parent.nodeName) === 'HTML' && containerWindow.getComputedStyle(parent).overflowY === 'scroll' ? parent : container;
    }

    // Block the scroll even if no scrollbar is visible to account for mobile keyboard
    // screensize shrink.
    restoreStyle.push({
      value: scrollContainer.style.overflow,
      property: 'overflow',
      el: scrollContainer
    }, {
      value: scrollContainer.style.overflowX,
      property: 'overflow-x',
      el: scrollContainer
    }, {
      value: scrollContainer.style.overflowY,
      property: 'overflow-y',
      el: scrollContainer
    });
    scrollContainer.style.overflow = 'hidden';
  }
  const restore = () => {
    restoreStyle.forEach(({
      value,
      el,
      property
    }) => {
      if (value) {
        el.style.setProperty(property, value);
      } else {
        el.style.removeProperty(property);
      }
    });
  };
  return restore;
}
function getHiddenSiblings(container) {
  const hiddenSiblings = [];
  [].forEach.call(container.children, element => {
    if (element.getAttribute('aria-hidden') === 'true') {
      hiddenSiblings.push(element);
    }
  });
  return hiddenSiblings;
}
/**
 * @ignore - do not document.
 *
 * Proper state management for containers and the modals in those containers.
 * Simplified, but inspired by react-overlay's ModalManager class.
 * Used by the Modal to ensure proper styling of containers.
 */
class ModalManager {
  constructor() {
    this.containers = void 0;
    this.modals = void 0;
    this.modals = [];
    this.containers = [];
  }
  add(modal, container) {
    let modalIndex = this.modals.indexOf(modal);
    if (modalIndex !== -1) {
      return modalIndex;
    }
    modalIndex = this.modals.length;
    this.modals.push(modal);

    // If the modal we are adding is already in the DOM.
    if (modal.modalRef) {
      ariaHidden(modal.modalRef, false);
    }
    const hiddenSiblings = getHiddenSiblings(container);
    ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
    const containerIndex = findIndexOf(this.containers, item => item.container === container);
    if (containerIndex !== -1) {
      this.containers[containerIndex].modals.push(modal);
      return modalIndex;
    }
    this.containers.push({
      modals: [modal],
      container,
      restore: null,
      hiddenSiblings
    });
    return modalIndex;
  }
  mount(modal, props) {
    const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
    const containerInfo = this.containers[containerIndex];
    if (!containerInfo.restore) {
      containerInfo.restore = handleContainer(containerInfo, props);
    }
  }
  remove(modal, ariaHiddenState = true) {
    const modalIndex = this.modals.indexOf(modal);
    if (modalIndex === -1) {
      return modalIndex;
    }
    const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
    const containerInfo = this.containers[containerIndex];
    containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
    this.modals.splice(modalIndex, 1);

    // If that was the last modal in a container, clean up the container.
    if (containerInfo.modals.length === 0) {
      // The modal might be closed before it had the chance to be mounted in the DOM.
      if (containerInfo.restore) {
        containerInfo.restore();
      }
      if (modal.modalRef) {
        // In case the modal wasn't in the DOM yet.
        ariaHidden(modal.modalRef, ariaHiddenState);
      }
      ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
      this.containers.splice(containerIndex, 1);
    } else {
      // Otherwise make sure the next top modal is visible to a screen reader.
      const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
      // as soon as a modal is adding its modalRef is undefined. it can't set
      // aria-hidden because the dom element doesn't exist either
      // when modal was unmounted before modalRef gets null
      if (nextTop.modalRef) {
        ariaHidden(nextTop.modalRef, false);
      }
    }
    return modalIndex;
  }
  isTopModal(modal) {
    return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
  }
}

// Inspired by https://github.com/focus-trap/tabbable
const candidatesSelector = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])'].join(',');
function getTabIndex(node) {
  const tabindexAttr = parseInt(node.getAttribute('tabindex') || '', 10);
  if (!Number.isNaN(tabindexAttr)) {
    return tabindexAttr;
  }

  // Browsers do not return `tabIndex` correctly for contentEditable nodes;
  // https://bugs.chromium.org/p/chromium/issues/detail?id=661108&q=contenteditable%20tabindex&can=2
  // so if they don't have a tabindex attribute specifically set, assume it's 0.
  // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default
  //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
  //  yet they are still part of the regular tab order; in FF, they get a default
  //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab
  //  order, consider their tab index to be 0.
  if (node.contentEditable === 'true' || (node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO' || node.nodeName === 'DETAILS') && node.getAttribute('tabindex') === null) {
    return 0;
  }
  return node.tabIndex;
}
function isNonTabbableRadio(node) {
  if (node.tagName !== 'INPUT' || node.type !== 'radio') {
    return false;
  }
  if (!node.name) {
    return false;
  }
  const getRadio = selector => node.ownerDocument.querySelector(`input[type="radio"]${selector}`);
  let roving = getRadio(`[name="${node.name}"]:checked`);
  if (!roving) {
    roving = getRadio(`[name="${node.name}"]`);
  }
  return roving !== node;
}
function isNodeMatchingSelectorFocusable(node) {
  if (node.disabled || node.tagName === 'INPUT' && node.type === 'hidden' || isNonTabbableRadio(node)) {
    return false;
  }
  return true;
}
function defaultGetTabbable(root) {
  const regularTabNodes = [];
  const orderedTabNodes = [];
  Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {
    const nodeTabIndex = getTabIndex(node);
    if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {
      return;
    }
    if (nodeTabIndex === 0) {
      regularTabNodes.push(node);
    } else {
      orderedTabNodes.push({
        documentOrder: i,
        tabIndex: nodeTabIndex,
        node: node
      });
    }
  });
  return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map(a => a.node).concat(regularTabNodes);
}
function defaultIsEnabled() {
  return true;
}

/**
 * @ignore - internal component.
 */
function FocusTrap(props) {
  const {
    children,
    disableAutoFocus = false,
    disableEnforceFocus = false,
    disableRestoreFocus = false,
    getTabbable = defaultGetTabbable,
    isEnabled = defaultIsEnabled,
    open
  } = props;
  const ignoreNextEnforceFocus = React$1.useRef(false);
  const sentinelStart = React$1.useRef(null);
  const sentinelEnd = React$1.useRef(null);
  const nodeToRestore = React$1.useRef(null);
  const reactFocusEventTarget = React$1.useRef(null);
  // This variable is useful when disableAutoFocus is true.
  // It waits for the active element to move into the component to activate.
  const activated = React$1.useRef(false);
  const rootRef = React$1.useRef(null);
  // @ts-expect-error TODO upstream fix
  const handleRef = useForkRef(children.ref, rootRef);
  const lastKeydown = React$1.useRef(null);
  React$1.useEffect(() => {
    // We might render an empty child.
    if (!open || !rootRef.current) {
      return;
    }
    activated.current = !disableAutoFocus;
  }, [disableAutoFocus, open]);
  React$1.useEffect(() => {
    // We might render an empty child.
    if (!open || !rootRef.current) {
      return;
    }
    const doc = ownerDocument(rootRef.current);
    if (!rootRef.current.contains(doc.activeElement)) {
      if (!rootRef.current.hasAttribute('tabIndex')) {
        if (process.env.NODE_ENV !== 'production') {
          console.error(['MUI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to "-1".'].join('\n'));
        }
        rootRef.current.setAttribute('tabIndex', '-1');
      }
      if (activated.current) {
        rootRef.current.focus();
      }
    }
    return () => {
      // restoreLastFocus()
      if (!disableRestoreFocus) {
        // In IE11 it is possible for document.activeElement to be null resulting
        // in nodeToRestore.current being null.
        // Not all elements in IE11 have a focus method.
        // Once IE11 support is dropped the focus() call can be unconditional.
        if (nodeToRestore.current && nodeToRestore.current.focus) {
          ignoreNextEnforceFocus.current = true;
          nodeToRestore.current.focus();
        }
        nodeToRestore.current = null;
      }
    };
    // Missing `disableRestoreFocus` which is fine.
    // We don't support changing that prop on an open FocusTrap
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [open]);
  React$1.useEffect(() => {
    // We might render an empty child.
    if (!open || !rootRef.current) {
      return;
    }
    const doc = ownerDocument(rootRef.current);
    const loopFocus = nativeEvent => {
      lastKeydown.current = nativeEvent;
      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') {
        return;
      }

      // Make sure the next tab starts from the right place.
      // doc.activeElement refers to the origin.
      if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
        // We need to ignore the next contain as
        // it will try to move the focus back to the rootRef element.
        ignoreNextEnforceFocus.current = true;
        if (sentinelEnd.current) {
          sentinelEnd.current.focus();
        }
      }
    };
    const contain = () => {
      const rootElement = rootRef.current;

      // Cleanup functions are executed lazily in React 17.
      // Contain can be called between the component being unmounted and its cleanup function being run.
      if (rootElement === null) {
        return;
      }
      if (!doc.hasFocus() || !isEnabled() || ignoreNextEnforceFocus.current) {
        ignoreNextEnforceFocus.current = false;
        return;
      }

      // The focus is already inside
      if (rootElement.contains(doc.activeElement)) {
        return;
      }

      // The disableEnforceFocus is set and the focus is outside of the focus trap (and sentinel nodes)
      if (disableEnforceFocus && doc.activeElement !== sentinelStart.current && doc.activeElement !== sentinelEnd.current) {
        return;
      }

      // if the focus event is not coming from inside the children's react tree, reset the refs
      if (doc.activeElement !== reactFocusEventTarget.current) {
        reactFocusEventTarget.current = null;
      } else if (reactFocusEventTarget.current !== null) {
        return;
      }
      if (!activated.current) {
        return;
      }
      let tabbable = [];
      if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
        tabbable = getTabbable(rootRef.current);
      }

      // one of the sentinel nodes was focused, so move the focus
      // to the first/last tabbable element inside the focus trap
      if (tabbable.length > 0) {
        var _lastKeydown$current, _lastKeydown$current2;
        const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === 'Tab');
        const focusNext = tabbable[0];
        const focusPrevious = tabbable[tabbable.length - 1];
        if (typeof focusNext !== 'string' && typeof focusPrevious !== 'string') {
          if (isShiftTab) {
            focusPrevious.focus();
          } else {
            focusNext.focus();
          }
        }
        // no tabbable elements in the trap focus or the focus was outside of the focus trap
      } else {
        rootElement.focus();
      }
    };
    doc.addEventListener('focusin', contain);
    doc.addEventListener('keydown', loopFocus, true);

    // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.
    // for example https://bugzilla.mozilla.org/show_bug.cgi?id=559561.
    // Instead, we can look if the active element was restored on the BODY element.
    //
    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:
    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.
    const interval = setInterval(() => {
      if (doc.activeElement && doc.activeElement.tagName === 'BODY') {
        contain();
      }
    }, 50);
    return () => {
      clearInterval(interval);
      doc.removeEventListener('focusin', contain);
      doc.removeEventListener('keydown', loopFocus, true);
    };
  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
  const onFocus = event => {
    if (nodeToRestore.current === null) {
      nodeToRestore.current = event.relatedTarget;
    }
    activated.current = true;
    reactFocusEventTarget.current = event.target;
    const childrenPropsHandler = children.props.onFocus;
    if (childrenPropsHandler) {
      childrenPropsHandler(event);
    }
  };
  const handleFocusSentinel = event => {
    if (nodeToRestore.current === null) {
      nodeToRestore.current = event.relatedTarget;
    }
    activated.current = true;
  };
  return /*#__PURE__*/jsxRuntimeExports.jsxs(React$1.Fragment, {
    children: [/*#__PURE__*/jsxRuntimeExports.jsx("div", {
      tabIndex: open ? 0 : -1,
      onFocus: handleFocusSentinel,
      ref: sentinelStart,
      "data-testid": "sentinelStart"
    }), /*#__PURE__*/React$1.cloneElement(children, {
      ref: handleRef,
      onFocus
    }), /*#__PURE__*/jsxRuntimeExports.jsx("div", {
      tabIndex: open ? 0 : -1,
      onFocus: handleFocusSentinel,
      ref: sentinelEnd,
      "data-testid": "sentinelEnd"
    })]
  });
}
process.env.NODE_ENV !== "production" ? FocusTrap.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A single child content element.
   */
  children: elementAcceptingRef,
  /**
   * If `true`, the focus trap will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the focus trap less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableAutoFocus: PropTypes.bool,
  /**
   * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.
   *
   * Generally this should never be set to `true` as it makes the focus trap less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableEnforceFocus: PropTypes.bool,
  /**
   * If `true`, the focus trap will not restore focus to previously focused element once
   * focus trap is hidden or unmounted.
   * @default false
   */
  disableRestoreFocus: PropTypes.bool,
  /**
   * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
   * For instance, you can provide the "tabbable" npm dependency.
   * @param {HTMLElement} root
   */
  getTabbable: PropTypes.func,
  /**
   * This prop extends the `open` prop.
   * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
   * This prop should be memoized.
   * It can be used to support multiple focus trap mounted at the same time.
   * @default function defaultIsEnabled(): boolean {
   *   return true;
   * }
   */
  isEnabled: PropTypes.func,
  /**
   * If `true`, focus is locked.
   */
  open: PropTypes.bool.isRequired
} : void 0;
if (process.env.NODE_ENV !== 'production') {
  // eslint-disable-next-line
  FocusTrap['propTypes' + ''] = exactProp(FocusTrap.propTypes);
}

function getContainer(container) {
  return typeof container === 'function' ? container() : container;
}
function getHasTransition(children) {
  return children ? children.props.hasOwnProperty('in') : false;
}

// A modal manager used to track and manage the state of open Modals.
// Modals don't open on the server so this won't conflict with concurrent requests.
const defaultManager = new ModalManager();
/**
 *
 * Demos:
 *
 * - [Modal](https://mui.com/base-ui/react-modal/#hook)
 *
 * API:
 *
 * - [useModal API](https://mui.com/base-ui/react-modal/hooks-api/#use-modal)
 */
function useModal(parameters) {
  const {
    container,
    disableEscapeKeyDown = false,
    disableScrollLock = false,
    // @ts-ignore internal logic - Base UI supports the manager as a prop too
    manager = defaultManager,
    closeAfterTransition = false,
    onTransitionEnter,
    onTransitionExited,
    children,
    onClose,
    open,
    rootRef
  } = parameters;

  // @ts-ignore internal logic
  const modal = React$1.useRef({});
  const mountNodeRef = React$1.useRef(null);
  const modalRef = React$1.useRef(null);
  const handleRef = useForkRef(modalRef, rootRef);
  const [exited, setExited] = React$1.useState(!open);
  const hasTransition = getHasTransition(children);
  let ariaHiddenProp = true;
  if (parameters['aria-hidden'] === 'false' || parameters['aria-hidden'] === false) {
    ariaHiddenProp = false;
  }
  const getDoc = () => ownerDocument(mountNodeRef.current);
  const getModal = () => {
    modal.current.modalRef = modalRef.current;
    modal.current.mount = mountNodeRef.current;
    return modal.current;
  };
  const handleMounted = () => {
    manager.mount(getModal(), {
      disableScrollLock
    });

    // Fix a bug on Chrome where the scroll isn't initially 0.
    if (modalRef.current) {
      modalRef.current.scrollTop = 0;
    }
  };
  const handleOpen = useEventCallback(() => {
    const resolvedContainer = getContainer(container) || getDoc().body;
    manager.add(getModal(), resolvedContainer);

    // The element was already mounted.
    if (modalRef.current) {
      handleMounted();
    }
  });
  const isTopModal = React$1.useCallback(() => manager.isTopModal(getModal()), [manager]);
  const handlePortalRef = useEventCallback(node => {
    mountNodeRef.current = node;
    if (!node) {
      return;
    }
    if (open && isTopModal()) {
      handleMounted();
    } else if (modalRef.current) {
      ariaHidden(modalRef.current, ariaHiddenProp);
    }
  });
  const handleClose = React$1.useCallback(() => {
    manager.remove(getModal(), ariaHiddenProp);
  }, [ariaHiddenProp, manager]);
  React$1.useEffect(() => {
    return () => {
      handleClose();
    };
  }, [handleClose]);
  React$1.useEffect(() => {
    if (open) {
      handleOpen();
    } else if (!hasTransition || !closeAfterTransition) {
      handleClose();
    }
  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
  const createHandleKeyDown = otherHandlers => event => {
    var _otherHandlers$onKeyD;
    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);

    // The handler doesn't take event.defaultPrevented into account:
    //
    // event.preventDefault() is meant to stop default behaviors like
    // clicking a checkbox to check it, hitting a button to submit a form,
    // and hitting left arrow to move the cursor in a text input etc.
    // Only special HTML elements have these default behaviors.
    if (event.key !== 'Escape' || event.which === 229 ||
    // Wait until IME is settled.
    !isTopModal()) {
      return;
    }
    if (!disableEscapeKeyDown) {
      // Swallow the event, in case someone is listening for the escape key on the body.
      event.stopPropagation();
      if (onClose) {
        onClose(event, 'escapeKeyDown');
      }
    }
  };
  const createHandleBackdropClick = otherHandlers => event => {
    var _otherHandlers$onClic;
    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
    if (event.target !== event.currentTarget) {
      return;
    }
    if (onClose) {
      onClose(event, 'backdropClick');
    }
  };
  const getRootProps = (otherHandlers = {}) => {
    const propsEventHandlers = extractEventHandlers(parameters);

    // The custom event handlers shouldn't be spread on the root element
    delete propsEventHandlers.onTransitionEnter;
    delete propsEventHandlers.onTransitionExited;
    const externalEventHandlers = _extends$i({}, propsEventHandlers, otherHandlers);
    return _extends$i({
      role: 'presentation'
    }, externalEventHandlers, {
      onKeyDown: createHandleKeyDown(externalEventHandlers),
      ref: handleRef
    });
  };
  const getBackdropProps = (otherHandlers = {}) => {
    const externalEventHandlers = otherHandlers;
    return _extends$i({
      'aria-hidden': true
    }, externalEventHandlers, {
      onClick: createHandleBackdropClick(externalEventHandlers),
      open
    });
  };
  const getTransitionProps = () => {
    const handleEnter = () => {
      setExited(false);
      if (onTransitionEnter) {
        onTransitionEnter();
      }
    };
    const handleExited = () => {
      setExited(true);
      if (onTransitionExited) {
        onTransitionExited();
      }
      if (closeAfterTransition) {
        handleClose();
      }
    };
    return {
      onEnter: createChainedFunction(handleEnter, children == null ? void 0 : children.props.onEnter),
      onExited: createChainedFunction(handleExited, children == null ? void 0 : children.props.onExited)
    };
  };
  return {
    getRootProps,
    getBackdropProps,
    getTransitionProps,
    rootRef: handleRef,
    portalRef: handlePortalRef,
    isTopModal,
    exited,
    hasTransition
  };
}

function getModalUtilityClass(slot) {
  return generateUtilityClass('MuiModal', slot);
}
generateUtilityClasses('MuiModal', ['root', 'hidden', 'backdrop']);

const _excluded$4 = ["BackdropComponent", "BackdropProps", "classes", "className", "closeAfterTransition", "children", "container", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onTransitionEnter", "onTransitionExited", "open", "slotProps", "slots", "theme"];
const useUtilityClasses$3 = ownerState => {
  const {
    open,
    exited,
    classes
  } = ownerState;
  const slots = {
    root: ['root', !open && exited && 'hidden'],
    backdrop: ['backdrop']
  };
  return composeClasses(slots, getModalUtilityClass, classes);
};
const ModalRoot = styled('div', {
  name: 'MuiModal',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, !ownerState.open && ownerState.exited && styles.hidden];
  }
})(({
  theme,
  ownerState
}) => _extends$i({
  position: 'fixed',
  zIndex: (theme.vars || theme).zIndex.modal,
  right: 0,
  bottom: 0,
  top: 0,
  left: 0
}, !ownerState.open && ownerState.exited && {
  visibility: 'hidden'
}));
const ModalBackdrop = styled(Backdrop, {
  name: 'MuiModal',
  slot: 'Backdrop',
  overridesResolver: (props, styles) => {
    return styles.backdrop;
  }
})({
  zIndex: -1
});

/**
 * Modal is a lower-level construct that is leveraged by the following components:
 *
 * - [Dialog](/material-ui/api/dialog/)
 * - [Drawer](/material-ui/api/drawer/)
 * - [Menu](/material-ui/api/menu/)
 * - [Popover](/material-ui/api/popover/)
 *
 * If you are creating a modal dialog, you probably want to use the [Dialog](/material-ui/api/dialog/) component
 * rather than directly using Modal.
 *
 * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
 */
const Modal = /*#__PURE__*/React$1.forwardRef(function Modal(inProps, ref) {
  var _ref, _slots$root, _ref2, _slots$backdrop, _slotProps$root, _slotProps$backdrop;
  const props = useDefaultProps({
    name: 'MuiModal',
    props: inProps
  });
  const {
      BackdropComponent = ModalBackdrop,
      BackdropProps,
      className,
      closeAfterTransition = false,
      children,
      container,
      component,
      components = {},
      componentsProps = {},
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false,
      onBackdropClick,
      open,
      slotProps,
      slots
      // eslint-disable-next-line react/prop-types
    } = props,
    other = _objectWithoutPropertiesLoose$2(props, _excluded$4);
  const propsWithDefaults = _extends$i({}, props, {
    closeAfterTransition,
    disableAutoFocus,
    disableEnforceFocus,
    disableEscapeKeyDown,
    disablePortal,
    disableRestoreFocus,
    disableScrollLock,
    hideBackdrop,
    keepMounted
  });
  const {
    getRootProps,
    getBackdropProps,
    getTransitionProps,
    portalRef,
    isTopModal,
    exited,
    hasTransition
  } = useModal(_extends$i({}, propsWithDefaults, {
    rootRef: ref
  }));
  const ownerState = _extends$i({}, propsWithDefaults, {
    exited
  });
  const classes = useUtilityClasses$3(ownerState);
  const childProps = {};
  if (children.props.tabIndex === undefined) {
    childProps.tabIndex = '-1';
  }

  // It's a Transition like component
  if (hasTransition) {
    const {
      onEnter,
      onExited
    } = getTransitionProps();
    childProps.onEnter = onEnter;
    childProps.onExited = onExited;
  }
  const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : ModalRoot;
  const BackdropSlot = (_ref2 = (_slots$backdrop = slots == null ? void 0 : slots.backdrop) != null ? _slots$backdrop : components.Backdrop) != null ? _ref2 : BackdropComponent;
  const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
  const backdropSlotProps = (_slotProps$backdrop = slotProps == null ? void 0 : slotProps.backdrop) != null ? _slotProps$backdrop : componentsProps.backdrop;
  const rootProps = useSlotProps({
    elementType: RootSlot,
    externalSlotProps: rootSlotProps,
    externalForwardedProps: other,
    getSlotProps: getRootProps,
    additionalProps: {
      ref,
      as: component
    },
    ownerState,
    className: clsx(className, rootSlotProps == null ? void 0 : rootSlotProps.className, classes == null ? void 0 : classes.root, !ownerState.open && ownerState.exited && (classes == null ? void 0 : classes.hidden))
  });
  const backdropProps = useSlotProps({
    elementType: BackdropSlot,
    externalSlotProps: backdropSlotProps,
    additionalProps: BackdropProps,
    getSlotProps: otherHandlers => {
      return getBackdropProps(_extends$i({}, otherHandlers, {
        onClick: e => {
          if (onBackdropClick) {
            onBackdropClick(e);
          }
          if (otherHandlers != null && otherHandlers.onClick) {
            otherHandlers.onClick(e);
          }
        }
      }));
    },
    className: clsx(backdropSlotProps == null ? void 0 : backdropSlotProps.className, BackdropProps == null ? void 0 : BackdropProps.className, classes == null ? void 0 : classes.backdrop),
    ownerState
  });
  if (!keepMounted && !open && (!hasTransition || exited)) {
    return null;
  }
  return /*#__PURE__*/jsxRuntimeExports.jsx(Portal, {
    ref: portalRef,
    container: container,
    disablePortal: disablePortal,
    children: /*#__PURE__*/jsxRuntimeExports.jsxs(RootSlot, _extends$i({}, rootProps, {
      children: [!hideBackdrop && BackdropComponent ? /*#__PURE__*/jsxRuntimeExports.jsx(BackdropSlot, _extends$i({}, backdropProps)) : null, /*#__PURE__*/jsxRuntimeExports.jsx(FocusTrap, {
        disableEnforceFocus: disableEnforceFocus,
        disableAutoFocus: disableAutoFocus,
        disableRestoreFocus: disableRestoreFocus,
        isEnabled: isTopModal,
        open: open,
        children: /*#__PURE__*/React$1.cloneElement(children, childProps)
      })]
    }))
  });
});
process.env.NODE_ENV !== "production" ? Modal.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A backdrop component. This prop enables custom backdrop rendering.
   * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
   * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
   * @default styled(Backdrop, {
   *   name: 'MuiModal',
   *   slot: 'Backdrop',
   *   overridesResolver: (props, styles) => {
   *     return styles.backdrop;
   *   },
   * })({
   *   zIndex: -1,
   * })
   */
  BackdropComponent: PropTypes.elementType,
  /**
   * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.
   * @deprecated Use `slotProps.backdrop` instead.
   */
  BackdropProps: PropTypes.object,
  /**
   * A single child content element.
   */
  children: elementAcceptingRef.isRequired,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * When set to true the Modal waits until a nested Transition is completed before closing.
   * @default false
   */
  closeAfterTransition: PropTypes.bool,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `slots` prop.
   * It's recommended to use the `slots` prop instead.
   *
   * @default {}
   */
  components: PropTypes.shape({
    Backdrop: PropTypes.elementType,
    Root: PropTypes.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `slotProps` prop.
   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
   *
   * @default {}
   */
  componentsProps: PropTypes.shape({
    backdrop: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
  }),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),
  /**
   * If `true`, the modal will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableAutoFocus: PropTypes.bool,
  /**
   * If `true`, the modal will not prevent focus from leaving the modal while open.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableEnforceFocus: PropTypes.bool,
  /**
   * If `true`, hitting escape will not fire the `onClose` callback.
   * @default false
   */
  disableEscapeKeyDown: PropTypes.bool,
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: PropTypes.bool,
  /**
   * If `true`, the modal will not restore focus to previously focused element once
   * modal is hidden or unmounted.
   * @default false
   */
  disableRestoreFocus: PropTypes.bool,
  /**
   * Disable the scroll lock behavior.
   * @default false
   */
  disableScrollLock: PropTypes.bool,
  /**
   * If `true`, the backdrop is not rendered.
   * @default false
   */
  hideBackdrop: PropTypes.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Modal.
   * @default false
   */
  keepMounted: PropTypes.bool,
  /**
   * Callback fired when the backdrop is clicked.
   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
   */
  onBackdropClick: PropTypes.func,
  /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
   */
  onClose: PropTypes.func,
  /**
   * A function called when a transition enters.
   */
  onTransitionEnter: PropTypes.func,
  /**
   * A function called when a transition has exited.
   */
  onTransitionExited: PropTypes.func,
  /**
   * If `true`, the component is shown.
   */
  open: PropTypes.bool.isRequired,
  /**
   * The props used for each slot inside the Modal.
   * @default {}
   */
  slotProps: PropTypes.shape({
    backdrop: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
  }),
  /**
   * The components used for each slot inside the Modal.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: PropTypes.shape({
    backdrop: PropTypes.elementType,
    root: PropTypes.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
} : void 0;

function getDialogUtilityClass(slot) {
  return generateUtilityClass('MuiDialog', slot);
}
const dialogClasses = generateUtilityClasses('MuiDialog', ['root', 'scrollPaper', 'scrollBody', 'container', 'paper', 'paperScrollPaper', 'paperScrollBody', 'paperWidthFalse', 'paperWidthXs', 'paperWidthSm', 'paperWidthMd', 'paperWidthLg', 'paperWidthXl', 'paperFullWidth', 'paperFullScreen']);

const DialogContext = /*#__PURE__*/React$1.createContext({});
if (process.env.NODE_ENV !== 'production') {
  DialogContext.displayName = 'DialogContext';
}

const _excluded$3 = ["aria-describedby", "aria-labelledby", "BackdropComponent", "BackdropProps", "children", "className", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClick", "onClose", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps"];
const DialogBackdrop = styled(Backdrop, {
  name: 'MuiDialog',
  slot: 'Backdrop',
  overrides: (props, styles) => styles.backdrop
})({
  // Improve scrollable dialog support.
  zIndex: -1
});
const useUtilityClasses$2 = ownerState => {
  const {
    classes,
    scroll,
    maxWidth,
    fullWidth,
    fullScreen
  } = ownerState;
  const slots = {
    root: ['root'],
    container: ['container', `scroll${capitalize$1(scroll)}`],
    paper: ['paper', `paperScroll${capitalize$1(scroll)}`, `paperWidth${capitalize$1(String(maxWidth))}`, fullWidth && 'paperFullWidth', fullScreen && 'paperFullScreen']
  };
  return composeClasses(slots, getDialogUtilityClass, classes);
};
const DialogRoot = styled(Modal, {
  name: 'MuiDialog',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})({
  '@media print': {
    // Use !important to override the Modal inline-style.
    position: 'absolute !important'
  }
});
const DialogContainer = styled('div', {
  name: 'MuiDialog',
  slot: 'Container',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.container, styles[`scroll${capitalize$1(ownerState.scroll)}`]];
  }
})(({
  ownerState
}) => _extends$i({
  height: '100%',
  '@media print': {
    height: 'auto'
  },
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0
}, ownerState.scroll === 'paper' && {
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center'
}, ownerState.scroll === 'body' && {
  overflowY: 'auto',
  overflowX: 'hidden',
  textAlign: 'center',
  '&::after': {
    content: '""',
    display: 'inline-block',
    verticalAlign: 'middle',
    height: '100%',
    width: '0'
  }
}));
const DialogPaper = styled(Paper, {
  name: 'MuiDialog',
  slot: 'Paper',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.paper, styles[`scrollPaper${capitalize$1(ownerState.scroll)}`], styles[`paperWidth${capitalize$1(String(ownerState.maxWidth))}`], ownerState.fullWidth && styles.paperFullWidth, ownerState.fullScreen && styles.paperFullScreen];
  }
})(({
  theme,
  ownerState
}) => _extends$i({
  margin: 32,
  position: 'relative',
  overflowY: 'auto',
  // Fix IE11 issue, to remove at some point.
  '@media print': {
    overflowY: 'visible',
    boxShadow: 'none'
  }
}, ownerState.scroll === 'paper' && {
  display: 'flex',
  flexDirection: 'column',
  maxHeight: 'calc(100% - 64px)'
}, ownerState.scroll === 'body' && {
  display: 'inline-block',
  verticalAlign: 'middle',
  textAlign: 'left' // 'initial' doesn't work on IE11
}, !ownerState.maxWidth && {
  maxWidth: 'calc(100% - 64px)'
}, ownerState.maxWidth === 'xs' && {
  maxWidth: theme.breakpoints.unit === 'px' ? Math.max(theme.breakpoints.values.xs, 444) : `max(${theme.breakpoints.values.xs}${theme.breakpoints.unit}, 444px)`,
  [`&.${dialogClasses.paperScrollBody}`]: {
    [theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2)]: {
      maxWidth: 'calc(100% - 64px)'
    }
  }
}, ownerState.maxWidth && ownerState.maxWidth !== 'xs' && {
  maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`,
  [`&.${dialogClasses.paperScrollBody}`]: {
    [theme.breakpoints.down(theme.breakpoints.values[ownerState.maxWidth] + 32 * 2)]: {
      maxWidth: 'calc(100% - 64px)'
    }
  }
}, ownerState.fullWidth && {
  width: 'calc(100% - 64px)'
}, ownerState.fullScreen && {
  margin: 0,
  width: '100%',
  maxWidth: '100%',
  height: '100%',
  maxHeight: 'none',
  borderRadius: 0,
  [`&.${dialogClasses.paperScrollBody}`]: {
    margin: 0,
    maxWidth: '100%'
  }
}));

/**
 * Dialogs are overlaid modal paper based components with a backdrop.
 */
const Dialog = /*#__PURE__*/React$1.forwardRef(function Dialog(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: 'MuiDialog'
  });
  const theme = useTheme();
  const defaultTransitionDuration = {
    enter: theme.transitions.duration.enteringScreen,
    exit: theme.transitions.duration.leavingScreen
  };
  const {
      'aria-describedby': ariaDescribedby,
      'aria-labelledby': ariaLabelledbyProp,
      BackdropComponent,
      BackdropProps,
      children,
      className,
      disableEscapeKeyDown = false,
      fullScreen = false,
      fullWidth = false,
      maxWidth = 'sm',
      onBackdropClick,
      onClick,
      onClose,
      open,
      PaperComponent = Paper,
      PaperProps = {},
      scroll = 'paper',
      TransitionComponent = Fade,
      transitionDuration = defaultTransitionDuration,
      TransitionProps
    } = props,
    other = _objectWithoutPropertiesLoose$2(props, _excluded$3);
  const ownerState = _extends$i({}, props, {
    disableEscapeKeyDown,
    fullScreen,
    fullWidth,
    maxWidth,
    scroll
  });
  const classes = useUtilityClasses$2(ownerState);
  const backdropClick = React$1.useRef();
  const handleMouseDown = event => {
    // We don't want to close the dialog when clicking the dialog content.
    // Make sure the event starts and ends on the same DOM element.
    backdropClick.current = event.target === event.currentTarget;
  };
  const handleBackdropClick = event => {
    if (onClick) {
      onClick(event);
    }

    // Ignore the events not coming from the "backdrop".
    if (!backdropClick.current) {
      return;
    }
    backdropClick.current = null;
    if (onBackdropClick) {
      onBackdropClick(event);
    }
    if (onClose) {
      onClose(event, 'backdropClick');
    }
  };
  const ariaLabelledby = useId(ariaLabelledbyProp);
  const dialogContextValue = React$1.useMemo(() => {
    return {
      titleId: ariaLabelledby
    };
  }, [ariaLabelledby]);
  return /*#__PURE__*/jsxRuntimeExports.jsx(DialogRoot, _extends$i({
    className: clsx(classes.root, className),
    closeAfterTransition: true,
    components: {
      Backdrop: DialogBackdrop
    },
    componentsProps: {
      backdrop: _extends$i({
        transitionDuration,
        as: BackdropComponent
      }, BackdropProps)
    },
    disableEscapeKeyDown: disableEscapeKeyDown,
    onClose: onClose,
    open: open,
    ref: ref,
    onClick: handleBackdropClick,
    ownerState: ownerState
  }, other, {
    children: /*#__PURE__*/jsxRuntimeExports.jsx(TransitionComponent, _extends$i({
      appear: true,
      in: open,
      timeout: transitionDuration,
      role: "presentation"
    }, TransitionProps, {
      children: /*#__PURE__*/jsxRuntimeExports.jsx(DialogContainer, {
        className: clsx(classes.container),
        onMouseDown: handleMouseDown,
        ownerState: ownerState,
        children: /*#__PURE__*/jsxRuntimeExports.jsx(DialogPaper, _extends$i({
          as: PaperComponent,
          elevation: 24,
          role: "dialog",
          "aria-describedby": ariaDescribedby,
          "aria-labelledby": ariaLabelledby
        }, PaperProps, {
          className: clsx(classes.paper, PaperProps.className),
          ownerState: ownerState,
          children: /*#__PURE__*/jsxRuntimeExports.jsx(DialogContext.Provider, {
            value: dialogContextValue,
            children: children
          })
        }))
      })
    }))
  }));
});
process.env.NODE_ENV !== "production" ? Dialog.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The id(s) of the element(s) that describe the dialog.
   */
  'aria-describedby': PropTypes.string,
  /**
   * The id(s) of the element(s) that label the dialog.
   */
  'aria-labelledby': PropTypes.string,
  /**
   * A backdrop component. This prop enables custom backdrop rendering.
   * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
   * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
   * @default styled(Backdrop, {
   *   name: 'MuiModal',
   *   slot: 'Backdrop',
   *   overridesResolver: (props, styles) => {
   *     return styles.backdrop;
   *   },
   * })({
   *   zIndex: -1,
   * })
   */
  BackdropComponent: PropTypes.elementType,
  /**
   * @ignore
   */
  BackdropProps: PropTypes.object,
  /**
   * Dialog children, usually the included sub-components.
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * If `true`, hitting escape will not fire the `onClose` callback.
   * @default false
   */
  disableEscapeKeyDown: PropTypes.bool,
  /**
   * If `true`, the dialog is full-screen.
   * @default false
   */
  fullScreen: PropTypes.bool,
  /**
   * If `true`, the dialog stretches to `maxWidth`.
   *
   * Notice that the dialog width grow is limited by the default margin.
   * @default false
   */
  fullWidth: PropTypes.bool,
  /**
   * Determine the max-width of the dialog.
   * The dialog width grows with the size of the screen.
   * Set to `false` to disable `maxWidth`.
   * @default 'sm'
   */
  maxWidth: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),
  /**
   * Callback fired when the backdrop is clicked.
   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
   */
  onBackdropClick: PropTypes.func,
  /**
   * @ignore
   */
  onClick: PropTypes.func,
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
   */
  onClose: PropTypes.func,
  /**
   * If `true`, the component is shown.
   */
  open: PropTypes.bool.isRequired,
  /**
   * The component used to render the body of the dialog.
   * @default Paper
   */
  PaperComponent: PropTypes.elementType,
  /**
   * Props applied to the [`Paper`](/material-ui/api/paper/) element.
   * @default {}
   */
  PaperProps: PropTypes.object,
  /**
   * Determine the container for scrolling the dialog.
   * @default 'paper'
   */
  scroll: PropTypes.oneOf(['body', 'paper']),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Fade
   */
  TransitionComponent: PropTypes.elementType,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
    appear: PropTypes.number,
    enter: PropTypes.number,
    exit: PropTypes.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   */
  TransitionProps: PropTypes.object
} : void 0;

const Stack = createStack({
  createStyledComponent: styled('div', {
    name: 'MuiStack',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  }),
  useThemeProps: inProps => useDefaultProps({
    props: inProps,
    name: 'MuiStack'
  })
});
process.env.NODE_ENV !== "production" ? Stack.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: PropTypes.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * Defines the `flex-direction` style property.
   * It is applied for all screen sizes.
   * @default 'column'
   */
  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),
  /**
   * Add an element between each child.
   */
  divider: PropTypes.node,
  /**
   * Defines the space between immediate children.
   * @default 0
   */
  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
  /**
   * The system prop, which allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.
   *
   * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),
   * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.
   *
   * To enable this flag globally, follow the [theme's default props](https://mui.com/material-ui/customization/theme-components/#default-props) configuration.
   * @default false
   */
  useFlexGap: PropTypes.bool
} : void 0;

const _excluded$2 = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "slotProps", "slots", "type"];
const useUtilityClasses$1 = ownerState => {
  const {
    classes,
    disableUnderline
  } = ownerState;
  const slots = {
    root: ['root', !disableUnderline && 'underline'],
    input: ['input']
  };
  const composedClasses = composeClasses(slots, getInputUtilityClass, classes);
  return _extends$i({}, classes, composedClasses);
};
const InputRoot = styled(InputBaseRoot, {
  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
  name: 'MuiInput',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [...rootOverridesResolver(props, styles), !ownerState.disableUnderline && styles.underline];
  }
})(({
  theme,
  ownerState
}) => {
  const light = theme.palette.mode === 'light';
  let bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
  if (theme.vars) {
    bottomLineColor = `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})`;
  }
  return _extends$i({
    position: 'relative'
  }, ownerState.formControl && {
    'label + &': {
      marginTop: 16
    }
  }, !ownerState.disableUnderline && {
    '&::after': {
      borderBottom: `2px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
      left: 0,
      bottom: 0,
      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
      content: '""',
      position: 'absolute',
      right: 0,
      transform: 'scaleX(0)',
      transition: theme.transitions.create('transform', {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut
      }),
      pointerEvents: 'none' // Transparent to the hover style.
    },
    [`&.${inputClasses.focused}:after`]: {
      // translateX(0) is a workaround for Safari transform scale bug
      // See https://github.com/mui/material-ui/issues/31766
      transform: 'scaleX(1) translateX(0)'
    },
    [`&.${inputClasses.error}`]: {
      '&::before, &::after': {
        borderBottomColor: (theme.vars || theme).palette.error.main
      }
    },
    '&::before': {
      borderBottom: `1px solid ${bottomLineColor}`,
      left: 0,
      bottom: 0,
      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
      content: '"\\00a0"',
      position: 'absolute',
      right: 0,
      transition: theme.transitions.create('border-bottom-color', {
        duration: theme.transitions.duration.shorter
      }),
      pointerEvents: 'none' // Transparent to the hover style.
    },
    [`&:hover:not(.${inputClasses.disabled}, .${inputClasses.error}):before`]: {
      borderBottom: `2px solid ${(theme.vars || theme).palette.text.primary}`,
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        borderBottom: `1px solid ${bottomLineColor}`
      }
    },
    [`&.${inputClasses.disabled}:before`]: {
      borderBottomStyle: 'dotted'
    }
  });
});
const InputInput = styled(InputBaseComponent, {
  name: 'MuiInput',
  slot: 'Input',
  overridesResolver: inputOverridesResolver
})({});
const Input = /*#__PURE__*/React$1.forwardRef(function Input(inProps, ref) {
  var _ref, _slots$root, _ref2, _slots$input;
  const props = useDefaultProps({
    props: inProps,
    name: 'MuiInput'
  });
  const {
      disableUnderline,
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      inputComponent = 'input',
      multiline = false,
      slotProps,
      slots = {},
      type = 'text'
    } = props,
    other = _objectWithoutPropertiesLoose$2(props, _excluded$2);
  const classes = useUtilityClasses$1(props);
  const ownerState = {
    disableUnderline
  };
  const inputComponentsProps = {
    root: {
      ownerState
    }
  };
  const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge$1(slotProps != null ? slotProps : componentsPropsProp, inputComponentsProps) : inputComponentsProps;
  const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : InputRoot;
  const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : InputInput;
  return /*#__PURE__*/jsxRuntimeExports.jsx(InputBase$1, _extends$i({
    slots: {
      root: RootSlot,
      input: InputSlot
    },
    slotProps: componentsProps,
    fullWidth: fullWidth,
    inputComponent: inputComponent,
    multiline: multiline,
    ref: ref,
    type: type
  }, other, {
    classes: classes
  }));
});
process.env.NODE_ENV !== "production" ? Input.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: PropTypes.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: PropTypes.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */
  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary']), PropTypes.string]),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `slots` prop.
   * It's recommended to use the `slots` prop instead.
   *
   * @default {}
   */
  components: PropTypes.shape({
    Input: PropTypes.elementType,
    Root: PropTypes.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `slotProps` prop.
   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
   *
   * @default {}
   */
  componentsProps: PropTypes.shape({
    input: PropTypes.object,
    root: PropTypes.object
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: PropTypes.any,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: PropTypes.bool,
  /**
   * If `true`, the `input` will not have an underline.
   */
  disableUnderline: PropTypes.bool,
  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: PropTypes.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: PropTypes.bool,
  /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */
  fullWidth: PropTypes.bool,
  /**
   * The id of the `input` element.
   */
  id: PropTypes.string,
  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */
  inputComponent: PropTypes.elementType,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @default {}
   */
  inputProps: PropTypes.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: refType,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */
  margin: PropTypes.oneOf(['dense', 'none']),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /**
   * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
   * @default false
   */
  multiline: PropTypes.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: PropTypes.string,
  /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: PropTypes.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: PropTypes.string,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: PropTypes.bool,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: PropTypes.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: PropTypes.shape({
    input: PropTypes.object,
    root: PropTypes.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: PropTypes.shape({
    input: PropTypes.elementType,
    root: PropTypes.elementType
  }),
  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: PropTypes.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */
  type: PropTypes.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: PropTypes.any
} : void 0;
Input.muiName = 'Input';

function getInputAdornmentUtilityClass(slot) {
  return generateUtilityClass('MuiInputAdornment', slot);
}
const inputAdornmentClasses = generateUtilityClasses('MuiInputAdornment', ['root', 'filled', 'standard', 'outlined', 'positionStart', 'positionEnd', 'disablePointerEvents', 'hiddenLabel', 'sizeSmall']);

var _span;
const _excluded = ["children", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"];
const overridesResolver = (props, styles) => {
  const {
    ownerState
  } = props;
  return [styles.root, styles[`position${capitalize$1(ownerState.position)}`], ownerState.disablePointerEvents === true && styles.disablePointerEvents, styles[ownerState.variant]];
};
const useUtilityClasses = ownerState => {
  const {
    classes,
    disablePointerEvents,
    hiddenLabel,
    position,
    size,
    variant
  } = ownerState;
  const slots = {
    root: ['root', disablePointerEvents && 'disablePointerEvents', position && `position${capitalize$1(position)}`, variant, hiddenLabel && 'hiddenLabel', size && `size${capitalize$1(size)}`]
  };
  return composeClasses(slots, getInputAdornmentUtilityClass, classes);
};
const InputAdornmentRoot = styled('div', {
  name: 'MuiInputAdornment',
  slot: 'Root',
  overridesResolver
})(({
  theme,
  ownerState
}) => _extends$i({
  display: 'flex',
  height: '0.01em',
  // Fix IE11 flexbox alignment. To remove at some point.
  maxHeight: '2em',
  alignItems: 'center',
  whiteSpace: 'nowrap',
  color: (theme.vars || theme).palette.action.active
}, ownerState.variant === 'filled' && {
  // Styles applied to the root element if `variant="filled"`.
  [`&.${inputAdornmentClasses.positionStart}&:not(.${inputAdornmentClasses.hiddenLabel})`]: {
    marginTop: 16
  }
}, ownerState.position === 'start' && {
  // Styles applied to the root element if `position="start"`.
  marginRight: 8
}, ownerState.position === 'end' && {
  // Styles applied to the root element if `position="end"`.
  marginLeft: 8
}, ownerState.disablePointerEvents === true && {
  // Styles applied to the root element if `disablePointerEvents={true}`.
  pointerEvents: 'none'
}));
const InputAdornment = /*#__PURE__*/React$1.forwardRef(function InputAdornment(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: 'MuiInputAdornment'
  });
  const {
      children,
      className,
      component = 'div',
      disablePointerEvents = false,
      disableTypography = false,
      position,
      variant: variantProp
    } = props,
    other = _objectWithoutPropertiesLoose$2(props, _excluded);
  const muiFormControl = useFormControl() || {};
  let variant = variantProp;
  if (variantProp && muiFormControl.variant) {
    if (process.env.NODE_ENV !== 'production') {
      if (variantProp === muiFormControl.variant) {
        console.error('MUI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');
      }
    }
  }
  if (muiFormControl && !variant) {
    variant = muiFormControl.variant;
  }
  const ownerState = _extends$i({}, props, {
    hiddenLabel: muiFormControl.hiddenLabel,
    size: muiFormControl.size,
    disablePointerEvents,
    position,
    variant
  });
  const classes = useUtilityClasses(ownerState);
  return /*#__PURE__*/jsxRuntimeExports.jsx(FormControlContext.Provider, {
    value: null,
    children: /*#__PURE__*/jsxRuntimeExports.jsx(InputAdornmentRoot, _extends$i({
      as: component,
      ownerState: ownerState,
      className: clsx(classes.root, className),
      ref: ref
    }, other, {
      children: typeof children === 'string' && !disableTypography ? /*#__PURE__*/jsxRuntimeExports.jsx(Typography, {
        color: "text.secondary",
        children: children
      }) : /*#__PURE__*/jsxRuntimeExports.jsxs(React$1.Fragment, {
        children: [position === 'start' ? ( /* notranslate needed while Google Translate will not fix zero-width space issue */_span || (_span = /*#__PURE__*/jsxRuntimeExports.jsx("span", {
          className: "notranslate",
          children: "\u200B"
        }))) : null, children]
      })
    }))
  });
});
process.env.NODE_ENV !== "production" ? InputAdornment.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally an `IconButton` or string.
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * Disable pointer events on the root.
   * This allows for the content of the adornment to focus the `input` on click.
   * @default false
   */
  disablePointerEvents: PropTypes.bool,
  /**
   * If children is a string then disable wrapping in a Typography component.
   * @default false
   */
  disableTypography: PropTypes.bool,
  /**
   * The position this adornment should appear relative to the `Input`.
   */
  position: PropTypes.oneOf(['end', 'start']).isRequired,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * The variant to use.
   * Note: If you are using the `TextField` component or the `FormControl` component
   * you do not have to set this manually.
   */
  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])
} : void 0;

var HEIGHT$3 = '40px';
var BORDER_RADIUS$1 = '8px';
var BOLD_FONT_WEIGHT = 450;
function UrsorInputField(props) {
  var _props$width, _props$height, _props$height2, _props$borderRadius, _props$backgroundColo, _props$paddingLeft, _props$fontSize, _props$color;
  var _useState = useState(false),
    _useState2 = _slicedToArray$2(_useState, 2),
    hovering = _useState2[0],
    setHovering = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray$2(_useState3, 2),
    active = _useState4[0],
    setActive = _useState4[1];
  var customSx = {
    width: (_props$width = props.width) !== null && _props$width !== void 0 ? _props$width : '100%',
    height: (_props$height = props.height) !== null && _props$height !== void 0 ? _props$height : HEIGHT$3,
    minHeight: (_props$height2 = props.height) !== null && _props$height2 !== void 0 ? _props$height2 : HEIGHT$3,
    borderRadius: (_props$borderRadius = props.borderRadius) !== null && _props$borderRadius !== void 0 ? _props$borderRadius : BORDER_RADIUS$1,
    background: (_props$backgroundColo = props.backgroundColor) !== null && _props$backgroundColo !== void 0 ? _props$backgroundColo : PALETTE.secondary.grey[1],
    border: "2px solid ".concat(
    // eslint-disable-next-line no-nested-ternary -- idiotic rule
    active ? PALETTE.secondary.purple[2] : hovering ? PALETTE.secondary.purple[1] : 'transparent'),
    transition: '0.2s',
    // : props.border
    // ? `1.4px solid ${PALETTE.secondary.grey[2]}`
    // : null,
    boxSizing: 'border-box',
    outline: props.outline,
    backdropFilter: props.backgroundBlur,
    fontFamily: 'inherit'
  };
  var inputProps = {
    type: props.password ? 'password' : undefined,
    style: {
      paddingLeft: (_props$paddingLeft = props.paddingLeft) !== null && _props$paddingLeft !== void 0 ? _props$paddingLeft : '10px',
      paddingRight: props.leftAlign ? '10px' : 0,
      textAlign: props.leftAlign ? 'left' : 'center',
      textOverflow: 'ellipsis',
      fontSize: (_props$fontSize = props.fontSize) !== null && _props$fontSize !== void 0 ? _props$fontSize : FONT_SIZES.normal,
      color: (_props$color = props.color) !== null && _props$color !== void 0 ? _props$color : PALETTE.font.dark,
      fontWeight: props.boldValue || props.value && !props.noBold ? BOLD_FONT_WEIGHT : 'unset',
      lineHeight: '100%',
      transition: '0.2s'
    },
    form: {
      autoComplete: 'off'
    }
  };
  return jsxRuntimeExports.jsx(Input
  // eslint-disable-next-line jsx-a11y/no-autofocus -- boo
  , {
    // eslint-disable-next-line jsx-a11y/no-autofocus -- boo
    autoFocus: props.autoFocus,
    endAdornment: props.endIcon ? jsxRuntimeExports.jsx(InputAdornment, {
      position: "end",
      sx: {
        pr: '11px'
      },
      children: props.endIcon
    }) : null,
    disableUnderline: true,
    //@ts-expect-error -- boo
    inputProps: inputProps,
    onBlur: function onBlur() {
      var _props$onBlur;
      setActive(false);
      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props);
    },
    onChange: props.onChange,
    onFocus: function onFocus() {
      setActive(true);
    },
    onKeyPress: function onKeyPress(event) {
      if (event.key === 'Enter') {
        var _props$onEnterKey;
        (_props$onEnterKey = props.onEnterKey) === null || _props$onEnterKey === void 0 || _props$onEnterKey.call(props);
      }
    },
    onMouseEnter: function onMouseEnter() {
      setHovering(true);
    },
    onMouseLeave: function onMouseLeave() {
      setHovering(false);
    },
    placeholder: props.placeholder,
    sx: customSx,
    value: props.value
  });
}

var _path$e;
function _extends$g() { return _extends$g = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$g.apply(null, arguments); }
var SvgChevronLeft = function SvgChevronLeft(props) {
  return /*#__PURE__*/React$1.createElement("svg", _extends$g({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 32 32"
  }, props), _path$e || (_path$e = /*#__PURE__*/React$1.createElement("path", {
    fill: "#0D2839",
    fillRule: "evenodd",
    d: "M19.557 25.56a1.5 1.5 0 0 1-2.122 0l-8.5-8.5a1.5 1.5 0 0 1 0-2.12l8.5-8.5a1.5 1.5 0 1 1 2.122 2.12L12.117 16l7.44 7.44a1.5 1.5 0 0 1 0 2.12",
    clipRule: "evenodd"
  })));
};

var _path$d;
function _extends$f() { return _extends$f = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$f.apply(null, arguments); }
var SvgChevronDown = function SvgChevronDown(props) {
  return /*#__PURE__*/React$1.createElement("svg", _extends$f({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 32 32"
  }, props), _path$d || (_path$d = /*#__PURE__*/React$1.createElement("path", {
    fill: "#0D2839",
    fillRule: "evenodd",
    d: "M25.56 12.44a1.5 1.5 0 0 1 0 2.12l-8.5 8.5a1.5 1.5 0 0 1-2.12 0l-8.5-8.5a1.5 1.5 0 0 1 2.12-2.12L16 19.878l7.44-7.44a1.5 1.5 0 0 1 2.12 0",
    clipRule: "evenodd"
  })));
};

var _g, _defs;
function _extends$e() { return _extends$e = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$e.apply(null, arguments); }
var SvgInfoIcon = function SvgInfoIcon(props) {
  return /*#__PURE__*/React$1.createElement("svg", _extends$e({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 16 17"
  }, props), _g || (_g = /*#__PURE__*/React$1.createElement("g", {
    clipPath: "url(#InfoIcon_svg__a)"
  }, /*#__PURE__*/React$1.createElement("path", {
    fill: "#0D2839",
    fillRule: "evenodd",
    d: "M8 2a6.5 6.5 0 1 0 0 13A6.5 6.5 0 0 0 8 2M0 8.5a8 8 0 1 1 16 0 8 8 0 0 1-16 0m6.5-.25a.75.75 0 0 1 .75-.75h1a.75.75 0 0 1 .75.75V11h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25V9h-.25a.75.75 0 0 1-.75-.75M8 6.5a1 1 0 1 0 0-2 1 1 0 0 0 0 2",
    clipRule: "evenodd"
  }))), _defs || (_defs = /*#__PURE__*/React$1.createElement("defs", null, /*#__PURE__*/React$1.createElement("clipPath", {
    id: "InfoIcon_svg__a"
  }, /*#__PURE__*/React$1.createElement("path", {
    fill: "#fff",
    d: "M0 .5h16v16H0z"
  })))));
};

/**
 * Simple ponyfill for Object.fromEntries
 */

var fromEntries = function fromEntries(entries) {
  return entries.reduce(function (acc, _ref) {
    var key = _ref[0],
        value = _ref[1];
    acc[key] = value;
    return acc;
  }, {});
};
/**
 * Small wrapper around `useLayoutEffect` to get rid of the warning on SSR envs
 */

var useIsomorphicLayoutEffect$1 = typeof window !== 'undefined' && window.document && window.document.createElement ? React$1.useLayoutEffect : React$1.useEffect;

/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */

var hasElementType = typeof Element !== 'undefined';
var hasMap = typeof Map === 'function';
var hasSet = typeof Set === 'function';
var hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView;

// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js

function equal(a, b) {
  // START: fast-deep-equal es6/index.js 3.1.3
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    if (a.constructor !== b.constructor) return false;

    var length, i, keys;
    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0;)
        if (!equal(a[i], b[i])) return false;
      return true;
    }

    // START: Modifications:
    // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code
    //    to co-exist with es5.
    // 2. Replace `for of` with es5 compliant iteration using `for`.
    //    Basically, take:
    //
    //    ```js
    //    for (i of a.entries())
    //      if (!b.has(i[0])) return false;
    //    ```
    //
    //    ... and convert to:
    //
    //    ```js
    //    it = a.entries();
    //    while (!(i = it.next()).done)
    //      if (!b.has(i.value[0])) return false;
    //    ```
    //
    //    **Note**: `i` access switches to `i.value`.
    var it;
    if (hasMap && (a instanceof Map) && (b instanceof Map)) {
      if (a.size !== b.size) return false;
      it = a.entries();
      while (!(i = it.next()).done)
        if (!b.has(i.value[0])) return false;
      it = a.entries();
      while (!(i = it.next()).done)
        if (!equal(i.value[1], b.get(i.value[0]))) return false;
      return true;
    }

    if (hasSet && (a instanceof Set) && (b instanceof Set)) {
      if (a.size !== b.size) return false;
      it = a.entries();
      while (!(i = it.next()).done)
        if (!b.has(i.value[0])) return false;
      return true;
    }
    // END: Modifications

    if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0;)
        if (a[i] !== b[i]) return false;
      return true;
    }

    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
    // START: Modifications:
    // Apply guards for `Object.create(null)` handling. See:
    // - https://github.com/FormidableLabs/react-fast-compare/issues/64
    // - https://github.com/epoberezkin/fast-deep-equal/issues/49
    if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === 'function' && typeof b.valueOf === 'function') return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString && typeof a.toString === 'function' && typeof b.toString === 'function') return a.toString() === b.toString();
    // END: Modifications

    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) return false;

    for (i = length; i-- !== 0;)
      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
    // END: fast-deep-equal

    // START: react-fast-compare
    // custom handling for DOM elements
    if (hasElementType && a instanceof Element) return false;

    // custom handling for React/Preact
    for (i = length; i-- !== 0;) {
      if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) {
        // React-specific: avoid traversing React elements' _owner
        // Preact-specific: avoid traversing Preact elements' __v and __o
        //    __v = $_original / $_vnode
        //    __o = $_owner
        // These properties contain circular references and are not needed when
        // comparing the actual elements (and not their owners)
        // .$$typeof and ._store on just reasonable markers of elements

        continue;
      }

      // all other properties should be traversed as usual
      if (!equal(a[keys[i]], b[keys[i]])) return false;
    }
    // END: react-fast-compare

    // START: fast-deep-equal
    return true;
  }

  return a !== a && b !== b;
}
// end fast-deep-equal

var reactFastCompare = function isEqual(a, b) {
  try {
    return equal(a, b);
  } catch (error) {
    if (((error.message || '').match(/stack|recursion/i))) {
      // warn on circular references, don't crash
      // browsers give this different errors name and messages:
      // chrome/safari: "RangeError", "Maximum call stack size exceeded"
      // firefox: "InternalError", too much recursion"
      // edge: "Error", "Out of stack space"
      console.warn('react-fast-compare cannot handle circular refs');
      return false;
    }
    // some other error. we should definitely know about these
    throw error;
  }
};

var isEqual = /*@__PURE__*/getDefaultExportFromCjs(reactFastCompare);

var EMPTY_MODIFIERS = [];
var usePopper = function usePopper(referenceElement, popperElement, options) {
  if (options === void 0) {
    options = {};
  }

  var prevOptions = React$1.useRef(null);
  var optionsWithDefaults = {
    onFirstUpdate: options.onFirstUpdate,
    placement: options.placement || 'bottom',
    strategy: options.strategy || 'absolute',
    modifiers: options.modifiers || EMPTY_MODIFIERS
  };

  var _React$useState = React$1.useState({
    styles: {
      popper: {
        position: optionsWithDefaults.strategy,
        left: '0',
        top: '0'
      },
      arrow: {
        position: 'absolute'
      }
    },
    attributes: {}
  }),
      state = _React$useState[0],
      setState = _React$useState[1];

  var updateStateModifier = React$1.useMemo(function () {
    return {
      name: 'updateState',
      enabled: true,
      phase: 'write',
      fn: function fn(_ref) {
        var state = _ref.state;
        var elements = Object.keys(state.elements);
        ReactDOM.flushSync(function () {
          setState({
            styles: fromEntries(elements.map(function (element) {
              return [element, state.styles[element] || {}];
            })),
            attributes: fromEntries(elements.map(function (element) {
              return [element, state.attributes[element]];
            }))
          });
        });
      },
      requires: ['computeStyles']
    };
  }, []);
  var popperOptions = React$1.useMemo(function () {
    var newOptions = {
      onFirstUpdate: optionsWithDefaults.onFirstUpdate,
      placement: optionsWithDefaults.placement,
      strategy: optionsWithDefaults.strategy,
      modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {
        name: 'applyStyles',
        enabled: false
      }])
    };

    if (isEqual(prevOptions.current, newOptions)) {
      return prevOptions.current || newOptions;
    } else {
      prevOptions.current = newOptions;
      return newOptions;
    }
  }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
  var popperInstanceRef = React$1.useRef();
  useIsomorphicLayoutEffect$1(function () {
    if (popperInstanceRef.current) {
      popperInstanceRef.current.setOptions(popperOptions);
    }
  }, [popperOptions]);
  useIsomorphicLayoutEffect$1(function () {
    if (referenceElement == null || popperElement == null) {
      return;
    }

    var createPopper$1 = options.createPopper || createPopper;
    var popperInstance = createPopper$1(referenceElement, popperElement, popperOptions);
    popperInstanceRef.current = popperInstance;
    return function () {
      popperInstance.destroy();
      popperInstanceRef.current = null;
    };
  }, [referenceElement, popperElement, options.createPopper]);
  return {
    state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
    styles: state.styles,
    attributes: state.attributes,
    update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
    forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
  };
};

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        result = wait - timeSinceLastCall;

    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

var lodash_debounce = debounce;

var debounce$1 = /*@__PURE__*/getDefaultExportFromCjs(lodash_debounce);

var useIsomorphicLayoutEffect = typeof window !== "undefined" ? useLayoutEffect : useEffect;

// src/useEventListener/useEventListener.ts
function useEventListener(eventName, handler, element, options) {
  const savedHandler = useRef(handler);
  useIsomorphicLayoutEffect(() => {
    savedHandler.current = handler;
  }, [handler]);
  useEffect(() => {
    const targetElement = window;
    if (!(targetElement && targetElement.addEventListener))
      return;
    const listener = (event) => {
      savedHandler.current(event);
    };
    targetElement.addEventListener(eventName, listener, options);
    return () => {
      targetElement.removeEventListener(eventName, listener, options);
    };
  }, [eventName, element, options]);
}
function useUnmount(func) {
  const funcRef = useRef(func);
  funcRef.current = func;
  useEffect(
    () => () => {
      funcRef.current();
    },
    []
  );
}

// src/useDebounceCallback/useDebounceCallback.ts
function useDebounceCallback(func, delay = 500, options) {
  const debouncedFunc = useRef();
  useUnmount(() => {
    if (debouncedFunc.current) {
      debouncedFunc.current.cancel();
    }
  });
  const debounced = useMemo(() => {
    const debouncedFuncInstance = debounce$1(func, delay, options);
    const wrappedFunc = (...args) => {
      return debouncedFuncInstance(...args);
    };
    wrappedFunc.cancel = () => {
      debouncedFuncInstance.cancel();
    };
    wrappedFunc.isPending = () => {
      return !!debouncedFunc.current;
    };
    wrappedFunc.flush = () => {
      return debouncedFuncInstance.flush();
    };
    return wrappedFunc;
  }, [func, delay, options]);
  useEffect(() => {
    debouncedFunc.current = debounce$1(func, delay, options);
  }, [func, delay, options]);
  return debounced;
}
function useElementSize(options = {}) {
  const { initializeWithValue = true } = options;
  const [ref, setRef] = useState(null);
  const readValue = useCallback(() => {
    return {
      width: (ref == null ? void 0 : ref.offsetWidth) ?? void 0,
      height: (ref == null ? void 0 : ref.offsetHeight) ?? void 0
    };
  }, [ref == null ? void 0 : ref.offsetHeight, ref == null ? void 0 : ref.offsetWidth]);
  const [size, setSize] = useState(() => {
    if (initializeWithValue) {
      return readValue();
    }
    return { width: void 0, height: void 0 };
  });
  const handleSize = useCallback(() => {
    setSize(readValue());
  }, [ref == null ? void 0 : ref.offsetHeight, ref == null ? void 0 : ref.offsetWidth]);
  useEventListener("resize", handleSize);
  useIsomorphicLayoutEffect(() => {
    handleSize();
  }, [ref == null ? void 0 : ref.offsetHeight, ref == null ? void 0 : ref.offsetWidth]);
  const result = [setRef, size];
  result.ref = result[0];
  result.width = size.width;
  result.height = size.height;
  return result;
}
var IS_SERVER7 = typeof window === "undefined";
function useWindowSize(options = {}) {
  let { initializeWithValue = true } = options;
  if (IS_SERVER7) {
    initializeWithValue = false;
  }
  const [windowSize, setWindowSize] = useState(() => {
    if (initializeWithValue) {
      return {
        width: window.innerWidth,
        height: window.innerHeight
      };
    }
    return {
      width: void 0,
      height: void 0
    };
  });
  const debouncedSetWindowSize = useDebounceCallback(
    setWindowSize,
    options == null ? void 0 : options.debounceDelay
  );
  function handleSize() {
    const setSize = (options == null ? void 0 : options.debounceDelay) ? debouncedSetWindowSize : setWindowSize;
    setSize({
      width: window.innerWidth,
      height: window.innerHeight
    });
  }
  useEventListener("resize", handleSize);
  useIsomorphicLayoutEffect(() => {
    handleSize();
  }, []);
  return windowSize;
}

var _templateObject$5, _templateObject2$2;
function ownKeys$8(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$6(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$8(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$8(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var fadeIn$1 = keyframes(_templateObject$5 || (_templateObject$5 = _taggedTemplateLiteral(["\nfrom {\n  opacity: 0;\n}\nto {\n  opacity: 1;\n}\n"])));
keyframes(_templateObject2$2 || (_templateObject2$2 = _taggedTemplateLiteral(["\nfrom {\n  opacity: 1;\n}\nto {\n  opacity: 0;\n}\n"])));
var DEFAULT_CORNER_RADIUS = '12px';
var PADDING$1 = '16px';
function UrsorPopover(props) {
  var _props$margin, _props$width, _props$cornerRadius;
  var _useState = useState(undefined),
    _useState2 = _slicedToArray$2(_useState, 2),
    width = _useState2[0],
    setWidth = _useState2[1];
  var _useState3 = useState(undefined),
    _useState4 = _slicedToArray$2(_useState3, 2);
    _useState4[0];
    var setYOffset = _useState4[1];
  var _useState5 = useState(undefined),
    _useState6 = _slicedToArray$2(_useState5, 2);
    _useState6[0];
    var setMaxWidth = _useState6[1];
  var _useState7 = useState(undefined),
    _useState8 = _slicedToArray$2(_useState7, 2),
    maxHeight = _useState8[0],
    setMaxHeight = _useState8[1];
  var _React$useState = React__default$1.useState(null),
    _React$useState2 = _slicedToArray$2(_React$useState, 2),
    referenceElement = _React$useState2[0],
    setReferenceElement = _React$useState2[1];
  var _React$useState3 = React__default$1.useState(null),
    _React$useState4 = _slicedToArray$2(_React$useState3, 2),
    popperElement = _React$useState4[0],
    setPopperElement = _React$useState4[1];
  var _usePopper = usePopper(referenceElement, popperElement, {
      placement: props.placement === 'left' || props.buttonWidth ? "".concat(props.top ? 'top' : 'bottom', "-start") : props.placement === 'right' ? "".concat(props.top ? 'top' : 'bottom', "-end") : "".concat(props.top ? 'top' : 'bottom'),
      modifiers: [{
        name: 'flip',
        enabled: props.flip
      }]
    }),
    styles = _usePopper.styles,
    attributes = _usePopper.attributes;
  var _useState9 = useState(null),
    _useState10 = _slicedToArray$2(_useState9, 2),
    buttonRef = _useState10[0],
    setButtonRef = _useState10[1];
  var _useState11 = useState(false),
    _useState12 = _slicedToArray$2(_useState11, 2);
    _useState12[0];
    var setIsFlipped = _useState12[1];
  useEffect(function () {
    var _attributes$popper;
    return setIsFlipped(!!((_attributes$popper = attributes.popper) !== null && _attributes$popper !== void 0 && _attributes$popper['data-popper-placement'].includes('top')));
  }, [attributes.popper]);
  useEffect(function () {
    buttonRef === null || buttonRef === void 0 || buttonRef.focus();
  }, [buttonRef]);
  var _useWindowSize = useWindowSize(),
    windowWidth = _useWindowSize.width,
    height = _useWindowSize.height;
  useEffect(function () {
    var _props$yOffset, _referenceElement$off, _referenceElement$get, _referenceElement$get2;
    setYOffset(((_props$yOffset = props.yOffset) !== null && _props$yOffset !== void 0 ? _props$yOffset : 0) - ((_referenceElement$off = referenceElement === null || referenceElement === void 0 ? void 0 : referenceElement.offsetHeight) !== null && _referenceElement$off !== void 0 ? _referenceElement$off : 0));
    setWidth(referenceElement === null || referenceElement === void 0 ? void 0 : referenceElement.offsetWidth);
    setMaxWidth((width !== null && width !== void 0 ? width : window.innerWidth) - ((_referenceElement$get = referenceElement === null || referenceElement === void 0 ? void 0 : referenceElement.getBoundingClientRect().left) !== null && _referenceElement$get !== void 0 ? _referenceElement$get : 0));
    setMaxHeight((height !== null && height !== void 0 ? height : window.innerHeight) - ((_referenceElement$get2 = referenceElement === null || referenceElement === void 0 ? void 0 : referenceElement.getBoundingClientRect().top) !== null && _referenceElement$get2 !== void 0 ? _referenceElement$get2 : 0) - 62);
  }, [width, referenceElement, referenceElement === null || referenceElement === void 0 ? void 0 : referenceElement.offsetTop, referenceElement === null || referenceElement === void 0 ? void 0 : referenceElement.getBoundingClientRect().top, props.yOffset, height, windowWidth]);
  return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
    children: [jsxRuntimeExports.jsx(Stack$1, {
      ref: setReferenceElement,
      flex: props.flexButton ? 1 : undefined,
      // zIndex={
      //   props.open && props.floatButton === "zIndex"
      //     ? zIndices.POPUP + 1
      //     : "inherit"
      // }
      sx: {
        pointerEvents: props.disabled //|| (props.open && !props.noFloatButton)
        ? 'none' : 'auto',
        //opacity: props.open && !props.noFloatButton ? 0 : 1,
        zIndex: 2
      },
      width: props.fieldWidth,
      children: props.children
    }), props.open ? /*#__PURE__*/createPortal(jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
      children: [!props.noBackdrop ? jsxRuntimeExports.jsx(Backdrop, {
        sx: {
          background: 'transparent',
          //backdropFilter: "blur(3px)",
          zIndex: props.zIndex || 2
        },
        open: props.open,
        onClick: props.closeCallback
      }) : null, jsxRuntimeExports.jsx(Box$1, _objectSpread$6(_objectSpread$6({
        ref: setPopperElement,
        style: styles.popper
      }, attributes.popper), {}, {
        zIndex: props.zIndex || 3,
        children: jsxRuntimeExports.jsx(Stack$1
        //spacing={props.margin ?? "10px"}
        , {
          //spacing={props.margin ?? "10px"}
          pt: (_props$margin = props.margin) !== null && _props$margin !== void 0 ? _props$margin : '8px',
          // sx={{
          //   // transform: `translateY(${
          //   //   (isFlipped ? -1 : 1) * (props.margin ?? 0)
          //   // }px)`,
          //   transform: `translateY(${props.margin}px)`,
          // }}
          justifyContent: "center",
          alignItems: props.placement === 'right' ? 'flex-end' : props.placement === 'left' ? 'flex-start' : 'center',
          ref: setButtonRef,
          sx: {
            opacity: 0,
            animation: "".concat(fadeIn$1, " 0.2s ease-out"),
            animationFillMode: 'forwards'
          },
          children: props.content ? jsxRuntimeExports.jsx(Box$1, {
            width: (_props$width = props.width) !== null && _props$width !== void 0 ? _props$width : props.buttonWidth ? width : undefined,
            boxSizing: "border-box",
            borderRadius: (_props$cornerRadius = props.cornerRadius) !== null && _props$cornerRadius !== void 0 ? _props$cornerRadius : DEFAULT_CORNER_RADIUS,
            p: props.noCard || props.noPadding ? undefined : PADDING$1,
            sx: {
              background: props.noCard ? undefined : 'white',
              pointerEvents: props.open ? 'auto' : 'none',
              opacity: props.open && !props.fadedOut ? 1 : 0,
              transition: '0.3s',
              animation: props.animation,
              boxShadow: '0 0 90px rgba(0,0,0,0.15)'
            },
            height: "100%",
            maxHeight: props.maxHeight || (!props.flip ? maxHeight : undefined),
            overflow: "scroll",
            children: props.content
          }) : null
        })
      }))]
    }), document.body) : null]
  });
}

var InfoButton = function InfoButton(props) {
  var _useState = useState(false),
    _useState2 = _slicedToArray$2(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  return jsxRuntimeExports.jsx(UrsorPopover, {
    open: open,
    content: jsxRuntimeExports.jsx(Stack$1, {
      bgcolor: "rgb(255,255,255)",
      borderRadius: "12px",
      p: "16px",
      boxSizing: "border-box",
      spacing: "6px",
      maxWidth: "333px",
      children: jsxRuntimeExports.jsx(Typography$1, {
        variant: "small",
        children: props.text
      })
    }),
    closeCallback: function closeCallback() {
      return setOpen(false);
    },
    placement: props.rightAlign ? 'right' : 'left',
    noPadding: true,
    zIndex: 9999,
    children: jsxRuntimeExports.jsx(Stack$1, {
      onClick: function onClick() {
        return setOpen(true);
      },
      sx: {
        cursor: 'pointer',
        '&:hover': {
          opacity: 0.6
        },
        transition: '0.2s'
      },
      children: jsxRuntimeExports.jsxs(Stack$1, {
        sx: {
          cursor: 'pointer',
          transition: '0.2s',
          '&:hover': {
            opacity: 0.8
          },
          svg: {
            path: {
              fill: PALETTE.secondary.grey[3]
            }
          }
        },
        direction: "row",
        spacing: "6px",
        alignItems: "center",
        children: [jsxRuntimeExports.jsx(Typography$1, {
          variant: "small",
          bold: true,
          color: PALETTE.secondary.grey[3],
          maxLines: 1,
          children: props.title
        }), jsxRuntimeExports.jsx(SvgInfoIcon, {
          width: "14px",
          height: "14px"
        })]
      })
    })
  });
};

var lodash = {exports: {}};

/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
lodash.exports;

(function (module, exports) {
(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined$1;

	  /** Used as the semantic version number. */
	  var VERSION = '4.17.21';

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Error message constants. */
	  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
	      FUNC_ERROR_TEXT = 'Expected a function',
	      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

	  /** Used to stand-in for `undefined` hash values. */
	  var HASH_UNDEFINED = '__lodash_hash_undefined__';

	  /** Used as the maximum memoize cache size. */
	  var MAX_MEMOIZE_SIZE = 500;

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** Used to compose bitmasks for cloning. */
	  var CLONE_DEEP_FLAG = 1,
	      CLONE_FLAT_FLAG = 2,
	      CLONE_SYMBOLS_FLAG = 4;

	  /** Used to compose bitmasks for value comparisons. */
	  var COMPARE_PARTIAL_FLAG = 1,
	      COMPARE_UNORDERED_FLAG = 2;

	  /** Used to compose bitmasks for function metadata. */
	  var WRAP_BIND_FLAG = 1,
	      WRAP_BIND_KEY_FLAG = 2,
	      WRAP_CURRY_BOUND_FLAG = 4,
	      WRAP_CURRY_FLAG = 8,
	      WRAP_CURRY_RIGHT_FLAG = 16,
	      WRAP_PARTIAL_FLAG = 32,
	      WRAP_PARTIAL_RIGHT_FLAG = 64,
	      WRAP_ARY_FLAG = 128,
	      WRAP_REARG_FLAG = 256,
	      WRAP_FLIP_FLAG = 512;

	  /** Used as default options for `_.truncate`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
	  var HOT_COUNT = 800,
	      HOT_SPAN = 16;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2,
	      LAZY_WHILE_FLAG = 3;

	  /** Used as references for various `Number` constants. */
	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;

	  /** Used as references for the maximum length and index of an array. */
	  var MAX_ARRAY_LENGTH = 4294967295,
	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	  /** Used to associate wrap methods with their bit flags. */
	  var wrapFlags = [
	    ['ary', WRAP_ARY_FLAG],
	    ['bind', WRAP_BIND_FLAG],
	    ['bindKey', WRAP_BIND_KEY_FLAG],
	    ['curry', WRAP_CURRY_FLAG],
	    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
	    ['flip', WRAP_FLIP_FLAG],
	    ['partial', WRAP_PARTIAL_FLAG],
	    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
	    ['rearg', WRAP_REARG_FLAG]
	  ];

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      asyncTag = '[object AsyncFunction]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      domExcTag = '[object DOMException]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      nullTag = '[object Null]',
	      objectTag = '[object Object]',
	      promiseTag = '[object Promise]',
	      proxyTag = '[object Proxy]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      undefinedTag = '[object Undefined]',
	      weakMapTag = '[object WeakMap]',
	      weakSetTag = '[object WeakSet]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      dataViewTag = '[object DataView]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
	      reUnescapedHtml = /[&<>"']/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	  /**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	   */
	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	      reHasRegExpChar = RegExp(reRegExpChar.source);

	  /** Used to match leading whitespace. */
	  var reTrimStart = /^\s+/;

	  /** Used to match a single whitespace character. */
	  var reWhitespace = /\s/;

	  /** Used to match wrap detail comments. */
	  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
	      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	      reSplitDetails = /,? & /;

	  /** Used to match words composed of alphanumeric characters. */
	  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	  /**
	   * Used to validate the `validate` option in `_.template` variable.
	   *
	   * Forbids characters which could potentially change the meaning of the function argument definition:
	   * - "()," (modification of function parameters)
	   * - "=" (default value)
	   * - "[]{}" (destructuring of function parameters)
	   * - "/" (beginning of a comment)
	   * - whitespace
	   */
	  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /**
	   * Used to match
	   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;

	  /** Used to detect host constructors (Safari). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;

	  /** Used to match Latin Unicode letters (excluding mathematical operators). */
	  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff',
	      rsComboMarksRange = '\\u0300-\\u036f',
	      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	      rsComboSymbolsRange = '\\u20d0-\\u20ff',
	      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	      rsDingbatRange = '\\u2700-\\u27bf',
	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	      rsPunctuationRange = '\\u2000-\\u206f',
	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	      rsVarRange = '\\ufe0e\\ufe0f',
	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	  /** Used to compose unicode capture groups. */
	  var rsApos = "['\u2019]",
	      rsAstral = '[' + rsAstralRange + ']',
	      rsBreak = '[' + rsBreakRange + ']',
	      rsCombo = '[' + rsComboRange + ']',
	      rsDigits = '\\d+',
	      rsDingbat = '[' + rsDingbatRange + ']',
	      rsLower = '[' + rsLowerRange + ']',
	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	      rsNonAstral = '[^' + rsAstralRange + ']',
	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	      rsUpper = '[' + rsUpperRange + ']',
	      rsZWJ = '\\u200d';

	  /** Used to compose unicode regexes. */
	  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	      reOptMod = rsModifier + '?',
	      rsOptVar = '[' + rsVarRange + ']?',
	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
	      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	  /** Used to match apostrophes. */
	  var reApos = RegExp(rsApos, 'g');

	  /**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */
	  var reComboMark = RegExp(rsCombo, 'g');

	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	  /** Used to match complex or compound words. */
	  var reUnicodeWord = RegExp([
	    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
	    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
	    rsUpper + '+' + rsOptContrUpper,
	    rsOrdUpper,
	    rsOrdLower,
	    rsDigits,
	    rsEmoji
	  ].join('|'), 'g');

	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

	  /** Used to detect strings that need a more robust regexp to match words. */
	  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
	  typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	  cloneableTags[boolTag] = cloneableTags[dateTag] =
	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[setTag] =
	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map Latin Unicode letters to basic Latin letters. */
	  var deburredLetters = {
	    // Latin-1 Supplement block.
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss',
	    // Latin Extended-A block.
	    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	    '\u0134': 'J',  '\u0135': 'j',
	    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	    '\u0174': 'W',  '\u0175': 'w',
	    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	    '\u0132': 'IJ', '\u0133': 'ij',
	    '\u0152': 'Oe', '\u0153': 'oe',
	    '\u0149': "'n", '\u017f': 's'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'"
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Built-in method references without a dependency on `root`. */
	  var freeParseFloat = parseFloat,
	      freeParseInt = parseInt;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	  /** Detect free variable `self`. */
	  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	  /** Used as a reference to the global object. */
	  var root = freeGlobal || freeSelf || Function('return this')();

	  /** Detect free variable `exports`. */
	  var freeExports = exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports;

	  /** Detect free variable `process` from Node.js. */
	  var freeProcess = moduleExports && freeGlobal.process;

	  /** Used to access faster Node.js helpers. */
	  var nodeUtil = (function() {
	    try {
	      // Use `util.types` for Node.js 10+.
	      var types = freeModule && freeModule.require && freeModule.require('util').types;

	      if (types) {
	        return types;
	      }

	      // Legacy `process.binding('util')` for Node.js < 10.
	      return freeProcess && freeProcess.binding && freeProcess.binding('util');
	    } catch (e) {}
	  }());

	  /* Node.js helper references. */
	  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
	      nodeIsDate = nodeUtil && nodeUtil.isDate,
	      nodeIsMap = nodeUtil && nodeUtil.isMap,
	      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
	      nodeIsSet = nodeUtil && nodeUtil.isSet,
	      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    switch (args.length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }

	  /**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
	  function arrayAggregator(array, setter, iteratee, accumulator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      var value = array[index];
	      setter(accumulator, value, iteratee(value), array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEachRight(array, iteratee) {
	    var length = array == null ? 0 : array.length;

	    while (length--) {
	      if (iteratee(array[length], length, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */
	  function arrayEvery(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (!predicate(array[index], index, array)) {
	        return false;
	      }
	    }
	    return true;
	  }

	  /**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
	  function arrayFilter(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (predicate(value, index, array)) {
	        result[resIndex++] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludes(array, value) {
	    var length = array == null ? 0 : array.length;
	    return !!length && baseIndexOf(array, value, 0) > -1;
	  }

	  /**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludesWith(array, value, comparator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (comparator(value, array[index])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        result = Array(length);

	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }

	  /**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayPush(array, values) {
	    var index = -1,
	        length = values.length,
	        offset = array.length;

	    while (++index < length) {
	      array[offset + index] = values[index];
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduce(array, iteratee, accumulator, initAccum) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    if (initAccum && length) {
	      accumulator = array[++index];
	    }
	    while (++index < length) {
	      accumulator = iteratee(accumulator, array[index], index, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	    var length = array == null ? 0 : array.length;
	    if (initAccum && length) {
	      accumulator = array[--length];
	    }
	    while (length--) {
	      accumulator = iteratee(accumulator, array[length], length, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */
	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * Gets the size of an ASCII `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  var asciiSize = baseProperty('length');

	  /**
	   * Converts an ASCII `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function asciiToArray(string) {
	    return string.split('');
	  }

	  /**
	   * Splits an ASCII `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function asciiWords(string) {
	    return string.match(reAsciiWord) || [];
	  }

	  /**
	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
	   * without support for iteratee shorthands, which iterates over `collection`
	   * using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
	  function baseFindKey(collection, predicate, eachFunc) {
	    var result;
	    eachFunc(collection, function(value, key, collection) {
	      if (predicate(value, key, collection)) {
	        result = key;
	        return false;
	      }
	    });
	    return result;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 1 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    return value === value
	      ? strictIndexOf(array, value, fromIndex)
	      : baseFindIndex(array, baseIsNaN, fromIndex);
	  }

	  /**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOfWith(array, value, fromIndex, comparator) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(array[index], value)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isNaN` without support for number objects.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	   */
	  function baseIsNaN(value) {
	    return value !== value;
	  }

	  /**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */
	  function baseMean(array, iteratee) {
	    var length = array == null ? 0 : array.length;
	    return length ? (baseSum(array, iteratee) / length) : NAN;
	  }

	  /**
	   * The base implementation of `_.property` without support for deep paths.
	   *
	   * @private
	   * @param {string} key The key of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function baseProperty(key) {
	    return function(object) {
	      return object == null ? undefined$1 : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.propertyOf` without support for deep paths.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function basePropertyOf(object) {
	    return function(key) {
	      return object == null ? undefined$1 : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	    eachFunc(collection, function(value, index, collection) {
	      accumulator = initAccum
	        ? (initAccum = false, value)
	        : iteratee(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }

	  /**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;

	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }

	  /**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
	  function baseSum(array, iteratee) {
	    var result,
	        index = -1,
	        length = array.length;

	    while (++index < length) {
	      var current = iteratee(array[index]);
	      if (current !== undefined$1) {
	        result = result === undefined$1 ? current : (result + current);
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);

	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the key-value pairs.
	   */
	  function baseToPairs(object, props) {
	    return arrayMap(props, function(key) {
	      return [key, object[key]];
	    });
	  }

	  /**
	   * The base implementation of `_.trim`.
	   *
	   * @private
	   * @param {string} string The string to trim.
	   * @returns {string} Returns the trimmed string.
	   */
	  function baseTrim(string) {
	    return string
	      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
	      : string;
	  }

	  /**
	   * The base implementation of `_.unary` without support for storing metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new capped function.
	   */
	  function baseUnary(func) {
	    return function(value) {
	      return func(value);
	    };
	  }

	  /**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
	  function baseValues(object, props) {
	    return arrayMap(props, function(key) {
	      return object[key];
	    });
	  }

	  /**
	   * Checks if a `cache` value for `key` exists.
	   *
	   * @private
	   * @param {Object} cache The cache to query.
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */
	  function cacheHas(cache, key) {
	    return cache.has(key);
	  }

	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;

	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;

	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
	  function countHolders(array, placeholder) {
	    var length = array.length,
	        result = 0;

	    while (length--) {
	      if (array[length] === placeholder) {
	        ++result;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	   * letters to basic Latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  var deburrLetter = basePropertyOf(deburredLetters);

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  var escapeHtmlChar = basePropertyOf(htmlEscapes);

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the value at `key` of `object`.
	   *
	   * @private
	   * @param {Object} [object] The object to query.
	   * @param {string} key The key of the property to get.
	   * @returns {*} Returns the property value.
	   */
	  function getValue(object, key) {
	    return object == null ? undefined$1 : object[key];
	  }

	  /**
	   * Checks if `string` contains Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	   */
	  function hasUnicode(string) {
	    return reHasUnicode.test(string);
	  }

	  /**
	   * Checks if `string` contains a word composed of Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a word is found, else `false`.
	   */
	  function hasUnicodeWord(string) {
	    return reHasUnicodeWord.test(string);
	  }

	  /**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function iteratorToArray(iterator) {
	    var data,
	        result = [];

	    while (!(data = iterator.next()).done) {
	      result.push(data.value);
	    }
	    return result;
	  }

	  /**
	   * Converts `map` to its key-value pairs.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the key-value pairs.
	   */
	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);

	    map.forEach(function(value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }

	  /**
	   * Creates a unary function that invokes `func` with its argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */
	  function overArg(func, transform) {
	    return function(arg) {
	      return func(transform(arg));
	    };
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (value === placeholder || value === PLACEHOLDER) {
	        array[index] = PLACEHOLDER;
	        result[resIndex++] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * Converts `set` to an array of its values.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the values.
	   */
	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = value;
	    });
	    return result;
	  }

	  /**
	   * Converts `set` to its value-value pairs.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the value-value pairs.
	   */
	  function setToPairs(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = [value, value];
	    });
	    return result;
	  }

	  /**
	   * A specialized version of `_.indexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictIndexOf(array, value, fromIndex) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * A specialized version of `_.lastIndexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictLastIndexOf(array, value, fromIndex) {
	    var index = fromIndex + 1;
	    while (index--) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return index;
	  }

	  /**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
	  function stringSize(string) {
	    return hasUnicode(string)
	      ? unicodeSize(string)
	      : asciiSize(string);
	  }

	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return hasUnicode(string)
	      ? unicodeToArray(string)
	      : asciiToArray(string);
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedEndIndex(string) {
	    var index = string.length;

	    while (index-- && reWhitespace.test(string.charAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

	  /**
	   * Gets the size of a Unicode `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  function unicodeSize(string) {
	    var result = reUnicode.lastIndex = 0;
	    while (reUnicode.test(string)) {
	      ++result;
	    }
	    return result;
	  }

	  /**
	   * Converts a Unicode `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function unicodeToArray(string) {
	    return string.match(reUnicode) || [];
	  }

	  /**
	   * Splits a Unicode `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function unicodeWords(string) {
	    return string.match(reUnicodeWord) || [];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  var runInContext = (function runInContext(context) {
	    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

	    /** Built-in constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for built-in method references. */
	    var arrayProto = Array.prototype,
	        funcProto = Function.prototype,
	        objectProto = Object.prototype;

	    /** Used to detect overreaching core-js shims. */
	    var coreJsData = context['__core-js_shared__'];

	    /** Used to resolve the decompiled source of functions. */
	    var funcToString = funcProto.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /** Used to detect methods masquerading as native. */
	    var maskSrcKey = (function() {
	      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	      return uid ? ('Symbol(src)_1.' + uid) : '';
	    }());

	    /**
	     * Used to resolve the
	     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var nativeObjectToString = objectProto.toString;

	    /** Used to infer the `Object` constructor. */
	    var objectCtorString = funcToString.call(Object);

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Built-in value references. */
	    var Buffer = moduleExports ? context.Buffer : undefined$1,
	        Symbol = context.Symbol,
	        Uint8Array = context.Uint8Array,
	        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
	        getPrototype = overArg(Object.getPrototypeOf, Object),
	        objectCreate = Object.create,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        splice = arrayProto.splice,
	        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
	        symIterator = Symbol ? Symbol.iterator : undefined$1,
	        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

	    var defineProperty = (function() {
	      try {
	        var func = getNative(Object, 'defineProperty');
	        func({}, '', {});
	        return func;
	      } catch (e) {}
	    }());

	    /** Mocked built-ins. */
	    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
	        ctxNow = Date && Date.now !== root.Date.now && Date.now,
	        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

	    /* Built-in method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeFloor = Math.floor,
	        nativeGetSymbols = Object.getOwnPropertySymbols,
	        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
	        nativeIsFinite = context.isFinite,
	        nativeJoin = arrayProto.join,
	        nativeKeys = overArg(Object.keys, Object),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = Date.now,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random,
	        nativeReverse = arrayProto.reverse;

	    /* Built-in method references that are verified to be native. */
	    var DataView = getNative(context, 'DataView'),
	        Map = getNative(context, 'Map'),
	        Promise = getNative(context, 'Promise'),
	        Set = getNative(context, 'Set'),
	        WeakMap = getNative(context, 'WeakMap'),
	        nativeCreate = getNative(Object, 'create');

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /** Used to detect maps, sets, and weakmaps. */
	    var dataViewCtorString = toSource(DataView),
	        mapCtorString = toSource(Map),
	        promiseCtorString = toSource(Promise),
	        setCtorString = toSource(Set),
	        weakMapCtorString = toSource(WeakMap);

	    /** Used to convert symbols to primitives and strings. */
	    var symbolProto = Symbol ? Symbol.prototype : undefined$1,
	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
	        symbolToString = symbolProto ? symbolProto.toString : undefined$1;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array and iteratees accept only
	     * one argument. The heuristic for whether a section qualifies for shortcut
	     * fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	     * `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} proto The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(proto) {
	        if (!isObject(proto)) {
	          return {};
	        }
	        if (objectCreate) {
	          return objectCreate(proto);
	        }
	        object.prototype = proto;
	        var result = new object;
	        object.prototype = undefined$1;
	        return result;
	      };
	    }());

	    /**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */
	    function LodashWrapper(value, chainAll) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__chain__ = !!chainAll;
	      this.__index__ = 0;
	      this.__values__ = undefined$1;
	    }

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
	     * following template settings to use alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
	        '_': lodash
	      }
	    };

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	    lodash.prototype.constructor = lodash;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = MAX_ARRAY_LENGTH;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = copyArray(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = copyArray(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = copyArray(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Hash(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the hash.
	     *
	     * @private
	     * @name clear
	     * @memberOf Hash
	     */
	    function hashClear() {
	      this.__data__ = nativeCreate ? nativeCreate(null) : {};
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @name delete
	     * @memberOf Hash
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function hashDelete(key) {
	      var result = this.has(key) && delete this.__data__[key];
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Hash
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function hashGet(key) {
	      var data = this.__data__;
	      if (nativeCreate) {
	        var result = data[key];
	        return result === HASH_UNDEFINED ? undefined$1 : result;
	      }
	      return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
	    }

	    /**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Hash
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function hashHas(key) {
	      var data = this.__data__;
	      return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
	    }

	    /**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Hash
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the hash instance.
	     */
	    function hashSet(key, value) {
	      var data = this.__data__;
	      this.size += this.has(key) ? 0 : 1;
	      data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
	      return this;
	    }

	    // Add methods to `Hash`.
	    Hash.prototype.clear = hashClear;
	    Hash.prototype['delete'] = hashDelete;
	    Hash.prototype.get = hashGet;
	    Hash.prototype.has = hashHas;
	    Hash.prototype.set = hashSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an list cache object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function ListCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the list cache.
	     *
	     * @private
	     * @name clear
	     * @memberOf ListCache
	     */
	    function listCacheClear() {
	      this.__data__ = [];
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the list cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf ListCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function listCacheDelete(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        return false;
	      }
	      var lastIndex = data.length - 1;
	      if (index == lastIndex) {
	        data.pop();
	      } else {
	        splice.call(data, index, 1);
	      }
	      --this.size;
	      return true;
	    }

	    /**
	     * Gets the list cache value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf ListCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function listCacheGet(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      return index < 0 ? undefined$1 : data[index][1];
	    }

	    /**
	     * Checks if a list cache value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf ListCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function listCacheHas(key) {
	      return assocIndexOf(this.__data__, key) > -1;
	    }

	    /**
	     * Sets the list cache `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf ListCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the list cache instance.
	     */
	    function listCacheSet(key, value) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        ++this.size;
	        data.push([key, value]);
	      } else {
	        data[index][1] = value;
	      }
	      return this;
	    }

	    // Add methods to `ListCache`.
	    ListCache.prototype.clear = listCacheClear;
	    ListCache.prototype['delete'] = listCacheDelete;
	    ListCache.prototype.get = listCacheGet;
	    ListCache.prototype.has = listCacheHas;
	    ListCache.prototype.set = listCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function MapCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
	    function mapCacheClear() {
	      this.size = 0;
	      this.__data__ = {
	        'hash': new Hash,
	        'map': new (Map || ListCache),
	        'string': new Hash
	      };
	    }

	    /**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function mapCacheDelete(key) {
	      var result = getMapData(this, key)['delete'](key);
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function mapCacheGet(key) {
	      return getMapData(this, key).get(key);
	    }

	    /**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapCacheHas(key) {
	      return getMapData(this, key).has(key);
	    }

	    /**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */
	    function mapCacheSet(key, value) {
	      var data = getMapData(this, key),
	          size = data.size;

	      data.set(key, value);
	      this.size += data.size == size ? 0 : 1;
	      return this;
	    }

	    // Add methods to `MapCache`.
	    MapCache.prototype.clear = mapCacheClear;
	    MapCache.prototype['delete'] = mapCacheDelete;
	    MapCache.prototype.get = mapCacheGet;
	    MapCache.prototype.has = mapCacheHas;
	    MapCache.prototype.set = mapCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates an array cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var index = -1,
	          length = values == null ? 0 : values.length;

	      this.__data__ = new MapCache;
	      while (++index < length) {
	        this.add(values[index]);
	      }
	    }

	    /**
	     * Adds `value` to the array cache.
	     *
	     * @private
	     * @name add
	     * @memberOf SetCache
	     * @alias push
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache instance.
	     */
	    function setCacheAdd(value) {
	      this.__data__.set(value, HASH_UNDEFINED);
	      return this;
	    }

	    /**
	     * Checks if `value` is in the array cache.
	     *
	     * @private
	     * @name has
	     * @memberOf SetCache
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
	    function setCacheHas(value) {
	      return this.__data__.has(value);
	    }

	    // Add methods to `SetCache`.
	    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	    SetCache.prototype.has = setCacheHas;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Stack(entries) {
	      var data = this.__data__ = new ListCache(entries);
	      this.size = data.size;
	    }

	    /**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
	    function stackClear() {
	      this.__data__ = new ListCache;
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function stackDelete(key) {
	      var data = this.__data__,
	          result = data['delete'](key);

	      this.size = data.size;
	      return result;
	    }

	    /**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function stackGet(key) {
	      return this.__data__.get(key);
	    }

	    /**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function stackHas(key) {
	      return this.__data__.has(key);
	    }

	    /**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */
	    function stackSet(key, value) {
	      var data = this.__data__;
	      if (data instanceof ListCache) {
	        var pairs = data.__data__;
	        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	          pairs.push([key, value]);
	          this.size = ++data.size;
	          return this;
	        }
	        data = this.__data__ = new MapCache(pairs);
	      }
	      data.set(key, value);
	      this.size = data.size;
	      return this;
	    }

	    // Add methods to `Stack`.
	    Stack.prototype.clear = stackClear;
	    Stack.prototype['delete'] = stackDelete;
	    Stack.prototype.get = stackGet;
	    Stack.prototype.has = stackHas;
	    Stack.prototype.set = stackSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of the enumerable property names of the array-like `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @param {boolean} inherited Specify returning inherited property names.
	     * @returns {Array} Returns the array of property names.
	     */
	    function arrayLikeKeys(value, inherited) {
	      var isArr = isArray(value),
	          isArg = !isArr && isArguments(value),
	          isBuff = !isArr && !isArg && isBuffer(value),
	          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	          skipIndexes = isArr || isArg || isBuff || isType,
	          result = skipIndexes ? baseTimes(value.length, String) : [],
	          length = result.length;

	      for (var key in value) {
	        if ((inherited || hasOwnProperty.call(value, key)) &&
	            !(skipIndexes && (
	               // Safari 9 has enumerable `arguments.length` in strict mode.
	               key == 'length' ||
	               // Node.js 0.10 has enumerable non-index properties on buffers.
	               (isBuff && (key == 'offset' || key == 'parent')) ||
	               // PhantomJS 2 has enumerable non-index properties on typed arrays.
	               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	               // Skip index properties.
	               isIndex(key, length)
	            ))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.sample` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @returns {*} Returns the random element.
	     */
	    function arraySample(array) {
	      var length = array.length;
	      return length ? array[baseRandom(0, length - 1)] : undefined$1;
	    }

	    /**
	     * A specialized version of `_.sampleSize` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function arraySampleSize(array, n) {
	      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
	    }

	    /**
	     * A specialized version of `_.shuffle` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function arrayShuffle(array) {
	      return shuffleSelf(copyArray(array));
	    }

	    /**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignMergeValue(object, key, value) {
	      if ((value !== undefined$1 && !eq(object[key], value)) ||
	          (value === undefined$1 && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignValue(object, key, value) {
	      var objValue = object[key];
	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	          (value === undefined$1 && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
	    function assocIndexOf(array, key) {
	      var length = array.length;
	      while (length--) {
	        if (eq(array[length][0], key)) {
	          return length;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseAggregator(collection, setter, iteratee, accumulator) {
	      baseEach(collection, function(value, key, collection) {
	        setter(accumulator, value, iteratee(value), collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return object && copyObject(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.assignIn` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssignIn(object, source) {
	      return object && copyObject(source, keysIn(source), object);
	    }

	    /**
	     * The base implementation of `assignValue` and `assignMergeValue` without
	     * value checks.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function baseAssignValue(object, key, value) {
	      if (key == '__proto__' && defineProperty) {
	        defineProperty(object, key, {
	          'configurable': true,
	          'enumerable': true,
	          'value': value,
	          'writable': true
	        });
	      } else {
	        object[key] = value;
	      }
	    }

	    /**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Array} Returns the picked elements.
	     */
	    function baseAt(object, paths) {
	      var index = -1,
	          length = paths.length,
	          result = Array(length),
	          skip = object == null;

	      while (++index < length) {
	        result[index] = skip ? undefined$1 : get(object, paths[index]);
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.clamp` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
	    function baseClamp(number, lower, upper) {
	      if (number === number) {
	        if (upper !== undefined$1) {
	          number = number <= upper ? number : upper;
	        }
	        if (lower !== undefined$1) {
	          number = number >= lower ? number : lower;
	        }
	      }
	      return number;
	    }

	    /**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Deep clone
	     *  2 - Flatten inherited properties
	     *  4 - Clone symbols
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, bitmask, customizer, key, object, stack) {
	      var result,
	          isDeep = bitmask & CLONE_DEEP_FLAG,
	          isFlat = bitmask & CLONE_FLAT_FLAG,
	          isFull = bitmask & CLONE_SYMBOLS_FLAG;

	      if (customizer) {
	        result = object ? customizer(value, key, object, stack) : customizer(value);
	      }
	      if (result !== undefined$1) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return copyArray(value, result);
	        }
	      } else {
	        var tag = getTag(value),
	            isFunc = tag == funcTag || tag == genTag;

	        if (isBuffer(value)) {
	          return cloneBuffer(value, isDeep);
	        }
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = (isFlat || isFunc) ? {} : initCloneObject(value);
	          if (!isDeep) {
	            return isFlat
	              ? copySymbolsIn(value, baseAssignIn(result, value))
	              : copySymbols(value, baseAssign(result, value));
	          }
	        } else {
	          if (!cloneableTags[tag]) {
	            return object ? value : {};
	          }
	          result = initCloneByTag(value, tag, isDeep);
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stack || (stack = new Stack);
	      var stacked = stack.get(value);
	      if (stacked) {
	        return stacked;
	      }
	      stack.set(value, result);

	      if (isSet(value)) {
	        value.forEach(function(subValue) {
	          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
	        });
	      } else if (isMap(value)) {
	        value.forEach(function(subValue, key) {
	          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
	        });
	      }

	      var keysFunc = isFull
	        ? (isFlat ? getAllKeysIn : getAllKeys)
	        : (isFlat ? keysIn : keys);

	      var props = isArr ? undefined$1 : keysFunc(value);
	      arrayEach(props || value, function(subValue, key) {
	        if (props) {
	          key = subValue;
	          subValue = value[key];
	        }
	        // Recursively populate clone (susceptible to call stack limits).
	        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseConforms(source) {
	      var props = keys(source);
	      return function(object) {
	        return baseConformsTo(object, source, props);
	      };
	    }

	    /**
	     * The base implementation of `_.conformsTo` which accepts `props` to check.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     */
	    function baseConformsTo(object, source, props) {
	      var length = props.length;
	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (length--) {
	        var key = props[length],
	            predicate = source[key],
	            value = object[key];

	        if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts `args`
	     * to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Array} args The arguments to provide to `func`.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
	    }

	    /**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          isCommon = true,
	          length = array.length,
	          result = [],
	          valuesLength = values.length;

	      if (!length) {
	        return result;
	      }
	      if (iteratee) {
	        values = arrayMap(values, baseUnary(iteratee));
	      }
	      if (comparator) {
	        includes = arrayIncludesWith;
	        isCommon = false;
	      }
	      else if (values.length >= LARGE_ARRAY_SIZE) {
	        includes = cacheHas;
	        isCommon = false;
	        values = new SetCache(values);
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee == null ? value : iteratee(value);

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === computed) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (!includes(values, computed, comparator)) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of methods like `_.max` and `_.min` which accepts a
	     * `comparator` to determine the extremum value.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The iteratee invoked per iteration.
	     * @param {Function} comparator The comparator used to compare values.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(array, iteratee, comparator) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index],
	            current = iteratee(value);

	        if (current != null && (computed === undefined$1
	              ? (current === current && !isSymbol(current))
	              : comparator(current, computed)
	            )) {
	          var computed = current,
	              result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = toInteger(start);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined$1 || end > length) ? length : toInteger(end);
	      if (end < 0) {
	        end += length;
	      }
	      end = start > end ? 0 : toLength(end);
	      while (start < end) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, depth, predicate, isStrict, result) {
	      var index = -1,
	          length = array.length;

	      predicate || (predicate = isFlattenable);
	      result || (result = []);

	      while (++index < length) {
	        var value = array[index];
	        if (depth > 0 && predicate(value)) {
	          if (depth > 1) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, depth - 1, predicate, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return object && baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return object && baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the function names.
	     */
	    function baseFunctions(object, props) {
	      return arrayFilter(props, function(key) {
	        return isFunction(object[key]);
	      });
	    }

	    /**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path) {
	      path = castPath(path, object);

	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[toKey(path[index++])];
	      }
	      return (index && index == length) ? object : undefined$1;
	    }

	    /**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	      var result = keysFunc(object);
	      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	    }

	    /**
	     * The base implementation of `getTag` without fallbacks for buggy environments.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    function baseGetTag(value) {
	      if (value == null) {
	        return value === undefined$1 ? undefinedTag : nullTag;
	      }
	      return (symToStringTag && symToStringTag in Object(value))
	        ? getRawTag(value)
	        : objectToString(value);
	    }

	    /**
	     * The base implementation of `_.gt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     */
	    function baseGt(value, other) {
	      return value > other;
	    }

	    /**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHas(object, key) {
	      return object != null && hasOwnProperty.call(object, key);
	    }

	    /**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHasIn(object, key) {
	      return object != null && key in Object(object);
	    }

	    /**
	     * The base implementation of `_.inRange` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
	    function baseInRange(number, start, end) {
	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
	    }

	    /**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
	    function baseIntersection(arrays, iteratee, comparator) {
	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
	          length = arrays[0].length,
	          othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(othLength),
	          maxLength = Infinity,
	          result = [];

	      while (othIndex--) {
	        var array = arrays[othIndex];
	        if (othIndex && iteratee) {
	          array = arrayMap(array, baseUnary(iteratee));
	        }
	        maxLength = nativeMin(array.length, maxLength);
	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	          ? new SetCache(othIndex && array)
	          : undefined$1;
	      }
	      array = arrays[0];

	      var index = -1,
	          seen = caches[0];

	      outer:
	      while (++index < length && result.length < maxLength) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (!(seen
	              ? cacheHas(seen, computed)
	              : includes(result, computed, comparator)
	            )) {
	          othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if (!(cache
	                  ? cacheHas(cache, computed)
	                  : includes(arrays[othIndex], computed, comparator))
	                ) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseInverter(object, setter, iteratee, accumulator) {
	      baseForOwn(object, function(value, key, object) {
	        setter(accumulator, iteratee(value), key, object);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function baseInvoke(object, path, args) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      var func = object == null ? object : object[toKey(last(path))];
	      return func == null ? undefined$1 : apply(func, object, args);
	    }

	    /**
	     * The base implementation of `_.isArguments`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     */
	    function baseIsArguments(value) {
	      return isObjectLike(value) && baseGetTag(value) == argsTag;
	    }

	    /**
	     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     */
	    function baseIsArrayBuffer(value) {
	      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
	    }

	    /**
	     * The base implementation of `_.isDate` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     */
	    function baseIsDate(value) {
	      return isObjectLike(value) && baseGetTag(value) == dateTag;
	    }

	    /**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Unordered comparison
	     *  2 - Partial comparison
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, bitmask, customizer, stack) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = objIsArr ? arrayTag : getTag(object),
	          othTag = othIsArr ? arrayTag : getTag(other);

	      objTag = objTag == argsTag ? objectTag : objTag;
	      othTag = othTag == argsTag ? objectTag : othTag;

	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && isBuffer(object)) {
	        if (!isBuffer(other)) {
	          return false;
	        }
	        objIsArr = true;
	        objIsObj = false;
	      }
	      if (isSameTag && !objIsObj) {
	        stack || (stack = new Stack);
	        return (objIsArr || isTypedArray(object))
	          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	      }
	      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          var objUnwrapped = objIsWrapped ? object.value() : object,
	              othUnwrapped = othIsWrapped ? other.value() : other;

	          stack || (stack = new Stack);
	          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      stack || (stack = new Stack);
	      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	    }

	    /**
	     * The base implementation of `_.isMap` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     */
	    function baseIsMap(value) {
	      return isObjectLike(value) && getTag(value) == mapTag;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, source, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined$1 && !(key in object)) {
	            return false;
	          }
	        } else {
	          var stack = new Stack;
	          if (customizer) {
	            var result = customizer(objValue, srcValue, key, object, source, stack);
	          }
	          if (!(result === undefined$1
	                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
	                : result
	              )) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.isNative` without bad shim checks.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     */
	    function baseIsNative(value) {
	      if (!isObject(value) || isMasked(value)) {
	        return false;
	      }
	      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	      return pattern.test(toSource(value));
	    }

	    /**
	     * The base implementation of `_.isRegExp` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     */
	    function baseIsRegExp(value) {
	      return isObjectLike(value) && baseGetTag(value) == regexpTag;
	    }

	    /**
	     * The base implementation of `_.isSet` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     */
	    function baseIsSet(value) {
	      return isObjectLike(value) && getTag(value) == setTag;
	    }

	    /**
	     * The base implementation of `_.isTypedArray` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     */
	    function baseIsTypedArray(value) {
	      return isObjectLike(value) &&
	        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	    }

	    /**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
	    function baseIteratee(value) {
	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	      if (typeof value == 'function') {
	        return value;
	      }
	      if (value == null) {
	        return identity;
	      }
	      if (typeof value == 'object') {
	        return isArray(value)
	          ? baseMatchesProperty(value[0], value[1])
	          : baseMatches(value);
	      }
	      return property(value);
	    }

	    /**
	     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeys(object) {
	      if (!isPrototype(object)) {
	        return nativeKeys(object);
	      }
	      var result = [];
	      for (var key in Object(object)) {
	        if (hasOwnProperty.call(object, key) && key != 'constructor') {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeysIn(object) {
	      if (!isObject(object)) {
	        return nativeKeysIn(object);
	      }
	      var isProto = isPrototype(object),
	          result = [];

	      for (var key in object) {
	        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.lt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     */
	    function baseLt(value, other) {
	      return value < other;
	    }

	    /**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	      }
	      return function(object) {
	        return object === source || baseIsMatch(object, source, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      if (isKey(path) && isStrictComparable(srcValue)) {
	        return matchesStrictComparable(toKey(path), srcValue);
	      }
	      return function(object) {
	        var objValue = get(object, path);
	        return (objValue === undefined$1 && objValue === srcValue)
	          ? hasIn(object, path)
	          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMerge(object, source, srcIndex, customizer, stack) {
	      if (object === source) {
	        return;
	      }
	      baseFor(source, function(srcValue, key) {
	        stack || (stack = new Stack);
	        if (isObject(srcValue)) {
	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	        }
	        else {
	          var newValue = customizer
	            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
	            : undefined$1;

	          if (newValue === undefined$1) {
	            newValue = srcValue;
	          }
	          assignMergeValue(object, key, newValue);
	        }
	      }, keysIn);
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	      var objValue = safeGet(object, key),
	          srcValue = safeGet(source, key),
	          stacked = stack.get(srcValue);

	      if (stacked) {
	        assignMergeValue(object, key, stacked);
	        return;
	      }
	      var newValue = customizer
	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	        : undefined$1;

	      var isCommon = newValue === undefined$1;

	      if (isCommon) {
	        var isArr = isArray(srcValue),
	            isBuff = !isArr && isBuffer(srcValue),
	            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

	        newValue = srcValue;
	        if (isArr || isBuff || isTyped) {
	          if (isArray(objValue)) {
	            newValue = objValue;
	          }
	          else if (isArrayLikeObject(objValue)) {
	            newValue = copyArray(objValue);
	          }
	          else if (isBuff) {
	            isCommon = false;
	            newValue = cloneBuffer(srcValue, true);
	          }
	          else if (isTyped) {
	            isCommon = false;
	            newValue = cloneTypedArray(srcValue, true);
	          }
	          else {
	            newValue = [];
	          }
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          newValue = objValue;
	          if (isArguments(objValue)) {
	            newValue = toPlainObject(objValue);
	          }
	          else if (!isObject(objValue) || isFunction(objValue)) {
	            newValue = initCloneObject(srcValue);
	          }
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, newValue);
	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	        stack['delete'](srcValue);
	      }
	      assignMergeValue(object, key, newValue);
	    }

	    /**
	     * The base implementation of `_.nth` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */
	    function baseNth(array, n) {
	      var length = array.length;
	      if (!length) {
	        return;
	      }
	      n += n < 0 ? length : 0;
	      return isIndex(n, length) ? array[n] : undefined$1;
	    }

	    /**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseOrderBy(collection, iteratees, orders) {
	      if (iteratees.length) {
	        iteratees = arrayMap(iteratees, function(iteratee) {
	          if (isArray(iteratee)) {
	            return function(value) {
	              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
	            }
	          }
	          return iteratee;
	        });
	      } else {
	        iteratees = [identity];
	      }

	      var index = -1;
	      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

	      var result = baseMap(collection, function(value, key, collection) {
	        var criteria = arrayMap(iteratees, function(iteratee) {
	          return iteratee(value);
	        });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function basePick(object, paths) {
	      return basePickBy(object, paths, function(value, path) {
	        return hasIn(object, path);
	      });
	    }

	    /**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
	    function basePickBy(object, paths, predicate) {
	      var index = -1,
	          length = paths.length,
	          result = {};

	      while (++index < length) {
	        var path = paths[index],
	            value = baseGet(object, path);

	        if (predicate(value, path)) {
	          baseSet(result, castPath(path, object), value);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */
	    function basePropertyDeep(path) {
	      return function(object) {
	        return baseGet(object, path);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAll(array, values, iteratee, comparator) {
	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	          index = -1,
	          length = values.length,
	          seen = array;

	      if (array === values) {
	        values = copyArray(values);
	      }
	      if (iteratee) {
	        seen = arrayMap(array, baseUnary(iteratee));
	      }
	      while (++index < length) {
	        var fromIndex = 0,
	            value = values[index],
	            computed = iteratee ? iteratee(value) : value;

	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	          if (seen !== array) {
	            splice.call(seen, fromIndex, 1);
	          }
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0,
	          lastIndex = length - 1;

	      while (length--) {
	        var index = indexes[length];
	        if (length == lastIndex || index !== previous) {
	          var previous = index;
	          if (isIndex(index)) {
	            splice.call(array, index, 1);
	          } else {
	            baseUnset(array, index);
	          }
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(lower, upper) {
	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
	    }

	    /**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the range of numbers.
	     */
	    function baseRange(start, end, step, fromRight) {
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (length--) {
	        result[fromRight ? length : ++index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */
	    function baseRepeat(string, n) {
	      var result = '';
	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        if (n) {
	          string += string;
	        }
	      } while (n);

	      return result;
	    }

	    /**
	     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     */
	    function baseRest(func, start) {
	      return setToString(overRest(func, start, identity), func + '');
	    }

	    /**
	     * The base implementation of `_.sample`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     */
	    function baseSample(collection) {
	      return arraySample(values(collection));
	    }

	    /**
	     * The base implementation of `_.sampleSize` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function baseSampleSize(collection, n) {
	      var array = values(collection);
	      return shuffleSelf(array, baseClamp(n, 0, array.length));
	    }

	    /**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseSet(object, path, value, customizer) {
	      if (!isObject(object)) {
	        return object;
	      }
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = toKey(path[index]),
	            newValue = value;

	        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
	          return object;
	        }

	        if (index != lastIndex) {
	          var objValue = nested[key];
	          newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
	          if (newValue === undefined$1) {
	            newValue = isObject(objValue)
	              ? objValue
	              : (isIndex(path[index + 1]) ? [] : {});
	          }
	        }
	        assignValue(nested, key, newValue);
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `setToString` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetToString = !defineProperty ? identity : function(func, string) {
	      return defineProperty(func, 'toString', {
	        'configurable': true,
	        'enumerable': false,
	        'value': constant(string),
	        'writable': true
	      });
	    };

	    /**
	     * The base implementation of `_.shuffle`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function baseShuffle(collection) {
	      return shuffleSelf(values(collection));
	    }

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = end > length ? length : end;
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndex(array, value, retHighest) {
	      var low = 0,
	          high = array == null ? low : array.length;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if (computed !== null && !isSymbol(computed) &&
	              (retHighest ? (computed <= value) : (computed < value))) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return baseSortedIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
	      var low = 0,
	          high = array == null ? 0 : array.length;
	      if (high === 0) {
	        return 0;
	      }

	      value = iteratee(value);
	      var valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsSymbol = isSymbol(value),
	          valIsUndefined = value === undefined$1;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            othIsDefined = computed !== undefined$1,
	            othIsNull = computed === null,
	            othIsReflexive = computed === computed,
	            othIsSymbol = isSymbol(computed);

	        if (valIsNaN) {
	          var setLow = retHighest || othIsReflexive;
	        } else if (valIsUndefined) {
	          setLow = othIsReflexive && (retHighest || othIsDefined);
	        } else if (valIsNull) {
	          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
	        } else if (valIsSymbol) {
	          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
	        } else if (othIsNull || othIsSymbol) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
	     * support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniq(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (!index || !eq(computed, seen)) {
	          var seen = computed;
	          result[resIndex++] = value === 0 ? 0 : value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.toNumber` which doesn't ensure correct
	     * conversions of binary, hexadecimal, or octal string values.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     */
	    function baseToNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      return +value;
	    }

	    /**
	     * The base implementation of `_.toString` which doesn't convert nullish
	     * values to empty strings.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     */
	    function baseToString(value) {
	      // Exit early for strings to avoid a performance hit in some environments.
	      if (typeof value == 'string') {
	        return value;
	      }
	      if (isArray(value)) {
	        // Recursively convert values (susceptible to call stack limits).
	        return arrayMap(value, baseToString) + '';
	      }
	      if (isSymbol(value)) {
	        return symbolToString ? symbolToString.call(value) : '';
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          length = array.length,
	          isCommon = true,
	          result = [],
	          seen = result;

	      if (comparator) {
	        isCommon = false;
	        includes = arrayIncludesWith;
	      }
	      else if (length >= LARGE_ARRAY_SIZE) {
	        var set = iteratee ? null : createSet(array);
	        if (set) {
	          return setToArray(set);
	        }
	        isCommon = false;
	        includes = cacheHas;
	        seen = new SetCache;
	      }
	      else {
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (!includes(seen, computed, comparator)) {
	          if (seen !== result) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The property path to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
	    function baseUnset(object, path) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      return object == null || delete object[toKey(last(path))];
	    }

	    /**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseUpdate(object, path, updater, customizer) {
	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
	    }

	    /**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) &&
	        predicate(array[index], index, array)) {}

	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      return arrayReduce(actions, function(result, action) {
	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }, result);
	    }

	    /**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
	    function baseXor(arrays, iteratee, comparator) {
	      var length = arrays.length;
	      if (length < 2) {
	        return length ? baseUniq(arrays[0]) : [];
	      }
	      var index = -1,
	          result = Array(length);

	      while (++index < length) {
	        var array = arrays[index],
	            othIndex = -1;

	        while (++othIndex < length) {
	          if (othIndex != index) {
	            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
	          }
	        }
	      }
	      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
	    }

	    /**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
	    function baseZipObject(props, values, assignFunc) {
	      var index = -1,
	          length = props.length,
	          valsLength = values.length,
	          result = {};

	      while (++index < length) {
	        var value = index < valsLength ? values[index] : undefined$1;
	        assignFunc(result, props[index], value);
	      }
	      return result;
	    }

	    /**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */
	    function castArrayLikeObject(value) {
	      return isArrayLikeObject(value) ? value : [];
	    }

	    /**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */
	    function castFunction(value) {
	      return typeof value == 'function' ? value : identity;
	    }

	    /**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {Array} Returns the cast property path array.
	     */
	    function castPath(value, object) {
	      if (isArray(value)) {
	        return value;
	      }
	      return isKey(value, object) ? [value] : stringToPath(toString(value));
	    }

	    /**
	     * A `baseRest` alias which can be replaced with `identity` by module
	     * replacement plugins.
	     *
	     * @private
	     * @type {Function}
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    var castRest = baseRest;

	    /**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */
	    function castSlice(array, start, end) {
	      var length = array.length;
	      end = end === undefined$1 ? length : end;
	      return (!start && end >= length) ? array : baseSlice(array, start, end);
	    }

	    /**
	     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
	     *
	     * @private
	     * @param {number|Object} id The timer id or timeout object of the timer to clear.
	     */
	    var clearTimeout = ctxClearTimeout || function(id) {
	      return root.clearTimeout(id);
	    };

	    /**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
	    function cloneBuffer(buffer, isDeep) {
	      if (isDeep) {
	        return buffer.slice();
	      }
	      var length = buffer.length,
	          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	      buffer.copy(result);
	      return result;
	    }

	    /**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function cloneArrayBuffer(arrayBuffer) {
	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	      return result;
	    }

	    /**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */
	    function cloneDataView(dataView, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	    }

	    /**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
	    function cloneRegExp(regexp) {
	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	      result.lastIndex = regexp.lastIndex;
	      return result;
	    }

	    /**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
	    function cloneSymbol(symbol) {
	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	    }

	    /**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
	    function cloneTypedArray(typedArray, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	    }

	    /**
	     * Compares values to sort them in ascending order.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {number} Returns the sort order indicator for `value`.
	     */
	    function compareAscending(value, other) {
	      if (value !== other) {
	        var valIsDefined = value !== undefined$1,
	            valIsNull = value === null,
	            valIsReflexive = value === value,
	            valIsSymbol = isSymbol(value);

	        var othIsDefined = other !== undefined$1,
	            othIsNull = other === null,
	            othIsReflexive = other === other,
	            othIsSymbol = isSymbol(other);

	        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	            (valIsNull && othIsDefined && othIsReflexive) ||
	            (!valIsDefined && othIsReflexive) ||
	            !valIsReflexive) {
	          return 1;
	        }
	        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	            (othIsNull && valIsDefined && valIsReflexive) ||
	            (!othIsDefined && valIsReflexive) ||
	            !othIsReflexive) {
	          return -1;
	        }
	      }
	      return 0;
	    }

	    /**
	     * Used by `_.orderBy` to compare multiple properties of a value to another
	     * and stable sort them.
	     *
	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	     * specify an order of "desc" for descending or "asc" for ascending sort order
	     * of corresponding values.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {boolean[]|string[]} orders The order to sort by for each property.
	     * @returns {number} Returns the sort order indicator for `object`.
	     */
	    function compareMultiple(object, other, orders) {
	      var index = -1,
	          objCriteria = object.criteria,
	          othCriteria = other.criteria,
	          length = objCriteria.length,
	          ordersLength = orders.length;

	      while (++index < length) {
	        var result = compareAscending(objCriteria[index], othCriteria[index]);
	        if (result) {
	          if (index >= ordersLength) {
	            return result;
	          }
	          var order = orders[index];
	          return result * (order == 'desc' ? -1 : 1);
	        }
	      }
	      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	      // that causes it, under certain circumstances, to provide the same value for
	      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	      // for more details.
	      //
	      // This also ensures a stable sort in V8 and other engines.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	      return object.index - other.index;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersLength = holders.length,
	          leftIndex = -1,
	          leftLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(leftLength + rangeLength),
	          isUncurried = !isCurried;

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[holders[argsIndex]] = args[argsIndex];
	        }
	      }
	      while (rangeLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersIndex = -1,
	          holdersLength = holders.length,
	          rightIndex = -1,
	          rightLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(rangeLength + rightLength),
	          isUncurried = !isCurried;

	      while (++argsIndex < rangeLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[offset + holders[holdersIndex]] = args[argsIndex++];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function copyArray(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObject(source, props, object, customizer) {
	      var isNew = !object;
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];

	        var newValue = customizer
	          ? customizer(object[key], source[key], key, object, source)
	          : undefined$1;

	        if (newValue === undefined$1) {
	          newValue = source[key];
	        }
	        if (isNew) {
	          baseAssignValue(object, key, newValue);
	        } else {
	          assignValue(object, key, newValue);
	        }
	      }
	      return object;
	    }

	    /**
	     * Copies own symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbols(source, object) {
	      return copyObject(source, getSymbols(source), object);
	    }

	    /**
	     * Copies own and inherited symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbolsIn(source, object) {
	      return copyObject(source, getSymbolsIn(source), object);
	    }

	    /**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};

	        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
	      };
	    }

	    /**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return baseRest(function(object, sources) {
	        var index = -1,
	            length = sources.length,
	            customizer = length > 1 ? sources[length - 1] : undefined$1,
	            guard = length > 2 ? sources[2] : undefined$1;

	        customizer = (assigner.length > 3 && typeof customizer == 'function')
	          ? (length--, customizer)
	          : undefined$1;

	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined$1 : customizer;
	          length = 1;
	        }
	        object = Object(object);
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, index, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        if (collection == null) {
	          return collection;
	        }
	        if (!isArrayLike(collection)) {
	          return eachFunc(collection, iteratee);
	        }
	        var length = collection.length,
	            index = fromRight ? length : -1,
	            iterable = Object(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var index = -1,
	            iterable = Object(object),
	            props = keysFunc(object),
	            length = props.length;

	        while (length--) {
	          var key = props[fromRight ? length : ++index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createBind(func, bitmask, thisArg) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new case function.
	     */
	    function createCaseFirst(methodName) {
	      return function(string) {
	        string = toString(string);

	        var strSymbols = hasUnicode(string)
	          ? stringToArray(string)
	          : undefined$1;

	        var chr = strSymbols
	          ? strSymbols[0]
	          : string.charAt(0);

	        var trailing = strSymbols
	          ? castSlice(strSymbols, 1).join('')
	          : string.slice(1);

	        return chr[methodName]() + trailing;
	      };
	    }

	    /**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtor(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors. See
	        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCurry(func, bitmask, arity) {
	      var Ctor = createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length,
	            placeholder = getHolder(wrapper);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	          ? []
	          : replaceHolders(args, placeholder);

	        length -= holders.length;
	        if (length < arity) {
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
	            args, holders, undefined$1, undefined$1, arity - length);
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return apply(fn, this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} findIndexFunc The function to find the collection index.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(findIndexFunc) {
	      return function(collection, predicate, fromIndex) {
	        var iterable = Object(collection);
	        if (!isArrayLike(collection)) {
	          var iteratee = getIteratee(predicate, 3);
	          collection = keys(collection);
	          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
	        }
	        var index = findIndexFunc(collection, predicate, fromIndex);
	        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return flatRest(function(funcs) {
	        var length = funcs.length,
	            index = length,
	            prereq = LodashWrapper.prototype.thru;

	        if (fromRight) {
	          funcs.reverse();
	        }
	        while (index--) {
	          var func = funcs[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	            var wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? index : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined$1;

	          if (data && isLaziable(data[0]) &&
	                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
	                !data[4].length && data[9] == 1
	              ) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func))
	              ? wrapper[funcName]()
	              : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 && isArray(value)) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      });
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & WRAP_ARY_FLAG,
	          isBind = bitmask & WRAP_BIND_FLAG,
	          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
	          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
	          isFlip = bitmask & WRAP_FLIP_FLAG,
	          Ctor = isBindKey ? undefined$1 : createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length;

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (isCurried) {
	          var placeholder = getHolder(wrapper),
	              holdersCount = countHolders(args, placeholder);
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders, isCurried);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	        }
	        length -= holdersCount;
	        if (isCurried && length < arity) {
	          var newHolders = replaceHolders(args, placeholder);
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
	            args, newHolders, argPos, ary, arity - length
	          );
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        length = args.length;
	        if (argPos) {
	          args = reorder(args, argPos);
	        } else if (isFlip && length > 1) {
	          args.reverse();
	        }
	        if (isAry && ary < length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtor(fn);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
	    function createInverter(setter, toIteratee) {
	      return function(object, iteratee) {
	        return baseInverter(object, setter, toIteratee(iteratee), {});
	      };
	    }

	    /**
	     * Creates a function that performs a mathematical operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @param {number} [defaultValue] The value used for `undefined` arguments.
	     * @returns {Function} Returns the new mathematical operation function.
	     */
	    function createMathOperation(operator, defaultValue) {
	      return function(value, other) {
	        var result;
	        if (value === undefined$1 && other === undefined$1) {
	          return defaultValue;
	        }
	        if (value !== undefined$1) {
	          result = value;
	        }
	        if (other !== undefined$1) {
	          if (result === undefined$1) {
	            return other;
	          }
	          if (typeof value == 'string' || typeof other == 'string') {
	            value = baseToString(value);
	            other = baseToString(other);
	          } else {
	            value = baseToNumber(value);
	            other = baseToNumber(other);
	          }
	          result = operator(value, other);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new over function.
	     */
	    function createOver(arrayFunc) {
	      return flatRest(function(iteratees) {
	        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
	        return baseRest(function(args) {
	          var thisArg = this;
	          return arrayFunc(iteratees, function(iteratee) {
	            return apply(iteratee, thisArg, args);
	          });
	        });
	      });
	    }

	    /**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
	    function createPadding(length, chars) {
	      chars = chars === undefined$1 ? ' ' : baseToString(chars);

	      var charsLength = chars.length;
	      if (charsLength < 2) {
	        return charsLength ? baseRepeat(chars, length) : chars;
	      }
	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
	      return hasUnicode(chars)
	        ? castSlice(stringToArray(result), 0, length).join('')
	        : result.slice(0, length);
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createPartial(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength),
	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return apply(fn, isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
	    function createRange(fromRight) {
	      return function(start, end, step) {
	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	          end = step = undefined$1;
	        }
	        // Ensure the sign of `-0` is preserved.
	        start = toFinite(start);
	        if (end === undefined$1) {
	          end = start;
	          start = 0;
	        } else {
	          end = toFinite(end);
	        }
	        step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
	        return baseRange(start, end, step, fromRight);
	      };
	    }

	    /**
	     * Creates a function that performs a relational operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new relational operation function.
	     */
	    function createRelationalOperation(operator) {
	      return function(value, other) {
	        if (!(typeof value == 'string' && typeof other == 'string')) {
	          value = toNumber(value);
	          other = toNumber(other);
	        }
	        return operator(value, other);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	      var isCurry = bitmask & WRAP_CURRY_FLAG,
	          newHolders = isCurry ? holders : undefined$1,
	          newHoldersRight = isCurry ? undefined$1 : holders,
	          newPartials = isCurry ? partials : undefined$1,
	          newPartialsRight = isCurry ? undefined$1 : partials;

	      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
	      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

	      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
	        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
	      }
	      var newData = [
	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	        newHoldersRight, argPos, ary, arity
	      ];

	      var result = wrapFunc.apply(undefined$1, newData);
	      if (isLaziable(func)) {
	        setData(result, newData);
	      }
	      result.placeholder = placeholder;
	      return setWrapToString(result, func, bitmask);
	    }

	    /**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        number = toNumber(number);
	        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
	        if (precision && nativeIsFinite(number)) {
	          // Shift with exponential notation to avoid floating-point issues.
	          // See [MDN](https://mdn.io/round#Examples) for more details.
	          var pair = (toString(number) + 'e').split('e'),
	              value = func(pair[0] + 'e' + (+pair[1] + precision));

	          pair = (toString(value) + 'e').split('e');
	          return +(pair[0] + 'e' + (+pair[1] - precision));
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a set object of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */
	    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
	      return new Set(values);
	    };

	    /**
	     * Creates a `_.toPairs` or `_.toPairsIn` function.
	     *
	     * @private
	     * @param {Function} keysFunc The function to get the keys of a given object.
	     * @returns {Function} Returns the new pairs function.
	     */
	    function createToPairs(keysFunc) {
	      return function(object) {
	        var tag = getTag(object);
	        if (tag == mapTag) {
	          return mapToArray(object);
	        }
	        if (tag == setTag) {
	          return setToPairs(object);
	        }
	        return baseToPairs(object, keysFunc(object));
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags.
	     *    1 - `_.bind`
	     *    2 - `_.bindKey`
	     *    4 - `_.curry` or `_.curryRight` of a bound function
	     *    8 - `_.curry`
	     *   16 - `_.curryRight`
	     *   32 - `_.partial`
	     *   64 - `_.partialRight`
	     *  128 - `_.rearg`
	     *  256 - `_.ary`
	     *  512 - `_.flip`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined$1;
	      }
	      ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
	      arity = arity === undefined$1 ? arity : toInteger(arity);
	      length -= holders ? holders.length : 0;

	      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined$1;
	      }
	      var data = isBindKey ? undefined$1 : getData(func);

	      var newData = [
	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	        argPos, ary, arity
	      ];

	      if (data) {
	        mergeData(newData, data);
	      }
	      func = newData[0];
	      bitmask = newData[1];
	      thisArg = newData[2];
	      partials = newData[3];
	      holders = newData[4];
	      arity = newData[9] = newData[9] === undefined$1
	        ? (isBindKey ? 0 : func.length)
	        : nativeMax(newData[9] - length, 0);

	      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
	        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
	      }
	      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
	        var result = createBind(func, bitmask, thisArg);
	      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
	        result = createCurry(func, bitmask, arity);
	      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
	        result = createPartial(func, bitmask, thisArg, partials);
	      } else {
	        result = createHybrid.apply(undefined$1, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setWrapToString(setter(result, newData), func, bitmask);
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
	     * of source objects to the destination object for all destination properties
	     * that resolve to `undefined`.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsAssignIn(objValue, srcValue, key, object) {
	      if (objValue === undefined$1 ||
	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        return srcValue;
	      }
	      return objValue;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
	     * objects into destination objects that are passed thru.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
	      if (isObject(objValue) && isObject(srcValue)) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, objValue);
	        baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
	        stack['delete'](srcValue);
	      }
	      return objValue;
	    }

	    /**
	     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
	     * objects.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {string} key The key of the property to inspect.
	     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
	     */
	    function customOmitClone(value) {
	      return isPlainObject(value) ? undefined$1 : value;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	        return false;
	      }
	      // Check that cyclic values are equal.
	      var arrStacked = stack.get(array);
	      var othStacked = stack.get(other);
	      if (arrStacked && othStacked) {
	        return arrStacked == other && othStacked == array;
	      }
	      var index = -1,
	          result = true,
	          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

	      stack.set(array, other);
	      stack.set(other, array);

	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, arrValue, index, other, array, stack)
	            : customizer(arrValue, othValue, index, array, other, stack);
	        }
	        if (compared !== undefined$1) {
	          if (compared) {
	            continue;
	          }
	          result = false;
	          break;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (seen) {
	          if (!arraySome(other, function(othValue, othIndex) {
	                if (!cacheHas(seen, othIndex) &&
	                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	                  return seen.push(othIndex);
	                }
	              })) {
	            result = false;
	            break;
	          }
	        } else if (!(
	              arrValue === othValue ||
	                equalFunc(arrValue, othValue, bitmask, customizer, stack)
	            )) {
	          result = false;
	          break;
	        }
	      }
	      stack['delete'](array);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	      switch (tag) {
	        case dataViewTag:
	          if ((object.byteLength != other.byteLength) ||
	              (object.byteOffset != other.byteOffset)) {
	            return false;
	          }
	          object = object.buffer;
	          other = other.buffer;

	        case arrayBufferTag:
	          if ((object.byteLength != other.byteLength) ||
	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	            return false;
	          }
	          return true;

	        case boolTag:
	        case dateTag:
	        case numberTag:
	          // Coerce booleans to `1` or `0` and dates to milliseconds.
	          // Invalid dates are coerced to `NaN`.
	          return eq(+object, +other);

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings, primitives and objects,
	          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	          // for more details.
	          return object == (other + '');

	        case mapTag:
	          var convert = mapToArray;

	        case setTag:
	          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	          convert || (convert = setToArray);

	          if (object.size != other.size && !isPartial) {
	            return false;
	          }
	          // Assume cyclic values are equal.
	          var stacked = stack.get(object);
	          if (stacked) {
	            return stacked == other;
	          }
	          bitmask |= COMPARE_UNORDERED_FLAG;

	          // Recursively compare objects (susceptible to call stack limits).
	          stack.set(object, other);
	          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	          stack['delete'](object);
	          return result;

	        case symbolTag:
	          if (symbolValueOf) {
	            return symbolValueOf.call(object) == symbolValueOf.call(other);
	          }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          objProps = getAllKeys(object),
	          objLength = objProps.length,
	          othProps = getAllKeys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isPartial) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      // Check that cyclic values are equal.
	      var objStacked = stack.get(object);
	      var othStacked = stack.get(other);
	      if (objStacked && othStacked) {
	        return objStacked == other && othStacked == object;
	      }
	      var result = true;
	      stack.set(object, other);
	      stack.set(other, object);

	      var skipCtor = isPartial;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, objValue, key, other, object, stack)
	            : customizer(objValue, othValue, key, object, other, stack);
	        }
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(compared === undefined$1
	              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	              : compared
	            )) {
	          result = false;
	          break;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (result && !skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          result = false;
	        }
	      }
	      stack['delete'](object);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseRest` which flattens the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    function flatRest(func) {
	      return setToString(overRest(func, undefined$1, flatten), func + '');
	    }

	    /**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeys(object) {
	      return baseGetAllKeys(object, keys, getSymbols);
	    }

	    /**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeysIn(object) {
	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
	    function getHolder(func) {
	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
	      return object.placeholder;
	    }

	    /**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getIteratee() {
	      var result = lodash.iteratee || iteratee;
	      result = result === iteratee ? baseIteratee : result;
	      return arguments.length ? result(arguments[0], arguments[1]) : result;
	    }

	    /**
	     * Gets the data for `map`.
	     *
	     * @private
	     * @param {Object} map The map to query.
	     * @param {string} key The reference key.
	     * @returns {*} Returns the map data.
	     */
	    function getMapData(map, key) {
	      var data = map.__data__;
	      return isKeyable(key)
	        ? data[typeof key == 'string' ? 'string' : 'hash']
	        : data.map;
	    }

	    /**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = keys(object),
	          length = result.length;

	      while (length--) {
	        var key = result[length],
	            value = object[key];

	        result[length] = [key, value, isStrictComparable(value)];
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = getValue(object, key);
	      return baseIsNative(value) ? value : undefined$1;
	    }

	    /**
	     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the raw `toStringTag`.
	     */
	    function getRawTag(value) {
	      var isOwn = hasOwnProperty.call(value, symToStringTag),
	          tag = value[symToStringTag];

	      try {
	        value[symToStringTag] = undefined$1;
	        var unmasked = true;
	      } catch (e) {}

	      var result = nativeObjectToString.call(value);
	      if (unmasked) {
	        if (isOwn) {
	          value[symToStringTag] = tag;
	        } else {
	          delete value[symToStringTag];
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
	      if (object == null) {
	        return [];
	      }
	      object = Object(object);
	      return arrayFilter(nativeGetSymbols(object), function(symbol) {
	        return propertyIsEnumerable.call(object, symbol);
	      });
	    };

	    /**
	     * Creates an array of the own and inherited enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
	      var result = [];
	      while (object) {
	        arrayPush(result, getSymbols(object));
	        object = getPrototype(object);
	      }
	      return result;
	    };

	    /**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    var getTag = baseGetTag;

	    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	        (Map && getTag(new Map) != mapTag) ||
	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
	        (Set && getTag(new Set) != setTag) ||
	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	      getTag = function(value) {
	        var result = baseGetTag(value),
	            Ctor = result == objectTag ? value.constructor : undefined$1,
	            ctorString = Ctor ? toSource(Ctor) : '';

	        if (ctorString) {
	          switch (ctorString) {
	            case dataViewCtorString: return dataViewTag;
	            case mapCtorString: return mapTag;
	            case promiseCtorString: return promiseTag;
	            case setCtorString: return setTag;
	            case weakMapCtorString: return weakMapTag;
	          }
	        }
	        return result;
	      };
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Extracts wrapper details from the `source` body comment.
	     *
	     * @private
	     * @param {string} source The source to inspect.
	     * @returns {Array} Returns the wrapper details.
	     */
	    function getWrapDetails(source) {
	      var match = source.match(reWrapDetails);
	      return match ? match[1].split(reSplitDetails) : [];
	    }

	    /**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
	    function hasPath(object, path, hasFunc) {
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length,
	          result = false;

	      while (++index < length) {
	        var key = toKey(path[index]);
	        if (!(result = object != null && hasFunc(object, key))) {
	          break;
	        }
	        object = object[key];
	      }
	      if (result || ++index != length) {
	        return result;
	      }
	      length = object == null ? 0 : object.length;
	      return !!length && isLength(length) && isIndex(key, length) &&
	        (isArray(object) || isArguments(object));
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      return (typeof object.constructor == 'function' && !isPrototype(object))
	        ? baseCreate(getPrototype(object))
	        : {};
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return cloneArrayBuffer(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case dataViewTag:
	          return cloneDataView(object, isDeep);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          return cloneTypedArray(object, isDeep);

	        case mapTag:
	          return new Ctor;

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          return cloneRegExp(object);

	        case setTag:
	          return new Ctor;

	        case symbolTag:
	          return cloneSymbol(object);
	      }
	    }

	    /**
	     * Inserts wrapper `details` in a comment at the top of the `source` body.
	     *
	     * @private
	     * @param {string} source The source to modify.
	     * @returns {Array} details The details to insert.
	     * @returns {string} Returns the modified source.
	     */
	    function insertWrapDetails(source, details) {
	      var length = details.length;
	      if (!length) {
	        return source;
	      }
	      var lastIndex = length - 1;
	      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	      details = details.join(length > 2 ? ', ' : ' ');
	      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	    }

	    /**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenable(value) {
	      return isArray(value) || isArguments(value) ||
	        !!(spreadableSymbol && value && value[spreadableSymbol]);
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      var type = typeof value;
	      length = length == null ? MAX_SAFE_INTEGER : length;

	      return !!length &&
	        (type == 'number' ||
	          (type != 'symbol' && reIsUint.test(value))) &&
	            (value > -1 && value % 1 == 0 && value < length);
	    }

	    /**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	            ? (isArrayLike(object) && isIndex(index, object.length))
	            : (type == 'string' && index in object)
	          ) {
	        return eq(object[index], value);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      if (isArray(value)) {
	        return false;
	      }
	      var type = typeof value;
	      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	          value == null || isSymbol(value)) {
	        return true;
	      }
	      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	        (object != null && value in Object(object));
	    }

	    /**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
	    function isKeyable(value) {
	      var type = typeof value;
	      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	        ? (value !== '__proto__')
	        : (value === null);
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];

	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `func` has its source masked.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	     */
	    function isMasked(func) {
	      return !!maskSrcKey && (maskSrcKey in func);
	    }

	    /**
	     * Checks if `func` is capable of being masked.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
	     */
	    var isMaskable = coreJsData ? isFunction : stubFalse;

	    /**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
	    function isPrototype(value) {
	      var Ctor = value && value.constructor,
	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	      return value === proto;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function matchesStrictComparable(key, srcValue) {
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        return object[key] === srcValue &&
	          (srcValue !== undefined$1 || (key in Object(object)));
	      };
	    }

	    /**
	     * A specialized version of `_.memoize` which clears the memoized function's
	     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	     *
	     * @private
	     * @param {Function} func The function to have its output memoized.
	     * @returns {Function} Returns the new memoized function.
	     */
	    function memoizeCapped(func) {
	      var result = memoize(func, function(key) {
	        if (cache.size === MAX_MEMOIZE_SIZE) {
	          cache.clear();
	        }
	        return key;
	      });

	      var cache = result.cache;
	      return result;
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

	      var isCombo =
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
	        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & WRAP_BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = value;
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & WRAP_ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * This function is like
	     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * except that it includes inherited enumerable properties.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function nativeKeysIn(object) {
	      var result = [];
	      if (object != null) {
	        for (var key in Object(object)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a string using `Object.prototype.toString`.
	     *
	     * @private
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     */
	    function objectToString(value) {
	      return nativeObjectToString.call(value);
	    }

	    /**
	     * A specialized version of `baseRest` which transforms the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @param {Function} transform The rest array transform.
	     * @returns {Function} Returns the new function.
	     */
	    function overRest(func, start, transform) {
	      start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            array = Array(length);

	        while (++index < length) {
	          array[index] = args[start + index];
	        }
	        index = -1;
	        var otherArgs = Array(start + 1);
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = transform(array);
	        return apply(func, this, otherArgs);
	      };
	    }

	    /**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
	    function parent(object, path) {
	      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = copyArray(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
	      }
	      return array;
	    }

	    /**
	     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the property to get.
	     * @returns {*} Returns the property value.
	     */
	    function safeGet(object, key) {
	      if (key === 'constructor' && typeof object[key] === 'function') {
	        return;
	      }

	      if (key == '__proto__') {
	        return;
	      }

	      return object[key];
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = shortOut(baseSetData);

	    /**
	     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    var setTimeout = ctxSetTimeout || function(func, wait) {
	      return root.setTimeout(func, wait);
	    };

	    /**
	     * Sets the `toString` method of `func` to return `string`.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var setToString = shortOut(baseSetToString);

	    /**
	     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	     * with wrapper details in a comment at the top of the source body.
	     *
	     * @private
	     * @param {Function} wrapper The function to modify.
	     * @param {Function} reference The reference function.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Function} Returns `wrapper`.
	     */
	    function setWrapToString(wrapper, reference, bitmask) {
	      var source = (reference + '');
	      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
	    }

	    /**
	     * Creates a function that'll short out and invoke `identity` instead
	     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	     * milliseconds.
	     *
	     * @private
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new shortable function.
	     */
	    function shortOut(func) {
	      var count = 0,
	          lastCalled = 0;

	      return function() {
	        var stamp = nativeNow(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return arguments[0];
	          }
	        } else {
	          count = 0;
	        }
	        return func.apply(undefined$1, arguments);
	      };
	    }

	    /**
	     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @param {number} [size=array.length] The size of `array`.
	     * @returns {Array} Returns `array`.
	     */
	    function shuffleSelf(array, size) {
	      var index = -1,
	          length = array.length,
	          lastIndex = length - 1;

	      size = size === undefined$1 ? length : size;
	      while (++index < size) {
	        var rand = baseRandom(index, lastIndex),
	            value = array[rand];

	        array[rand] = array[index];
	        array[index] = value;
	      }
	      array.length = size;
	      return array;
	    }

	    /**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */
	    var stringToPath = memoizeCapped(function(string) {
	      var result = [];
	      if (string.charCodeAt(0) === 46 /* . */) {
	        result.push('');
	      }
	      string.replace(rePropName, function(match, number, quote, subString) {
	        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    });

	    /**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */
	    function toKey(value) {
	      if (typeof value == 'string' || isSymbol(value)) {
	        return value;
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to convert.
	     * @returns {string} Returns the source code.
	     */
	    function toSource(func) {
	      if (func != null) {
	        try {
	          return funcToString.call(func);
	        } catch (e) {}
	        try {
	          return (func + '');
	        } catch (e) {}
	      }
	      return '';
	    }

	    /**
	     * Updates wrapper `details` based on `bitmask` flags.
	     *
	     * @private
	     * @returns {Array} details The details to modify.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Array} Returns `details`.
	     */
	    function updateWrapDetails(details, bitmask) {
	      arrayEach(wrapFlags, function(pair) {
	        var value = '_.' + pair[0];
	        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
	          details.push(value);
	        }
	      });
	      return details.sort();
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      if (wrapper instanceof LazyWrapper) {
	        return wrapper.clone();
	      }
	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	      result.__actions__ = copyArray(wrapper.__actions__);
	      result.__index__  = wrapper.__index__;
	      result.__values__ = wrapper.__values__;
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array of chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
	        size = 1;
	      } else {
	        size = nativeMax(toInteger(size), 0);
	      }
	      var length = array == null ? 0 : array.length;
	      if (!length || size < 1) {
	        return [];
	      }
	      var index = 0,
	          resIndex = 0,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[resIndex++] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array == null ? 0 : array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    function concat() {
	      var length = arguments.length;
	      if (!length) {
	        return [];
	      }
	      var args = Array(length - 1),
	          array = arguments[0],
	          index = length;

	      while (index--) {
	        args[index - 1] = arguments[index];
	      }
	      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
	    }

	    /**
	     * Creates an array of `array` values not included in the other given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * **Note:** Unlike `_.pullAll`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.without, _.xor
	     * @example
	     *
	     * _.difference([2, 1], [2, 3]);
	     * // => [1]
	     */
	    var difference = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var differenceBy = baseRest(function(array, values) {
	      var iteratee = last(values);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. The order and
	     * references of result values are determined by the first array. The comparator
	     * is invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */
	    var differenceWith = baseRest(function(array, values) {
	      var comparator = last(values);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined$1;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
	    function fill(array, value, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index);
	    }

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length - 1;
	      if (fromIndex !== undefined$1) {
	        index = toInteger(fromIndex);
	        index = fromIndex < 0
	          ? nativeMax(length + index, 0)
	          : nativeMin(index, length - 1);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
	    }

	    /**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
	    function flatten(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, 1) : [];
	    }

	    /**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
	    function flattenDeep(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, INFINITY) : [];
	    }

	    /**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
	    function flattenDepth(array, depth) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      depth = depth === undefined$1 ? 1 : toInteger(depth);
	      return baseFlatten(array, depth);
	    }

	    /**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['a', 1], ['b', 2]]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function fromPairs(pairs) {
	      var index = -1,
	          length = pairs == null ? 0 : pairs.length,
	          result = {};

	      while (++index < length) {
	        var pair = pairs[index];
	        result[pair[0]] = pair[1];
	      }
	      return result;
	    }

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
	    function head(array) {
	      return (array && array.length) ? array[0] : undefined$1;
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseIndexOf(array, value, index);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 0, -1) : [];
	    }

	    /**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [2, 3]);
	     * // => [2]
	     */
	    var intersection = baseRest(function(arrays) {
	      var mapped = arrayMap(arrays, castArrayLikeObject);
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped)
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */
	    var intersectionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      if (iteratee === last(mapped)) {
	        iteratee = undefined$1;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. The order and references
	     * of result values are determined by the first array. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */
	    var intersectionWith = baseRest(function(arrays) {
	      var comparator = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      if (comparator) {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, undefined$1, comparator)
	        : [];
	    });

	    /**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
	    function join(array, separator) {
	      return array == null ? '' : nativeJoin.call(array, separator);
	    }

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? array[length - 1] : undefined$1;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (fromIndex !== undefined$1) {
	        index = toInteger(fromIndex);
	        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
	      }
	      return value === value
	        ? strictLastIndexOf(array, value, index)
	        : baseFindIndex(array, baseIsNaN, index, true);
	    }

	    /**
	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
	     * element from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */
	    function nth(array, n) {
	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
	    }

	    /**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pull(array, 'a', 'c');
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    var pull = baseRest(pullAll);

	    /**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pullAll(array, ['a', 'c']);
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    function pullAll(array, values) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values)
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
	    function pullAllBy(array, values, iteratee) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, getIteratee(iteratee, 2))
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
	    function pullAllWith(array, values, comparator) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, undefined$1, comparator)
	        : array;
	    }

	    /**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     * var pulled = _.pullAt(array, [1, 3]);
	     *
	     * console.log(array);
	     * // => ['a', 'c']
	     *
	     * console.log(pulled);
	     * // => ['b', 'd']
	     */
	    var pullAt = flatRest(function(array, indexes) {
	      var length = array == null ? 0 : array.length,
	          result = baseAt(array, indexes);

	      basePullAt(array, arrayMap(indexes, function(index) {
	        return isIndex(index, length) ? +index : index;
	      }).sort(compareAscending));

	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getIteratee(predicate, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function reverse(array) {
	      return array == null ? array : nativeReverse.call(array);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      else {
	        start = start == null ? 0 : toInteger(start);
	        end = end === undefined$1 ? length : toInteger(end);
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     */
	    function sortedIndex(array, value) {
	      return baseSortedIndex(array, value);
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 0
	     */
	    function sortedIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
	    }

	    /**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 1
	     */
	    function sortedIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value);
	        if (index < length && eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
	     * // => 4
	     */
	    function sortedLastIndex(array, value) {
	      return baseSortedIndex(array, value, true);
	    }

	    /**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 1
	     */
	    function sortedLastIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
	    }

	    /**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 3
	     */
	    function sortedLastIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value, true) - 1;
	        if (eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
	    function sortedUniq(array) {
	      return (array && array.length)
	        ? baseSortedUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
	    function sortedUniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSortedUniq(array, getIteratee(iteratee, 2))
	        : [];
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function tail(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 1, length) : [];
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
	    function takeRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
	    function takeWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2], [1, 2]);
	     * // => [2, 1]
	     */
	    var union = baseRest(function(arrays) {
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. Result values are chosen from the first
	     * array in which the value occurs. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    var unionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. Result values are chosen from
	     * the first array in which the value occurs. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var unionWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each element
	     * is kept. The order of result values is determined by the order they occur
	     * in the array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
	    function uniq(array) {
	      return (array && array.length) ? baseUniq(array) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The order of result values is determined by the
	     * order they occur in the array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniqBy(array, iteratee) {
	      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The order of result values is
	     * determined by the order they occur in the array.The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
	    function uniqWith(array, comparator) {
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['a', 'b'], [1, 2], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var length = 0;
	      array = arrayFilter(array, function(group) {
	        if (isArrayLikeObject(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      return baseTimes(length, function(index) {
	        return arrayMap(array, baseProperty(index));
	      });
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      return arrayMap(result, function(group) {
	        return apply(iteratee, undefined$1, group);
	      });
	    }

	    /**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.pull`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.xor
	     * @example
	     *
	     * _.without([2, 1, 2, 3], 1, 2);
	     * // => [3]
	     */
	    var without = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.without
	     * @example
	     *
	     * _.xor([2, 1], [2, 3]);
	     * // => [1, 3]
	     */
	    var xor = baseRest(function(arrays) {
	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The order of result values is determined
	     * by the order they occur in the arrays. The iteratee is invoked with one
	     * argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2, 3.4]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var xorBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The order of result values is
	     * determined by the order they occur in the arrays. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var xorWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
	    });

	    /**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     */
	    var zip = baseRest(unzip);

	    /**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function zipObject(props, values) {
	      return baseZipObject(props || [], values || [], assignValue);
	    }

	    /**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
	    function zipObjectDeep(props, values) {
	      return baseZipObject(props || [], values || [], baseSet);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */
	    var zipWith = baseRest(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 1 ? arrays[length - 1] : undefined$1;

	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
	      return unzipWith(arrays, iteratee);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor) {
	      return interceptor(value);
	    }

	    /**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     */
	    var wrapperAt = flatRest(function(paths) {
	      var length = paths.length,
	          start = length ? paths[0] : 0,
	          value = this.__wrapped__,
	          interceptor = function(object) { return baseAt(object, paths); };

	      if (length > 1 || this.__actions__.length ||
	          !(value instanceof LazyWrapper) || !isIndex(start)) {
	        return this.thru(interceptor);
	      }
	      value = value.slice(start, +start + (length ? 1 : 0));
	      value.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined$1
	      });
	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
	        if (length && !array.length) {
	          array.push(undefined$1);
	        }
	        return array;
	      });
	    });

	    /**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
	    function wrapperNext() {
	      if (this.__values__ === undefined$1) {
	        this.__values__ = toArray(this.value());
	      }
	      var done = this.__index__ >= this.__values__.length,
	          value = done ? undefined$1 : this.__values__[this.__index__++];

	      return { 'done': done, 'value': value };
	    }

	    /**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
	    function wrapperToIterator() {
	      return this;
	    }

	    /**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        clone.__index__ = 0;
	        clone.__values__ = undefined$1;
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({
	          'func': thru,
	          'args': [reverse],
	          'thisArg': undefined$1
	        });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(reverse);
	    }

	    /**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the number of times the key was returned by `iteratee`. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        ++result[key];
	      } else {
	        baseAssignValue(result, key, 1);
	      }
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * **Note:** This method returns `true` for
	     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	     * elements of empty collections.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, guard) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined$1;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * **Note:** Unlike `_.remove`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.reject
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     *
	     * // Combining several predicates using `_.overEvery` or `_.overSome`.
	     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
	     * // => objects for ['fred', 'barney']
	     */
	    function filter(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
	    var find = createFind(findIndex);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=collection.length-1] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(findLastIndex);

	    /**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMap(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), 1);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMapDeep(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), INFINITY);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */
	    function flatMapDepth(collection, iteratee, depth) {
	      depth = depth === undefined$1 ? 1 : toInteger(depth);
	      return baseFlatten(map(collection, iteratee), depth);
	    }

	    /**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEachRight
	     * @example
	     *
	     * _.forEach([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forEach(collection, iteratee) {
	      var func = isArray(collection) ? arrayEach : baseEach;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEach
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */
	    function forEachRight(collection, iteratee) {
	      var func = isArray(collection) ? arrayEachRight : baseEachRight;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The order of grouped values
	     * is determined by the order they occur in `collection`. The corresponding
	     * value of each key is an array of elements responsible for generating the
	     * key. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        baseAssignValue(result, key, [value]);
	      }
	    });

	    /**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'a': 1, 'b': 2 }, 1);
	     * // => true
	     *
	     * _.includes('abcd', 'bc');
	     * // => true
	     */
	    function includes(collection, value, fromIndex, guard) {
	      collection = isArrayLike(collection) ? collection : values(collection);
	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

	      var length = collection.length;
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return isString(collection)
	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	    }

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `path` is a function, it's invoked
	     * for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invokeMap = baseRest(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */
	    var keyBy = createAggregator(function(result, value, key) {
	      baseAssignValue(result, key, value);
	    });

	    /**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    function orderBy(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      orders = guard ? undefined$1 : orders;
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseOrderBy(collection, iteratees, orders);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduceRight
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduce : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	    }

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduce
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	    }

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.filter
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
	    function reject(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, negate(getIteratee(predicate, 3)));
	    }

	    /**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
	    function sample(collection) {
	      var func = isArray(collection) ? arraySample : baseSample;
	      return func(collection);
	    }

	    /**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
	    function sampleSize(collection, n, guard) {
	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
	      return func(collection, n);
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      var func = isArray(collection) ? arrayShuffle : baseShuffle;
	      return func(collection);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      if (collection == null) {
	        return 0;
	      }
	      if (isArrayLike(collection)) {
	        return isString(collection) ? stringSize(collection) : collection.length;
	      }
	      var tag = getTag(collection);
	      if (tag == mapTag || tag == setTag) {
	        return collection.size;
	      }
	      return baseKeys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, guard) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined$1;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection thru each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 30 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, [function(o) { return o.user; }]);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
	     */
	    var sortBy = baseRest(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var length = iteratees.length;
	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	        iteratees = [];
	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	        iteratees = [iteratees[0]];
	      }
	      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred invocation.
	     */
	    var now = ctxNow || function() {
	      return root.Date.now();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      n = guard ? undefined$1 : n;
	      n = (func && n == null) ? func.length : n;
	      return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => Allows adding up to 4 contacts to the list.
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined$1;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and `partials` prepended to the arguments it receives.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * function greet(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * }
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = baseRest(function(func, thisArg, partials) {
	      var bitmask = WRAP_BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bind));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` with `partials`
	     * prepended to the arguments it receives.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = baseRest(function(object, key, partials) {
	      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bindKey));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      arity = guard ? undefined$1 : arity;
	      var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      arity = guard ? undefined$1 : arity;
	      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide `options` to indicate whether `func` should be invoked on the
	     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent
	     * calls to the debounced function return the result of the last `func`
	     * invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the debounced function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
	    function debounce(func, wait, options) {
	      var lastArgs,
	          lastThis,
	          maxWait,
	          result,
	          timerId,
	          lastCallTime,
	          lastInvokeTime = 0,
	          leading = false,
	          maxing = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = toNumber(wait) || 0;
	      if (isObject(options)) {
	        leading = !!options.leading;
	        maxing = 'maxWait' in options;
	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function invokeFunc(time) {
	        var args = lastArgs,
	            thisArg = lastThis;

	        lastArgs = lastThis = undefined$1;
	        lastInvokeTime = time;
	        result = func.apply(thisArg, args);
	        return result;
	      }

	      function leadingEdge(time) {
	        // Reset any `maxWait` timer.
	        lastInvokeTime = time;
	        // Start the timer for the trailing edge.
	        timerId = setTimeout(timerExpired, wait);
	        // Invoke the leading edge.
	        return leading ? invokeFunc(time) : result;
	      }

	      function remainingWait(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime,
	            timeWaiting = wait - timeSinceLastCall;

	        return maxing
	          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
	          : timeWaiting;
	      }

	      function shouldInvoke(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime;

	        // Either this is the first call, activity has stopped and we're at the
	        // trailing edge, the system time has gone backwards and we're treating
	        // it as the trailing edge, or we've hit the `maxWait` limit.
	        return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	      }

	      function timerExpired() {
	        var time = now();
	        if (shouldInvoke(time)) {
	          return trailingEdge(time);
	        }
	        // Restart the timer.
	        timerId = setTimeout(timerExpired, remainingWait(time));
	      }

	      function trailingEdge(time) {
	        timerId = undefined$1;

	        // Only invoke if we have `lastArgs` which means `func` has been
	        // debounced at least once.
	        if (trailing && lastArgs) {
	          return invokeFunc(time);
	        }
	        lastArgs = lastThis = undefined$1;
	        return result;
	      }

	      function cancel() {
	        if (timerId !== undefined$1) {
	          clearTimeout(timerId);
	        }
	        lastInvokeTime = 0;
	        lastArgs = lastCallTime = lastThis = timerId = undefined$1;
	      }

	      function flush() {
	        return timerId === undefined$1 ? result : trailingEdge(now());
	      }

	      function debounced() {
	        var time = now(),
	            isInvoking = shouldInvoke(time);

	        lastArgs = arguments;
	        lastThis = this;
	        lastCallTime = time;

	        if (isInvoking) {
	          if (timerId === undefined$1) {
	            return leadingEdge(lastCallTime);
	          }
	          if (maxing) {
	            // Handle invocations in a tight loop.
	            clearTimeout(timerId);
	            timerId = setTimeout(timerExpired, wait);
	            return invokeFunc(lastCallTime);
	          }
	        }
	        if (timerId === undefined$1) {
	          timerId = setTimeout(timerExpired, wait);
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      debounced.flush = flush;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one millisecond.
	     */
	    var defer = baseRest(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */
	    var delay = baseRest(function(func, wait, args) {
	      return baseDelay(func, toNumber(wait) || 0, args);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new flipped function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
	    function flip(func) {
	      return createWrap(func, WRAP_FLIP_FLAG);
	    }

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoized function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result) || cache;
	        return result;
	      };
	      memoized.cache = new (memoize.Cache || MapCache);
	      return memoized;
	    }

	    // Expose `MapCache`.
	    memoize.Cache = MapCache;

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new negated function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        var args = arguments;
	        switch (args.length) {
	          case 0: return !predicate.call(this);
	          case 1: return !predicate.call(this, args[0]);
	          case 2: return !predicate.call(this, args[0], args[1]);
	          case 3: return !predicate.call(this, args[0], args[1], args[2]);
	        }
	        return !predicate.apply(this, args);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // => `createApplication` is invoked once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with its arguments transformed.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms=[_.identity]]
	     *  The argument transforms.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, [square, doubled]);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
	    var overArgs = castRest(function(func, transforms) {
	      transforms = (transforms.length == 1 && isArray(transforms[0]))
	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
	        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

	      var funcsLength = transforms.length;
	      return baseRest(function(args) {
	        var index = -1,
	            length = nativeMin(args.length, funcsLength);

	        while (++index < length) {
	          args[index] = transforms[index].call(this, args[index]);
	        }
	        return apply(func, this, args);
	      });
	    });

	    /**
	     * Creates a function that invokes `func` with `partials` prepended to the
	     * arguments it receives. This method is like `_.bind` except it does **not**
	     * alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partial));
	      return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
	    });

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to the arguments it receives.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partialRight));
	      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified `indexes` where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, [2, 0, 1]);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */
	    var rearg = flatRest(function(func, indexes) {
	      return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function rest(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined$1 ? start : toInteger(start);
	      return baseRest(func, start);
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start == null ? 0 : nativeMax(toInteger(start), 0);
	      return baseRest(function(args) {
	        var array = args[start],
	            otherArgs = castSlice(args, 0, start);

	        if (array) {
	          arrayPush(otherArgs, array);
	        }
	        return apply(func, this, otherArgs);
	      });
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide `options` to indicate whether `func`
	     * should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, {
	        'leading': leading,
	        'maxWait': wait,
	        'trailing': trailing
	      });
	    }

	    /**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
	    function unary(func) {
	      return ary(func, 1);
	    }

	    /**
	     * Creates a function that provides `value` to `wrapper` as its first
	     * argument. Any additional arguments provided to the function are appended
	     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
	     * binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      return partial(castFunction(wrapper), value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
	    function castArray() {
	      if (!arguments.length) {
	        return [];
	      }
	      var value = arguments[0];
	      return isArray(value) ? value : [value];
	    }

	    /**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeep
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
	    function clone(value) {
	      return baseClone(value, CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeepWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
	    function cloneWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.clone
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
	    function cloneDeep(value) {
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.cloneWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
	    function cloneDeepWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * Checks if `object` conforms to `source` by invoking the predicate
	     * properties of `source` with the corresponding property values of `object`.
	     *
	     * **Note:** This method is equivalent to `_.conforms` when `source` is
	     * partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
	     * // => true
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
	     * // => false
	     */
	    function conformsTo(object, source) {
	      return source == null || baseConformsTo(object, source, keys(source));
	    }

	    /**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
	    function eq(value, other) {
	      return value === other || (value !== value && other !== other);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @see _.lt
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    var gt = createRelationalOperation(baseGt);

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @see _.lte
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    var gte = createRelationalOperation(function(value, other) {
	      return value >= other;
	    });

	    /**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	        !propertyIsEnumerable.call(value, 'callee');
	    };

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */
	    var isArray = Array.isArray;

	    /**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
	    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

	    /**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(value.length) && !isFunction(value);
	    }

	    /**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
	    function isArrayLikeObject(value) {
	      return isObjectLike(value) && isArrayLike(value);
	    }

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        (isObjectLike(value) && baseGetTag(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */
	    var isBuffer = nativeIsBuffer || stubFalse;

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

	    /**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) &&
	          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
	            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	        return !value.length;
	      }
	      var tag = getTag(value);
	      if (tag == mapTag || tag == setTag) {
	        return !value.size;
	      }
	      if (isPrototype(value)) {
	        return !baseKeys(value).length;
	      }
	      for (var key in value) {
	        if (hasOwnProperty.call(value, key)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are compared by strict equality, i.e. `===`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
	    function isEqual(value, other) {
	      return baseIsEqual(value, other);
	    }

	    /**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
	    function isEqualWith(value, other, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      var result = customizer ? customizer(value, other) : undefined$1;
	      return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      if (!isObjectLike(value)) {
	        return false;
	      }
	      var tag = baseGetTag(value);
	      return tag == errorTag || tag == domExcTag ||
	        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     *
	     * _.isFinite('3');
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      if (!isObject(value)) {
	        return false;
	      }
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in Safari 9 which returns 'object' for typed arrays and other constructors.
	      var tag = baseGetTag(value);
	      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	    }

	    /**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
	    function isInteger(value) {
	      return typeof value == 'number' && value == toInteger(value);
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
	    function isLength(value) {
	      return typeof value == 'number' &&
	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
	    function isObject(value) {
	      var type = typeof value;
	      return value != null && (type == 'object' || type == 'function');
	    }

	    /**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
	    function isObjectLike(value) {
	      return value != null && typeof value == 'object';
	    }

	    /**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
	    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

	    /**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values.
	     *
	     * **Note:** This method is equivalent to `_.matches` when `source` is
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.isMatch(object, { 'b': 2 });
	     * // => true
	     *
	     * _.isMatch(object, { 'b': 1 });
	     * // => false
	     */
	    function isMatch(object, source) {
	      return object === source || baseIsMatch(object, source, getMatchData(source));
	    }

	    /**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
	    function isMatchWith(object, source, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseIsMatch(object, source, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some
	      // ActiveX objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a pristine native function.
	     *
	     * **Note:** This method can't reliably detect native functions in the presence
	     * of the core-js package because core-js circumvents this kind of detection.
	     * Despite multiple requests, the core-js maintainer has made it clear: any
	     * attempt to fix the detection will be obstructed. As a result, we're left
	     * with little choice but to throw an error. Unfortunately, this also affects
	     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
	     * which rely on core-js.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (isMaskable(value)) {
	        throw new Error(CORE_ERROR_TEXT);
	      }
	      return baseIsNative(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
	    function isNil(value) {
	      return value == null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        (isObjectLike(value) && baseGetTag(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	        return false;
	      }
	      var proto = getPrototype(value);
	      if (proto === null) {
	        return true;
	      }
	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	        funcToString.call(Ctor) == objectCtorString;
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

	    /**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
	    function isSafeInteger(value) {
	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
	    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
	    function isSymbol(value) {
	      return typeof value == 'symbol' ||
	        (isObjectLike(value) && baseGetTag(value) == symbolTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined$1;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
	    function isWeakMap(value) {
	      return isObjectLike(value) && getTag(value) == weakMapTag;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
	    function isWeakSet(value) {
	      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @see _.gt
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    var lt = createRelationalOperation(baseLt);

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @see _.gte
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    var lte = createRelationalOperation(function(value, other) {
	      return value <= other;
	    });

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
	    function toArray(value) {
	      if (!value) {
	        return [];
	      }
	      if (isArrayLike(value)) {
	        return isString(value) ? stringToArray(value) : copyArray(value);
	      }
	      if (symIterator && value[symIterator]) {
	        return iteratorToArray(value[symIterator]());
	      }
	      var tag = getTag(value),
	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

	      return func(value);
	    }

	    /**
	     * Converts `value` to a finite number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.12.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted number.
	     * @example
	     *
	     * _.toFinite(3.2);
	     * // => 3.2
	     *
	     * _.toFinite(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toFinite(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toFinite('3.2');
	     * // => 3.2
	     */
	    function toFinite(value) {
	      if (!value) {
	        return value === 0 ? value : 0;
	      }
	      value = toNumber(value);
	      if (value === INFINITY || value === -INFINITY) {
	        var sign = (value < 0 ? -1 : 1);
	        return sign * MAX_INTEGER;
	      }
	      return value === value ? value : 0;
	    }

	    /**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3.2);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3.2');
	     * // => 3
	     */
	    function toInteger(value) {
	      var result = toFinite(value),
	          remainder = result % 1;

	      return result === result ? (remainder ? result - remainder : result) : 0;
	    }

	    /**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3.2);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3.2');
	     * // => 3
	     */
	    function toLength(value) {
	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	    }

	    /**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3.2);
	     * // => 3.2
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3.2');
	     * // => 3.2
	     */
	    function toNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      if (isObject(value)) {
	        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	        value = isObject(other) ? (other + '') : other;
	      }
	      if (typeof value != 'string') {
	        return value === 0 ? value : +value;
	      }
	      value = baseTrim(value);
	      var isBinary = reIsBinary.test(value);
	      return (isBinary || reIsOctal.test(value))
	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	        : (reIsBadHex.test(value) ? NAN : +value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return copyObject(value, keysIn(value));
	    }

	    /**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3.2);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3.2');
	     * // => 3
	     */
	    function toSafeInteger(value) {
	      return value
	        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
	        : (value === 0 ? value : 0);
	    }

	    /**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
	    function toString(value) {
	      return value == null ? '' : baseToString(value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assignIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assign({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var assign = createAssigner(function(object, source) {
	      if (isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keys(source), object);
	        return;
	      }
	      for (var key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          assignValue(object, key, source[key]);
	        }
	      }
	    });

	    /**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assign
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
	     */
	    var assignIn = createAssigner(function(object, source) {
	      copyObject(source, keysIn(source), object);
	    });

	    /**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keysIn(source), object, customizer);
	    });

	    /**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignInWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keys(source), object, customizer);
	    });

	    /**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Array} Returns the picked values.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     */
	    var at = flatRest(baseAt);

	    /**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties == null ? result : baseAssign(result, properties);
	    }

	    /**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaultsDeep
	     * @example
	     *
	     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var defaults = baseRest(function(object, sources) {
	      object = Object(object);

	      var index = -1;
	      var length = sources.length;
	      var guard = length > 2 ? sources[2] : undefined$1;

	      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	        length = 1;
	      }

	      while (++index < length) {
	        var source = sources[index];
	        var props = keysIn(source);
	        var propsIndex = -1;
	        var propsLength = props.length;

	        while (++propsIndex < propsLength) {
	          var key = props[propsIndex];
	          var value = object[key];

	          if (value === undefined$1 ||
	              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	            object[key] = source[key];
	          }
	        }
	      }

	      return object;
	    });

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaults
	     * @example
	     *
	     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
	     * // => { 'a': { 'b': 2, 'c': 3 } }
	     */
	    var defaultsDeep = baseRest(function(args) {
	      args.push(undefined$1, customDefaultsMerge);
	      return apply(mergeWith, undefined$1, args);
	    });

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
	    }

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
	    }

	    /**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forInRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */
	    function forIn(object, iteratee) {
	      return object == null
	        ? object
	        : baseFor(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */
	    function forInRight(object, iteratee) {
	      return object == null
	        ? object
	        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwnRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forOwn(object, iteratee) {
	      return object && baseForOwn(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */
	    function forOwnRight(object, iteratee) {
	      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functionsIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
	    function functions(object) {
	      return object == null ? [] : baseFunctions(object, keys(object));
	    }

	    /**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functions
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
	    function functionsIn(object) {
	      return object == null ? [] : baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is returned in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined$1 : baseGet(object, path);
	      return result === undefined$1 ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
	    function has(object, path) {
	      return object != null && hasPath(object, path, baseHas);
	    }

	    /**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
	    function hasIn(object, path) {
	      return object != null && hasPath(object, path, baseHasIn);
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */
	    var invert = createInverter(function(result, value, key) {
	      if (value != null &&
	          typeof value.toString != 'function') {
	        value = nativeObjectToString.call(value);
	      }

	      result[value] = key;
	    }, constant(identity));

	    /**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` thru `iteratee`. The
	     * corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */
	    var invertBy = createInverter(function(result, value, key) {
	      if (value != null &&
	          typeof value.toString != 'function') {
	        value = nativeObjectToString.call(value);
	      }

	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }, getIteratee);

	    /**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */
	    var invoke = baseRest(baseInvoke);

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    function keys(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapValues
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    function mapKeys(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, iteratee(value, key, object), value);
	      });
	      return result;
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapKeys
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, key, iteratee(value, key, object));
	      });
	      return result;
	    }

	    /**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively. Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {
	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
	     * };
	     *
	     * var other = {
	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
	     * };
	     *
	     * _.merge(object, other);
	     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	     */
	    var merge = createAssigner(function(object, source, srcIndex) {
	      baseMerge(object, source, srcIndex);
	    });

	    /**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined`, merging is handled by the
	     * method instead. The `customizer` is invoked with six arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = { 'a': [1], 'b': [2] };
	     * var other = { 'a': [3], 'b': [4] };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'a': [1, 3], 'b': [2, 4] }
	     */
	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	      baseMerge(object, source, srcIndex, customizer);
	    });

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable property paths of `object` that are not omitted.
	     *
	     * **Note:** This method is considerably slower than `_.pick`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to omit.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */
	    var omit = flatRest(function(object, paths) {
	      var result = {};
	      if (object == null) {
	        return result;
	      }
	      var isDeep = false;
	      paths = arrayMap(paths, function(path) {
	        path = castPath(path, object);
	        isDeep || (isDeep = path.length > 1);
	        return path;
	      });
	      copyObject(object, getAllKeysIn(object), result);
	      if (isDeep) {
	        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
	      }
	      var length = paths.length;
	      while (length--) {
	        baseUnset(result, paths[length]);
	      }
	      return result;
	    });

	    /**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
	    function omitBy(object, predicate) {
	      return pickBy(object, negate(getIteratee(predicate)));
	    }

	    /**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var pick = flatRest(function(object, paths) {
	      return object == null ? {} : basePick(object, paths);
	    });

	    /**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    function pickBy(object, predicate) {
	      if (object == null) {
	        return {};
	      }
	      var props = arrayMap(getAllKeysIn(object), function(prop) {
	        return [prop];
	      });
	      predicate = getIteratee(predicate);
	      return basePickBy(object, props, function(value, path) {
	        return predicate(value, path[0]);
	      });
	    }

	    /**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length;

	      // Ensure the loop is entered when path is empty.
	      if (!length) {
	        length = 1;
	        object = undefined$1;
	      }
	      while (++index < length) {
	        var value = object == null ? undefined$1 : object[toKey(path[index])];
	        if (value === undefined$1) {
	          index = length;
	          value = defaultValue;
	        }
	        object = isFunction(value) ? value.call(object) : value;
	      }
	      return object;
	    }

	    /**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      return object == null ? object : baseSet(object, path, value);
	    }

	    /**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function setWith(object, path, value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return object == null ? object : baseSet(object, path, value, customizer);
	    }

	    /**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	     * entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */
	    var toPairs = createToPairs(keys);

	    /**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
	     * or set, its entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
	     */
	    var toPairsIn = createToPairs(keysIn);

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. If `accumulator` is not
	     * provided, a new object with the same `[[Prototype]]` will be used. The
	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function transform(object, iteratee, accumulator) {
	      var isArr = isArray(object),
	          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

	      iteratee = getIteratee(iteratee, 4);
	      if (accumulator == null) {
	        var Ctor = object && object.constructor;
	        if (isArrLike) {
	          accumulator = isArr ? new Ctor : [];
	        }
	        else if (isObject(object)) {
	          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	        }
	        else {
	          accumulator = {};
	        }
	      }
	      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
	    function unset(object, path) {
	      return object == null ? true : baseUnset(object, path);
	    }

	    /**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
	    function update(object, path, updater) {
	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
	    }

	    /**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function updateWith(object, path, updater, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
	    }

	    /**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return object == null ? [] : baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return object == null ? [] : baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
	    function clamp(number, lower, upper) {
	      if (upper === undefined$1) {
	        upper = lower;
	        lower = undefined$1;
	      }
	      if (upper !== undefined$1) {
	        upper = toNumber(upper);
	        upper = upper === upper ? upper : 0;
	      }
	      if (lower !== undefined$1) {
	        lower = toNumber(lower);
	        lower = lower === lower ? lower : 0;
	      }
	      return baseClamp(toNumber(number), lower, upper);
	    }

	    /**
	     * Checks if `n` is between `start` and up to, but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @see _.range, _.rangeRight
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
	    function inRange(number, start, end) {
	      start = toFinite(start);
	      if (end === undefined$1) {
	        end = start;
	        start = 0;
	      } else {
	        end = toFinite(end);
	      }
	      number = toNumber(number);
	      return baseInRange(number, start, end);
	    }

	    /**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(lower, upper, floating) {
	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	        upper = floating = undefined$1;
	      }
	      if (floating === undefined$1) {
	        if (typeof upper == 'boolean') {
	          floating = upper;
	          upper = undefined$1;
	        }
	        else if (typeof lower == 'boolean') {
	          floating = lower;
	          lower = undefined$1;
	        }
	      }
	      if (lower === undefined$1 && upper === undefined$1) {
	        lower = 0;
	        upper = 1;
	      }
	      else {
	        lower = toFinite(lower);
	        if (upper === undefined$1) {
	          upper = lower;
	          lower = 0;
	        } else {
	          upper = toFinite(upper);
	        }
	      }
	      if (lower > upper) {
	        var temp = lower;
	        lower = upper;
	        upper = temp;
	      }
	      if (floating || lower % 1 || upper % 1) {
	        var rand = nativeRandom();
	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
	      }
	      return baseRandom(lower, upper);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? capitalize(word) : word);
	    });

	    /**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      return upperFirst(toString(string).toLowerCase());
	    }

	    /**
	     * Deburrs `string` by converting
	     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	     * letters to basic Latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = toString(string);
	      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search up to.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = toString(string);
	      target = baseToString(target);

	      var length = string.length;
	      position = position === undefined$1
	        ? length
	        : baseClamp(toInteger(position), 0, length);

	      var end = position;
	      position -= target.length;
	      return position >= 0 && string.slice(position, end) == target;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
	     * corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      string = toString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = toString(string);
	      return (string && reHasRegExpChar.test(string))
	        ? string.replace(reRegExpChar, '\\$&')
	        : string;
	    }

	    /**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */
	    var lowerCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */
	    var lowerFirst = createCaseFirst('toLowerCase');

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      if (!length || strLength >= length) {
	        return string;
	      }
	      var mid = (length - strLength) / 2;
	      return (
	        createPadding(nativeFloor(mid), chars) +
	        string +
	        createPadding(nativeCeil(mid), chars)
	      );
	    }

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
	    function padEnd(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (string + createPadding(length - strLength, chars))
	        : string;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
	    function padStart(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (createPadding(length - strLength, chars) + string)
	        : string;
	    }

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      if (guard || radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n, guard) {
	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      return baseRepeat(toString(string), n);
	    }

	    /**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
	    function replace() {
	      var args = arguments,
	          string = toString(args[0]);

	      return args.length < 3 ? string : string.replace(args[1], args[2]);
	    }

	    /**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
	    function split(string, separator, limit) {
	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
	        separator = limit = undefined$1;
	      }
	      limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
	      if (!limit) {
	        return [];
	      }
	      string = toString(string);
	      if (string && (
	            typeof separator == 'string' ||
	            (separator != null && !isRegExp(separator))
	          )) {
	        separator = baseToString(separator);
	        if (!separator && hasUnicode(string)) {
	          return castSlice(stringToArray(string), 0, limit);
	        }
	      }
	      return string.split(separator, limit);
	    }

	    /**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + upperFirst(word);
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = toString(string);
	      position = position == null
	        ? 0
	        : baseClamp(toInteger(position), 0, string.length);

	      target = baseToString(target);
	      return string.slice(position, position + target.length) == target;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES template literal delimiter as an "interpolate" delimiter.
	     * // Disable support by replacing the "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, guard) {
	      // Based on John Resig's `tmpl` implementation
	      // (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined$1;
	      }
	      string = toString(string);
	      options = assignInWith({}, options, settings, customDefaultsAssignIn);

	      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      // The sourceURL gets injected into the source that's eval-ed, so be careful
	      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
	      // and escape the comment, thus injecting code that gets evaled.
	      var sourceURL = '//# sourceURL=' +
	        (hasOwnProperty.call(options, 'sourceURL')
	          ? (options.sourceURL + '').replace(/\s/g, ' ')
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products needs `match` returned in
	        // order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Throw an error if a forbidden character was found in `variable`, to prevent
	      // potential command injection attacks.
	      else if (reForbiddenIdentifierChars.test(variable)) {
	        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
	      }

	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source)
	          .apply(undefined$1, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
	    function toLower(value) {
	      return toString(value).toLowerCase();
	    }

	    /**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
	    function toUpper(value) {
	      return toString(value).toUpperCase();
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return baseTrim(string);
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          chrSymbols = stringToArray(chars),
	          start = charsStartIndex(strSymbols, chrSymbols),
	          end = charsEndIndex(strSymbols, chrSymbols) + 1;

	      return castSlice(strSymbols, start, end).join('');
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimEnd(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return string.slice(0, trimmedEndIndex(string) + 1);
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

	      return castSlice(strSymbols, 0, end).join('');
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimStart(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return string.replace(reTrimStart, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          start = charsStartIndex(strSymbols, stringToArray(chars));

	      return castSlice(strSymbols, start).join('');
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function truncate(string, options) {
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (isObject(options)) {
	        var separator = 'separator' in options ? options.separator : separator;
	        length = 'length' in options ? toInteger(options.length) : length;
	        omission = 'omission' in options ? baseToString(options.omission) : omission;
	      }
	      string = toString(string);

	      var strLength = string.length;
	      if (hasUnicode(string)) {
	        var strSymbols = stringToArray(string);
	        strLength = strSymbols.length;
	      }
	      if (length >= strLength) {
	        return string;
	      }
	      var end = length - stringSize(omission);
	      if (end < 1) {
	        return omission;
	      }
	      var result = strSymbols
	        ? castSlice(strSymbols, 0, end).join('')
	        : string.slice(0, end);

	      if (separator === undefined$1) {
	        return result + omission;
	      }
	      if (strSymbols) {
	        end += (result.length - end);
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              substring = result;

	          if (!separator.global) {
	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            var newEnd = match.index;
	          }
	          result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
	        }
	      } else if (string.indexOf(baseToString(separator), end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = toString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */
	    var upperCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toUpperCase();
	    });

	    /**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */
	    var upperFirst = createCaseFirst('toUpperCase');

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      string = toString(string);
	      pattern = guard ? undefined$1 : pattern;

	      if (pattern === undefined$1) {
	        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	      }
	      return string.match(pattern) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = baseRest(function(func, args) {
	      try {
	        return apply(func, undefined$1, args);
	      } catch (e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'click': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, ['click']);
	     * jQuery(element).on('click', view.click);
	     * // => Logs 'clicked docs' when clicked.
	     */
	    var bindAll = flatRest(function(object, methodNames) {
	      arrayEach(methodNames, function(key) {
	        key = toKey(key);
	        baseAssignValue(object, key, bind(object[key], object));
	      });
	      return object;
	    });

	    /**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new composite function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.stubTrue,                      _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
	    function cond(pairs) {
	      var length = pairs == null ? 0 : pairs.length,
	          toIteratee = getIteratee();

	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
	        if (typeof pair[1] != 'function') {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	        return [toIteratee(pair[0]), pair[1]];
	      });

	      return baseRest(function(args) {
	        var index = -1;
	        while (++index < length) {
	          var pair = pairs[index];
	          if (apply(pair[0], this, args)) {
	            return apply(pair[1], this, args);
	          }
	        }
	      });
	    }

	    /**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.conformsTo` with
	     * `source` partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 2, 'b': 1 },
	     *   { 'a': 1, 'b': 2 }
	     * ];
	     *
	     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
	     * // => [{ 'a': 1, 'b': 2 }]
	     */
	    function conforms(source) {
	      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new constant function.
	     * @example
	     *
	     * var objects = _.times(2, _.constant({ 'a': 1 }));
	     *
	     * console.log(objects);
	     * // => [{ 'a': 1 }, { 'a': 1 }]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * Checks `value` to determine whether a default value should be returned in
	     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
	     * or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Util
	     * @param {*} value The value to check.
	     * @param {*} defaultValue The default value.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * _.defaultTo(1, 10);
	     * // => 1
	     *
	     * _.defaultTo(undefined, 10);
	     * // => 10
	     */
	    function defaultTo(value, defaultValue) {
	      return (value == null || value !== value) ? defaultValue : value;
	    }

	    /**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flowRight
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow([_.add, square]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 3.0.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flow
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight([square, _.add]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * This method returns the first argument it receives.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     *
	     * console.log(_.identity(object) === object);
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */
	    function iteratee(func) {
	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.isMatch` with `source`
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * **Note:** Multiple values can be checked by combining several matchers
	     * using `_.overSome`
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
	     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
	     *
	     * // Checking for several possible values
	     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** Partial comparisons will match empty array and empty object
	     * `srcValue` values against any array or object value, respectively. See
	     * `_.isEqual` for a list of supported value comparisons.
	     *
	     * **Note:** Multiple values can be checked by combining several matchers
	     * using `_.overSome`
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.find(objects, _.matchesProperty('a', 4));
	     * // => { 'a': 4, 'b': 5, 'c': 6 }
	     *
	     * // Checking for several possible values
	     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': _.constant(2) } },
	     *   { 'a': { 'b': _.constant(1) } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b']));
	     * // => [2, 1]
	     */
	    var method = baseRest(function(path, args) {
	      return function(object) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = baseRest(function(object, args) {
	      return function(path) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      var props = keys(source),
	          methodNames = baseFunctions(source, props);

	      if (options == null &&
	          !(isObject(source) && (methodNames.length || !props.length))) {
	        options = source;
	        source = object;
	        object = this;
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
	          isFunc = isFunction(object);

	      arrayEach(methodNames, function(methodName) {
	        var func = source[methodName];
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = function() {
	            var chainAll = this.__chain__;
	            if (chain || chainAll) {
	              var result = object(this.__wrapped__),
	                  actions = result.__actions__ = copyArray(this.__actions__);

	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	              result.__chain__ = chainAll;
	              return result;
	            }
	            return func.apply(object, arrayPush([this.value()], arguments));
	          };
	        }
	      });

	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      if (root._ === this) {
	        root._ = oldDash;
	      }
	      return this;
	    }

	    /**
	     * This method returns `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * _.times(2, _.noop);
	     * // => [undefined, undefined]
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that gets the argument at index `n`. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new pass-thru function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */
	    function nthArg(n) {
	      n = toInteger(n);
	      return baseRest(function(args) {
	        return baseNth(args, n);
	      });
	    }

	    /**
	     * Creates a function that invokes `iteratees` with the arguments it receives
	     * and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over([Math.max, Math.min]);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */
	    var over = createOver(arrayMap);

	    /**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * Following shorthands are possible for providing predicates.
	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overEvery = createOver(arrayEvery);

	    /**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * Following shorthands are possible for providing predicates.
	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     *
	     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
	     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
	     */
	    var overSome = createOver(arraySome);

	    /**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return object == null ? undefined$1 : baseGet(object, path);
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified,
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.rangeRight
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    var range = createRange();

	    /**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.range
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */
	    var rangeRight = createRange(true);

	    /**
	     * This method returns a new empty array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Array} Returns the new empty array.
	     * @example
	     *
	     * var arrays = _.times(2, _.stubArray);
	     *
	     * console.log(arrays);
	     * // => [[], []]
	     *
	     * console.log(arrays[0] === arrays[1]);
	     * // => false
	     */
	    function stubArray() {
	      return [];
	    }

	    /**
	     * This method returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `false`.
	     * @example
	     *
	     * _.times(2, _.stubFalse);
	     * // => [false, false]
	     */
	    function stubFalse() {
	      return false;
	    }

	    /**
	     * This method returns a new empty object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Object} Returns the new empty object.
	     * @example
	     *
	     * var objects = _.times(2, _.stubObject);
	     *
	     * console.log(objects);
	     * // => [{}, {}]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => false
	     */
	    function stubObject() {
	      return {};
	    }

	    /**
	     * This method returns an empty string.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {string} Returns the empty string.
	     * @example
	     *
	     * _.times(2, _.stubString);
	     * // => ['', '']
	     */
	    function stubString() {
	      return '';
	    }

	    /**
	     * This method returns `true`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `true`.
	     * @example
	     *
	     * _.times(2, _.stubTrue);
	     * // => [true, true]
	     */
	    function stubTrue() {
	      return true;
	    }

	    /**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(0));
	     * // => [0, 0, 0, 0]
	     */
	    function times(n, iteratee) {
	      n = toInteger(n);
	      if (n < 1 || n > MAX_SAFE_INTEGER) {
	        return [];
	      }
	      var index = MAX_ARRAY_LENGTH,
	          length = nativeMin(n, MAX_ARRAY_LENGTH);

	      iteratee = getIteratee(iteratee);
	      n -= MAX_ARRAY_LENGTH;

	      var result = baseTimes(length, iteratee);
	      while (++index < n) {
	        iteratee(index);
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return arrayMap(value, toKey);
	      }
	      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
	    }

	    /**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return toString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    var add = createMathOperation(function(augend, addend) {
	      return augend + addend;
	    }, 0);

	    /**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */
	    var divide = createMathOperation(function(dividend, divisor) {
	      return dividend / divisor;
	    }, 1);

	    /**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
	    function max(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseGt)
	        : undefined$1;
	    }

	    /**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
	    function maxBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
	        : undefined$1;
	    }

	    /**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
	    function mean(array) {
	      return baseMean(array, identity);
	    }

	    /**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */
	    function meanBy(array, iteratee) {
	      return baseMean(array, getIteratee(iteratee, 2));
	    }

	    /**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
	    function min(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseLt)
	        : undefined$1;
	    }

	    /**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
	    function minBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
	        : undefined$1;
	    }

	    /**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */
	    var multiply = createMathOperation(function(multiplier, multiplicand) {
	      return multiplier * multiplicand;
	    }, 1);

	    /**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */
	    var subtract = createMathOperation(function(minuend, subtrahend) {
	      return minuend - subtrahend;
	    }, 0);

	    /**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
	    function sum(array) {
	      return (array && array.length)
	        ? baseSum(array, identity)
	        : 0;
	    }

	    /**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
	    function sumBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSum(array, getIteratee(iteratee, 2))
	        : 0;
	    }

	    /*------------------------------------------------------------------------*/

	    // Add methods that return wrapped values in chain sequences.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.assignIn = assignIn;
	    lodash.assignInWith = assignInWith;
	    lodash.assignWith = assignWith;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.castArray = castArray;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.concat = concat;
	    lodash.cond = cond;
	    lodash.conforms = conforms;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.differenceBy = differenceBy;
	    lodash.differenceWith = differenceWith;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatMap = flatMap;
	    lodash.flatMapDeep = flatMapDeep;
	    lodash.flatMapDepth = flatMapDepth;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flattenDepth = flattenDepth;
	    lodash.flip = flip;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.fromPairs = fromPairs;
	    lodash.functions = functions;
	    lodash.functionsIn = functionsIn;
	    lodash.groupBy = groupBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.intersectionBy = intersectionBy;
	    lodash.intersectionWith = intersectionWith;
	    lodash.invert = invert;
	    lodash.invertBy = invertBy;
	    lodash.invokeMap = invokeMap;
	    lodash.iteratee = iteratee;
	    lodash.keyBy = keyBy;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mergeWith = mergeWith;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.nthArg = nthArg;
	    lodash.omit = omit;
	    lodash.omitBy = omitBy;
	    lodash.once = once;
	    lodash.orderBy = orderBy;
	    lodash.over = over;
	    lodash.overArgs = overArgs;
	    lodash.overEvery = overEvery;
	    lodash.overSome = overSome;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pickBy = pickBy;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAll = pullAll;
	    lodash.pullAllBy = pullAllBy;
	    lodash.pullAllWith = pullAllWith;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rangeRight = rangeRight;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.reverse = reverse;
	    lodash.sampleSize = sampleSize;
	    lodash.set = set;
	    lodash.setWith = setWith;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortedUniq = sortedUniq;
	    lodash.sortedUniqBy = sortedUniqBy;
	    lodash.split = split;
	    lodash.spread = spread;
	    lodash.tail = tail;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.toArray = toArray;
	    lodash.toPairs = toPairs;
	    lodash.toPairsIn = toPairsIn;
	    lodash.toPath = toPath;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.unary = unary;
	    lodash.union = union;
	    lodash.unionBy = unionBy;
	    lodash.unionWith = unionWith;
	    lodash.uniq = uniq;
	    lodash.uniqBy = uniqBy;
	    lodash.uniqWith = uniqWith;
	    lodash.unset = unset;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.update = update;
	    lodash.updateWith = updateWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.without = without;
	    lodash.words = words;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.xorBy = xorBy;
	    lodash.xorWith = xorWith;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipObjectDeep = zipObjectDeep;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.entries = toPairs;
	    lodash.entriesIn = toPairsIn;
	    lodash.extend = assignIn;
	    lodash.extendWith = assignInWith;

	    // Add methods to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add methods that return unwrapped values in chain sequences.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clamp = clamp;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.cloneDeepWith = cloneDeepWith;
	    lodash.cloneWith = cloneWith;
	    lodash.conformsTo = conformsTo;
	    lodash.deburr = deburr;
	    lodash.defaultTo = defaultTo;
	    lodash.divide = divide;
	    lodash.endsWith = endsWith;
	    lodash.eq = eq;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.floor = floor;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.hasIn = hasIn;
	    lodash.head = head;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.invoke = invoke;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isArrayBuffer = isArrayBuffer;
	    lodash.isArrayLike = isArrayLike;
	    lodash.isArrayLikeObject = isArrayLikeObject;
	    lodash.isBoolean = isBoolean;
	    lodash.isBuffer = isBuffer;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isEqualWith = isEqualWith;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isInteger = isInteger;
	    lodash.isLength = isLength;
	    lodash.isMap = isMap;
	    lodash.isMatch = isMatch;
	    lodash.isMatchWith = isMatchWith;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNil = isNil;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isObjectLike = isObjectLike;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isSafeInteger = isSafeInteger;
	    lodash.isSet = isSet;
	    lodash.isString = isString;
	    lodash.isSymbol = isSymbol;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.isWeakMap = isWeakMap;
	    lodash.isWeakSet = isWeakSet;
	    lodash.join = join;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lowerCase = lowerCase;
	    lodash.lowerFirst = lowerFirst;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.maxBy = maxBy;
	    lodash.mean = mean;
	    lodash.meanBy = meanBy;
	    lodash.min = min;
	    lodash.minBy = minBy;
	    lodash.stubArray = stubArray;
	    lodash.stubFalse = stubFalse;
	    lodash.stubObject = stubObject;
	    lodash.stubString = stubString;
	    lodash.stubTrue = stubTrue;
	    lodash.multiply = multiply;
	    lodash.nth = nth;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padEnd = padEnd;
	    lodash.padStart = padStart;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.replace = replace;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.sample = sample;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedIndexBy = sortedIndexBy;
	    lodash.sortedIndexOf = sortedIndexOf;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.sortedLastIndexBy = sortedLastIndexBy;
	    lodash.sortedLastIndexOf = sortedLastIndexOf;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.subtract = subtract;
	    lodash.sum = sum;
	    lodash.sumBy = sumBy;
	    lodash.template = template;
	    lodash.times = times;
	    lodash.toFinite = toFinite;
	    lodash.toInteger = toInteger;
	    lodash.toLength = toLength;
	    lodash.toLower = toLower;
	    lodash.toNumber = toNumber;
	    lodash.toSafeInteger = toSafeInteger;
	    lodash.toString = toString;
	    lodash.toUpper = toUpper;
	    lodash.trim = trim;
	    lodash.trimEnd = trimEnd;
	    lodash.trimStart = trimStart;
	    lodash.truncate = truncate;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.upperCase = upperCase;
	    lodash.upperFirst = upperFirst;

	    // Add aliases.
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.first = head;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), { 'chain': false });

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

	        var result = (this.__filtered__ && !index)
	          ? new LazyWrapper(this)
	          : this.clone();

	        if (result.__filtered__) {
	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
	        } else {
	          result.__views__.push({
	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
	          });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee) {
	        var result = this.clone();
	        result.__iteratees__.push({
	          'iteratee': getIteratee(iteratee, 3),
	          'type': type
	        });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
	    arrayEach(['head', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	    arrayEach(['initial', 'tail'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.find = function(predicate) {
	      return this.filter(predicate).head();
	    };

	    LazyWrapper.prototype.findLast = function(predicate) {
	      return this.reverse().find(predicate);
	    };

	    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
	      if (typeof path == 'function') {
	        return new LazyWrapper(this);
	      }
	      return this.map(function(value) {
	        return baseInvoke(value, path, args);
	      });
	    });

	    LazyWrapper.prototype.reject = function(predicate) {
	      return this.filter(negate(getIteratee(predicate)));
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = toInteger(start);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined$1) {
	        end = toInteger(end);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
	      return this.reverse().takeWhile(predicate).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(MAX_ARRAY_LENGTH);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	          isTaker = /^(?:head|last)$/.test(methodName),
	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
	          retUnwrapped = isTaker || /^find/.test(methodName);

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = isTaker ? [1] : arguments,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        var interceptor = function(value) {
	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
	          return (isTaker && chainAll) ? result[0] : result;
	        };

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isUnwrapped = retUnwrapped && !chainAll,
	            onlyLazy = isLazy && !isHybrid;

	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
	          return new LodashWrapper(result, chainAll);
	        }
	        if (isUnwrapped && onlyLazy) {
	          return func.apply(this, args);
	        }
	        result = this.thru(interceptor);
	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
	      };
	    });

	    // Add `Array` methods to `lodash.prototype`.
	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          var value = this.value();
	          return func.apply(isArray(value) ? value : [], args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(isArray(value) ? value : [], args);
	        });
	      };
	    });

	    // Map minified method names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = lodashFunc.name + '';
	        if (!hasOwnProperty.call(realNames, key)) {
	          realNames[key] = [];
	        }
	        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
	      'name': 'wrapper',
	      'func': undefined$1
	    }];

	    // Add methods to `LazyWrapper`.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chain sequence methods to the `lodash` wrapper.
	    lodash.prototype.at = wrapperAt;
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.next = wrapperNext;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add lazy aliases.
	    lodash.prototype.first = lodash.prototype.head;

	    if (symIterator) {
	      lodash.prototype[symIterator] = wrapperToIterator;
	    }
	    return lodash;
	  });

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers, like r.js, check for condition patterns like:
	  if (freeModule) {
	    // Export for Node.js.
	    (freeModule.exports = _)._ = _;
	    // Export for CommonJS support.
	    freeExports._ = _;
	  }
	  else {
	    // Export to the global object.
	    root._ = _;
	  }
	}.call(commonjsGlobal)); 
} (lodash, lodash.exports));

var lodashExports = lodash.exports;
var _ = /*@__PURE__*/getDefaultExportFromCjs(lodashExports);

function _arrayWithoutHoles(r) {
  if (Array.isArray(r)) return _arrayLikeToArray$2(r);
}

function _iterableToArray(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(r) {
  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray$2(r) || _nonIterableSpread();
}

var dayjs_min = {exports: {}};

(function (module, exports) {
	!function(t,e){module.exports=e();}(commonjsGlobal,(function(){var t=1e3,e=6e4,n=36e5,r="millisecond",i="second",s="minute",u="hour",a="day",o="week",c="month",f="quarter",h="year",d="date",l="Invalid Date",$=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,y=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(t){var e=["th","st","nd","rd"],n=t%100;return "["+t+(e[(n-20)%10]||e[n]||e[0])+"]"}},m=function(t,e,n){var r=String(t);return !r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return (e<=0?"+":"-")+m(r,2,"0")+":"+m(i,2,"0")},m:function t(e,n){if(e.date()<n.date())return -t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,c),s=n-i<0,u=e.clone().add(r+(s?-1:1),c);return +(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return {M:c,y:h,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:f}[t]||String(t||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},g="en",D={};D[g]=M;var p="$isDayjsObject",S=function(t){return t instanceof _||!(!t||!t[p])},w=function t(e,n,r){var i;if(!e)return g;if("string"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split("-");if(!i&&u.length>1)return t(u[0])}else {var a=e.name;D[a]=e,i=a;}return !r&&i&&(g=i),i||!r&&g},O=function(t,e){if(S(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},b=v;b.l=w,b.i=S,b.w=function(t,e){return O(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=w(t.locale,null,!0),this.parse(t),this.$x=this.$x||t.x||{},this[p]=!0;}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(b.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.init();},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds();},m.$utils=function(){return b},m.isValid=function(){return !(this.$d.toString()===l)},m.isSame=function(t,e){var n=O(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return O(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<O(t)},m.$g=function(t,e,n){return b.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!b.u(e)||e,f=b.p(t),l=function(t,e){var i=b.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return b.w(n.toDate()[t].apply(n.toDate("s"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v="set"+(this.$u?"UTC":"");switch(f){case h:return r?l(1,0):l(31,11);case c:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+"Hours",0);case u:return $(v+"Minutes",1);case s:return $(v+"Seconds",2);case i:return $(v+"Milliseconds",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=b.p(t),f="set"+(this.$u?"UTC":""),l=(n={},n[a]=f+"Date",n[d]=f+"Date",n[c]=f+"Month",n[h]=f+"FullYear",n[u]=f+"Hours",n[s]=f+"Minutes",n[i]=f+"Seconds",n[r]=f+"Milliseconds",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===c||o===h){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d;}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[b.p(t)]()},m.add=function(r,f){var d,l=this;r=Number(r);var $=b.p(f),y=function(t){var e=O(l);return b.w(e.date(e.date()+Math.round(t*r)),l)};if($===c)return this.set(c,this.$M+r);if($===h)return this.set(h,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return b.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||"YYYY-MM-DDTHH:mm:ssZ",i=b.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,c=n.months,f=n.meridiem,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},d=function(t){return b.s(s%12||12,t,"0")},$=f||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r};return r.replace(y,(function(t,r){return r||function(t){switch(t){case"YY":return String(e.$y).slice(-2);case"YYYY":return b.s(e.$y,4,"0");case"M":return a+1;case"MM":return b.s(a+1,2,"0");case"MMM":return h(n.monthsShort,a,c,3);case"MMMM":return h(c,a);case"D":return e.$D;case"DD":return b.s(e.$D,2,"0");case"d":return String(e.$W);case"dd":return h(n.weekdaysMin,e.$W,o,2);case"ddd":return h(n.weekdaysShort,e.$W,o,3);case"dddd":return o[e.$W];case"H":return String(s);case"HH":return b.s(s,2,"0");case"h":return d(1);case"hh":return d(2);case"a":return $(s,u,!0);case"A":return $(s,u,!1);case"m":return String(u);case"mm":return b.s(u,2,"0");case"s":return String(e.$s);case"ss":return b.s(e.$s,2,"0");case"SSS":return b.s(e.$ms,3,"0");case"Z":return i}return null}(t)||i.replace(":","")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=this,M=b.p(d),m=O(r),v=(m.utcOffset()-this.utcOffset())*e,g=this-m,D=function(){return b.m(y,m)};switch(M){case h:$=D()/12;break;case c:$=D();break;case f:$=D()/3;break;case o:$=(g-v)/6048e5;break;case a:$=(g-v)/864e5;break;case u:$=g/n;break;case s:$=g/e;break;case i:$=g/t;break;default:$=g;}return l?$:b.a($)},m.daysInMonth=function(){return this.endOf(c).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=w(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return b.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),k=_.prototype;return O.prototype=k,[["$ms",r],["$s",i],["$m",s],["$H",u],["$W",a],["$M",c],["$y",h],["$D",d]].forEach((function(t){k[t[1]]=function(e){return this.$g(e,t[0],t[1])};})),O.extend=function(t,e){return t.$i||(t(e,_,O),t.$i=!0),O},O.locale=w,O.isDayjs=S,O.unix=function(t){return O(1e3*t)},O.en=D[g],O.Ls=D,O.p={},O})); 
} (dayjs_min));

var dayjs_minExports = dayjs_min.exports;
var dayjs = /*@__PURE__*/getDefaultExportFromCjs(dayjs_minExports);

var advancedFormat$1 = {exports: {}};

(function (module, exports) {
	!function(e,t){module.exports=t();}(commonjsGlobal,(function(){return function(e,t){var r=t.prototype,n=r.format;r.format=function(e){var t=this,r=this.$locale();if(!this.isValid())return n.bind(this)(e);var s=this.$utils(),a=(e||"YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g,(function(e){switch(e){case"Q":return Math.ceil((t.$M+1)/3);case"Do":return r.ordinal(t.$D);case"gggg":return t.weekYear();case"GGGG":return t.isoWeekYear();case"wo":return r.ordinal(t.week(),"W");case"w":case"ww":return s.s(t.week(),"w"===e?1:2,"0");case"W":case"WW":return s.s(t.isoWeek(),"W"===e?1:2,"0");case"k":case"kk":return s.s(String(0===t.$H?24:t.$H),"k"===e?1:2,"0");case"X":return Math.floor(t.$d.getTime()/1e3);case"x":return t.$d.getTime();case"z":return "["+t.offsetName()+"]";case"zzz":return "["+t.offsetName("long")+"]";default:return e}}));return n.bind(this)(a)};}})); 
} (advancedFormat$1));

var advancedFormatExports = advancedFormat$1.exports;
var advancedFormat = /*@__PURE__*/getDefaultExportFromCjs(advancedFormatExports);

var _path$c;
function _extends$d() { return _extends$d = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$d.apply(null, arguments); }
var SvgChevronLeftIcon = function SvgChevronLeftIcon(props) {
  return /*#__PURE__*/React$1.createElement("svg", _extends$d({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 32 32"
  }, props), _path$c || (_path$c = /*#__PURE__*/React$1.createElement("path", {
    fill: "#0D2839",
    fillRule: "evenodd",
    d: "M19.56 25.56a1.5 1.5 0 0 1-2.12 0l-8.5-8.5a1.5 1.5 0 0 1 0-2.12l8.5-8.5a1.5 1.5 0 0 1 2.12 2.12L12.122 16l7.44 7.44a1.5 1.5 0 0 1 0 2.12",
    clipRule: "evenodd"
  })));
};

var _path$b;
function _extends$c() { return _extends$c = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$c.apply(null, arguments); }
var SvgX = function SvgX(props) {
  return /*#__PURE__*/React$1.createElement("svg", _extends$c({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 32 32"
  }, props), _path$b || (_path$b = /*#__PURE__*/React$1.createElement("path", {
    fill: "#0D2839",
    fillRule: "evenodd",
    d: "M7.439 7.44a1.5 1.5 0 0 1 2.12 0l6.44 6.44 6.44-6.44a1.5 1.5 0 1 1 2.12 2.12L18.119 16l6.44 6.44a1.501 1.501 0 1 1-2.12 2.12l-6.44-6.44-6.44 6.44a1.5 1.5 0 0 1-2.12-2.12l6.44-6.44-6.44-6.44a1.5 1.5 0 0 1 0-2.12",
    clipRule: "evenodd"
  })));
};

var lib$1 = {};

var FadeIn$2 = {};

var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(FadeIn$2, "__esModule", { value: true });
var react_1 = __importStar(React__default$1);
function FadeIn$1(props) {
    var _a = react_1.useState(0), maxIsVisible = _a[0], setMaxIsVisible = _a[1];
    var transitionDuration = props.transitionDuration || 400;
    var delay = props.delay || 50;
    var WrapperTag = props.wrapperTag || "div";
    var ChildTag = props.childTag || "div";
    var visible = typeof props.visible === "undefined" ? true : props.visible;
    react_1.useEffect(function () {
        var count = react_1.default.Children.count(props.children);
        if (!visible) {
            // Animate all children out
            count = 0;
        }
        if (count == maxIsVisible) {
            // We're done updating maxVisible, notify when animation is done
            var timeout_1 = setTimeout(function () {
                if (props.onComplete)
                    props.onComplete();
            }, transitionDuration);
            return function () { return clearTimeout(timeout_1); };
        }
        // Move maxIsVisible toward count
        var increment = count > maxIsVisible ? 1 : -1;
        var timeout = setTimeout(function () {
            setMaxIsVisible(maxIsVisible + increment);
        }, delay);
        return function () { return clearTimeout(timeout); };
    }, [
        react_1.default.Children.count(props.children),
        delay,
        maxIsVisible,
        visible,
        transitionDuration,
    ]);
    return (react_1.default.createElement(WrapperTag, { className: props.className }, react_1.default.Children.map(props.children, function (child, i) {
        return (react_1.default.createElement(ChildTag, { className: props.childClassName, style: {
                transition: "opacity " + transitionDuration + "ms, transform " + transitionDuration + "ms",
                transform: maxIsVisible > i ? "none" : "translateY(20px)",
                opacity: maxIsVisible > i ? 1 : 0,
            } }, child));
    })));
}
FadeIn$2.default = FadeIn$1;

(function (exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = void 0;
	var FadeIn_1 = FadeIn$2;
	Object.defineProperty(exports, "default", { enumerable: true, get: function () { return __importDefault(FadeIn_1).default; } }); 
} (lib$1));

var FadeIn = /*@__PURE__*/getDefaultExportFromCjs(lib$1);

var FULL_SIZE_CLASSNAME = 'fullSize';
function UrsorFadeIn(props) {
  return jsxRuntimeExports.jsx(Stack$1, {
    height: props.fullHeight ? '100%' : 'auto',
    width: props.fullWidth ? '100%' : 'auto',
    sx: _defineProperty$2({}, "& .".concat(FULL_SIZE_CLASSNAME), {
      height: props.fullHeight ? '100%' : 'auto',
      width: props.fullWidth ? '100%' : 'auto',
      overflow: 'visible',
      display: props.centerAlign ? 'flex' : undefined,
      justifyContent: props.centerAlign ? 'center' : undefined
    }),
    overflow: "visible",
    children: jsxRuntimeExports.jsx(FadeIn, {
      transitionDuration: props.duration,
      delay: props.delay,
      className: FULL_SIZE_CLASSNAME,
      childClassName: FULL_SIZE_CLASSNAME,
      children: props.children
    })
  });
}

var lottie$1 = {exports: {}};

(function (module, exports) {
	(typeof navigator !== "undefined") && (function (global, factory) {
	  module.exports = factory() ;
	})(commonjsGlobal, (function () {
	  var svgNS = 'http://www.w3.org/2000/svg';
	  var locationHref = '';
	  var _useWebWorker = false;
	  var initialDefaultFrame = -999999;

	  var setWebWorker = function setWebWorker(flag) {
	    _useWebWorker = !!flag;
	  };

	  var getWebWorker = function getWebWorker() {
	    return _useWebWorker;
	  };

	  var setLocationHref = function setLocationHref(value) {
	    locationHref = value;
	  };

	  var getLocationHref = function getLocationHref() {
	    return locationHref;
	  };

	  function createTag(type) {
	    // return {appendChild:function(){},setAttribute:function(){},style:{}}
	    return document.createElement(type);
	  }

	  function extendPrototype(sources, destination) {
	    var i;
	    var len = sources.length;
	    var sourcePrototype;

	    for (i = 0; i < len; i += 1) {
	      sourcePrototype = sources[i].prototype;

	      for (var attr in sourcePrototype) {
	        if (Object.prototype.hasOwnProperty.call(sourcePrototype, attr)) destination.prototype[attr] = sourcePrototype[attr];
	      }
	    }
	  }

	  function getDescriptor(object, prop) {
	    return Object.getOwnPropertyDescriptor(object, prop);
	  }

	  function createProxyFunction(prototype) {
	    function ProxyFunction() {}

	    ProxyFunction.prototype = prototype;
	    return ProxyFunction;
	  }

	  // import Howl from '../../3rd_party/howler';
	  var audioControllerFactory = function () {
	    function AudioController(audioFactory) {
	      this.audios = [];
	      this.audioFactory = audioFactory;
	      this._volume = 1;
	      this._isMuted = false;
	    }

	    AudioController.prototype = {
	      addAudio: function addAudio(audio) {
	        this.audios.push(audio);
	      },
	      pause: function pause() {
	        var i;
	        var len = this.audios.length;

	        for (i = 0; i < len; i += 1) {
	          this.audios[i].pause();
	        }
	      },
	      resume: function resume() {
	        var i;
	        var len = this.audios.length;

	        for (i = 0; i < len; i += 1) {
	          this.audios[i].resume();
	        }
	      },
	      setRate: function setRate(rateValue) {
	        var i;
	        var len = this.audios.length;

	        for (i = 0; i < len; i += 1) {
	          this.audios[i].setRate(rateValue);
	        }
	      },
	      createAudio: function createAudio(assetPath) {
	        if (this.audioFactory) {
	          return this.audioFactory(assetPath);
	        }

	        if (window.Howl) {
	          return new window.Howl({
	            src: [assetPath]
	          });
	        }

	        return {
	          isPlaying: false,
	          play: function play() {
	            this.isPlaying = true;
	          },
	          seek: function seek() {
	            this.isPlaying = false;
	          },
	          playing: function playing() {},
	          rate: function rate() {},
	          setVolume: function setVolume() {}
	        };
	      },
	      setAudioFactory: function setAudioFactory(audioFactory) {
	        this.audioFactory = audioFactory;
	      },
	      setVolume: function setVolume(value) {
	        this._volume = value;

	        this._updateVolume();
	      },
	      mute: function mute() {
	        this._isMuted = true;

	        this._updateVolume();
	      },
	      unmute: function unmute() {
	        this._isMuted = false;

	        this._updateVolume();
	      },
	      getVolume: function getVolume() {
	        return this._volume;
	      },
	      _updateVolume: function _updateVolume() {
	        var i;
	        var len = this.audios.length;

	        for (i = 0; i < len; i += 1) {
	          this.audios[i].volume(this._volume * (this._isMuted ? 0 : 1));
	        }
	      }
	    };
	    return function () {
	      return new AudioController();
	    };
	  }();

	  var createTypedArray = function () {
	    function createRegularArray(type, len) {
	      var i = 0;
	      var arr = [];
	      var value;

	      switch (type) {
	        case 'int16':
	        case 'uint8c':
	          value = 1;
	          break;

	        default:
	          value = 1.1;
	          break;
	      }

	      for (i = 0; i < len; i += 1) {
	        arr.push(value);
	      }

	      return arr;
	    }

	    function createTypedArrayFactory(type, len) {
	      if (type === 'float32') {
	        return new Float32Array(len);
	      }

	      if (type === 'int16') {
	        return new Int16Array(len);
	      }

	      if (type === 'uint8c') {
	        return new Uint8ClampedArray(len);
	      }

	      return createRegularArray(type, len);
	    }

	    if (typeof Uint8ClampedArray === 'function' && typeof Float32Array === 'function') {
	      return createTypedArrayFactory;
	    }

	    return createRegularArray;
	  }();

	  function createSizedArray(len) {
	    return Array.apply(null, {
	      length: len
	    });
	  }

	  function _typeof$6(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$6 = function _typeof(obj) { return typeof obj; }; } else { _typeof$6 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$6(obj); }
	  var subframeEnabled = true;
	  var expressionsPlugin = null;
	  var expressionsInterfaces = null;
	  var idPrefix$1 = '';
	  var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
	  var bmPow = Math.pow;
	  var bmSqrt = Math.sqrt;
	  var bmFloor = Math.floor;
	  var bmMax = Math.max;
	  var bmMin = Math.min;
	  var BMMath = {};

	  (function () {
	    var propertyNames = ['abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'atan2', 'ceil', 'cbrt', 'expm1', 'clz32', 'cos', 'cosh', 'exp', 'floor', 'fround', 'hypot', 'imul', 'log', 'log1p', 'log2', 'log10', 'max', 'min', 'pow', 'random', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc', 'E', 'LN10', 'LN2', 'LOG10E', 'LOG2E', 'PI', 'SQRT1_2', 'SQRT2'];
	    var i;
	    var len = propertyNames.length;

	    for (i = 0; i < len; i += 1) {
	      BMMath[propertyNames[i]] = Math[propertyNames[i]];
	    }
	  })();

	  BMMath.random = Math.random;

	  BMMath.abs = function (val) {
	    var tOfVal = _typeof$6(val);

	    if (tOfVal === 'object' && val.length) {
	      var absArr = createSizedArray(val.length);
	      var i;
	      var len = val.length;

	      for (i = 0; i < len; i += 1) {
	        absArr[i] = Math.abs(val[i]);
	      }

	      return absArr;
	    }

	    return Math.abs(val);
	  };

	  var defaultCurveSegments = 150;
	  var degToRads = Math.PI / 180;
	  var roundCorner = 0.5519;

	  function styleDiv(element) {
	    element.style.position = 'absolute';
	    element.style.top = 0;
	    element.style.left = 0;
	    element.style.display = 'block';
	    element.style.transformOrigin = '0 0';
	    element.style.webkitTransformOrigin = '0 0';
	    element.style.backfaceVisibility = 'visible';
	    element.style.webkitBackfaceVisibility = 'visible';
	    element.style.transformStyle = 'preserve-3d';
	    element.style.webkitTransformStyle = 'preserve-3d';
	    element.style.mozTransformStyle = 'preserve-3d';
	  }

	  function BMEnterFrameEvent(type, currentTime, totalTime, frameMultiplier) {
	    this.type = type;
	    this.currentTime = currentTime;
	    this.totalTime = totalTime;
	    this.direction = frameMultiplier < 0 ? -1 : 1;
	  }

	  function BMCompleteEvent(type, frameMultiplier) {
	    this.type = type;
	    this.direction = frameMultiplier < 0 ? -1 : 1;
	  }

	  function BMCompleteLoopEvent(type, totalLoops, currentLoop, frameMultiplier) {
	    this.type = type;
	    this.currentLoop = currentLoop;
	    this.totalLoops = totalLoops;
	    this.direction = frameMultiplier < 0 ? -1 : 1;
	  }

	  function BMSegmentStartEvent(type, firstFrame, totalFrames) {
	    this.type = type;
	    this.firstFrame = firstFrame;
	    this.totalFrames = totalFrames;
	  }

	  function BMDestroyEvent(type, target) {
	    this.type = type;
	    this.target = target;
	  }

	  function BMRenderFrameErrorEvent(nativeError, currentTime) {
	    this.type = 'renderFrameError';
	    this.nativeError = nativeError;
	    this.currentTime = currentTime;
	  }

	  function BMConfigErrorEvent(nativeError) {
	    this.type = 'configError';
	    this.nativeError = nativeError;
	  }

	  var createElementID = function () {
	    var _count = 0;
	    return function createID() {
	      _count += 1;
	      return idPrefix$1 + '__lottie_element_' + _count;
	    };
	  }();

	  function HSVtoRGB(h, s, v) {
	    var r;
	    var g;
	    var b;
	    var i;
	    var f;
	    var p;
	    var q;
	    var t;
	    i = Math.floor(h * 6);
	    f = h * 6 - i;
	    p = v * (1 - s);
	    q = v * (1 - f * s);
	    t = v * (1 - (1 - f) * s);

	    switch (i % 6) {
	      case 0:
	        r = v;
	        g = t;
	        b = p;
	        break;

	      case 1:
	        r = q;
	        g = v;
	        b = p;
	        break;

	      case 2:
	        r = p;
	        g = v;
	        b = t;
	        break;

	      case 3:
	        r = p;
	        g = q;
	        b = v;
	        break;

	      case 4:
	        r = t;
	        g = p;
	        b = v;
	        break;

	      case 5:
	        r = v;
	        g = p;
	        b = q;
	        break;
	    }

	    return [r, g, b];
	  }

	  function RGBtoHSV(r, g, b) {
	    var max = Math.max(r, g, b);
	    var min = Math.min(r, g, b);
	    var d = max - min;
	    var h;
	    var s = max === 0 ? 0 : d / max;
	    var v = max / 255;

	    switch (max) {
	      case min:
	        h = 0;
	        break;

	      case r:
	        h = g - b + d * (g < b ? 6 : 0);
	        h /= 6 * d;
	        break;

	      case g:
	        h = b - r + d * 2;
	        h /= 6 * d;
	        break;

	      case b:
	        h = r - g + d * 4;
	        h /= 6 * d;
	        break;
	    }

	    return [h, s, v];
	  }

	  function addSaturationToRGB(color, offset) {
	    var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
	    hsv[1] += offset;

	    if (hsv[1] > 1) {
	      hsv[1] = 1;
	    } else if (hsv[1] <= 0) {
	      hsv[1] = 0;
	    }

	    return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
	  }

	  function addBrightnessToRGB(color, offset) {
	    var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
	    hsv[2] += offset;

	    if (hsv[2] > 1) {
	      hsv[2] = 1;
	    } else if (hsv[2] < 0) {
	      hsv[2] = 0;
	    }

	    return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
	  }

	  function addHueToRGB(color, offset) {
	    var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
	    hsv[0] += offset / 360;

	    if (hsv[0] > 1) {
	      hsv[0] -= 1;
	    } else if (hsv[0] < 0) {
	      hsv[0] += 1;
	    }

	    return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
	  }

	  var rgbToHex = function () {
	    var colorMap = [];
	    var i;
	    var hex;

	    for (i = 0; i < 256; i += 1) {
	      hex = i.toString(16);
	      colorMap[i] = hex.length === 1 ? '0' + hex : hex;
	    }

	    return function (r, g, b) {
	      if (r < 0) {
	        r = 0;
	      }

	      if (g < 0) {
	        g = 0;
	      }

	      if (b < 0) {
	        b = 0;
	      }

	      return '#' + colorMap[r] + colorMap[g] + colorMap[b];
	    };
	  }();

	  var setSubframeEnabled = function setSubframeEnabled(flag) {
	    subframeEnabled = !!flag;
	  };

	  var getSubframeEnabled = function getSubframeEnabled() {
	    return subframeEnabled;
	  };

	  var setExpressionsPlugin = function setExpressionsPlugin(value) {
	    expressionsPlugin = value;
	  };

	  var getExpressionsPlugin = function getExpressionsPlugin() {
	    return expressionsPlugin;
	  };

	  var setExpressionInterfaces = function setExpressionInterfaces(value) {
	    expressionsInterfaces = value;
	  };

	  var getExpressionInterfaces = function getExpressionInterfaces() {
	    return expressionsInterfaces;
	  };

	  var setDefaultCurveSegments = function setDefaultCurveSegments(value) {
	    defaultCurveSegments = value;
	  };

	  var getDefaultCurveSegments = function getDefaultCurveSegments() {
	    return defaultCurveSegments;
	  };

	  var setIdPrefix = function setIdPrefix(value) {
	    idPrefix$1 = value;
	  };

	  function createNS(type) {
	    // return {appendChild:function(){},setAttribute:function(){},style:{}}
	    return document.createElementNS(svgNS, type);
	  }

	  function _typeof$5(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$5 = function _typeof(obj) { return typeof obj; }; } else { _typeof$5 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$5(obj); }

	  var dataManager = function () {
	    var _counterId = 1;
	    var processes = [];
	    var workerFn;
	    var workerInstance;
	    var workerProxy = {
	      onmessage: function onmessage() {},
	      postMessage: function postMessage(path) {
	        workerFn({
	          data: path
	        });
	      }
	    };
	    var _workerSelf = {
	      postMessage: function postMessage(data) {
	        workerProxy.onmessage({
	          data: data
	        });
	      }
	    };

	    function createWorker(fn) {
	      if (window.Worker && window.Blob && getWebWorker()) {
	        var blob = new Blob(['var _workerSelf = self; self.onmessage = ', fn.toString()], {
	          type: 'text/javascript'
	        }); // var blob = new Blob(['self.onmessage = ', fn.toString()], { type: 'text/javascript' });

	        var url = URL.createObjectURL(blob);
	        return new Worker(url);
	      }

	      workerFn = fn;
	      return workerProxy;
	    }

	    function setupWorker() {
	      if (!workerInstance) {
	        workerInstance = createWorker(function workerStart(e) {
	          function dataFunctionManager() {
	            function completeLayers(layers, comps) {
	              var layerData;
	              var i;
	              var len = layers.length;
	              var j;
	              var jLen;
	              var k;
	              var kLen;

	              for (i = 0; i < len; i += 1) {
	                layerData = layers[i];

	                if ('ks' in layerData && !layerData.completed) {
	                  layerData.completed = true;

	                  if (layerData.hasMask) {
	                    var maskProps = layerData.masksProperties;
	                    jLen = maskProps.length;

	                    for (j = 0; j < jLen; j += 1) {
	                      if (maskProps[j].pt.k.i) {
	                        convertPathsToAbsoluteValues(maskProps[j].pt.k);
	                      } else {
	                        kLen = maskProps[j].pt.k.length;

	                        for (k = 0; k < kLen; k += 1) {
	                          if (maskProps[j].pt.k[k].s) {
	                            convertPathsToAbsoluteValues(maskProps[j].pt.k[k].s[0]);
	                          }

	                          if (maskProps[j].pt.k[k].e) {
	                            convertPathsToAbsoluteValues(maskProps[j].pt.k[k].e[0]);
	                          }
	                        }
	                      }
	                    }
	                  }

	                  if (layerData.ty === 0) {
	                    layerData.layers = findCompLayers(layerData.refId, comps);
	                    completeLayers(layerData.layers, comps);
	                  } else if (layerData.ty === 4) {
	                    completeShapes(layerData.shapes);
	                  } else if (layerData.ty === 5) {
	                    completeText(layerData);
	                  }
	                }
	              }
	            }

	            function completeChars(chars, assets) {
	              if (chars) {
	                var i = 0;
	                var len = chars.length;

	                for (i = 0; i < len; i += 1) {
	                  if (chars[i].t === 1) {
	                    // var compData = findComp(chars[i].data.refId, assets);
	                    chars[i].data.layers = findCompLayers(chars[i].data.refId, assets); // chars[i].data.ip = 0;
	                    // chars[i].data.op = 99999;
	                    // chars[i].data.st = 0;
	                    // chars[i].data.sr = 1;
	                    // chars[i].w = compData.w;
	                    // chars[i].data.ks = {
	                    //   a: { k: [0, 0, 0], a: 0 },
	                    //   p: { k: [0, -compData.h, 0], a: 0 },
	                    //   r: { k: 0, a: 0 },
	                    //   s: { k: [100, 100], a: 0 },
	                    //   o: { k: 100, a: 0 },
	                    // };

	                    completeLayers(chars[i].data.layers, assets);
	                  }
	                }
	              }
	            }

	            function findComp(id, comps) {
	              var i = 0;
	              var len = comps.length;

	              while (i < len) {
	                if (comps[i].id === id) {
	                  return comps[i];
	                }

	                i += 1;
	              }

	              return null;
	            }

	            function findCompLayers(id, comps) {
	              var comp = findComp(id, comps);

	              if (comp) {
	                if (!comp.layers.__used) {
	                  comp.layers.__used = true;
	                  return comp.layers;
	                }

	                return JSON.parse(JSON.stringify(comp.layers));
	              }

	              return null;
	            }

	            function completeShapes(arr) {
	              var i;
	              var len = arr.length;
	              var j;
	              var jLen;

	              for (i = len - 1; i >= 0; i -= 1) {
	                if (arr[i].ty === 'sh') {
	                  if (arr[i].ks.k.i) {
	                    convertPathsToAbsoluteValues(arr[i].ks.k);
	                  } else {
	                    jLen = arr[i].ks.k.length;

	                    for (j = 0; j < jLen; j += 1) {
	                      if (arr[i].ks.k[j].s) {
	                        convertPathsToAbsoluteValues(arr[i].ks.k[j].s[0]);
	                      }

	                      if (arr[i].ks.k[j].e) {
	                        convertPathsToAbsoluteValues(arr[i].ks.k[j].e[0]);
	                      }
	                    }
	                  }
	                } else if (arr[i].ty === 'gr') {
	                  completeShapes(arr[i].it);
	                }
	              }
	            }

	            function convertPathsToAbsoluteValues(path) {
	              var i;
	              var len = path.i.length;

	              for (i = 0; i < len; i += 1) {
	                path.i[i][0] += path.v[i][0];
	                path.i[i][1] += path.v[i][1];
	                path.o[i][0] += path.v[i][0];
	                path.o[i][1] += path.v[i][1];
	              }
	            }

	            function checkVersion(minimum, animVersionString) {
	              var animVersion = animVersionString ? animVersionString.split('.') : [100, 100, 100];

	              if (minimum[0] > animVersion[0]) {
	                return true;
	              }

	              if (animVersion[0] > minimum[0]) {
	                return false;
	              }

	              if (minimum[1] > animVersion[1]) {
	                return true;
	              }

	              if (animVersion[1] > minimum[1]) {
	                return false;
	              }

	              if (minimum[2] > animVersion[2]) {
	                return true;
	              }

	              if (animVersion[2] > minimum[2]) {
	                return false;
	              }

	              return null;
	            }

	            var checkText = function () {
	              var minimumVersion = [4, 4, 14];

	              function updateTextLayer(textLayer) {
	                var documentData = textLayer.t.d;
	                textLayer.t.d = {
	                  k: [{
	                    s: documentData,
	                    t: 0
	                  }]
	                };
	              }

	              function iterateLayers(layers) {
	                var i;
	                var len = layers.length;

	                for (i = 0; i < len; i += 1) {
	                  if (layers[i].ty === 5) {
	                    updateTextLayer(layers[i]);
	                  }
	                }
	              }

	              return function (animationData) {
	                if (checkVersion(minimumVersion, animationData.v)) {
	                  iterateLayers(animationData.layers);

	                  if (animationData.assets) {
	                    var i;
	                    var len = animationData.assets.length;

	                    for (i = 0; i < len; i += 1) {
	                      if (animationData.assets[i].layers) {
	                        iterateLayers(animationData.assets[i].layers);
	                      }
	                    }
	                  }
	                }
	              };
	            }();

	            var checkChars = function () {
	              var minimumVersion = [4, 7, 99];
	              return function (animationData) {
	                if (animationData.chars && !checkVersion(minimumVersion, animationData.v)) {
	                  var i;
	                  var len = animationData.chars.length;

	                  for (i = 0; i < len; i += 1) {
	                    var charData = animationData.chars[i];

	                    if (charData.data && charData.data.shapes) {
	                      completeShapes(charData.data.shapes);
	                      charData.data.ip = 0;
	                      charData.data.op = 99999;
	                      charData.data.st = 0;
	                      charData.data.sr = 1;
	                      charData.data.ks = {
	                        p: {
	                          k: [0, 0],
	                          a: 0
	                        },
	                        s: {
	                          k: [100, 100],
	                          a: 0
	                        },
	                        a: {
	                          k: [0, 0],
	                          a: 0
	                        },
	                        r: {
	                          k: 0,
	                          a: 0
	                        },
	                        o: {
	                          k: 100,
	                          a: 0
	                        }
	                      };

	                      if (!animationData.chars[i].t) {
	                        charData.data.shapes.push({
	                          ty: 'no'
	                        });
	                        charData.data.shapes[0].it.push({
	                          p: {
	                            k: [0, 0],
	                            a: 0
	                          },
	                          s: {
	                            k: [100, 100],
	                            a: 0
	                          },
	                          a: {
	                            k: [0, 0],
	                            a: 0
	                          },
	                          r: {
	                            k: 0,
	                            a: 0
	                          },
	                          o: {
	                            k: 100,
	                            a: 0
	                          },
	                          sk: {
	                            k: 0,
	                            a: 0
	                          },
	                          sa: {
	                            k: 0,
	                            a: 0
	                          },
	                          ty: 'tr'
	                        });
	                      }
	                    }
	                  }
	                }
	              };
	            }();

	            var checkPathProperties = function () {
	              var minimumVersion = [5, 7, 15];

	              function updateTextLayer(textLayer) {
	                var pathData = textLayer.t.p;

	                if (typeof pathData.a === 'number') {
	                  pathData.a = {
	                    a: 0,
	                    k: pathData.a
	                  };
	                }

	                if (typeof pathData.p === 'number') {
	                  pathData.p = {
	                    a: 0,
	                    k: pathData.p
	                  };
	                }

	                if (typeof pathData.r === 'number') {
	                  pathData.r = {
	                    a: 0,
	                    k: pathData.r
	                  };
	                }
	              }

	              function iterateLayers(layers) {
	                var i;
	                var len = layers.length;

	                for (i = 0; i < len; i += 1) {
	                  if (layers[i].ty === 5) {
	                    updateTextLayer(layers[i]);
	                  }
	                }
	              }

	              return function (animationData) {
	                if (checkVersion(minimumVersion, animationData.v)) {
	                  iterateLayers(animationData.layers);

	                  if (animationData.assets) {
	                    var i;
	                    var len = animationData.assets.length;

	                    for (i = 0; i < len; i += 1) {
	                      if (animationData.assets[i].layers) {
	                        iterateLayers(animationData.assets[i].layers);
	                      }
	                    }
	                  }
	                }
	              };
	            }();

	            var checkColors = function () {
	              var minimumVersion = [4, 1, 9];

	              function iterateShapes(shapes) {
	                var i;
	                var len = shapes.length;
	                var j;
	                var jLen;

	                for (i = 0; i < len; i += 1) {
	                  if (shapes[i].ty === 'gr') {
	                    iterateShapes(shapes[i].it);
	                  } else if (shapes[i].ty === 'fl' || shapes[i].ty === 'st') {
	                    if (shapes[i].c.k && shapes[i].c.k[0].i) {
	                      jLen = shapes[i].c.k.length;

	                      for (j = 0; j < jLen; j += 1) {
	                        if (shapes[i].c.k[j].s) {
	                          shapes[i].c.k[j].s[0] /= 255;
	                          shapes[i].c.k[j].s[1] /= 255;
	                          shapes[i].c.k[j].s[2] /= 255;
	                          shapes[i].c.k[j].s[3] /= 255;
	                        }

	                        if (shapes[i].c.k[j].e) {
	                          shapes[i].c.k[j].e[0] /= 255;
	                          shapes[i].c.k[j].e[1] /= 255;
	                          shapes[i].c.k[j].e[2] /= 255;
	                          shapes[i].c.k[j].e[3] /= 255;
	                        }
	                      }
	                    } else {
	                      shapes[i].c.k[0] /= 255;
	                      shapes[i].c.k[1] /= 255;
	                      shapes[i].c.k[2] /= 255;
	                      shapes[i].c.k[3] /= 255;
	                    }
	                  }
	                }
	              }

	              function iterateLayers(layers) {
	                var i;
	                var len = layers.length;

	                for (i = 0; i < len; i += 1) {
	                  if (layers[i].ty === 4) {
	                    iterateShapes(layers[i].shapes);
	                  }
	                }
	              }

	              return function (animationData) {
	                if (checkVersion(minimumVersion, animationData.v)) {
	                  iterateLayers(animationData.layers);

	                  if (animationData.assets) {
	                    var i;
	                    var len = animationData.assets.length;

	                    for (i = 0; i < len; i += 1) {
	                      if (animationData.assets[i].layers) {
	                        iterateLayers(animationData.assets[i].layers);
	                      }
	                    }
	                  }
	                }
	              };
	            }();

	            var checkShapes = function () {
	              var minimumVersion = [4, 4, 18];

	              function completeClosingShapes(arr) {
	                var i;
	                var len = arr.length;
	                var j;
	                var jLen;

	                for (i = len - 1; i >= 0; i -= 1) {
	                  if (arr[i].ty === 'sh') {
	                    if (arr[i].ks.k.i) {
	                      arr[i].ks.k.c = arr[i].closed;
	                    } else {
	                      jLen = arr[i].ks.k.length;

	                      for (j = 0; j < jLen; j += 1) {
	                        if (arr[i].ks.k[j].s) {
	                          arr[i].ks.k[j].s[0].c = arr[i].closed;
	                        }

	                        if (arr[i].ks.k[j].e) {
	                          arr[i].ks.k[j].e[0].c = arr[i].closed;
	                        }
	                      }
	                    }
	                  } else if (arr[i].ty === 'gr') {
	                    completeClosingShapes(arr[i].it);
	                  }
	                }
	              }

	              function iterateLayers(layers) {
	                var layerData;
	                var i;
	                var len = layers.length;
	                var j;
	                var jLen;
	                var k;
	                var kLen;

	                for (i = 0; i < len; i += 1) {
	                  layerData = layers[i];

	                  if (layerData.hasMask) {
	                    var maskProps = layerData.masksProperties;
	                    jLen = maskProps.length;

	                    for (j = 0; j < jLen; j += 1) {
	                      if (maskProps[j].pt.k.i) {
	                        maskProps[j].pt.k.c = maskProps[j].cl;
	                      } else {
	                        kLen = maskProps[j].pt.k.length;

	                        for (k = 0; k < kLen; k += 1) {
	                          if (maskProps[j].pt.k[k].s) {
	                            maskProps[j].pt.k[k].s[0].c = maskProps[j].cl;
	                          }

	                          if (maskProps[j].pt.k[k].e) {
	                            maskProps[j].pt.k[k].e[0].c = maskProps[j].cl;
	                          }
	                        }
	                      }
	                    }
	                  }

	                  if (layerData.ty === 4) {
	                    completeClosingShapes(layerData.shapes);
	                  }
	                }
	              }

	              return function (animationData) {
	                if (checkVersion(minimumVersion, animationData.v)) {
	                  iterateLayers(animationData.layers);

	                  if (animationData.assets) {
	                    var i;
	                    var len = animationData.assets.length;

	                    for (i = 0; i < len; i += 1) {
	                      if (animationData.assets[i].layers) {
	                        iterateLayers(animationData.assets[i].layers);
	                      }
	                    }
	                  }
	                }
	              };
	            }();

	            function completeData(animationData) {
	              if (animationData.__complete) {
	                return;
	              }

	              checkColors(animationData);
	              checkText(animationData);
	              checkChars(animationData);
	              checkPathProperties(animationData);
	              checkShapes(animationData);
	              completeLayers(animationData.layers, animationData.assets);
	              completeChars(animationData.chars, animationData.assets);
	              animationData.__complete = true;
	            }

	            function completeText(data) {
	              if (data.t.a.length === 0 && !('m' in data.t.p)) ;
	            }

	            var moduleOb = {};
	            moduleOb.completeData = completeData;
	            moduleOb.checkColors = checkColors;
	            moduleOb.checkChars = checkChars;
	            moduleOb.checkPathProperties = checkPathProperties;
	            moduleOb.checkShapes = checkShapes;
	            moduleOb.completeLayers = completeLayers;
	            return moduleOb;
	          }

	          if (!_workerSelf.dataManager) {
	            _workerSelf.dataManager = dataFunctionManager();
	          }

	          if (!_workerSelf.assetLoader) {
	            _workerSelf.assetLoader = function () {
	              function formatResponse(xhr) {
	                // using typeof doubles the time of execution of this method,
	                // so if available, it's better to use the header to validate the type
	                var contentTypeHeader = xhr.getResponseHeader('content-type');

	                if (contentTypeHeader && xhr.responseType === 'json' && contentTypeHeader.indexOf('json') !== -1) {
	                  return xhr.response;
	                }

	                if (xhr.response && _typeof$5(xhr.response) === 'object') {
	                  return xhr.response;
	                }

	                if (xhr.response && typeof xhr.response === 'string') {
	                  return JSON.parse(xhr.response);
	                }

	                if (xhr.responseText) {
	                  return JSON.parse(xhr.responseText);
	                }

	                return null;
	              }

	              function loadAsset(path, fullPath, callback, errorCallback) {
	                var response;
	                var xhr = new XMLHttpRequest(); // set responseType after calling open or IE will break.

	                try {
	                  // This crashes on Android WebView prior to KitKat
	                  xhr.responseType = 'json';
	                } catch (err) {} // eslint-disable-line no-empty


	                xhr.onreadystatechange = function () {
	                  if (xhr.readyState === 4) {
	                    if (xhr.status === 200) {
	                      response = formatResponse(xhr);
	                      callback(response);
	                    } else {
	                      try {
	                        response = formatResponse(xhr);
	                        callback(response);
	                      } catch (err) {
	                        if (errorCallback) {
	                          errorCallback(err);
	                        }
	                      }
	                    }
	                  }
	                };

	                try {
	                  // Hack to workaround banner validation
	                  xhr.open(['G', 'E', 'T'].join(''), path, true);
	                } catch (error) {
	                  // Hack to workaround banner validation
	                  xhr.open(['G', 'E', 'T'].join(''), fullPath + '/' + path, true);
	                }

	                xhr.send();
	              }

	              return {
	                load: loadAsset
	              };
	            }();
	          }

	          if (e.data.type === 'loadAnimation') {
	            _workerSelf.assetLoader.load(e.data.path, e.data.fullPath, function (data) {
	              _workerSelf.dataManager.completeData(data);

	              _workerSelf.postMessage({
	                id: e.data.id,
	                payload: data,
	                status: 'success'
	              });
	            }, function () {
	              _workerSelf.postMessage({
	                id: e.data.id,
	                status: 'error'
	              });
	            });
	          } else if (e.data.type === 'complete') {
	            var animation = e.data.animation;

	            _workerSelf.dataManager.completeData(animation);

	            _workerSelf.postMessage({
	              id: e.data.id,
	              payload: animation,
	              status: 'success'
	            });
	          } else if (e.data.type === 'loadData') {
	            _workerSelf.assetLoader.load(e.data.path, e.data.fullPath, function (data) {
	              _workerSelf.postMessage({
	                id: e.data.id,
	                payload: data,
	                status: 'success'
	              });
	            }, function () {
	              _workerSelf.postMessage({
	                id: e.data.id,
	                status: 'error'
	              });
	            });
	          }
	        });

	        workerInstance.onmessage = function (event) {
	          var data = event.data;
	          var id = data.id;
	          var process = processes[id];
	          processes[id] = null;

	          if (data.status === 'success') {
	            process.onComplete(data.payload);
	          } else if (process.onError) {
	            process.onError();
	          }
	        };
	      }
	    }

	    function createProcess(onComplete, onError) {
	      _counterId += 1;
	      var id = 'processId_' + _counterId;
	      processes[id] = {
	        onComplete: onComplete,
	        onError: onError
	      };
	      return id;
	    }

	    function loadAnimation(path, onComplete, onError) {
	      setupWorker();
	      var processId = createProcess(onComplete, onError);
	      workerInstance.postMessage({
	        type: 'loadAnimation',
	        path: path,
	        fullPath: window.location.origin + window.location.pathname,
	        id: processId
	      });
	    }

	    function loadData(path, onComplete, onError) {
	      setupWorker();
	      var processId = createProcess(onComplete, onError);
	      workerInstance.postMessage({
	        type: 'loadData',
	        path: path,
	        fullPath: window.location.origin + window.location.pathname,
	        id: processId
	      });
	    }

	    function completeAnimation(anim, onComplete, onError) {
	      setupWorker();
	      var processId = createProcess(onComplete, onError);
	      workerInstance.postMessage({
	        type: 'complete',
	        animation: anim,
	        id: processId
	      });
	    }

	    return {
	      loadAnimation: loadAnimation,
	      loadData: loadData,
	      completeAnimation: completeAnimation
	    };
	  }();

	  var ImagePreloader = function () {
	    var proxyImage = function () {
	      var canvas = createTag('canvas');
	      canvas.width = 1;
	      canvas.height = 1;
	      var ctx = canvas.getContext('2d');
	      ctx.fillStyle = 'rgba(0,0,0,0)';
	      ctx.fillRect(0, 0, 1, 1);
	      return canvas;
	    }();

	    function imageLoaded() {
	      this.loadedAssets += 1;

	      if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {
	        if (this.imagesLoadedCb) {
	          this.imagesLoadedCb(null);
	        }
	      }
	    }

	    function footageLoaded() {
	      this.loadedFootagesCount += 1;

	      if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {
	        if (this.imagesLoadedCb) {
	          this.imagesLoadedCb(null);
	        }
	      }
	    }

	    function getAssetsPath(assetData, assetsPath, originalPath) {
	      var path = '';

	      if (assetData.e) {
	        path = assetData.p;
	      } else if (assetsPath) {
	        var imagePath = assetData.p;

	        if (imagePath.indexOf('images/') !== -1) {
	          imagePath = imagePath.split('/')[1];
	        }

	        path = assetsPath + imagePath;
	      } else {
	        path = originalPath;
	        path += assetData.u ? assetData.u : '';
	        path += assetData.p;
	      }

	      return path;
	    }

	    function testImageLoaded(img) {
	      var _count = 0;
	      var intervalId = setInterval(function () {
	        var box = img.getBBox();

	        if (box.width || _count > 500) {
	          this._imageLoaded();

	          clearInterval(intervalId);
	        }

	        _count += 1;
	      }.bind(this), 50);
	    }

	    function createImageData(assetData) {
	      var path = getAssetsPath(assetData, this.assetsPath, this.path);
	      var img = createNS('image');

	      if (isSafari) {
	        this.testImageLoaded(img);
	      } else {
	        img.addEventListener('load', this._imageLoaded, false);
	      }

	      img.addEventListener('error', function () {
	        ob.img = proxyImage;

	        this._imageLoaded();
	      }.bind(this), false);
	      img.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);

	      if (this._elementHelper.append) {
	        this._elementHelper.append(img);
	      } else {
	        this._elementHelper.appendChild(img);
	      }

	      var ob = {
	        img: img,
	        assetData: assetData
	      };
	      return ob;
	    }

	    function createImgData(assetData) {
	      var path = getAssetsPath(assetData, this.assetsPath, this.path);
	      var img = createTag('img');
	      img.crossOrigin = 'anonymous';
	      img.addEventListener('load', this._imageLoaded, false);
	      img.addEventListener('error', function () {
	        ob.img = proxyImage;

	        this._imageLoaded();
	      }.bind(this), false);
	      img.src = path;
	      var ob = {
	        img: img,
	        assetData: assetData
	      };
	      return ob;
	    }

	    function createFootageData(data) {
	      var ob = {
	        assetData: data
	      };
	      var path = getAssetsPath(data, this.assetsPath, this.path);
	      dataManager.loadData(path, function (footageData) {
	        ob.img = footageData;

	        this._footageLoaded();
	      }.bind(this), function () {
	        ob.img = {};

	        this._footageLoaded();
	      }.bind(this));
	      return ob;
	    }

	    function loadAssets(assets, cb) {
	      this.imagesLoadedCb = cb;
	      var i;
	      var len = assets.length;

	      for (i = 0; i < len; i += 1) {
	        if (!assets[i].layers) {
	          if (!assets[i].t || assets[i].t === 'seq') {
	            this.totalImages += 1;
	            this.images.push(this._createImageData(assets[i]));
	          } else if (assets[i].t === 3) {
	            this.totalFootages += 1;
	            this.images.push(this.createFootageData(assets[i]));
	          }
	        }
	      }
	    }

	    function setPath(path) {
	      this.path = path || '';
	    }

	    function setAssetsPath(path) {
	      this.assetsPath = path || '';
	    }

	    function getAsset(assetData) {
	      var i = 0;
	      var len = this.images.length;

	      while (i < len) {
	        if (this.images[i].assetData === assetData) {
	          return this.images[i].img;
	        }

	        i += 1;
	      }

	      return null;
	    }

	    function destroy() {
	      this.imagesLoadedCb = null;
	      this.images.length = 0;
	    }

	    function loadedImages() {
	      return this.totalImages === this.loadedAssets;
	    }

	    function loadedFootages() {
	      return this.totalFootages === this.loadedFootagesCount;
	    }

	    function setCacheType(type, elementHelper) {
	      if (type === 'svg') {
	        this._elementHelper = elementHelper;
	        this._createImageData = this.createImageData.bind(this);
	      } else {
	        this._createImageData = this.createImgData.bind(this);
	      }
	    }

	    function ImagePreloaderFactory() {
	      this._imageLoaded = imageLoaded.bind(this);
	      this._footageLoaded = footageLoaded.bind(this);
	      this.testImageLoaded = testImageLoaded.bind(this);
	      this.createFootageData = createFootageData.bind(this);
	      this.assetsPath = '';
	      this.path = '';
	      this.totalImages = 0;
	      this.totalFootages = 0;
	      this.loadedAssets = 0;
	      this.loadedFootagesCount = 0;
	      this.imagesLoadedCb = null;
	      this.images = [];
	    }

	    ImagePreloaderFactory.prototype = {
	      loadAssets: loadAssets,
	      setAssetsPath: setAssetsPath,
	      setPath: setPath,
	      loadedImages: loadedImages,
	      loadedFootages: loadedFootages,
	      destroy: destroy,
	      getAsset: getAsset,
	      createImgData: createImgData,
	      createImageData: createImageData,
	      imageLoaded: imageLoaded,
	      footageLoaded: footageLoaded,
	      setCacheType: setCacheType
	    };
	    return ImagePreloaderFactory;
	  }();

	  function BaseEvent() {}

	  BaseEvent.prototype = {
	    triggerEvent: function triggerEvent(eventName, args) {
	      if (this._cbs[eventName]) {
	        var callbacks = this._cbs[eventName];

	        for (var i = 0; i < callbacks.length; i += 1) {
	          callbacks[i](args);
	        }
	      }
	    },
	    addEventListener: function addEventListener(eventName, callback) {
	      if (!this._cbs[eventName]) {
	        this._cbs[eventName] = [];
	      }

	      this._cbs[eventName].push(callback);

	      return function () {
	        this.removeEventListener(eventName, callback);
	      }.bind(this);
	    },
	    removeEventListener: function removeEventListener(eventName, callback) {
	      if (!callback) {
	        this._cbs[eventName] = null;
	      } else if (this._cbs[eventName]) {
	        var i = 0;
	        var len = this._cbs[eventName].length;

	        while (i < len) {
	          if (this._cbs[eventName][i] === callback) {
	            this._cbs[eventName].splice(i, 1);

	            i -= 1;
	            len -= 1;
	          }

	          i += 1;
	        }

	        if (!this._cbs[eventName].length) {
	          this._cbs[eventName] = null;
	        }
	      }
	    }
	  };

	  var markerParser = function () {
	    function parsePayloadLines(payload) {
	      var lines = payload.split('\r\n');
	      var keys = {};
	      var line;
	      var keysCount = 0;

	      for (var i = 0; i < lines.length; i += 1) {
	        line = lines[i].split(':');

	        if (line.length === 2) {
	          keys[line[0]] = line[1].trim();
	          keysCount += 1;
	        }
	      }

	      if (keysCount === 0) {
	        throw new Error();
	      }

	      return keys;
	    }

	    return function (_markers) {
	      var markers = [];

	      for (var i = 0; i < _markers.length; i += 1) {
	        var _marker = _markers[i];
	        var markerData = {
	          time: _marker.tm,
	          duration: _marker.dr
	        };

	        try {
	          markerData.payload = JSON.parse(_markers[i].cm);
	        } catch (_) {
	          try {
	            markerData.payload = parsePayloadLines(_markers[i].cm);
	          } catch (__) {
	            markerData.payload = {
	              name: _markers[i].cm
	            };
	          }
	        }

	        markers.push(markerData);
	      }

	      return markers;
	    };
	  }();

	  var ProjectInterface = function () {
	    function registerComposition(comp) {
	      this.compositions.push(comp);
	    }

	    return function () {
	      function _thisProjectFunction(name) {
	        var i = 0;
	        var len = this.compositions.length;

	        while (i < len) {
	          if (this.compositions[i].data && this.compositions[i].data.nm === name) {
	            if (this.compositions[i].prepareFrame && this.compositions[i].data.xt) {
	              this.compositions[i].prepareFrame(this.currentFrame);
	            }

	            return this.compositions[i].compInterface;
	          }

	          i += 1;
	        }

	        return null;
	      }

	      _thisProjectFunction.compositions = [];
	      _thisProjectFunction.currentFrame = 0;
	      _thisProjectFunction.registerComposition = registerComposition;
	      return _thisProjectFunction;
	    };
	  }();

	  var renderers = {};

	  var registerRenderer = function registerRenderer(key, value) {
	    renderers[key] = value;
	  };

	  function getRenderer(key) {
	    return renderers[key];
	  }

	  function getRegisteredRenderer() {
	    // Returns canvas by default for compatibility
	    if (renderers.canvas) {
	      return 'canvas';
	    } // Returns any renderer that is registered


	    for (var key in renderers) {
	      if (renderers[key]) {
	        return key;
	      }
	    }

	    return '';
	  }

	  function _typeof$4(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$4 = function _typeof(obj) { return typeof obj; }; } else { _typeof$4 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$4(obj); }

	  var AnimationItem = function AnimationItem() {
	    this._cbs = [];
	    this.name = '';
	    this.path = '';
	    this.isLoaded = false;
	    this.currentFrame = 0;
	    this.currentRawFrame = 0;
	    this.firstFrame = 0;
	    this.totalFrames = 0;
	    this.frameRate = 0;
	    this.frameMult = 0;
	    this.playSpeed = 1;
	    this.playDirection = 1;
	    this.playCount = 0;
	    this.animationData = {};
	    this.assets = [];
	    this.isPaused = true;
	    this.autoplay = false;
	    this.loop = true;
	    this.renderer = null;
	    this.animationID = createElementID();
	    this.assetsPath = '';
	    this.timeCompleted = 0;
	    this.segmentPos = 0;
	    this.isSubframeEnabled = getSubframeEnabled();
	    this.segments = [];
	    this._idle = true;
	    this._completedLoop = false;
	    this.projectInterface = ProjectInterface();
	    this.imagePreloader = new ImagePreloader();
	    this.audioController = audioControllerFactory();
	    this.markers = [];
	    this.configAnimation = this.configAnimation.bind(this);
	    this.onSetupError = this.onSetupError.bind(this);
	    this.onSegmentComplete = this.onSegmentComplete.bind(this);
	    this.drawnFrameEvent = new BMEnterFrameEvent('drawnFrame', 0, 0, 0);
	    this.expressionsPlugin = getExpressionsPlugin();
	  };

	  extendPrototype([BaseEvent], AnimationItem);

	  AnimationItem.prototype.setParams = function (params) {
	    if (params.wrapper || params.container) {
	      this.wrapper = params.wrapper || params.container;
	    }

	    var animType = 'svg';

	    if (params.animType) {
	      animType = params.animType;
	    } else if (params.renderer) {
	      animType = params.renderer;
	    }

	    var RendererClass = getRenderer(animType);
	    this.renderer = new RendererClass(this, params.rendererSettings);
	    this.imagePreloader.setCacheType(animType, this.renderer.globalData.defs);
	    this.renderer.setProjectInterface(this.projectInterface);
	    this.animType = animType;

	    if (params.loop === '' || params.loop === null || params.loop === undefined || params.loop === true) {
	      this.loop = true;
	    } else if (params.loop === false) {
	      this.loop = false;
	    } else {
	      this.loop = parseInt(params.loop, 10);
	    }

	    this.autoplay = 'autoplay' in params ? params.autoplay : true;
	    this.name = params.name ? params.name : '';
	    this.autoloadSegments = Object.prototype.hasOwnProperty.call(params, 'autoloadSegments') ? params.autoloadSegments : true;
	    this.assetsPath = params.assetsPath;
	    this.initialSegment = params.initialSegment;

	    if (params.audioFactory) {
	      this.audioController.setAudioFactory(params.audioFactory);
	    }

	    if (params.animationData) {
	      this.setupAnimation(params.animationData);
	    } else if (params.path) {
	      if (params.path.lastIndexOf('\\') !== -1) {
	        this.path = params.path.substr(0, params.path.lastIndexOf('\\') + 1);
	      } else {
	        this.path = params.path.substr(0, params.path.lastIndexOf('/') + 1);
	      }

	      this.fileName = params.path.substr(params.path.lastIndexOf('/') + 1);
	      this.fileName = this.fileName.substr(0, this.fileName.lastIndexOf('.json'));
	      dataManager.loadAnimation(params.path, this.configAnimation, this.onSetupError);
	    }
	  };

	  AnimationItem.prototype.onSetupError = function () {
	    this.trigger('data_failed');
	  };

	  AnimationItem.prototype.setupAnimation = function (data) {
	    dataManager.completeAnimation(data, this.configAnimation);
	  };

	  AnimationItem.prototype.setData = function (wrapper, animationData) {
	    if (animationData) {
	      if (_typeof$4(animationData) !== 'object') {
	        animationData = JSON.parse(animationData);
	      }
	    }

	    var params = {
	      wrapper: wrapper,
	      animationData: animationData
	    };
	    var wrapperAttributes = wrapper.attributes;
	    params.path = wrapperAttributes.getNamedItem('data-animation-path') // eslint-disable-line no-nested-ternary
	    ? wrapperAttributes.getNamedItem('data-animation-path').value : wrapperAttributes.getNamedItem('data-bm-path') // eslint-disable-line no-nested-ternary
	    ? wrapperAttributes.getNamedItem('data-bm-path').value : wrapperAttributes.getNamedItem('bm-path') ? wrapperAttributes.getNamedItem('bm-path').value : '';
	    params.animType = wrapperAttributes.getNamedItem('data-anim-type') // eslint-disable-line no-nested-ternary
	    ? wrapperAttributes.getNamedItem('data-anim-type').value : wrapperAttributes.getNamedItem('data-bm-type') // eslint-disable-line no-nested-ternary
	    ? wrapperAttributes.getNamedItem('data-bm-type').value : wrapperAttributes.getNamedItem('bm-type') // eslint-disable-line no-nested-ternary
	    ? wrapperAttributes.getNamedItem('bm-type').value : wrapperAttributes.getNamedItem('data-bm-renderer') // eslint-disable-line no-nested-ternary
	    ? wrapperAttributes.getNamedItem('data-bm-renderer').value : wrapperAttributes.getNamedItem('bm-renderer') ? wrapperAttributes.getNamedItem('bm-renderer').value : getRegisteredRenderer() || 'canvas';
	    var loop = wrapperAttributes.getNamedItem('data-anim-loop') // eslint-disable-line no-nested-ternary
	    ? wrapperAttributes.getNamedItem('data-anim-loop').value : wrapperAttributes.getNamedItem('data-bm-loop') // eslint-disable-line no-nested-ternary
	    ? wrapperAttributes.getNamedItem('data-bm-loop').value : wrapperAttributes.getNamedItem('bm-loop') ? wrapperAttributes.getNamedItem('bm-loop').value : '';

	    if (loop === 'false') {
	      params.loop = false;
	    } else if (loop === 'true') {
	      params.loop = true;
	    } else if (loop !== '') {
	      params.loop = parseInt(loop, 10);
	    }

	    var autoplay = wrapperAttributes.getNamedItem('data-anim-autoplay') // eslint-disable-line no-nested-ternary
	    ? wrapperAttributes.getNamedItem('data-anim-autoplay').value : wrapperAttributes.getNamedItem('data-bm-autoplay') // eslint-disable-line no-nested-ternary
	    ? wrapperAttributes.getNamedItem('data-bm-autoplay').value : wrapperAttributes.getNamedItem('bm-autoplay') ? wrapperAttributes.getNamedItem('bm-autoplay').value : true;
	    params.autoplay = autoplay !== 'false';
	    params.name = wrapperAttributes.getNamedItem('data-name') // eslint-disable-line no-nested-ternary
	    ? wrapperAttributes.getNamedItem('data-name').value : wrapperAttributes.getNamedItem('data-bm-name') // eslint-disable-line no-nested-ternary
	    ? wrapperAttributes.getNamedItem('data-bm-name').value : wrapperAttributes.getNamedItem('bm-name') ? wrapperAttributes.getNamedItem('bm-name').value : '';
	    var prerender = wrapperAttributes.getNamedItem('data-anim-prerender') // eslint-disable-line no-nested-ternary
	    ? wrapperAttributes.getNamedItem('data-anim-prerender').value : wrapperAttributes.getNamedItem('data-bm-prerender') // eslint-disable-line no-nested-ternary
	    ? wrapperAttributes.getNamedItem('data-bm-prerender').value : wrapperAttributes.getNamedItem('bm-prerender') ? wrapperAttributes.getNamedItem('bm-prerender').value : '';

	    if (prerender === 'false') {
	      params.prerender = false;
	    }

	    if (!params.path) {
	      this.trigger('destroy');
	    } else {
	      this.setParams(params);
	    }
	  };

	  AnimationItem.prototype.includeLayers = function (data) {
	    if (data.op > this.animationData.op) {
	      this.animationData.op = data.op;
	      this.totalFrames = Math.floor(data.op - this.animationData.ip);
	    }

	    var layers = this.animationData.layers;
	    var i;
	    var len = layers.length;
	    var newLayers = data.layers;
	    var j;
	    var jLen = newLayers.length;

	    for (j = 0; j < jLen; j += 1) {
	      i = 0;

	      while (i < len) {
	        if (layers[i].id === newLayers[j].id) {
	          layers[i] = newLayers[j];
	          break;
	        }

	        i += 1;
	      }
	    }

	    if (data.chars || data.fonts) {
	      this.renderer.globalData.fontManager.addChars(data.chars);
	      this.renderer.globalData.fontManager.addFonts(data.fonts, this.renderer.globalData.defs);
	    }

	    if (data.assets) {
	      len = data.assets.length;

	      for (i = 0; i < len; i += 1) {
	        this.animationData.assets.push(data.assets[i]);
	      }
	    }

	    this.animationData.__complete = false;
	    dataManager.completeAnimation(this.animationData, this.onSegmentComplete);
	  };

	  AnimationItem.prototype.onSegmentComplete = function (data) {
	    this.animationData = data;
	    var expressionsPlugin = getExpressionsPlugin();

	    if (expressionsPlugin) {
	      expressionsPlugin.initExpressions(this);
	    }

	    this.loadNextSegment();
	  };

	  AnimationItem.prototype.loadNextSegment = function () {
	    var segments = this.animationData.segments;

	    if (!segments || segments.length === 0 || !this.autoloadSegments) {
	      this.trigger('data_ready');
	      this.timeCompleted = this.totalFrames;
	      return;
	    }

	    var segment = segments.shift();
	    this.timeCompleted = segment.time * this.frameRate;
	    var segmentPath = this.path + this.fileName + '_' + this.segmentPos + '.json';
	    this.segmentPos += 1;
	    dataManager.loadData(segmentPath, this.includeLayers.bind(this), function () {
	      this.trigger('data_failed');
	    }.bind(this));
	  };

	  AnimationItem.prototype.loadSegments = function () {
	    var segments = this.animationData.segments;

	    if (!segments) {
	      this.timeCompleted = this.totalFrames;
	    }

	    this.loadNextSegment();
	  };

	  AnimationItem.prototype.imagesLoaded = function () {
	    this.trigger('loaded_images');
	    this.checkLoaded();
	  };

	  AnimationItem.prototype.preloadImages = function () {
	    this.imagePreloader.setAssetsPath(this.assetsPath);
	    this.imagePreloader.setPath(this.path);
	    this.imagePreloader.loadAssets(this.animationData.assets, this.imagesLoaded.bind(this));
	  };

	  AnimationItem.prototype.configAnimation = function (animData) {
	    if (!this.renderer) {
	      return;
	    }

	    try {
	      this.animationData = animData;

	      if (this.initialSegment) {
	        this.totalFrames = Math.floor(this.initialSegment[1] - this.initialSegment[0]);
	        this.firstFrame = Math.round(this.initialSegment[0]);
	      } else {
	        this.totalFrames = Math.floor(this.animationData.op - this.animationData.ip);
	        this.firstFrame = Math.round(this.animationData.ip);
	      }

	      this.renderer.configAnimation(animData);

	      if (!animData.assets) {
	        animData.assets = [];
	      }

	      this.assets = this.animationData.assets;
	      this.frameRate = this.animationData.fr;
	      this.frameMult = this.animationData.fr / 1000;
	      this.renderer.searchExtraCompositions(animData.assets);
	      this.markers = markerParser(animData.markers || []);
	      this.trigger('config_ready');
	      this.preloadImages();
	      this.loadSegments();
	      this.updaFrameModifier();
	      this.waitForFontsLoaded();

	      if (this.isPaused) {
	        this.audioController.pause();
	      }
	    } catch (error) {
	      this.triggerConfigError(error);
	    }
	  };

	  AnimationItem.prototype.waitForFontsLoaded = function () {
	    if (!this.renderer) {
	      return;
	    }

	    if (this.renderer.globalData.fontManager.isLoaded) {
	      this.checkLoaded();
	    } else {
	      setTimeout(this.waitForFontsLoaded.bind(this), 20);
	    }
	  };

	  AnimationItem.prototype.checkLoaded = function () {
	    if (!this.isLoaded && this.renderer.globalData.fontManager.isLoaded && (this.imagePreloader.loadedImages() || this.renderer.rendererType !== 'canvas') && this.imagePreloader.loadedFootages()) {
	      this.isLoaded = true;
	      var expressionsPlugin = getExpressionsPlugin();

	      if (expressionsPlugin) {
	        expressionsPlugin.initExpressions(this);
	      }

	      this.renderer.initItems();
	      setTimeout(function () {
	        this.trigger('DOMLoaded');
	      }.bind(this), 0);
	      this.gotoFrame();

	      if (this.autoplay) {
	        this.play();
	      }
	    }
	  };

	  AnimationItem.prototype.resize = function (width, height) {
	    // Adding this validation for backwards compatibility in case an event object was being passed down
	    var _width = typeof width === 'number' ? width : undefined;

	    var _height = typeof height === 'number' ? height : undefined;

	    this.renderer.updateContainerSize(_width, _height);
	  };

	  AnimationItem.prototype.setSubframe = function (flag) {
	    this.isSubframeEnabled = !!flag;
	  };

	  AnimationItem.prototype.gotoFrame = function () {
	    this.currentFrame = this.isSubframeEnabled ? this.currentRawFrame : ~~this.currentRawFrame; // eslint-disable-line no-bitwise

	    if (this.timeCompleted !== this.totalFrames && this.currentFrame > this.timeCompleted) {
	      this.currentFrame = this.timeCompleted;
	    }

	    this.trigger('enterFrame');
	    this.renderFrame();
	    this.trigger('drawnFrame');
	  };

	  AnimationItem.prototype.renderFrame = function () {
	    if (this.isLoaded === false || !this.renderer) {
	      return;
	    }

	    try {
	      if (this.expressionsPlugin) {
	        this.expressionsPlugin.resetFrame();
	      }

	      this.renderer.renderFrame(this.currentFrame + this.firstFrame);
	    } catch (error) {
	      this.triggerRenderFrameError(error);
	    }
	  };

	  AnimationItem.prototype.play = function (name) {
	    if (name && this.name !== name) {
	      return;
	    }

	    if (this.isPaused === true) {
	      this.isPaused = false;
	      this.trigger('_play');
	      this.audioController.resume();

	      if (this._idle) {
	        this._idle = false;
	        this.trigger('_active');
	      }
	    }
	  };

	  AnimationItem.prototype.pause = function (name) {
	    if (name && this.name !== name) {
	      return;
	    }

	    if (this.isPaused === false) {
	      this.isPaused = true;
	      this.trigger('_pause');
	      this._idle = true;
	      this.trigger('_idle');
	      this.audioController.pause();
	    }
	  };

	  AnimationItem.prototype.togglePause = function (name) {
	    if (name && this.name !== name) {
	      return;
	    }

	    if (this.isPaused === true) {
	      this.play();
	    } else {
	      this.pause();
	    }
	  };

	  AnimationItem.prototype.stop = function (name) {
	    if (name && this.name !== name) {
	      return;
	    }

	    this.pause();
	    this.playCount = 0;
	    this._completedLoop = false;
	    this.setCurrentRawFrameValue(0);
	  };

	  AnimationItem.prototype.getMarkerData = function (markerName) {
	    var marker;

	    for (var i = 0; i < this.markers.length; i += 1) {
	      marker = this.markers[i];

	      if (marker.payload && marker.payload.name === markerName) {
	        return marker;
	      }
	    }

	    return null;
	  };

	  AnimationItem.prototype.goToAndStop = function (value, isFrame, name) {
	    if (name && this.name !== name) {
	      return;
	    }

	    var numValue = Number(value);

	    if (isNaN(numValue)) {
	      var marker = this.getMarkerData(value);

	      if (marker) {
	        this.goToAndStop(marker.time, true);
	      }
	    } else if (isFrame) {
	      this.setCurrentRawFrameValue(value);
	    } else {
	      this.setCurrentRawFrameValue(value * this.frameModifier);
	    }

	    this.pause();
	  };

	  AnimationItem.prototype.goToAndPlay = function (value, isFrame, name) {
	    if (name && this.name !== name) {
	      return;
	    }

	    var numValue = Number(value);

	    if (isNaN(numValue)) {
	      var marker = this.getMarkerData(value);

	      if (marker) {
	        if (!marker.duration) {
	          this.goToAndStop(marker.time, true);
	        } else {
	          this.playSegments([marker.time, marker.time + marker.duration], true);
	        }
	      }
	    } else {
	      this.goToAndStop(numValue, isFrame, name);
	    }

	    this.play();
	  };

	  AnimationItem.prototype.advanceTime = function (value) {
	    if (this.isPaused === true || this.isLoaded === false) {
	      return;
	    }

	    var nextValue = this.currentRawFrame + value * this.frameModifier;
	    var _isComplete = false; // Checking if nextValue > totalFrames - 1 for addressing non looping and looping animations.
	    // If animation won't loop, it should stop at totalFrames - 1. If it will loop it should complete the last frame and then loop.

	    if (nextValue >= this.totalFrames - 1 && this.frameModifier > 0) {
	      if (!this.loop || this.playCount === this.loop) {
	        if (!this.checkSegments(nextValue > this.totalFrames ? nextValue % this.totalFrames : 0)) {
	          _isComplete = true;
	          nextValue = this.totalFrames - 1;
	        }
	      } else if (nextValue >= this.totalFrames) {
	        this.playCount += 1;

	        if (!this.checkSegments(nextValue % this.totalFrames)) {
	          this.setCurrentRawFrameValue(nextValue % this.totalFrames);
	          this._completedLoop = true;
	          this.trigger('loopComplete');
	        }
	      } else {
	        this.setCurrentRawFrameValue(nextValue);
	      }
	    } else if (nextValue < 0) {
	      if (!this.checkSegments(nextValue % this.totalFrames)) {
	        if (this.loop && !(this.playCount-- <= 0 && this.loop !== true)) {
	          // eslint-disable-line no-plusplus
	          this.setCurrentRawFrameValue(this.totalFrames + nextValue % this.totalFrames);

	          if (!this._completedLoop) {
	            this._completedLoop = true;
	          } else {
	            this.trigger('loopComplete');
	          }
	        } else {
	          _isComplete = true;
	          nextValue = 0;
	        }
	      }
	    } else {
	      this.setCurrentRawFrameValue(nextValue);
	    }

	    if (_isComplete) {
	      this.setCurrentRawFrameValue(nextValue);
	      this.pause();
	      this.trigger('complete');
	    }
	  };

	  AnimationItem.prototype.adjustSegment = function (arr, offset) {
	    this.playCount = 0;

	    if (arr[1] < arr[0]) {
	      if (this.frameModifier > 0) {
	        if (this.playSpeed < 0) {
	          this.setSpeed(-this.playSpeed);
	        } else {
	          this.setDirection(-1);
	        }
	      }

	      this.totalFrames = arr[0] - arr[1];
	      this.timeCompleted = this.totalFrames;
	      this.firstFrame = arr[1];
	      this.setCurrentRawFrameValue(this.totalFrames - 0.001 - offset);
	    } else if (arr[1] > arr[0]) {
	      if (this.frameModifier < 0) {
	        if (this.playSpeed < 0) {
	          this.setSpeed(-this.playSpeed);
	        } else {
	          this.setDirection(1);
	        }
	      }

	      this.totalFrames = arr[1] - arr[0];
	      this.timeCompleted = this.totalFrames;
	      this.firstFrame = arr[0];
	      this.setCurrentRawFrameValue(0.001 + offset);
	    }

	    this.trigger('segmentStart');
	  };

	  AnimationItem.prototype.setSegment = function (init, end) {
	    var pendingFrame = -1;

	    if (this.isPaused) {
	      if (this.currentRawFrame + this.firstFrame < init) {
	        pendingFrame = init;
	      } else if (this.currentRawFrame + this.firstFrame > end) {
	        pendingFrame = end - init;
	      }
	    }

	    this.firstFrame = init;
	    this.totalFrames = end - init;
	    this.timeCompleted = this.totalFrames;

	    if (pendingFrame !== -1) {
	      this.goToAndStop(pendingFrame, true);
	    }
	  };

	  AnimationItem.prototype.playSegments = function (arr, forceFlag) {
	    if (forceFlag) {
	      this.segments.length = 0;
	    }

	    if (_typeof$4(arr[0]) === 'object') {
	      var i;
	      var len = arr.length;

	      for (i = 0; i < len; i += 1) {
	        this.segments.push(arr[i]);
	      }
	    } else {
	      this.segments.push(arr);
	    }

	    if (this.segments.length && forceFlag) {
	      this.adjustSegment(this.segments.shift(), 0);
	    }

	    if (this.isPaused) {
	      this.play();
	    }
	  };

	  AnimationItem.prototype.resetSegments = function (forceFlag) {
	    this.segments.length = 0;
	    this.segments.push([this.animationData.ip, this.animationData.op]);

	    if (forceFlag) {
	      this.checkSegments(0);
	    }
	  };

	  AnimationItem.prototype.checkSegments = function (offset) {
	    if (this.segments.length) {
	      this.adjustSegment(this.segments.shift(), offset);
	      return true;
	    }

	    return false;
	  };

	  AnimationItem.prototype.destroy = function (name) {
	    if (name && this.name !== name || !this.renderer) {
	      return;
	    }

	    this.renderer.destroy();
	    this.imagePreloader.destroy();
	    this.trigger('destroy');
	    this._cbs = null;
	    this.onEnterFrame = null;
	    this.onLoopComplete = null;
	    this.onComplete = null;
	    this.onSegmentStart = null;
	    this.onDestroy = null;
	    this.renderer = null;
	    this.expressionsPlugin = null;
	    this.imagePreloader = null;
	    this.projectInterface = null;
	  };

	  AnimationItem.prototype.setCurrentRawFrameValue = function (value) {
	    this.currentRawFrame = value;
	    this.gotoFrame();
	  };

	  AnimationItem.prototype.setSpeed = function (val) {
	    this.playSpeed = val;
	    this.updaFrameModifier();
	  };

	  AnimationItem.prototype.setDirection = function (val) {
	    this.playDirection = val < 0 ? -1 : 1;
	    this.updaFrameModifier();
	  };

	  AnimationItem.prototype.setLoop = function (isLooping) {
	    this.loop = isLooping;
	  };

	  AnimationItem.prototype.setVolume = function (val, name) {
	    if (name && this.name !== name) {
	      return;
	    }

	    this.audioController.setVolume(val);
	  };

	  AnimationItem.prototype.getVolume = function () {
	    return this.audioController.getVolume();
	  };

	  AnimationItem.prototype.mute = function (name) {
	    if (name && this.name !== name) {
	      return;
	    }

	    this.audioController.mute();
	  };

	  AnimationItem.prototype.unmute = function (name) {
	    if (name && this.name !== name) {
	      return;
	    }

	    this.audioController.unmute();
	  };

	  AnimationItem.prototype.updaFrameModifier = function () {
	    this.frameModifier = this.frameMult * this.playSpeed * this.playDirection;
	    this.audioController.setRate(this.playSpeed * this.playDirection);
	  };

	  AnimationItem.prototype.getPath = function () {
	    return this.path;
	  };

	  AnimationItem.prototype.getAssetsPath = function (assetData) {
	    var path = '';

	    if (assetData.e) {
	      path = assetData.p;
	    } else if (this.assetsPath) {
	      var imagePath = assetData.p;

	      if (imagePath.indexOf('images/') !== -1) {
	        imagePath = imagePath.split('/')[1];
	      }

	      path = this.assetsPath + imagePath;
	    } else {
	      path = this.path;
	      path += assetData.u ? assetData.u : '';
	      path += assetData.p;
	    }

	    return path;
	  };

	  AnimationItem.prototype.getAssetData = function (id) {
	    var i = 0;
	    var len = this.assets.length;

	    while (i < len) {
	      if (id === this.assets[i].id) {
	        return this.assets[i];
	      }

	      i += 1;
	    }

	    return null;
	  };

	  AnimationItem.prototype.hide = function () {
	    this.renderer.hide();
	  };

	  AnimationItem.prototype.show = function () {
	    this.renderer.show();
	  };

	  AnimationItem.prototype.getDuration = function (isFrame) {
	    return isFrame ? this.totalFrames : this.totalFrames / this.frameRate;
	  };

	  AnimationItem.prototype.updateDocumentData = function (path, documentData, index) {
	    try {
	      var element = this.renderer.getElementByPath(path);
	      element.updateDocumentData(documentData, index);
	    } catch (error) {// TODO: decide how to handle catch case
	    }
	  };

	  AnimationItem.prototype.trigger = function (name) {
	    if (this._cbs && this._cbs[name]) {
	      switch (name) {
	        case 'enterFrame':
	          this.triggerEvent(name, new BMEnterFrameEvent(name, this.currentFrame, this.totalFrames, this.frameModifier));
	          break;

	        case 'drawnFrame':
	          this.drawnFrameEvent.currentTime = this.currentFrame;
	          this.drawnFrameEvent.totalTime = this.totalFrames;
	          this.drawnFrameEvent.direction = this.frameModifier;
	          this.triggerEvent(name, this.drawnFrameEvent);
	          break;

	        case 'loopComplete':
	          this.triggerEvent(name, new BMCompleteLoopEvent(name, this.loop, this.playCount, this.frameMult));
	          break;

	        case 'complete':
	          this.triggerEvent(name, new BMCompleteEvent(name, this.frameMult));
	          break;

	        case 'segmentStart':
	          this.triggerEvent(name, new BMSegmentStartEvent(name, this.firstFrame, this.totalFrames));
	          break;

	        case 'destroy':
	          this.triggerEvent(name, new BMDestroyEvent(name, this));
	          break;

	        default:
	          this.triggerEvent(name);
	      }
	    }

	    if (name === 'enterFrame' && this.onEnterFrame) {
	      this.onEnterFrame.call(this, new BMEnterFrameEvent(name, this.currentFrame, this.totalFrames, this.frameMult));
	    }

	    if (name === 'loopComplete' && this.onLoopComplete) {
	      this.onLoopComplete.call(this, new BMCompleteLoopEvent(name, this.loop, this.playCount, this.frameMult));
	    }

	    if (name === 'complete' && this.onComplete) {
	      this.onComplete.call(this, new BMCompleteEvent(name, this.frameMult));
	    }

	    if (name === 'segmentStart' && this.onSegmentStart) {
	      this.onSegmentStart.call(this, new BMSegmentStartEvent(name, this.firstFrame, this.totalFrames));
	    }

	    if (name === 'destroy' && this.onDestroy) {
	      this.onDestroy.call(this, new BMDestroyEvent(name, this));
	    }
	  };

	  AnimationItem.prototype.triggerRenderFrameError = function (nativeError) {
	    var error = new BMRenderFrameErrorEvent(nativeError, this.currentFrame);
	    this.triggerEvent('error', error);

	    if (this.onError) {
	      this.onError.call(this, error);
	    }
	  };

	  AnimationItem.prototype.triggerConfigError = function (nativeError) {
	    var error = new BMConfigErrorEvent(nativeError, this.currentFrame);
	    this.triggerEvent('error', error);

	    if (this.onError) {
	      this.onError.call(this, error);
	    }
	  };

	  var animationManager = function () {
	    var moduleOb = {};
	    var registeredAnimations = [];
	    var initTime = 0;
	    var len = 0;
	    var playingAnimationsNum = 0;
	    var _stopped = true;
	    var _isFrozen = false;

	    function removeElement(ev) {
	      var i = 0;
	      var animItem = ev.target;

	      while (i < len) {
	        if (registeredAnimations[i].animation === animItem) {
	          registeredAnimations.splice(i, 1);
	          i -= 1;
	          len -= 1;

	          if (!animItem.isPaused) {
	            subtractPlayingCount();
	          }
	        }

	        i += 1;
	      }
	    }

	    function registerAnimation(element, animationData) {
	      if (!element) {
	        return null;
	      }

	      var i = 0;

	      while (i < len) {
	        if (registeredAnimations[i].elem === element && registeredAnimations[i].elem !== null) {
	          return registeredAnimations[i].animation;
	        }

	        i += 1;
	      }

	      var animItem = new AnimationItem();
	      setupAnimation(animItem, element);
	      animItem.setData(element, animationData);
	      return animItem;
	    }

	    function getRegisteredAnimations() {
	      var i;
	      var lenAnims = registeredAnimations.length;
	      var animations = [];

	      for (i = 0; i < lenAnims; i += 1) {
	        animations.push(registeredAnimations[i].animation);
	      }

	      return animations;
	    }

	    function addPlayingCount() {
	      playingAnimationsNum += 1;
	      activate();
	    }

	    function subtractPlayingCount() {
	      playingAnimationsNum -= 1;
	    }

	    function setupAnimation(animItem, element) {
	      animItem.addEventListener('destroy', removeElement);
	      animItem.addEventListener('_active', addPlayingCount);
	      animItem.addEventListener('_idle', subtractPlayingCount);
	      registeredAnimations.push({
	        elem: element,
	        animation: animItem
	      });
	      len += 1;
	    }

	    function loadAnimation(params) {
	      var animItem = new AnimationItem();
	      setupAnimation(animItem, null);
	      animItem.setParams(params);
	      return animItem;
	    }

	    function setSpeed(val, animation) {
	      var i;

	      for (i = 0; i < len; i += 1) {
	        registeredAnimations[i].animation.setSpeed(val, animation);
	      }
	    }

	    function setDirection(val, animation) {
	      var i;

	      for (i = 0; i < len; i += 1) {
	        registeredAnimations[i].animation.setDirection(val, animation);
	      }
	    }

	    function play(animation) {
	      var i;

	      for (i = 0; i < len; i += 1) {
	        registeredAnimations[i].animation.play(animation);
	      }
	    }

	    function resume(nowTime) {
	      var elapsedTime = nowTime - initTime;
	      var i;

	      for (i = 0; i < len; i += 1) {
	        registeredAnimations[i].animation.advanceTime(elapsedTime);
	      }

	      initTime = nowTime;

	      if (playingAnimationsNum && !_isFrozen) {
	        window.requestAnimationFrame(resume);
	      } else {
	        _stopped = true;
	      }
	    }

	    function first(nowTime) {
	      initTime = nowTime;
	      window.requestAnimationFrame(resume);
	    }

	    function pause(animation) {
	      var i;

	      for (i = 0; i < len; i += 1) {
	        registeredAnimations[i].animation.pause(animation);
	      }
	    }

	    function goToAndStop(value, isFrame, animation) {
	      var i;

	      for (i = 0; i < len; i += 1) {
	        registeredAnimations[i].animation.goToAndStop(value, isFrame, animation);
	      }
	    }

	    function stop(animation) {
	      var i;

	      for (i = 0; i < len; i += 1) {
	        registeredAnimations[i].animation.stop(animation);
	      }
	    }

	    function togglePause(animation) {
	      var i;

	      for (i = 0; i < len; i += 1) {
	        registeredAnimations[i].animation.togglePause(animation);
	      }
	    }

	    function destroy(animation) {
	      var i;

	      for (i = len - 1; i >= 0; i -= 1) {
	        registeredAnimations[i].animation.destroy(animation);
	      }
	    }

	    function searchAnimations(animationData, standalone, renderer) {
	      var animElements = [].concat([].slice.call(document.getElementsByClassName('lottie')), [].slice.call(document.getElementsByClassName('bodymovin')));
	      var i;
	      var lenAnims = animElements.length;

	      for (i = 0; i < lenAnims; i += 1) {
	        if (renderer) {
	          animElements[i].setAttribute('data-bm-type', renderer);
	        }

	        registerAnimation(animElements[i], animationData);
	      }

	      if (standalone && lenAnims === 0) {
	        if (!renderer) {
	          renderer = 'svg';
	        }

	        var body = document.getElementsByTagName('body')[0];
	        body.innerText = '';
	        var div = createTag('div');
	        div.style.width = '100%';
	        div.style.height = '100%';
	        div.setAttribute('data-bm-type', renderer);
	        body.appendChild(div);
	        registerAnimation(div, animationData);
	      }
	    }

	    function resize() {
	      var i;

	      for (i = 0; i < len; i += 1) {
	        registeredAnimations[i].animation.resize();
	      }
	    }

	    function activate() {
	      if (!_isFrozen && playingAnimationsNum) {
	        if (_stopped) {
	          window.requestAnimationFrame(first);
	          _stopped = false;
	        }
	      }
	    }

	    function freeze() {
	      _isFrozen = true;
	    }

	    function unfreeze() {
	      _isFrozen = false;
	      activate();
	    }

	    function setVolume(val, animation) {
	      var i;

	      for (i = 0; i < len; i += 1) {
	        registeredAnimations[i].animation.setVolume(val, animation);
	      }
	    }

	    function mute(animation) {
	      var i;

	      for (i = 0; i < len; i += 1) {
	        registeredAnimations[i].animation.mute(animation);
	      }
	    }

	    function unmute(animation) {
	      var i;

	      for (i = 0; i < len; i += 1) {
	        registeredAnimations[i].animation.unmute(animation);
	      }
	    }

	    moduleOb.registerAnimation = registerAnimation;
	    moduleOb.loadAnimation = loadAnimation;
	    moduleOb.setSpeed = setSpeed;
	    moduleOb.setDirection = setDirection;
	    moduleOb.play = play;
	    moduleOb.pause = pause;
	    moduleOb.stop = stop;
	    moduleOb.togglePause = togglePause;
	    moduleOb.searchAnimations = searchAnimations;
	    moduleOb.resize = resize; // moduleOb.start = start;

	    moduleOb.goToAndStop = goToAndStop;
	    moduleOb.destroy = destroy;
	    moduleOb.freeze = freeze;
	    moduleOb.unfreeze = unfreeze;
	    moduleOb.setVolume = setVolume;
	    moduleOb.mute = mute;
	    moduleOb.unmute = unmute;
	    moduleOb.getRegisteredAnimations = getRegisteredAnimations;
	    return moduleOb;
	  }();

	  /* eslint-disable */
	  var BezierFactory = function () {
	    /**
	       * BezierEasing - use bezier curve for transition easing function
	       * by Gaëtan Renaudeau 2014 - 2015 – MIT License
	       *
	       * Credits: is based on Firefox's nsSMILKeySpline.cpp
	       * Usage:
	       * var spline = BezierEasing([ 0.25, 0.1, 0.25, 1.0 ])
	       * spline.get(x) => returns the easing value | x must be in [0, 1] range
	       *
	       */
	    var ob = {};
	    ob.getBezierEasing = getBezierEasing;
	    var beziers = {};

	    function getBezierEasing(a, b, c, d, nm) {
	      var str = nm || ('bez_' + a + '_' + b + '_' + c + '_' + d).replace(/\./g, 'p');

	      if (beziers[str]) {
	        return beziers[str];
	      }

	      var bezEasing = new BezierEasing([a, b, c, d]);
	      beziers[str] = bezEasing;
	      return bezEasing;
	    } // These values are established by empiricism with tests (tradeoff: performance VS precision)


	    var NEWTON_ITERATIONS = 4;
	    var NEWTON_MIN_SLOPE = 0.001;
	    var SUBDIVISION_PRECISION = 0.0000001;
	    var SUBDIVISION_MAX_ITERATIONS = 10;
	    var kSplineTableSize = 11;
	    var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
	    var float32ArraySupported = typeof Float32Array === 'function';

	    function A(aA1, aA2) {
	      return 1.0 - 3.0 * aA2 + 3.0 * aA1;
	    }

	    function B(aA1, aA2) {
	      return 3.0 * aA2 - 6.0 * aA1;
	    }

	    function C(aA1) {
	      return 3.0 * aA1;
	    } // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.


	    function calcBezier(aT, aA1, aA2) {
	      return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
	    } // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.


	    function getSlope(aT, aA1, aA2) {
	      return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
	    }

	    function binarySubdivide(aX, aA, aB, mX1, mX2) {
	      var currentX,
	          currentT,
	          i = 0;

	      do {
	        currentT = aA + (aB - aA) / 2.0;
	        currentX = calcBezier(currentT, mX1, mX2) - aX;

	        if (currentX > 0.0) {
	          aB = currentT;
	        } else {
	          aA = currentT;
	        }
	      } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

	      return currentT;
	    }

	    function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
	      for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
	        var currentSlope = getSlope(aGuessT, mX1, mX2);
	        if (currentSlope === 0.0) return aGuessT;
	        var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
	        aGuessT -= currentX / currentSlope;
	      }

	      return aGuessT;
	    }
	    /**
	       * points is an array of [ mX1, mY1, mX2, mY2 ]
	       */


	    function BezierEasing(points) {
	      this._p = points;
	      this._mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
	      this._precomputed = false;
	      this.get = this.get.bind(this);
	    }

	    BezierEasing.prototype = {
	      get: function get(x) {
	        var mX1 = this._p[0],
	            mY1 = this._p[1],
	            mX2 = this._p[2],
	            mY2 = this._p[3];
	        if (!this._precomputed) this._precompute();
	        if (mX1 === mY1 && mX2 === mY2) return x; // linear
	        // Because JavaScript number are imprecise, we should guarantee the extremes are right.

	        if (x === 0) return 0;
	        if (x === 1) return 1;
	        return calcBezier(this._getTForX(x), mY1, mY2);
	      },
	      // Private part
	      _precompute: function _precompute() {
	        var mX1 = this._p[0],
	            mY1 = this._p[1],
	            mX2 = this._p[2],
	            mY2 = this._p[3];
	        this._precomputed = true;

	        if (mX1 !== mY1 || mX2 !== mY2) {
	          this._calcSampleValues();
	        }
	      },
	      _calcSampleValues: function _calcSampleValues() {
	        var mX1 = this._p[0],
	            mX2 = this._p[2];

	        for (var i = 0; i < kSplineTableSize; ++i) {
	          this._mSampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
	        }
	      },

	      /**
	           * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.
	           */
	      _getTForX: function _getTForX(aX) {
	        var mX1 = this._p[0],
	            mX2 = this._p[2],
	            mSampleValues = this._mSampleValues;
	        var intervalStart = 0.0;
	        var currentSample = 1;
	        var lastSample = kSplineTableSize - 1;

	        for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
	          intervalStart += kSampleStepSize;
	        }

	        --currentSample; // Interpolate to provide an initial guess for t

	        var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]);
	        var guessForT = intervalStart + dist * kSampleStepSize;
	        var initialSlope = getSlope(guessForT, mX1, mX2);

	        if (initialSlope >= NEWTON_MIN_SLOPE) {
	          return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
	        }

	        if (initialSlope === 0.0) {
	          return guessForT;
	        }

	        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
	      }
	    };
	    return ob;
	  }();

	  var pooling = function () {
	    function _double(arr) {
	      return arr.concat(createSizedArray(arr.length));
	    }

	    return {
	      "double": _double
	    };
	  }();

	  var poolFactory = function () {
	    return function (initialLength, _create, _release) {
	      var _length = 0;
	      var _maxLength = initialLength;
	      var pool = createSizedArray(_maxLength);
	      var ob = {
	        newElement: newElement,
	        release: release
	      };

	      function newElement() {
	        var element;

	        if (_length) {
	          _length -= 1;
	          element = pool[_length];
	        } else {
	          element = _create();
	        }

	        return element;
	      }

	      function release(element) {
	        if (_length === _maxLength) {
	          pool = pooling["double"](pool);
	          _maxLength *= 2;
	        }

	        if (_release) {
	          _release(element);
	        }

	        pool[_length] = element;
	        _length += 1;
	      }

	      return ob;
	    };
	  }();

	  var bezierLengthPool = function () {
	    function create() {
	      return {
	        addedLength: 0,
	        percents: createTypedArray('float32', getDefaultCurveSegments()),
	        lengths: createTypedArray('float32', getDefaultCurveSegments())
	      };
	    }

	    return poolFactory(8, create);
	  }();

	  var segmentsLengthPool = function () {
	    function create() {
	      return {
	        lengths: [],
	        totalLength: 0
	      };
	    }

	    function release(element) {
	      var i;
	      var len = element.lengths.length;

	      for (i = 0; i < len; i += 1) {
	        bezierLengthPool.release(element.lengths[i]);
	      }

	      element.lengths.length = 0;
	    }

	    return poolFactory(8, create, release);
	  }();

	  function bezFunction() {
	    var math = Math;

	    function pointOnLine2D(x1, y1, x2, y2, x3, y3) {
	      var det1 = x1 * y2 + y1 * x3 + x2 * y3 - x3 * y2 - y3 * x1 - x2 * y1;
	      return det1 > -0.001 && det1 < 0.001;
	    }

	    function pointOnLine3D(x1, y1, z1, x2, y2, z2, x3, y3, z3) {
	      if (z1 === 0 && z2 === 0 && z3 === 0) {
	        return pointOnLine2D(x1, y1, x2, y2, x3, y3);
	      }

	      var dist1 = math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2) + math.pow(z2 - z1, 2));
	      var dist2 = math.sqrt(math.pow(x3 - x1, 2) + math.pow(y3 - y1, 2) + math.pow(z3 - z1, 2));
	      var dist3 = math.sqrt(math.pow(x3 - x2, 2) + math.pow(y3 - y2, 2) + math.pow(z3 - z2, 2));
	      var diffDist;

	      if (dist1 > dist2) {
	        if (dist1 > dist3) {
	          diffDist = dist1 - dist2 - dist3;
	        } else {
	          diffDist = dist3 - dist2 - dist1;
	        }
	      } else if (dist3 > dist2) {
	        diffDist = dist3 - dist2 - dist1;
	      } else {
	        diffDist = dist2 - dist1 - dist3;
	      }

	      return diffDist > -0.0001 && diffDist < 0.0001;
	    }

	    var getBezierLength = function () {
	      return function (pt1, pt2, pt3, pt4) {
	        var curveSegments = getDefaultCurveSegments();
	        var k;
	        var i;
	        var len;
	        var ptCoord;
	        var perc;
	        var addedLength = 0;
	        var ptDistance;
	        var point = [];
	        var lastPoint = [];
	        var lengthData = bezierLengthPool.newElement();
	        len = pt3.length;

	        for (k = 0; k < curveSegments; k += 1) {
	          perc = k / (curveSegments - 1);
	          ptDistance = 0;

	          for (i = 0; i < len; i += 1) {
	            ptCoord = bmPow(1 - perc, 3) * pt1[i] + 3 * bmPow(1 - perc, 2) * perc * pt3[i] + 3 * (1 - perc) * bmPow(perc, 2) * pt4[i] + bmPow(perc, 3) * pt2[i];
	            point[i] = ptCoord;

	            if (lastPoint[i] !== null) {
	              ptDistance += bmPow(point[i] - lastPoint[i], 2);
	            }

	            lastPoint[i] = point[i];
	          }

	          if (ptDistance) {
	            ptDistance = bmSqrt(ptDistance);
	            addedLength += ptDistance;
	          }

	          lengthData.percents[k] = perc;
	          lengthData.lengths[k] = addedLength;
	        }

	        lengthData.addedLength = addedLength;
	        return lengthData;
	      };
	    }();

	    function getSegmentsLength(shapeData) {
	      var segmentsLength = segmentsLengthPool.newElement();
	      var closed = shapeData.c;
	      var pathV = shapeData.v;
	      var pathO = shapeData.o;
	      var pathI = shapeData.i;
	      var i;
	      var len = shapeData._length;
	      var lengths = segmentsLength.lengths;
	      var totalLength = 0;

	      for (i = 0; i < len - 1; i += 1) {
	        lengths[i] = getBezierLength(pathV[i], pathV[i + 1], pathO[i], pathI[i + 1]);
	        totalLength += lengths[i].addedLength;
	      }

	      if (closed && len) {
	        lengths[i] = getBezierLength(pathV[i], pathV[0], pathO[i], pathI[0]);
	        totalLength += lengths[i].addedLength;
	      }

	      segmentsLength.totalLength = totalLength;
	      return segmentsLength;
	    }

	    function BezierData(length) {
	      this.segmentLength = 0;
	      this.points = new Array(length);
	    }

	    function PointData(partial, point) {
	      this.partialLength = partial;
	      this.point = point;
	    }

	    var buildBezierData = function () {
	      var storedData = {};
	      return function (pt1, pt2, pt3, pt4) {
	        var bezierName = (pt1[0] + '_' + pt1[1] + '_' + pt2[0] + '_' + pt2[1] + '_' + pt3[0] + '_' + pt3[1] + '_' + pt4[0] + '_' + pt4[1]).replace(/\./g, 'p');

	        if (!storedData[bezierName]) {
	          var curveSegments = getDefaultCurveSegments();
	          var k;
	          var i;
	          var len;
	          var ptCoord;
	          var perc;
	          var addedLength = 0;
	          var ptDistance;
	          var point;
	          var lastPoint = null;

	          if (pt1.length === 2 && (pt1[0] !== pt2[0] || pt1[1] !== pt2[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt1[0] + pt3[0], pt1[1] + pt3[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt2[0] + pt4[0], pt2[1] + pt4[1])) {
	            curveSegments = 2;
	          }

	          var bezierData = new BezierData(curveSegments);
	          len = pt3.length;

	          for (k = 0; k < curveSegments; k += 1) {
	            point = createSizedArray(len);
	            perc = k / (curveSegments - 1);
	            ptDistance = 0;

	            for (i = 0; i < len; i += 1) {
	              ptCoord = bmPow(1 - perc, 3) * pt1[i] + 3 * bmPow(1 - perc, 2) * perc * (pt1[i] + pt3[i]) + 3 * (1 - perc) * bmPow(perc, 2) * (pt2[i] + pt4[i]) + bmPow(perc, 3) * pt2[i];
	              point[i] = ptCoord;

	              if (lastPoint !== null) {
	                ptDistance += bmPow(point[i] - lastPoint[i], 2);
	              }
	            }

	            ptDistance = bmSqrt(ptDistance);
	            addedLength += ptDistance;
	            bezierData.points[k] = new PointData(ptDistance, point);
	            lastPoint = point;
	          }

	          bezierData.segmentLength = addedLength;
	          storedData[bezierName] = bezierData;
	        }

	        return storedData[bezierName];
	      };
	    }();

	    function getDistancePerc(perc, bezierData) {
	      var percents = bezierData.percents;
	      var lengths = bezierData.lengths;
	      var len = percents.length;
	      var initPos = bmFloor((len - 1) * perc);
	      var lengthPos = perc * bezierData.addedLength;
	      var lPerc = 0;

	      if (initPos === len - 1 || initPos === 0 || lengthPos === lengths[initPos]) {
	        return percents[initPos];
	      }

	      var dir = lengths[initPos] > lengthPos ? -1 : 1;
	      var flag = true;

	      while (flag) {
	        if (lengths[initPos] <= lengthPos && lengths[initPos + 1] > lengthPos) {
	          lPerc = (lengthPos - lengths[initPos]) / (lengths[initPos + 1] - lengths[initPos]);
	          flag = false;
	        } else {
	          initPos += dir;
	        }

	        if (initPos < 0 || initPos >= len - 1) {
	          // FIX for TypedArrays that don't store floating point values with enough accuracy
	          if (initPos === len - 1) {
	            return percents[initPos];
	          }

	          flag = false;
	        }
	      }

	      return percents[initPos] + (percents[initPos + 1] - percents[initPos]) * lPerc;
	    }

	    function getPointInSegment(pt1, pt2, pt3, pt4, percent, bezierData) {
	      var t1 = getDistancePerc(percent, bezierData);
	      var u1 = 1 - t1;
	      var ptX = math.round((u1 * u1 * u1 * pt1[0] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[0] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[0] + t1 * t1 * t1 * pt2[0]) * 1000) / 1000;
	      var ptY = math.round((u1 * u1 * u1 * pt1[1] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[1] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[1] + t1 * t1 * t1 * pt2[1]) * 1000) / 1000;
	      return [ptX, ptY];
	    }

	    var bezierSegmentPoints = createTypedArray('float32', 8);

	    function getNewSegment(pt1, pt2, pt3, pt4, startPerc, endPerc, bezierData) {
	      if (startPerc < 0) {
	        startPerc = 0;
	      } else if (startPerc > 1) {
	        startPerc = 1;
	      }

	      var t0 = getDistancePerc(startPerc, bezierData);
	      endPerc = endPerc > 1 ? 1 : endPerc;
	      var t1 = getDistancePerc(endPerc, bezierData);
	      var i;
	      var len = pt1.length;
	      var u0 = 1 - t0;
	      var u1 = 1 - t1;
	      var u0u0u0 = u0 * u0 * u0;
	      var t0u0u0_3 = t0 * u0 * u0 * 3; // eslint-disable-line camelcase

	      var t0t0u0_3 = t0 * t0 * u0 * 3; // eslint-disable-line camelcase

	      var t0t0t0 = t0 * t0 * t0; //

	      var u0u0u1 = u0 * u0 * u1;
	      var t0u0u1_3 = t0 * u0 * u1 + u0 * t0 * u1 + u0 * u0 * t1; // eslint-disable-line camelcase

	      var t0t0u1_3 = t0 * t0 * u1 + u0 * t0 * t1 + t0 * u0 * t1; // eslint-disable-line camelcase

	      var t0t0t1 = t0 * t0 * t1; //

	      var u0u1u1 = u0 * u1 * u1;
	      var t0u1u1_3 = t0 * u1 * u1 + u0 * t1 * u1 + u0 * u1 * t1; // eslint-disable-line camelcase

	      var t0t1u1_3 = t0 * t1 * u1 + u0 * t1 * t1 + t0 * u1 * t1; // eslint-disable-line camelcase

	      var t0t1t1 = t0 * t1 * t1; //

	      var u1u1u1 = u1 * u1 * u1;
	      var t1u1u1_3 = t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1; // eslint-disable-line camelcase

	      var t1t1u1_3 = t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1; // eslint-disable-line camelcase

	      var t1t1t1 = t1 * t1 * t1;

	      for (i = 0; i < len; i += 1) {
	        bezierSegmentPoints[i * 4] = math.round((u0u0u0 * pt1[i] + t0u0u0_3 * pt3[i] + t0t0u0_3 * pt4[i] + t0t0t0 * pt2[i]) * 1000) / 1000; // eslint-disable-line camelcase

	        bezierSegmentPoints[i * 4 + 1] = math.round((u0u0u1 * pt1[i] + t0u0u1_3 * pt3[i] + t0t0u1_3 * pt4[i] + t0t0t1 * pt2[i]) * 1000) / 1000; // eslint-disable-line camelcase

	        bezierSegmentPoints[i * 4 + 2] = math.round((u0u1u1 * pt1[i] + t0u1u1_3 * pt3[i] + t0t1u1_3 * pt4[i] + t0t1t1 * pt2[i]) * 1000) / 1000; // eslint-disable-line camelcase

	        bezierSegmentPoints[i * 4 + 3] = math.round((u1u1u1 * pt1[i] + t1u1u1_3 * pt3[i] + t1t1u1_3 * pt4[i] + t1t1t1 * pt2[i]) * 1000) / 1000; // eslint-disable-line camelcase
	      }

	      return bezierSegmentPoints;
	    }

	    return {
	      getSegmentsLength: getSegmentsLength,
	      getNewSegment: getNewSegment,
	      getPointInSegment: getPointInSegment,
	      buildBezierData: buildBezierData,
	      pointOnLine2D: pointOnLine2D,
	      pointOnLine3D: pointOnLine3D
	    };
	  }

	  var bez = bezFunction();

	  var initFrame = initialDefaultFrame;
	  var mathAbs = Math.abs;

	  function interpolateValue(frameNum, caching) {
	    var offsetTime = this.offsetTime;
	    var newValue;

	    if (this.propType === 'multidimensional') {
	      newValue = createTypedArray('float32', this.pv.length);
	    }

	    var iterationIndex = caching.lastIndex;
	    var i = iterationIndex;
	    var len = this.keyframes.length - 1;
	    var flag = true;
	    var keyData;
	    var nextKeyData;
	    var keyframeMetadata;

	    while (flag) {
	      keyData = this.keyframes[i];
	      nextKeyData = this.keyframes[i + 1];

	      if (i === len - 1 && frameNum >= nextKeyData.t - offsetTime) {
	        if (keyData.h) {
	          keyData = nextKeyData;
	        }

	        iterationIndex = 0;
	        break;
	      }

	      if (nextKeyData.t - offsetTime > frameNum) {
	        iterationIndex = i;
	        break;
	      }

	      if (i < len - 1) {
	        i += 1;
	      } else {
	        iterationIndex = 0;
	        flag = false;
	      }
	    }

	    keyframeMetadata = this.keyframesMetadata[i] || {};
	    var k;
	    var kLen;
	    var perc;
	    var jLen;
	    var j;
	    var fnc;
	    var nextKeyTime = nextKeyData.t - offsetTime;
	    var keyTime = keyData.t - offsetTime;
	    var endValue;

	    if (keyData.to) {
	      if (!keyframeMetadata.bezierData) {
	        keyframeMetadata.bezierData = bez.buildBezierData(keyData.s, nextKeyData.s || keyData.e, keyData.to, keyData.ti);
	      }

	      var bezierData = keyframeMetadata.bezierData;

	      if (frameNum >= nextKeyTime || frameNum < keyTime) {
	        var ind = frameNum >= nextKeyTime ? bezierData.points.length - 1 : 0;
	        kLen = bezierData.points[ind].point.length;

	        for (k = 0; k < kLen; k += 1) {
	          newValue[k] = bezierData.points[ind].point[k];
	        } // caching._lastKeyframeIndex = -1;

	      } else {
	        if (keyframeMetadata.__fnct) {
	          fnc = keyframeMetadata.__fnct;
	        } else {
	          fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y, keyData.n).get;
	          keyframeMetadata.__fnct = fnc;
	        }

	        perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
	        var distanceInLine = bezierData.segmentLength * perc;
	        var segmentPerc;
	        var addedLength = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i ? caching._lastAddedLength : 0;
	        j = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i ? caching._lastPoint : 0;
	        flag = true;
	        jLen = bezierData.points.length;

	        while (flag) {
	          addedLength += bezierData.points[j].partialLength;

	          if (distanceInLine === 0 || perc === 0 || j === bezierData.points.length - 1) {
	            kLen = bezierData.points[j].point.length;

	            for (k = 0; k < kLen; k += 1) {
	              newValue[k] = bezierData.points[j].point[k];
	            }

	            break;
	          } else if (distanceInLine >= addedLength && distanceInLine < addedLength + bezierData.points[j + 1].partialLength) {
	            segmentPerc = (distanceInLine - addedLength) / bezierData.points[j + 1].partialLength;
	            kLen = bezierData.points[j].point.length;

	            for (k = 0; k < kLen; k += 1) {
	              newValue[k] = bezierData.points[j].point[k] + (bezierData.points[j + 1].point[k] - bezierData.points[j].point[k]) * segmentPerc;
	            }

	            break;
	          }

	          if (j < jLen - 1) {
	            j += 1;
	          } else {
	            flag = false;
	          }
	        }

	        caching._lastPoint = j;
	        caching._lastAddedLength = addedLength - bezierData.points[j].partialLength;
	        caching._lastKeyframeIndex = i;
	      }
	    } else {
	      var outX;
	      var outY;
	      var inX;
	      var inY;
	      var keyValue;
	      len = keyData.s.length;
	      endValue = nextKeyData.s || keyData.e;

	      if (this.sh && keyData.h !== 1) {
	        if (frameNum >= nextKeyTime) {
	          newValue[0] = endValue[0];
	          newValue[1] = endValue[1];
	          newValue[2] = endValue[2];
	        } else if (frameNum <= keyTime) {
	          newValue[0] = keyData.s[0];
	          newValue[1] = keyData.s[1];
	          newValue[2] = keyData.s[2];
	        } else {
	          var quatStart = createQuaternion(keyData.s);
	          var quatEnd = createQuaternion(endValue);
	          var time = (frameNum - keyTime) / (nextKeyTime - keyTime);
	          quaternionToEuler(newValue, slerp(quatStart, quatEnd, time));
	        }
	      } else {
	        for (i = 0; i < len; i += 1) {
	          if (keyData.h !== 1) {
	            if (frameNum >= nextKeyTime) {
	              perc = 1;
	            } else if (frameNum < keyTime) {
	              perc = 0;
	            } else {
	              if (keyData.o.x.constructor === Array) {
	                if (!keyframeMetadata.__fnct) {
	                  keyframeMetadata.__fnct = [];
	                }

	                if (!keyframeMetadata.__fnct[i]) {
	                  outX = keyData.o.x[i] === undefined ? keyData.o.x[0] : keyData.o.x[i];
	                  outY = keyData.o.y[i] === undefined ? keyData.o.y[0] : keyData.o.y[i];
	                  inX = keyData.i.x[i] === undefined ? keyData.i.x[0] : keyData.i.x[i];
	                  inY = keyData.i.y[i] === undefined ? keyData.i.y[0] : keyData.i.y[i];
	                  fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
	                  keyframeMetadata.__fnct[i] = fnc;
	                } else {
	                  fnc = keyframeMetadata.__fnct[i];
	                }
	              } else if (!keyframeMetadata.__fnct) {
	                outX = keyData.o.x;
	                outY = keyData.o.y;
	                inX = keyData.i.x;
	                inY = keyData.i.y;
	                fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
	                keyData.keyframeMetadata = fnc;
	              } else {
	                fnc = keyframeMetadata.__fnct;
	              }

	              perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
	            }
	          }

	          endValue = nextKeyData.s || keyData.e;
	          keyValue = keyData.h === 1 ? keyData.s[i] : keyData.s[i] + (endValue[i] - keyData.s[i]) * perc;

	          if (this.propType === 'multidimensional') {
	            newValue[i] = keyValue;
	          } else {
	            newValue = keyValue;
	          }
	        }
	      }
	    }

	    caching.lastIndex = iterationIndex;
	    return newValue;
	  } // based on @Toji's https://github.com/toji/gl-matrix/


	  function slerp(a, b, t) {
	    var out = [];
	    var ax = a[0];
	    var ay = a[1];
	    var az = a[2];
	    var aw = a[3];
	    var bx = b[0];
	    var by = b[1];
	    var bz = b[2];
	    var bw = b[3];
	    var omega;
	    var cosom;
	    var sinom;
	    var scale0;
	    var scale1;
	    cosom = ax * bx + ay * by + az * bz + aw * bw;

	    if (cosom < 0.0) {
	      cosom = -cosom;
	      bx = -bx;
	      by = -by;
	      bz = -bz;
	      bw = -bw;
	    }

	    if (1.0 - cosom > 0.000001) {
	      omega = Math.acos(cosom);
	      sinom = Math.sin(omega);
	      scale0 = Math.sin((1.0 - t) * omega) / sinom;
	      scale1 = Math.sin(t * omega) / sinom;
	    } else {
	      scale0 = 1.0 - t;
	      scale1 = t;
	    }

	    out[0] = scale0 * ax + scale1 * bx;
	    out[1] = scale0 * ay + scale1 * by;
	    out[2] = scale0 * az + scale1 * bz;
	    out[3] = scale0 * aw + scale1 * bw;
	    return out;
	  }

	  function quaternionToEuler(out, quat) {
	    var qx = quat[0];
	    var qy = quat[1];
	    var qz = quat[2];
	    var qw = quat[3];
	    var heading = Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy * qy - 2 * qz * qz);
	    var attitude = Math.asin(2 * qx * qy + 2 * qz * qw);
	    var bank = Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx * qx - 2 * qz * qz);
	    out[0] = heading / degToRads;
	    out[1] = attitude / degToRads;
	    out[2] = bank / degToRads;
	  }

	  function createQuaternion(values) {
	    var heading = values[0] * degToRads;
	    var attitude = values[1] * degToRads;
	    var bank = values[2] * degToRads;
	    var c1 = Math.cos(heading / 2);
	    var c2 = Math.cos(attitude / 2);
	    var c3 = Math.cos(bank / 2);
	    var s1 = Math.sin(heading / 2);
	    var s2 = Math.sin(attitude / 2);
	    var s3 = Math.sin(bank / 2);
	    var w = c1 * c2 * c3 - s1 * s2 * s3;
	    var x = s1 * s2 * c3 + c1 * c2 * s3;
	    var y = s1 * c2 * c3 + c1 * s2 * s3;
	    var z = c1 * s2 * c3 - s1 * c2 * s3;
	    return [x, y, z, w];
	  }

	  function getValueAtCurrentTime() {
	    var frameNum = this.comp.renderedFrame - this.offsetTime;
	    var initTime = this.keyframes[0].t - this.offsetTime;
	    var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;

	    if (!(frameNum === this._caching.lastFrame || this._caching.lastFrame !== initFrame && (this._caching.lastFrame >= endTime && frameNum >= endTime || this._caching.lastFrame < initTime && frameNum < initTime))) {
	      if (this._caching.lastFrame >= frameNum) {
	        this._caching._lastKeyframeIndex = -1;
	        this._caching.lastIndex = 0;
	      }

	      var renderResult = this.interpolateValue(frameNum, this._caching);
	      this.pv = renderResult;
	    }

	    this._caching.lastFrame = frameNum;
	    return this.pv;
	  }

	  function setVValue(val) {
	    var multipliedValue;

	    if (this.propType === 'unidimensional') {
	      multipliedValue = val * this.mult;

	      if (mathAbs(this.v - multipliedValue) > 0.00001) {
	        this.v = multipliedValue;
	        this._mdf = true;
	      }
	    } else {
	      var i = 0;
	      var len = this.v.length;

	      while (i < len) {
	        multipliedValue = val[i] * this.mult;

	        if (mathAbs(this.v[i] - multipliedValue) > 0.00001) {
	          this.v[i] = multipliedValue;
	          this._mdf = true;
	        }

	        i += 1;
	      }
	    }
	  }

	  function processEffectsSequence() {
	    if (this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) {
	      return;
	    }

	    if (this.lock) {
	      this.setVValue(this.pv);
	      return;
	    }

	    this.lock = true;
	    this._mdf = this._isFirstFrame;
	    var i;
	    var len = this.effectsSequence.length;
	    var finalValue = this.kf ? this.pv : this.data.k;

	    for (i = 0; i < len; i += 1) {
	      finalValue = this.effectsSequence[i](finalValue);
	    }

	    this.setVValue(finalValue);
	    this._isFirstFrame = false;
	    this.lock = false;
	    this.frameId = this.elem.globalData.frameId;
	  }

	  function addEffect(effectFunction) {
	    this.effectsSequence.push(effectFunction);
	    this.container.addDynamicProperty(this);
	  }

	  function ValueProperty(elem, data, mult, container) {
	    this.propType = 'unidimensional';
	    this.mult = mult || 1;
	    this.data = data;
	    this.v = mult ? data.k * mult : data.k;
	    this.pv = data.k;
	    this._mdf = false;
	    this.elem = elem;
	    this.container = container;
	    this.comp = elem.comp;
	    this.k = false;
	    this.kf = false;
	    this.vel = 0;
	    this.effectsSequence = [];
	    this._isFirstFrame = true;
	    this.getValue = processEffectsSequence;
	    this.setVValue = setVValue;
	    this.addEffect = addEffect;
	  }

	  function MultiDimensionalProperty(elem, data, mult, container) {
	    this.propType = 'multidimensional';
	    this.mult = mult || 1;
	    this.data = data;
	    this._mdf = false;
	    this.elem = elem;
	    this.container = container;
	    this.comp = elem.comp;
	    this.k = false;
	    this.kf = false;
	    this.frameId = -1;
	    var i;
	    var len = data.k.length;
	    this.v = createTypedArray('float32', len);
	    this.pv = createTypedArray('float32', len);
	    this.vel = createTypedArray('float32', len);

	    for (i = 0; i < len; i += 1) {
	      this.v[i] = data.k[i] * this.mult;
	      this.pv[i] = data.k[i];
	    }

	    this._isFirstFrame = true;
	    this.effectsSequence = [];
	    this.getValue = processEffectsSequence;
	    this.setVValue = setVValue;
	    this.addEffect = addEffect;
	  }

	  function KeyframedValueProperty(elem, data, mult, container) {
	    this.propType = 'unidimensional';
	    this.keyframes = data.k;
	    this.keyframesMetadata = [];
	    this.offsetTime = elem.data.st;
	    this.frameId = -1;
	    this._caching = {
	      lastFrame: initFrame,
	      lastIndex: 0,
	      value: 0,
	      _lastKeyframeIndex: -1
	    };
	    this.k = true;
	    this.kf = true;
	    this.data = data;
	    this.mult = mult || 1;
	    this.elem = elem;
	    this.container = container;
	    this.comp = elem.comp;
	    this.v = initFrame;
	    this.pv = initFrame;
	    this._isFirstFrame = true;
	    this.getValue = processEffectsSequence;
	    this.setVValue = setVValue;
	    this.interpolateValue = interpolateValue;
	    this.effectsSequence = [getValueAtCurrentTime.bind(this)];
	    this.addEffect = addEffect;
	  }

	  function KeyframedMultidimensionalProperty(elem, data, mult, container) {
	    this.propType = 'multidimensional';
	    var i;
	    var len = data.k.length;
	    var s;
	    var e;
	    var to;
	    var ti;

	    for (i = 0; i < len - 1; i += 1) {
	      if (data.k[i].to && data.k[i].s && data.k[i + 1] && data.k[i + 1].s) {
	        s = data.k[i].s;
	        e = data.k[i + 1].s;
	        to = data.k[i].to;
	        ti = data.k[i].ti;

	        if (s.length === 2 && !(s[0] === e[0] && s[1] === e[1]) && bez.pointOnLine2D(s[0], s[1], e[0], e[1], s[0] + to[0], s[1] + to[1]) && bez.pointOnLine2D(s[0], s[1], e[0], e[1], e[0] + ti[0], e[1] + ti[1]) || s.length === 3 && !(s[0] === e[0] && s[1] === e[1] && s[2] === e[2]) && bez.pointOnLine3D(s[0], s[1], s[2], e[0], e[1], e[2], s[0] + to[0], s[1] + to[1], s[2] + to[2]) && bez.pointOnLine3D(s[0], s[1], s[2], e[0], e[1], e[2], e[0] + ti[0], e[1] + ti[1], e[2] + ti[2])) {
	          data.k[i].to = null;
	          data.k[i].ti = null;
	        }

	        if (s[0] === e[0] && s[1] === e[1] && to[0] === 0 && to[1] === 0 && ti[0] === 0 && ti[1] === 0) {
	          if (s.length === 2 || s[2] === e[2] && to[2] === 0 && ti[2] === 0) {
	            data.k[i].to = null;
	            data.k[i].ti = null;
	          }
	        }
	      }
	    }

	    this.effectsSequence = [getValueAtCurrentTime.bind(this)];
	    this.data = data;
	    this.keyframes = data.k;
	    this.keyframesMetadata = [];
	    this.offsetTime = elem.data.st;
	    this.k = true;
	    this.kf = true;
	    this._isFirstFrame = true;
	    this.mult = mult || 1;
	    this.elem = elem;
	    this.container = container;
	    this.comp = elem.comp;
	    this.getValue = processEffectsSequence;
	    this.setVValue = setVValue;
	    this.interpolateValue = interpolateValue;
	    this.frameId = -1;
	    var arrLen = data.k[0].s.length;
	    this.v = createTypedArray('float32', arrLen);
	    this.pv = createTypedArray('float32', arrLen);

	    for (i = 0; i < arrLen; i += 1) {
	      this.v[i] = initFrame;
	      this.pv[i] = initFrame;
	    }

	    this._caching = {
	      lastFrame: initFrame,
	      lastIndex: 0,
	      value: createTypedArray('float32', arrLen)
	    };
	    this.addEffect = addEffect;
	  }

	  var PropertyFactory = function () {
	    function getProp(elem, data, type, mult, container) {
	      if (data.sid) {
	        data = elem.globalData.slotManager.getProp(data);
	      }

	      var p;

	      if (!data.k.length) {
	        p = new ValueProperty(elem, data, mult, container);
	      } else if (typeof data.k[0] === 'number') {
	        p = new MultiDimensionalProperty(elem, data, mult, container);
	      } else {
	        switch (type) {
	          case 0:
	            p = new KeyframedValueProperty(elem, data, mult, container);
	            break;

	          case 1:
	            p = new KeyframedMultidimensionalProperty(elem, data, mult, container);
	            break;
	        }
	      }

	      if (p.effectsSequence.length) {
	        container.addDynamicProperty(p);
	      }

	      return p;
	    }

	    var ob = {
	      getProp: getProp
	    };
	    return ob;
	  }();

	  function DynamicPropertyContainer() {}

	  DynamicPropertyContainer.prototype = {
	    addDynamicProperty: function addDynamicProperty(prop) {
	      if (this.dynamicProperties.indexOf(prop) === -1) {
	        this.dynamicProperties.push(prop);
	        this.container.addDynamicProperty(this);
	        this._isAnimated = true;
	      }
	    },
	    iterateDynamicProperties: function iterateDynamicProperties() {
	      this._mdf = false;
	      var i;
	      var len = this.dynamicProperties.length;

	      for (i = 0; i < len; i += 1) {
	        this.dynamicProperties[i].getValue();

	        if (this.dynamicProperties[i]._mdf) {
	          this._mdf = true;
	        }
	      }
	    },
	    initDynamicPropertyContainer: function initDynamicPropertyContainer(container) {
	      this.container = container;
	      this.dynamicProperties = [];
	      this._mdf = false;
	      this._isAnimated = false;
	    }
	  };

	  var pointPool = function () {
	    function create() {
	      return createTypedArray('float32', 2);
	    }

	    return poolFactory(8, create);
	  }();

	  function ShapePath() {
	    this.c = false;
	    this._length = 0;
	    this._maxLength = 8;
	    this.v = createSizedArray(this._maxLength);
	    this.o = createSizedArray(this._maxLength);
	    this.i = createSizedArray(this._maxLength);
	  }

	  ShapePath.prototype.setPathData = function (closed, len) {
	    this.c = closed;
	    this.setLength(len);
	    var i = 0;

	    while (i < len) {
	      this.v[i] = pointPool.newElement();
	      this.o[i] = pointPool.newElement();
	      this.i[i] = pointPool.newElement();
	      i += 1;
	    }
	  };

	  ShapePath.prototype.setLength = function (len) {
	    while (this._maxLength < len) {
	      this.doubleArrayLength();
	    }

	    this._length = len;
	  };

	  ShapePath.prototype.doubleArrayLength = function () {
	    this.v = this.v.concat(createSizedArray(this._maxLength));
	    this.i = this.i.concat(createSizedArray(this._maxLength));
	    this.o = this.o.concat(createSizedArray(this._maxLength));
	    this._maxLength *= 2;
	  };

	  ShapePath.prototype.setXYAt = function (x, y, type, pos, replace) {
	    var arr;
	    this._length = Math.max(this._length, pos + 1);

	    if (this._length >= this._maxLength) {
	      this.doubleArrayLength();
	    }

	    switch (type) {
	      case 'v':
	        arr = this.v;
	        break;

	      case 'i':
	        arr = this.i;
	        break;

	      case 'o':
	        arr = this.o;
	        break;

	      default:
	        arr = [];
	        break;
	    }

	    if (!arr[pos] || arr[pos] && !replace) {
	      arr[pos] = pointPool.newElement();
	    }

	    arr[pos][0] = x;
	    arr[pos][1] = y;
	  };

	  ShapePath.prototype.setTripleAt = function (vX, vY, oX, oY, iX, iY, pos, replace) {
	    this.setXYAt(vX, vY, 'v', pos, replace);
	    this.setXYAt(oX, oY, 'o', pos, replace);
	    this.setXYAt(iX, iY, 'i', pos, replace);
	  };

	  ShapePath.prototype.reverse = function () {
	    var newPath = new ShapePath();
	    newPath.setPathData(this.c, this._length);
	    var vertices = this.v;
	    var outPoints = this.o;
	    var inPoints = this.i;
	    var init = 0;

	    if (this.c) {
	      newPath.setTripleAt(vertices[0][0], vertices[0][1], inPoints[0][0], inPoints[0][1], outPoints[0][0], outPoints[0][1], 0, false);
	      init = 1;
	    }

	    var cnt = this._length - 1;
	    var len = this._length;
	    var i;

	    for (i = init; i < len; i += 1) {
	      newPath.setTripleAt(vertices[cnt][0], vertices[cnt][1], inPoints[cnt][0], inPoints[cnt][1], outPoints[cnt][0], outPoints[cnt][1], i, false);
	      cnt -= 1;
	    }

	    return newPath;
	  };

	  ShapePath.prototype.length = function () {
	    return this._length;
	  };

	  var shapePool = function () {
	    function create() {
	      return new ShapePath();
	    }

	    function release(shapePath) {
	      var len = shapePath._length;
	      var i;

	      for (i = 0; i < len; i += 1) {
	        pointPool.release(shapePath.v[i]);
	        pointPool.release(shapePath.i[i]);
	        pointPool.release(shapePath.o[i]);
	        shapePath.v[i] = null;
	        shapePath.i[i] = null;
	        shapePath.o[i] = null;
	      }

	      shapePath._length = 0;
	      shapePath.c = false;
	    }

	    function clone(shape) {
	      var cloned = factory.newElement();
	      var i;
	      var len = shape._length === undefined ? shape.v.length : shape._length;
	      cloned.setLength(len);
	      cloned.c = shape.c;

	      for (i = 0; i < len; i += 1) {
	        cloned.setTripleAt(shape.v[i][0], shape.v[i][1], shape.o[i][0], shape.o[i][1], shape.i[i][0], shape.i[i][1], i);
	      }

	      return cloned;
	    }

	    var factory = poolFactory(4, create, release);
	    factory.clone = clone;
	    return factory;
	  }();

	  function ShapeCollection() {
	    this._length = 0;
	    this._maxLength = 4;
	    this.shapes = createSizedArray(this._maxLength);
	  }

	  ShapeCollection.prototype.addShape = function (shapeData) {
	    if (this._length === this._maxLength) {
	      this.shapes = this.shapes.concat(createSizedArray(this._maxLength));
	      this._maxLength *= 2;
	    }

	    this.shapes[this._length] = shapeData;
	    this._length += 1;
	  };

	  ShapeCollection.prototype.releaseShapes = function () {
	    var i;

	    for (i = 0; i < this._length; i += 1) {
	      shapePool.release(this.shapes[i]);
	    }

	    this._length = 0;
	  };

	  var shapeCollectionPool = function () {
	    var ob = {
	      newShapeCollection: newShapeCollection,
	      release: release
	    };
	    var _length = 0;
	    var _maxLength = 4;
	    var pool = createSizedArray(_maxLength);

	    function newShapeCollection() {
	      var shapeCollection;

	      if (_length) {
	        _length -= 1;
	        shapeCollection = pool[_length];
	      } else {
	        shapeCollection = new ShapeCollection();
	      }

	      return shapeCollection;
	    }

	    function release(shapeCollection) {
	      var i;
	      var len = shapeCollection._length;

	      for (i = 0; i < len; i += 1) {
	        shapePool.release(shapeCollection.shapes[i]);
	      }

	      shapeCollection._length = 0;

	      if (_length === _maxLength) {
	        pool = pooling["double"](pool);
	        _maxLength *= 2;
	      }

	      pool[_length] = shapeCollection;
	      _length += 1;
	    }

	    return ob;
	  }();

	  var ShapePropertyFactory = function () {
	    var initFrame = -999999;

	    function interpolateShape(frameNum, previousValue, caching) {
	      var iterationIndex = caching.lastIndex;
	      var keyPropS;
	      var keyPropE;
	      var isHold;
	      var j;
	      var k;
	      var jLen;
	      var kLen;
	      var perc;
	      var vertexValue;
	      var kf = this.keyframes;

	      if (frameNum < kf[0].t - this.offsetTime) {
	        keyPropS = kf[0].s[0];
	        isHold = true;
	        iterationIndex = 0;
	      } else if (frameNum >= kf[kf.length - 1].t - this.offsetTime) {
	        keyPropS = kf[kf.length - 1].s ? kf[kf.length - 1].s[0] : kf[kf.length - 2].e[0];
	        /* if(kf[kf.length - 1].s){
	                  keyPropS = kf[kf.length - 1].s[0];
	              }else{
	                  keyPropS = kf[kf.length - 2].e[0];
	              } */

	        isHold = true;
	      } else {
	        var i = iterationIndex;
	        var len = kf.length - 1;
	        var flag = true;
	        var keyData;
	        var nextKeyData;
	        var keyframeMetadata;

	        while (flag) {
	          keyData = kf[i];
	          nextKeyData = kf[i + 1];

	          if (nextKeyData.t - this.offsetTime > frameNum) {
	            break;
	          }

	          if (i < len - 1) {
	            i += 1;
	          } else {
	            flag = false;
	          }
	        }

	        keyframeMetadata = this.keyframesMetadata[i] || {};
	        isHold = keyData.h === 1;
	        iterationIndex = i;

	        if (!isHold) {
	          if (frameNum >= nextKeyData.t - this.offsetTime) {
	            perc = 1;
	          } else if (frameNum < keyData.t - this.offsetTime) {
	            perc = 0;
	          } else {
	            var fnc;

	            if (keyframeMetadata.__fnct) {
	              fnc = keyframeMetadata.__fnct;
	            } else {
	              fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y).get;
	              keyframeMetadata.__fnct = fnc;
	            }

	            perc = fnc((frameNum - (keyData.t - this.offsetTime)) / (nextKeyData.t - this.offsetTime - (keyData.t - this.offsetTime)));
	          }

	          keyPropE = nextKeyData.s ? nextKeyData.s[0] : keyData.e[0];
	        }

	        keyPropS = keyData.s[0];
	      }

	      jLen = previousValue._length;
	      kLen = keyPropS.i[0].length;
	      caching.lastIndex = iterationIndex;

	      for (j = 0; j < jLen; j += 1) {
	        for (k = 0; k < kLen; k += 1) {
	          vertexValue = isHold ? keyPropS.i[j][k] : keyPropS.i[j][k] + (keyPropE.i[j][k] - keyPropS.i[j][k]) * perc;
	          previousValue.i[j][k] = vertexValue;
	          vertexValue = isHold ? keyPropS.o[j][k] : keyPropS.o[j][k] + (keyPropE.o[j][k] - keyPropS.o[j][k]) * perc;
	          previousValue.o[j][k] = vertexValue;
	          vertexValue = isHold ? keyPropS.v[j][k] : keyPropS.v[j][k] + (keyPropE.v[j][k] - keyPropS.v[j][k]) * perc;
	          previousValue.v[j][k] = vertexValue;
	        }
	      }
	    }

	    function interpolateShapeCurrentTime() {
	      var frameNum = this.comp.renderedFrame - this.offsetTime;
	      var initTime = this.keyframes[0].t - this.offsetTime;
	      var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
	      var lastFrame = this._caching.lastFrame;

	      if (!(lastFrame !== initFrame && (lastFrame < initTime && frameNum < initTime || lastFrame > endTime && frameNum > endTime))) {
	        /// /
	        this._caching.lastIndex = lastFrame < frameNum ? this._caching.lastIndex : 0;
	        this.interpolateShape(frameNum, this.pv, this._caching); /// /
	      }

	      this._caching.lastFrame = frameNum;
	      return this.pv;
	    }

	    function resetShape() {
	      this.paths = this.localShapeCollection;
	    }

	    function shapesEqual(shape1, shape2) {
	      if (shape1._length !== shape2._length || shape1.c !== shape2.c) {
	        return false;
	      }

	      var i;
	      var len = shape1._length;

	      for (i = 0; i < len; i += 1) {
	        if (shape1.v[i][0] !== shape2.v[i][0] || shape1.v[i][1] !== shape2.v[i][1] || shape1.o[i][0] !== shape2.o[i][0] || shape1.o[i][1] !== shape2.o[i][1] || shape1.i[i][0] !== shape2.i[i][0] || shape1.i[i][1] !== shape2.i[i][1]) {
	          return false;
	        }
	      }

	      return true;
	    }

	    function setVValue(newPath) {
	      if (!shapesEqual(this.v, newPath)) {
	        this.v = shapePool.clone(newPath);
	        this.localShapeCollection.releaseShapes();
	        this.localShapeCollection.addShape(this.v);
	        this._mdf = true;
	        this.paths = this.localShapeCollection;
	      }
	    }

	    function processEffectsSequence() {
	      if (this.elem.globalData.frameId === this.frameId) {
	        return;
	      }

	      if (!this.effectsSequence.length) {
	        this._mdf = false;
	        return;
	      }

	      if (this.lock) {
	        this.setVValue(this.pv);
	        return;
	      }

	      this.lock = true;
	      this._mdf = false;
	      var finalValue;

	      if (this.kf) {
	        finalValue = this.pv;
	      } else if (this.data.ks) {
	        finalValue = this.data.ks.k;
	      } else {
	        finalValue = this.data.pt.k;
	      }

	      var i;
	      var len = this.effectsSequence.length;

	      for (i = 0; i < len; i += 1) {
	        finalValue = this.effectsSequence[i](finalValue);
	      }

	      this.setVValue(finalValue);
	      this.lock = false;
	      this.frameId = this.elem.globalData.frameId;
	    }

	    function ShapeProperty(elem, data, type) {
	      this.propType = 'shape';
	      this.comp = elem.comp;
	      this.container = elem;
	      this.elem = elem;
	      this.data = data;
	      this.k = false;
	      this.kf = false;
	      this._mdf = false;
	      var pathData = type === 3 ? data.pt.k : data.ks.k;
	      this.v = shapePool.clone(pathData);
	      this.pv = shapePool.clone(this.v);
	      this.localShapeCollection = shapeCollectionPool.newShapeCollection();
	      this.paths = this.localShapeCollection;
	      this.paths.addShape(this.v);
	      this.reset = resetShape;
	      this.effectsSequence = [];
	    }

	    function addEffect(effectFunction) {
	      this.effectsSequence.push(effectFunction);
	      this.container.addDynamicProperty(this);
	    }

	    ShapeProperty.prototype.interpolateShape = interpolateShape;
	    ShapeProperty.prototype.getValue = processEffectsSequence;
	    ShapeProperty.prototype.setVValue = setVValue;
	    ShapeProperty.prototype.addEffect = addEffect;

	    function KeyframedShapeProperty(elem, data, type) {
	      this.propType = 'shape';
	      this.comp = elem.comp;
	      this.elem = elem;
	      this.container = elem;
	      this.offsetTime = elem.data.st;
	      this.keyframes = type === 3 ? data.pt.k : data.ks.k;
	      this.keyframesMetadata = [];
	      this.k = true;
	      this.kf = true;
	      var len = this.keyframes[0].s[0].i.length;
	      this.v = shapePool.newElement();
	      this.v.setPathData(this.keyframes[0].s[0].c, len);
	      this.pv = shapePool.clone(this.v);
	      this.localShapeCollection = shapeCollectionPool.newShapeCollection();
	      this.paths = this.localShapeCollection;
	      this.paths.addShape(this.v);
	      this.lastFrame = initFrame;
	      this.reset = resetShape;
	      this._caching = {
	        lastFrame: initFrame,
	        lastIndex: 0
	      };
	      this.effectsSequence = [interpolateShapeCurrentTime.bind(this)];
	    }

	    KeyframedShapeProperty.prototype.getValue = processEffectsSequence;
	    KeyframedShapeProperty.prototype.interpolateShape = interpolateShape;
	    KeyframedShapeProperty.prototype.setVValue = setVValue;
	    KeyframedShapeProperty.prototype.addEffect = addEffect;

	    var EllShapeProperty = function () {
	      var cPoint = roundCorner;

	      function EllShapePropertyFactory(elem, data) {
	        this.v = shapePool.newElement();
	        this.v.setPathData(true, 4);
	        this.localShapeCollection = shapeCollectionPool.newShapeCollection();
	        this.paths = this.localShapeCollection;
	        this.localShapeCollection.addShape(this.v);
	        this.d = data.d;
	        this.elem = elem;
	        this.comp = elem.comp;
	        this.frameId = -1;
	        this.initDynamicPropertyContainer(elem);
	        this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);
	        this.s = PropertyFactory.getProp(elem, data.s, 1, 0, this);

	        if (this.dynamicProperties.length) {
	          this.k = true;
	        } else {
	          this.k = false;
	          this.convertEllToPath();
	        }
	      }

	      EllShapePropertyFactory.prototype = {
	        reset: resetShape,
	        getValue: function getValue() {
	          if (this.elem.globalData.frameId === this.frameId) {
	            return;
	          }

	          this.frameId = this.elem.globalData.frameId;
	          this.iterateDynamicProperties();

	          if (this._mdf) {
	            this.convertEllToPath();
	          }
	        },
	        convertEllToPath: function convertEllToPath() {
	          var p0 = this.p.v[0];
	          var p1 = this.p.v[1];
	          var s0 = this.s.v[0] / 2;
	          var s1 = this.s.v[1] / 2;

	          var _cw = this.d !== 3;

	          var _v = this.v;
	          _v.v[0][0] = p0;
	          _v.v[0][1] = p1 - s1;
	          _v.v[1][0] = _cw ? p0 + s0 : p0 - s0;
	          _v.v[1][1] = p1;
	          _v.v[2][0] = p0;
	          _v.v[2][1] = p1 + s1;
	          _v.v[3][0] = _cw ? p0 - s0 : p0 + s0;
	          _v.v[3][1] = p1;
	          _v.i[0][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
	          _v.i[0][1] = p1 - s1;
	          _v.i[1][0] = _cw ? p0 + s0 : p0 - s0;
	          _v.i[1][1] = p1 - s1 * cPoint;
	          _v.i[2][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
	          _v.i[2][1] = p1 + s1;
	          _v.i[3][0] = _cw ? p0 - s0 : p0 + s0;
	          _v.i[3][1] = p1 + s1 * cPoint;
	          _v.o[0][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
	          _v.o[0][1] = p1 - s1;
	          _v.o[1][0] = _cw ? p0 + s0 : p0 - s0;
	          _v.o[1][1] = p1 + s1 * cPoint;
	          _v.o[2][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
	          _v.o[2][1] = p1 + s1;
	          _v.o[3][0] = _cw ? p0 - s0 : p0 + s0;
	          _v.o[3][1] = p1 - s1 * cPoint;
	        }
	      };
	      extendPrototype([DynamicPropertyContainer], EllShapePropertyFactory);
	      return EllShapePropertyFactory;
	    }();

	    var StarShapeProperty = function () {
	      function StarShapePropertyFactory(elem, data) {
	        this.v = shapePool.newElement();
	        this.v.setPathData(true, 0);
	        this.elem = elem;
	        this.comp = elem.comp;
	        this.data = data;
	        this.frameId = -1;
	        this.d = data.d;
	        this.initDynamicPropertyContainer(elem);

	        if (data.sy === 1) {
	          this.ir = PropertyFactory.getProp(elem, data.ir, 0, 0, this);
	          this.is = PropertyFactory.getProp(elem, data.is, 0, 0.01, this);
	          this.convertToPath = this.convertStarToPath;
	        } else {
	          this.convertToPath = this.convertPolygonToPath;
	        }

	        this.pt = PropertyFactory.getProp(elem, data.pt, 0, 0, this);
	        this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);
	        this.r = PropertyFactory.getProp(elem, data.r, 0, degToRads, this);
	        this.or = PropertyFactory.getProp(elem, data.or, 0, 0, this);
	        this.os = PropertyFactory.getProp(elem, data.os, 0, 0.01, this);
	        this.localShapeCollection = shapeCollectionPool.newShapeCollection();
	        this.localShapeCollection.addShape(this.v);
	        this.paths = this.localShapeCollection;

	        if (this.dynamicProperties.length) {
	          this.k = true;
	        } else {
	          this.k = false;
	          this.convertToPath();
	        }
	      }

	      StarShapePropertyFactory.prototype = {
	        reset: resetShape,
	        getValue: function getValue() {
	          if (this.elem.globalData.frameId === this.frameId) {
	            return;
	          }

	          this.frameId = this.elem.globalData.frameId;
	          this.iterateDynamicProperties();

	          if (this._mdf) {
	            this.convertToPath();
	          }
	        },
	        convertStarToPath: function convertStarToPath() {
	          var numPts = Math.floor(this.pt.v) * 2;
	          var angle = Math.PI * 2 / numPts;
	          /* this.v.v.length = numPts;
	                  this.v.i.length = numPts;
	                  this.v.o.length = numPts; */

	          var longFlag = true;
	          var longRad = this.or.v;
	          var shortRad = this.ir.v;
	          var longRound = this.os.v;
	          var shortRound = this.is.v;
	          var longPerimSegment = 2 * Math.PI * longRad / (numPts * 2);
	          var shortPerimSegment = 2 * Math.PI * shortRad / (numPts * 2);
	          var i;
	          var rad;
	          var roundness;
	          var perimSegment;
	          var currentAng = -Math.PI / 2;
	          currentAng += this.r.v;
	          var dir = this.data.d === 3 ? -1 : 1;
	          this.v._length = 0;

	          for (i = 0; i < numPts; i += 1) {
	            rad = longFlag ? longRad : shortRad;
	            roundness = longFlag ? longRound : shortRound;
	            perimSegment = longFlag ? longPerimSegment : shortPerimSegment;
	            var x = rad * Math.cos(currentAng);
	            var y = rad * Math.sin(currentAng);
	            var ox = x === 0 && y === 0 ? 0 : y / Math.sqrt(x * x + y * y);
	            var oy = x === 0 && y === 0 ? 0 : -x / Math.sqrt(x * x + y * y);
	            x += +this.p.v[0];
	            y += +this.p.v[1];
	            this.v.setTripleAt(x, y, x - ox * perimSegment * roundness * dir, y - oy * perimSegment * roundness * dir, x + ox * perimSegment * roundness * dir, y + oy * perimSegment * roundness * dir, i, true);
	            /* this.v.v[i] = [x,y];
	                      this.v.i[i] = [x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir];
	                      this.v.o[i] = [x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir];
	                      this.v._length = numPts; */

	            longFlag = !longFlag;
	            currentAng += angle * dir;
	          }
	        },
	        convertPolygonToPath: function convertPolygonToPath() {
	          var numPts = Math.floor(this.pt.v);
	          var angle = Math.PI * 2 / numPts;
	          var rad = this.or.v;
	          var roundness = this.os.v;
	          var perimSegment = 2 * Math.PI * rad / (numPts * 4);
	          var i;
	          var currentAng = -Math.PI * 0.5;
	          var dir = this.data.d === 3 ? -1 : 1;
	          currentAng += this.r.v;
	          this.v._length = 0;

	          for (i = 0; i < numPts; i += 1) {
	            var x = rad * Math.cos(currentAng);
	            var y = rad * Math.sin(currentAng);
	            var ox = x === 0 && y === 0 ? 0 : y / Math.sqrt(x * x + y * y);
	            var oy = x === 0 && y === 0 ? 0 : -x / Math.sqrt(x * x + y * y);
	            x += +this.p.v[0];
	            y += +this.p.v[1];
	            this.v.setTripleAt(x, y, x - ox * perimSegment * roundness * dir, y - oy * perimSegment * roundness * dir, x + ox * perimSegment * roundness * dir, y + oy * perimSegment * roundness * dir, i, true);
	            currentAng += angle * dir;
	          }

	          this.paths.length = 0;
	          this.paths[0] = this.v;
	        }
	      };
	      extendPrototype([DynamicPropertyContainer], StarShapePropertyFactory);
	      return StarShapePropertyFactory;
	    }();

	    var RectShapeProperty = function () {
	      function RectShapePropertyFactory(elem, data) {
	        this.v = shapePool.newElement();
	        this.v.c = true;
	        this.localShapeCollection = shapeCollectionPool.newShapeCollection();
	        this.localShapeCollection.addShape(this.v);
	        this.paths = this.localShapeCollection;
	        this.elem = elem;
	        this.comp = elem.comp;
	        this.frameId = -1;
	        this.d = data.d;
	        this.initDynamicPropertyContainer(elem);
	        this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);
	        this.s = PropertyFactory.getProp(elem, data.s, 1, 0, this);
	        this.r = PropertyFactory.getProp(elem, data.r, 0, 0, this);

	        if (this.dynamicProperties.length) {
	          this.k = true;
	        } else {
	          this.k = false;
	          this.convertRectToPath();
	        }
	      }

	      RectShapePropertyFactory.prototype = {
	        convertRectToPath: function convertRectToPath() {
	          var p0 = this.p.v[0];
	          var p1 = this.p.v[1];
	          var v0 = this.s.v[0] / 2;
	          var v1 = this.s.v[1] / 2;
	          var round = bmMin(v0, v1, this.r.v);
	          var cPoint = round * (1 - roundCorner);
	          this.v._length = 0;

	          if (this.d === 2 || this.d === 1) {
	            this.v.setTripleAt(p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + cPoint, 0, true);
	            this.v.setTripleAt(p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - cPoint, p0 + v0, p1 + v1 - round, 1, true);

	            if (round !== 0) {
	              this.v.setTripleAt(p0 + v0 - round, p1 + v1, p0 + v0 - round, p1 + v1, p0 + v0 - cPoint, p1 + v1, 2, true);
	              this.v.setTripleAt(p0 - v0 + round, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0 + round, p1 + v1, 3, true);
	              this.v.setTripleAt(p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - cPoint, 4, true);
	              this.v.setTripleAt(p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1 + round, 5, true);
	              this.v.setTripleAt(p0 - v0 + round, p1 - v1, p0 - v0 + round, p1 - v1, p0 - v0 + cPoint, p1 - v1, 6, true);
	              this.v.setTripleAt(p0 + v0 - round, p1 - v1, p0 + v0 - cPoint, p1 - v1, p0 + v0 - round, p1 - v1, 7, true);
	            } else {
	              this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0, p1 + v1, 2);
	              this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1, 3);
	            }
	          } else {
	            this.v.setTripleAt(p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + cPoint, p0 + v0, p1 - v1 + round, 0, true);

	            if (round !== 0) {
	              this.v.setTripleAt(p0 + v0 - round, p1 - v1, p0 + v0 - round, p1 - v1, p0 + v0 - cPoint, p1 - v1, 1, true);
	              this.v.setTripleAt(p0 - v0 + round, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0 + round, p1 - v1, 2, true);
	              this.v.setTripleAt(p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + cPoint, 3, true);
	              this.v.setTripleAt(p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1 - round, 4, true);
	              this.v.setTripleAt(p0 - v0 + round, p1 + v1, p0 - v0 + round, p1 + v1, p0 - v0 + cPoint, p1 + v1, 5, true);
	              this.v.setTripleAt(p0 + v0 - round, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0 - round, p1 + v1, 6, true);
	              this.v.setTripleAt(p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - cPoint, 7, true);
	            } else {
	              this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0, p1 - v1, 1, true);
	              this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1, 2, true);
	              this.v.setTripleAt(p0 + v0, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0, p1 + v1, 3, true);
	            }
	          }
	        },
	        getValue: function getValue() {
	          if (this.elem.globalData.frameId === this.frameId) {
	            return;
	          }

	          this.frameId = this.elem.globalData.frameId;
	          this.iterateDynamicProperties();

	          if (this._mdf) {
	            this.convertRectToPath();
	          }
	        },
	        reset: resetShape
	      };
	      extendPrototype([DynamicPropertyContainer], RectShapePropertyFactory);
	      return RectShapePropertyFactory;
	    }();

	    function getShapeProp(elem, data, type) {
	      var prop;

	      if (type === 3 || type === 4) {
	        var dataProp = type === 3 ? data.pt : data.ks;
	        var keys = dataProp.k;

	        if (keys.length) {
	          prop = new KeyframedShapeProperty(elem, data, type);
	        } else {
	          prop = new ShapeProperty(elem, data, type);
	        }
	      } else if (type === 5) {
	        prop = new RectShapeProperty(elem, data);
	      } else if (type === 6) {
	        prop = new EllShapeProperty(elem, data);
	      } else if (type === 7) {
	        prop = new StarShapeProperty(elem, data);
	      }

	      if (prop.k) {
	        elem.addDynamicProperty(prop);
	      }

	      return prop;
	    }

	    function getConstructorFunction() {
	      return ShapeProperty;
	    }

	    function getKeyframedConstructorFunction() {
	      return KeyframedShapeProperty;
	    }

	    var ob = {};
	    ob.getShapeProp = getShapeProp;
	    ob.getConstructorFunction = getConstructorFunction;
	    ob.getKeyframedConstructorFunction = getKeyframedConstructorFunction;
	    return ob;
	  }();

	  /*!
	   Transformation Matrix v2.0
	   (c) Epistemex 2014-2015
	   www.epistemex.com
	   By Ken Fyrstenberg
	   Contributions by leeoniya.
	   License: MIT, header required.
	   */

	  /**
	   * 2D transformation matrix object initialized with identity matrix.
	   *
	   * The matrix can synchronize a canvas context by supplying the context
	   * as an argument, or later apply current absolute transform to an
	   * existing context.
	   *
	   * All values are handled as floating point values.
	   *
	   * @param {CanvasRenderingContext2D} [context] - Optional context to sync with Matrix
	   * @prop {number} a - scale x
	   * @prop {number} b - shear y
	   * @prop {number} c - shear x
	   * @prop {number} d - scale y
	   * @prop {number} e - translate x
	   * @prop {number} f - translate y
	   * @prop {CanvasRenderingContext2D|null} [context=null] - set or get current canvas context
	   * @constructor
	   */

	  var Matrix = function () {
	    var _cos = Math.cos;
	    var _sin = Math.sin;
	    var _tan = Math.tan;
	    var _rnd = Math.round;

	    function reset() {
	      this.props[0] = 1;
	      this.props[1] = 0;
	      this.props[2] = 0;
	      this.props[3] = 0;
	      this.props[4] = 0;
	      this.props[5] = 1;
	      this.props[6] = 0;
	      this.props[7] = 0;
	      this.props[8] = 0;
	      this.props[9] = 0;
	      this.props[10] = 1;
	      this.props[11] = 0;
	      this.props[12] = 0;
	      this.props[13] = 0;
	      this.props[14] = 0;
	      this.props[15] = 1;
	      return this;
	    }

	    function rotate(angle) {
	      if (angle === 0) {
	        return this;
	      }

	      var mCos = _cos(angle);

	      var mSin = _sin(angle);

	      return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
	    }

	    function rotateX(angle) {
	      if (angle === 0) {
	        return this;
	      }

	      var mCos = _cos(angle);

	      var mSin = _sin(angle);

	      return this._t(1, 0, 0, 0, 0, mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1);
	    }

	    function rotateY(angle) {
	      if (angle === 0) {
	        return this;
	      }

	      var mCos = _cos(angle);

	      var mSin = _sin(angle);

	      return this._t(mCos, 0, mSin, 0, 0, 1, 0, 0, -mSin, 0, mCos, 0, 0, 0, 0, 1);
	    }

	    function rotateZ(angle) {
	      if (angle === 0) {
	        return this;
	      }

	      var mCos = _cos(angle);

	      var mSin = _sin(angle);

	      return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
	    }

	    function shear(sx, sy) {
	      return this._t(1, sy, sx, 1, 0, 0);
	    }

	    function skew(ax, ay) {
	      return this.shear(_tan(ax), _tan(ay));
	    }

	    function skewFromAxis(ax, angle) {
	      var mCos = _cos(angle);

	      var mSin = _sin(angle);

	      return this._t(mCos, mSin, 0, 0, -mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(1, 0, 0, 0, _tan(ax), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); // return this._t(mCos, mSin, -mSin, mCos, 0, 0)._t(1, 0, _tan(ax), 1, 0, 0)._t(mCos, -mSin, mSin, mCos, 0, 0);
	    }

	    function scale(sx, sy, sz) {
	      if (!sz && sz !== 0) {
	        sz = 1;
	      }

	      if (sx === 1 && sy === 1 && sz === 1) {
	        return this;
	      }

	      return this._t(sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1);
	    }

	    function setTransform(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
	      this.props[0] = a;
	      this.props[1] = b;
	      this.props[2] = c;
	      this.props[3] = d;
	      this.props[4] = e;
	      this.props[5] = f;
	      this.props[6] = g;
	      this.props[7] = h;
	      this.props[8] = i;
	      this.props[9] = j;
	      this.props[10] = k;
	      this.props[11] = l;
	      this.props[12] = m;
	      this.props[13] = n;
	      this.props[14] = o;
	      this.props[15] = p;
	      return this;
	    }

	    function translate(tx, ty, tz) {
	      tz = tz || 0;

	      if (tx !== 0 || ty !== 0 || tz !== 0) {
	        return this._t(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1);
	      }

	      return this;
	    }

	    function transform(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2) {
	      var _p = this.props;

	      if (a2 === 1 && b2 === 0 && c2 === 0 && d2 === 0 && e2 === 0 && f2 === 1 && g2 === 0 && h2 === 0 && i2 === 0 && j2 === 0 && k2 === 1 && l2 === 0) {
	        // NOTE: commenting this condition because TurboFan deoptimizes code when present
	        // if(m2 !== 0 || n2 !== 0 || o2 !== 0){
	        _p[12] = _p[12] * a2 + _p[15] * m2;
	        _p[13] = _p[13] * f2 + _p[15] * n2;
	        _p[14] = _p[14] * k2 + _p[15] * o2;
	        _p[15] *= p2; // }

	        this._identityCalculated = false;
	        return this;
	      }

	      var a1 = _p[0];
	      var b1 = _p[1];
	      var c1 = _p[2];
	      var d1 = _p[3];
	      var e1 = _p[4];
	      var f1 = _p[5];
	      var g1 = _p[6];
	      var h1 = _p[7];
	      var i1 = _p[8];
	      var j1 = _p[9];
	      var k1 = _p[10];
	      var l1 = _p[11];
	      var m1 = _p[12];
	      var n1 = _p[13];
	      var o1 = _p[14];
	      var p1 = _p[15];
	      /* matrix order (canvas compatible):
	           * ace
	           * bdf
	           * 001
	           */

	      _p[0] = a1 * a2 + b1 * e2 + c1 * i2 + d1 * m2;
	      _p[1] = a1 * b2 + b1 * f2 + c1 * j2 + d1 * n2;
	      _p[2] = a1 * c2 + b1 * g2 + c1 * k2 + d1 * o2;
	      _p[3] = a1 * d2 + b1 * h2 + c1 * l2 + d1 * p2;
	      _p[4] = e1 * a2 + f1 * e2 + g1 * i2 + h1 * m2;
	      _p[5] = e1 * b2 + f1 * f2 + g1 * j2 + h1 * n2;
	      _p[6] = e1 * c2 + f1 * g2 + g1 * k2 + h1 * o2;
	      _p[7] = e1 * d2 + f1 * h2 + g1 * l2 + h1 * p2;
	      _p[8] = i1 * a2 + j1 * e2 + k1 * i2 + l1 * m2;
	      _p[9] = i1 * b2 + j1 * f2 + k1 * j2 + l1 * n2;
	      _p[10] = i1 * c2 + j1 * g2 + k1 * k2 + l1 * o2;
	      _p[11] = i1 * d2 + j1 * h2 + k1 * l2 + l1 * p2;
	      _p[12] = m1 * a2 + n1 * e2 + o1 * i2 + p1 * m2;
	      _p[13] = m1 * b2 + n1 * f2 + o1 * j2 + p1 * n2;
	      _p[14] = m1 * c2 + n1 * g2 + o1 * k2 + p1 * o2;
	      _p[15] = m1 * d2 + n1 * h2 + o1 * l2 + p1 * p2;
	      this._identityCalculated = false;
	      return this;
	    }

	    function multiply(matrix) {
	      var matrixProps = matrix.props;
	      return this.transform(matrixProps[0], matrixProps[1], matrixProps[2], matrixProps[3], matrixProps[4], matrixProps[5], matrixProps[6], matrixProps[7], matrixProps[8], matrixProps[9], matrixProps[10], matrixProps[11], matrixProps[12], matrixProps[13], matrixProps[14], matrixProps[15]);
	    }

	    function isIdentity() {
	      if (!this._identityCalculated) {
	        this._identity = !(this.props[0] !== 1 || this.props[1] !== 0 || this.props[2] !== 0 || this.props[3] !== 0 || this.props[4] !== 0 || this.props[5] !== 1 || this.props[6] !== 0 || this.props[7] !== 0 || this.props[8] !== 0 || this.props[9] !== 0 || this.props[10] !== 1 || this.props[11] !== 0 || this.props[12] !== 0 || this.props[13] !== 0 || this.props[14] !== 0 || this.props[15] !== 1);
	        this._identityCalculated = true;
	      }

	      return this._identity;
	    }

	    function equals(matr) {
	      var i = 0;

	      while (i < 16) {
	        if (matr.props[i] !== this.props[i]) {
	          return false;
	        }

	        i += 1;
	      }

	      return true;
	    }

	    function clone(matr) {
	      var i;

	      for (i = 0; i < 16; i += 1) {
	        matr.props[i] = this.props[i];
	      }

	      return matr;
	    }

	    function cloneFromProps(props) {
	      var i;

	      for (i = 0; i < 16; i += 1) {
	        this.props[i] = props[i];
	      }
	    }

	    function applyToPoint(x, y, z) {
	      return {
	        x: x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12],
	        y: x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13],
	        z: x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]
	      };
	      /* return {
	           x: x * me.a + y * me.c + me.e,
	           y: x * me.b + y * me.d + me.f
	           }; */
	    }

	    function applyToX(x, y, z) {
	      return x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12];
	    }

	    function applyToY(x, y, z) {
	      return x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13];
	    }

	    function applyToZ(x, y, z) {
	      return x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14];
	    }

	    function getInverseMatrix() {
	      var determinant = this.props[0] * this.props[5] - this.props[1] * this.props[4];
	      var a = this.props[5] / determinant;
	      var b = -this.props[1] / determinant;
	      var c = -this.props[4] / determinant;
	      var d = this.props[0] / determinant;
	      var e = (this.props[4] * this.props[13] - this.props[5] * this.props[12]) / determinant;
	      var f = -(this.props[0] * this.props[13] - this.props[1] * this.props[12]) / determinant;
	      var inverseMatrix = new Matrix();
	      inverseMatrix.props[0] = a;
	      inverseMatrix.props[1] = b;
	      inverseMatrix.props[4] = c;
	      inverseMatrix.props[5] = d;
	      inverseMatrix.props[12] = e;
	      inverseMatrix.props[13] = f;
	      return inverseMatrix;
	    }

	    function inversePoint(pt) {
	      var inverseMatrix = this.getInverseMatrix();
	      return inverseMatrix.applyToPointArray(pt[0], pt[1], pt[2] || 0);
	    }

	    function inversePoints(pts) {
	      var i;
	      var len = pts.length;
	      var retPts = [];

	      for (i = 0; i < len; i += 1) {
	        retPts[i] = inversePoint(pts[i]);
	      }

	      return retPts;
	    }

	    function applyToTriplePoints(pt1, pt2, pt3) {
	      var arr = createTypedArray('float32', 6);

	      if (this.isIdentity()) {
	        arr[0] = pt1[0];
	        arr[1] = pt1[1];
	        arr[2] = pt2[0];
	        arr[3] = pt2[1];
	        arr[4] = pt3[0];
	        arr[5] = pt3[1];
	      } else {
	        var p0 = this.props[0];
	        var p1 = this.props[1];
	        var p4 = this.props[4];
	        var p5 = this.props[5];
	        var p12 = this.props[12];
	        var p13 = this.props[13];
	        arr[0] = pt1[0] * p0 + pt1[1] * p4 + p12;
	        arr[1] = pt1[0] * p1 + pt1[1] * p5 + p13;
	        arr[2] = pt2[0] * p0 + pt2[1] * p4 + p12;
	        arr[3] = pt2[0] * p1 + pt2[1] * p5 + p13;
	        arr[4] = pt3[0] * p0 + pt3[1] * p4 + p12;
	        arr[5] = pt3[0] * p1 + pt3[1] * p5 + p13;
	      }

	      return arr;
	    }

	    function applyToPointArray(x, y, z) {
	      var arr;

	      if (this.isIdentity()) {
	        arr = [x, y, z];
	      } else {
	        arr = [x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12], x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13], x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]];
	      }

	      return arr;
	    }

	    function applyToPointStringified(x, y) {
	      if (this.isIdentity()) {
	        return x + ',' + y;
	      }

	      var _p = this.props;
	      return Math.round((x * _p[0] + y * _p[4] + _p[12]) * 100) / 100 + ',' + Math.round((x * _p[1] + y * _p[5] + _p[13]) * 100) / 100;
	    }

	    function toCSS() {
	      // Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.

	      /* if(this.isIdentity()) {
	              return '';
	          } */
	      var i = 0;
	      var props = this.props;
	      var cssValue = 'matrix3d(';
	      var v = 10000;

	      while (i < 16) {
	        cssValue += _rnd(props[i] * v) / v;
	        cssValue += i === 15 ? ')' : ',';
	        i += 1;
	      }

	      return cssValue;
	    }

	    function roundMatrixProperty(val) {
	      var v = 10000;

	      if (val < 0.000001 && val > 0 || val > -0.000001 && val < 0) {
	        return _rnd(val * v) / v;
	      }

	      return val;
	    }

	    function to2dCSS() {
	      // Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.

	      /* if(this.isIdentity()) {
	              return '';
	          } */
	      var props = this.props;

	      var _a = roundMatrixProperty(props[0]);

	      var _b = roundMatrixProperty(props[1]);

	      var _c = roundMatrixProperty(props[4]);

	      var _d = roundMatrixProperty(props[5]);

	      var _e = roundMatrixProperty(props[12]);

	      var _f = roundMatrixProperty(props[13]);

	      return 'matrix(' + _a + ',' + _b + ',' + _c + ',' + _d + ',' + _e + ',' + _f + ')';
	    }

	    return function () {
	      this.reset = reset;
	      this.rotate = rotate;
	      this.rotateX = rotateX;
	      this.rotateY = rotateY;
	      this.rotateZ = rotateZ;
	      this.skew = skew;
	      this.skewFromAxis = skewFromAxis;
	      this.shear = shear;
	      this.scale = scale;
	      this.setTransform = setTransform;
	      this.translate = translate;
	      this.transform = transform;
	      this.multiply = multiply;
	      this.applyToPoint = applyToPoint;
	      this.applyToX = applyToX;
	      this.applyToY = applyToY;
	      this.applyToZ = applyToZ;
	      this.applyToPointArray = applyToPointArray;
	      this.applyToTriplePoints = applyToTriplePoints;
	      this.applyToPointStringified = applyToPointStringified;
	      this.toCSS = toCSS;
	      this.to2dCSS = to2dCSS;
	      this.clone = clone;
	      this.cloneFromProps = cloneFromProps;
	      this.equals = equals;
	      this.inversePoints = inversePoints;
	      this.inversePoint = inversePoint;
	      this.getInverseMatrix = getInverseMatrix;
	      this._t = this.transform;
	      this.isIdentity = isIdentity;
	      this._identity = true;
	      this._identityCalculated = false;
	      this.props = createTypedArray('float32', 16);
	      this.reset();
	    };
	  }();

	  function _typeof$3(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$3 = function _typeof(obj) { return typeof obj; }; } else { _typeof$3 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$3(obj); }
	  var lottie = {};

	  function setLocation(href) {
	    setLocationHref(href);
	  }

	  function searchAnimations() {
	    {
	      animationManager.searchAnimations();
	    }
	  }

	  function setSubframeRendering(flag) {
	    setSubframeEnabled(flag);
	  }

	  function setPrefix(prefix) {
	    setIdPrefix(prefix);
	  }

	  function loadAnimation(params) {

	    return animationManager.loadAnimation(params);
	  }

	  function setQuality(value) {
	    if (typeof value === 'string') {
	      switch (value) {
	        case 'high':
	          setDefaultCurveSegments(200);
	          break;

	        default:
	        case 'medium':
	          setDefaultCurveSegments(50);
	          break;

	        case 'low':
	          setDefaultCurveSegments(10);
	          break;
	      }
	    } else if (!isNaN(value) && value > 1) {
	      setDefaultCurveSegments(value);
	    }
	  }

	  function inBrowser() {
	    return typeof navigator !== 'undefined';
	  }

	  function installPlugin(type, plugin) {
	    if (type === 'expressions') {
	      setExpressionsPlugin(plugin);
	    }
	  }

	  function getFactory(name) {
	    switch (name) {
	      case 'propertyFactory':
	        return PropertyFactory;

	      case 'shapePropertyFactory':
	        return ShapePropertyFactory;

	      case 'matrix':
	        return Matrix;

	      default:
	        return null;
	    }
	  }

	  lottie.play = animationManager.play;
	  lottie.pause = animationManager.pause;
	  lottie.setLocationHref = setLocation;
	  lottie.togglePause = animationManager.togglePause;
	  lottie.setSpeed = animationManager.setSpeed;
	  lottie.setDirection = animationManager.setDirection;
	  lottie.stop = animationManager.stop;
	  lottie.searchAnimations = searchAnimations;
	  lottie.registerAnimation = animationManager.registerAnimation;
	  lottie.loadAnimation = loadAnimation;
	  lottie.setSubframeRendering = setSubframeRendering;
	  lottie.resize = animationManager.resize; // lottie.start = start;

	  lottie.goToAndStop = animationManager.goToAndStop;
	  lottie.destroy = animationManager.destroy;
	  lottie.setQuality = setQuality;
	  lottie.inBrowser = inBrowser;
	  lottie.installPlugin = installPlugin;
	  lottie.freeze = animationManager.freeze;
	  lottie.unfreeze = animationManager.unfreeze;
	  lottie.setVolume = animationManager.setVolume;
	  lottie.mute = animationManager.mute;
	  lottie.unmute = animationManager.unmute;
	  lottie.getRegisteredAnimations = animationManager.getRegisteredAnimations;
	  lottie.useWebWorker = setWebWorker;
	  lottie.setIDPrefix = setPrefix;
	  lottie.__getFactory = getFactory;
	  lottie.version = '5.12.2';

	  function checkReady() {
	    if (document.readyState === 'complete') {
	      clearInterval(readyStateCheckInterval);
	      searchAnimations();
	    }
	  }

	  function getQueryVariable(variable) {
	    var vars = queryString.split('&');

	    for (var i = 0; i < vars.length; i += 1) {
	      var pair = vars[i].split('=');

	      if (decodeURIComponent(pair[0]) == variable) {
	        // eslint-disable-line eqeqeq
	        return decodeURIComponent(pair[1]);
	      }
	    }

	    return null;
	  }

	  var queryString = '';

	  {
	    var scripts = document.getElementsByTagName('script');
	    var index = scripts.length - 1;
	    var myScript = scripts[index] || {
	      src: ''
	    };
	    queryString = myScript.src ? myScript.src.replace(/^[^\?]+\??/, '') : ''; // eslint-disable-line no-useless-escape

	    getQueryVariable('renderer');
	  }

	  var readyStateCheckInterval = setInterval(checkReady, 100); // this adds bodymovin to the window object for backwards compatibility

	  try {
	    if (!(('object' === "undefined" ? "undefined" : _typeof$3(exports)) === 'object' && 'object' !== 'undefined') && !(typeof undefined === 'function' && undefined.amd) // eslint-disable-line no-undef
	    ) {
	      window.bodymovin = lottie;
	    }
	  } catch (err) {//
	  }

	  var ShapeModifiers = function () {
	    var ob = {};
	    var modifiers = {};
	    ob.registerModifier = registerModifier;
	    ob.getModifier = getModifier;

	    function registerModifier(nm, factory) {
	      if (!modifiers[nm]) {
	        modifiers[nm] = factory;
	      }
	    }

	    function getModifier(nm, elem, data) {
	      return new modifiers[nm](elem, data);
	    }

	    return ob;
	  }();

	  function ShapeModifier() {}

	  ShapeModifier.prototype.initModifierProperties = function () {};

	  ShapeModifier.prototype.addShapeToModifier = function () {};

	  ShapeModifier.prototype.addShape = function (data) {
	    if (!this.closed) {
	      // Adding shape to dynamic properties. It covers the case where a shape has no effects applied, to reset it's _mdf state on every tick.
	      data.sh.container.addDynamicProperty(data.sh);
	      var shapeData = {
	        shape: data.sh,
	        data: data,
	        localShapeCollection: shapeCollectionPool.newShapeCollection()
	      };
	      this.shapes.push(shapeData);
	      this.addShapeToModifier(shapeData);

	      if (this._isAnimated) {
	        data.setAsAnimated();
	      }
	    }
	  };

	  ShapeModifier.prototype.init = function (elem, data) {
	    this.shapes = [];
	    this.elem = elem;
	    this.initDynamicPropertyContainer(elem);
	    this.initModifierProperties(elem, data);
	    this.frameId = initialDefaultFrame;
	    this.closed = false;
	    this.k = false;

	    if (this.dynamicProperties.length) {
	      this.k = true;
	    } else {
	      this.getValue(true);
	    }
	  };

	  ShapeModifier.prototype.processKeys = function () {
	    if (this.elem.globalData.frameId === this.frameId) {
	      return;
	    }

	    this.frameId = this.elem.globalData.frameId;
	    this.iterateDynamicProperties();
	  };

	  extendPrototype([DynamicPropertyContainer], ShapeModifier);

	  function TrimModifier() {}

	  extendPrototype([ShapeModifier], TrimModifier);

	  TrimModifier.prototype.initModifierProperties = function (elem, data) {
	    this.s = PropertyFactory.getProp(elem, data.s, 0, 0.01, this);
	    this.e = PropertyFactory.getProp(elem, data.e, 0, 0.01, this);
	    this.o = PropertyFactory.getProp(elem, data.o, 0, 0, this);
	    this.sValue = 0;
	    this.eValue = 0;
	    this.getValue = this.processKeys;
	    this.m = data.m;
	    this._isAnimated = !!this.s.effectsSequence.length || !!this.e.effectsSequence.length || !!this.o.effectsSequence.length;
	  };

	  TrimModifier.prototype.addShapeToModifier = function (shapeData) {
	    shapeData.pathsData = [];
	  };

	  TrimModifier.prototype.calculateShapeEdges = function (s, e, shapeLength, addedLength, totalModifierLength) {
	    var segments = [];

	    if (e <= 1) {
	      segments.push({
	        s: s,
	        e: e
	      });
	    } else if (s >= 1) {
	      segments.push({
	        s: s - 1,
	        e: e - 1
	      });
	    } else {
	      segments.push({
	        s: s,
	        e: 1
	      });
	      segments.push({
	        s: 0,
	        e: e - 1
	      });
	    }

	    var shapeSegments = [];
	    var i;
	    var len = segments.length;
	    var segmentOb;

	    for (i = 0; i < len; i += 1) {
	      segmentOb = segments[i];

	      if (!(segmentOb.e * totalModifierLength < addedLength || segmentOb.s * totalModifierLength > addedLength + shapeLength)) {
	        var shapeS;
	        var shapeE;

	        if (segmentOb.s * totalModifierLength <= addedLength) {
	          shapeS = 0;
	        } else {
	          shapeS = (segmentOb.s * totalModifierLength - addedLength) / shapeLength;
	        }

	        if (segmentOb.e * totalModifierLength >= addedLength + shapeLength) {
	          shapeE = 1;
	        } else {
	          shapeE = (segmentOb.e * totalModifierLength - addedLength) / shapeLength;
	        }

	        shapeSegments.push([shapeS, shapeE]);
	      }
	    }

	    if (!shapeSegments.length) {
	      shapeSegments.push([0, 0]);
	    }

	    return shapeSegments;
	  };

	  TrimModifier.prototype.releasePathsData = function (pathsData) {
	    var i;
	    var len = pathsData.length;

	    for (i = 0; i < len; i += 1) {
	      segmentsLengthPool.release(pathsData[i]);
	    }

	    pathsData.length = 0;
	    return pathsData;
	  };

	  TrimModifier.prototype.processShapes = function (_isFirstFrame) {
	    var s;
	    var e;

	    if (this._mdf || _isFirstFrame) {
	      var o = this.o.v % 360 / 360;

	      if (o < 0) {
	        o += 1;
	      }

	      if (this.s.v > 1) {
	        s = 1 + o;
	      } else if (this.s.v < 0) {
	        s = 0 + o;
	      } else {
	        s = this.s.v + o;
	      }

	      if (this.e.v > 1) {
	        e = 1 + o;
	      } else if (this.e.v < 0) {
	        e = 0 + o;
	      } else {
	        e = this.e.v + o;
	      }

	      if (s > e) {
	        var _s = s;
	        s = e;
	        e = _s;
	      }

	      s = Math.round(s * 10000) * 0.0001;
	      e = Math.round(e * 10000) * 0.0001;
	      this.sValue = s;
	      this.eValue = e;
	    } else {
	      s = this.sValue;
	      e = this.eValue;
	    }

	    var shapePaths;
	    var i;
	    var len = this.shapes.length;
	    var j;
	    var jLen;
	    var pathsData;
	    var pathData;
	    var totalShapeLength;
	    var totalModifierLength = 0;

	    if (e === s) {
	      for (i = 0; i < len; i += 1) {
	        this.shapes[i].localShapeCollection.releaseShapes();
	        this.shapes[i].shape._mdf = true;
	        this.shapes[i].shape.paths = this.shapes[i].localShapeCollection;

	        if (this._mdf) {
	          this.shapes[i].pathsData.length = 0;
	        }
	      }
	    } else if (!(e === 1 && s === 0 || e === 0 && s === 1)) {
	      var segments = [];
	      var shapeData;
	      var localShapeCollection;

	      for (i = 0; i < len; i += 1) {
	        shapeData = this.shapes[i]; // if shape hasn't changed and trim properties haven't changed, cached previous path can be used

	        if (!shapeData.shape._mdf && !this._mdf && !_isFirstFrame && this.m !== 2) {
	          shapeData.shape.paths = shapeData.localShapeCollection;
	        } else {
	          shapePaths = shapeData.shape.paths;
	          jLen = shapePaths._length;
	          totalShapeLength = 0;

	          if (!shapeData.shape._mdf && shapeData.pathsData.length) {
	            totalShapeLength = shapeData.totalShapeLength;
	          } else {
	            pathsData = this.releasePathsData(shapeData.pathsData);

	            for (j = 0; j < jLen; j += 1) {
	              pathData = bez.getSegmentsLength(shapePaths.shapes[j]);
	              pathsData.push(pathData);
	              totalShapeLength += pathData.totalLength;
	            }

	            shapeData.totalShapeLength = totalShapeLength;
	            shapeData.pathsData = pathsData;
	          }

	          totalModifierLength += totalShapeLength;
	          shapeData.shape._mdf = true;
	        }
	      }

	      var shapeS = s;
	      var shapeE = e;
	      var addedLength = 0;
	      var edges;

	      for (i = len - 1; i >= 0; i -= 1) {
	        shapeData = this.shapes[i];

	        if (shapeData.shape._mdf) {
	          localShapeCollection = shapeData.localShapeCollection;
	          localShapeCollection.releaseShapes(); // if m === 2 means paths are trimmed individually so edges need to be found for this specific shape relative to whoel group

	          if (this.m === 2 && len > 1) {
	            edges = this.calculateShapeEdges(s, e, shapeData.totalShapeLength, addedLength, totalModifierLength);
	            addedLength += shapeData.totalShapeLength;
	          } else {
	            edges = [[shapeS, shapeE]];
	          }

	          jLen = edges.length;

	          for (j = 0; j < jLen; j += 1) {
	            shapeS = edges[j][0];
	            shapeE = edges[j][1];
	            segments.length = 0;

	            if (shapeE <= 1) {
	              segments.push({
	                s: shapeData.totalShapeLength * shapeS,
	                e: shapeData.totalShapeLength * shapeE
	              });
	            } else if (shapeS >= 1) {
	              segments.push({
	                s: shapeData.totalShapeLength * (shapeS - 1),
	                e: shapeData.totalShapeLength * (shapeE - 1)
	              });
	            } else {
	              segments.push({
	                s: shapeData.totalShapeLength * shapeS,
	                e: shapeData.totalShapeLength
	              });
	              segments.push({
	                s: 0,
	                e: shapeData.totalShapeLength * (shapeE - 1)
	              });
	            }

	            var newShapesData = this.addShapes(shapeData, segments[0]);

	            if (segments[0].s !== segments[0].e) {
	              if (segments.length > 1) {
	                var lastShapeInCollection = shapeData.shape.paths.shapes[shapeData.shape.paths._length - 1];

	                if (lastShapeInCollection.c) {
	                  var lastShape = newShapesData.pop();
	                  this.addPaths(newShapesData, localShapeCollection);
	                  newShapesData = this.addShapes(shapeData, segments[1], lastShape);
	                } else {
	                  this.addPaths(newShapesData, localShapeCollection);
	                  newShapesData = this.addShapes(shapeData, segments[1]);
	                }
	              }

	              this.addPaths(newShapesData, localShapeCollection);
	            }
	          }

	          shapeData.shape.paths = localShapeCollection;
	        }
	      }
	    } else if (this._mdf) {
	      for (i = 0; i < len; i += 1) {
	        // Releasign Trim Cached paths data when no trim applied in case shapes are modified inbetween.
	        // Don't remove this even if it's losing cached info.
	        this.shapes[i].pathsData.length = 0;
	        this.shapes[i].shape._mdf = true;
	      }
	    }
	  };

	  TrimModifier.prototype.addPaths = function (newPaths, localShapeCollection) {
	    var i;
	    var len = newPaths.length;

	    for (i = 0; i < len; i += 1) {
	      localShapeCollection.addShape(newPaths[i]);
	    }
	  };

	  TrimModifier.prototype.addSegment = function (pt1, pt2, pt3, pt4, shapePath, pos, newShape) {
	    shapePath.setXYAt(pt2[0], pt2[1], 'o', pos);
	    shapePath.setXYAt(pt3[0], pt3[1], 'i', pos + 1);

	    if (newShape) {
	      shapePath.setXYAt(pt1[0], pt1[1], 'v', pos);
	    }

	    shapePath.setXYAt(pt4[0], pt4[1], 'v', pos + 1);
	  };

	  TrimModifier.prototype.addSegmentFromArray = function (points, shapePath, pos, newShape) {
	    shapePath.setXYAt(points[1], points[5], 'o', pos);
	    shapePath.setXYAt(points[2], points[6], 'i', pos + 1);

	    if (newShape) {
	      shapePath.setXYAt(points[0], points[4], 'v', pos);
	    }

	    shapePath.setXYAt(points[3], points[7], 'v', pos + 1);
	  };

	  TrimModifier.prototype.addShapes = function (shapeData, shapeSegment, shapePath) {
	    var pathsData = shapeData.pathsData;
	    var shapePaths = shapeData.shape.paths.shapes;
	    var i;
	    var len = shapeData.shape.paths._length;
	    var j;
	    var jLen;
	    var addedLength = 0;
	    var currentLengthData;
	    var segmentCount;
	    var lengths;
	    var segment;
	    var shapes = [];
	    var initPos;
	    var newShape = true;

	    if (!shapePath) {
	      shapePath = shapePool.newElement();
	      segmentCount = 0;
	      initPos = 0;
	    } else {
	      segmentCount = shapePath._length;
	      initPos = shapePath._length;
	    }

	    shapes.push(shapePath);

	    for (i = 0; i < len; i += 1) {
	      lengths = pathsData[i].lengths;
	      shapePath.c = shapePaths[i].c;
	      jLen = shapePaths[i].c ? lengths.length : lengths.length + 1;

	      for (j = 1; j < jLen; j += 1) {
	        currentLengthData = lengths[j - 1];

	        if (addedLength + currentLengthData.addedLength < shapeSegment.s) {
	          addedLength += currentLengthData.addedLength;
	          shapePath.c = false;
	        } else if (addedLength > shapeSegment.e) {
	          shapePath.c = false;
	          break;
	        } else {
	          if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + currentLengthData.addedLength) {
	            this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[j], shapePaths[i].v[j], shapePath, segmentCount, newShape);
	            newShape = false;
	          } else {
	            segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[j], shapePaths[i].o[j - 1], shapePaths[i].i[j], (shapeSegment.s - addedLength) / currentLengthData.addedLength, (shapeSegment.e - addedLength) / currentLengthData.addedLength, lengths[j - 1]);
	            this.addSegmentFromArray(segment, shapePath, segmentCount, newShape); // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);

	            newShape = false;
	            shapePath.c = false;
	          }

	          addedLength += currentLengthData.addedLength;
	          segmentCount += 1;
	        }
	      }

	      if (shapePaths[i].c && lengths.length) {
	        currentLengthData = lengths[j - 1];

	        if (addedLength <= shapeSegment.e) {
	          var segmentLength = lengths[j - 1].addedLength;

	          if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + segmentLength) {
	            this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[0], shapePaths[i].v[0], shapePath, segmentCount, newShape);
	            newShape = false;
	          } else {
	            segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[0], shapePaths[i].o[j - 1], shapePaths[i].i[0], (shapeSegment.s - addedLength) / segmentLength, (shapeSegment.e - addedLength) / segmentLength, lengths[j - 1]);
	            this.addSegmentFromArray(segment, shapePath, segmentCount, newShape); // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);

	            newShape = false;
	            shapePath.c = false;
	          }
	        } else {
	          shapePath.c = false;
	        }

	        addedLength += currentLengthData.addedLength;
	        segmentCount += 1;
	      }

	      if (shapePath._length) {
	        shapePath.setXYAt(shapePath.v[initPos][0], shapePath.v[initPos][1], 'i', initPos);
	        shapePath.setXYAt(shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1], 'o', shapePath._length - 1);
	      }

	      if (addedLength > shapeSegment.e) {
	        break;
	      }

	      if (i < len - 1) {
	        shapePath = shapePool.newElement();
	        newShape = true;
	        shapes.push(shapePath);
	        segmentCount = 0;
	      }
	    }

	    return shapes;
	  };

	  function PuckerAndBloatModifier() {}

	  extendPrototype([ShapeModifier], PuckerAndBloatModifier);

	  PuckerAndBloatModifier.prototype.initModifierProperties = function (elem, data) {
	    this.getValue = this.processKeys;
	    this.amount = PropertyFactory.getProp(elem, data.a, 0, null, this);
	    this._isAnimated = !!this.amount.effectsSequence.length;
	  };

	  PuckerAndBloatModifier.prototype.processPath = function (path, amount) {
	    var percent = amount / 100;
	    var centerPoint = [0, 0];
	    var pathLength = path._length;
	    var i = 0;

	    for (i = 0; i < pathLength; i += 1) {
	      centerPoint[0] += path.v[i][0];
	      centerPoint[1] += path.v[i][1];
	    }

	    centerPoint[0] /= pathLength;
	    centerPoint[1] /= pathLength;
	    var clonedPath = shapePool.newElement();
	    clonedPath.c = path.c;
	    var vX;
	    var vY;
	    var oX;
	    var oY;
	    var iX;
	    var iY;

	    for (i = 0; i < pathLength; i += 1) {
	      vX = path.v[i][0] + (centerPoint[0] - path.v[i][0]) * percent;
	      vY = path.v[i][1] + (centerPoint[1] - path.v[i][1]) * percent;
	      oX = path.o[i][0] + (centerPoint[0] - path.o[i][0]) * -percent;
	      oY = path.o[i][1] + (centerPoint[1] - path.o[i][1]) * -percent;
	      iX = path.i[i][0] + (centerPoint[0] - path.i[i][0]) * -percent;
	      iY = path.i[i][1] + (centerPoint[1] - path.i[i][1]) * -percent;
	      clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, i);
	    }

	    return clonedPath;
	  };

	  PuckerAndBloatModifier.prototype.processShapes = function (_isFirstFrame) {
	    var shapePaths;
	    var i;
	    var len = this.shapes.length;
	    var j;
	    var jLen;
	    var amount = this.amount.v;

	    if (amount !== 0) {
	      var shapeData;
	      var localShapeCollection;

	      for (i = 0; i < len; i += 1) {
	        shapeData = this.shapes[i];
	        localShapeCollection = shapeData.localShapeCollection;

	        if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
	          localShapeCollection.releaseShapes();
	          shapeData.shape._mdf = true;
	          shapePaths = shapeData.shape.paths.shapes;
	          jLen = shapeData.shape.paths._length;

	          for (j = 0; j < jLen; j += 1) {
	            localShapeCollection.addShape(this.processPath(shapePaths[j], amount));
	          }
	        }

	        shapeData.shape.paths = shapeData.localShapeCollection;
	      }
	    }

	    if (!this.dynamicProperties.length) {
	      this._mdf = false;
	    }
	  };

	  var TransformPropertyFactory = function () {
	    var defaultVector = [0, 0];

	    function applyToMatrix(mat) {
	      var _mdf = this._mdf;
	      this.iterateDynamicProperties();
	      this._mdf = this._mdf || _mdf;

	      if (this.a) {
	        mat.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
	      }

	      if (this.s) {
	        mat.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
	      }

	      if (this.sk) {
	        mat.skewFromAxis(-this.sk.v, this.sa.v);
	      }

	      if (this.r) {
	        mat.rotate(-this.r.v);
	      } else {
	        mat.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
	      }

	      if (this.data.p.s) {
	        if (this.data.p.z) {
	          mat.translate(this.px.v, this.py.v, -this.pz.v);
	        } else {
	          mat.translate(this.px.v, this.py.v, 0);
	        }
	      } else {
	        mat.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
	      }
	    }

	    function processKeys(forceRender) {
	      if (this.elem.globalData.frameId === this.frameId) {
	        return;
	      }

	      if (this._isDirty) {
	        this.precalculateMatrix();
	        this._isDirty = false;
	      }

	      this.iterateDynamicProperties();

	      if (this._mdf || forceRender) {
	        var frameRate;
	        this.v.cloneFromProps(this.pre.props);

	        if (this.appliedTransformations < 1) {
	          this.v.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
	        }

	        if (this.appliedTransformations < 2) {
	          this.v.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
	        }

	        if (this.sk && this.appliedTransformations < 3) {
	          this.v.skewFromAxis(-this.sk.v, this.sa.v);
	        }

	        if (this.r && this.appliedTransformations < 4) {
	          this.v.rotate(-this.r.v);
	        } else if (!this.r && this.appliedTransformations < 4) {
	          this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
	        }

	        if (this.autoOriented) {
	          var v1;
	          var v2;
	          frameRate = this.elem.globalData.frameRate;

	          if (this.p && this.p.keyframes && this.p.getValueAtTime) {
	            if (this.p._caching.lastFrame + this.p.offsetTime <= this.p.keyframes[0].t) {
	              v1 = this.p.getValueAtTime((this.p.keyframes[0].t + 0.01) / frameRate, 0);
	              v2 = this.p.getValueAtTime(this.p.keyframes[0].t / frameRate, 0);
	            } else if (this.p._caching.lastFrame + this.p.offsetTime >= this.p.keyframes[this.p.keyframes.length - 1].t) {
	              v1 = this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length - 1].t / frameRate, 0);
	              v2 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t - 0.05) / frameRate, 0);
	            } else {
	              v1 = this.p.pv;
	              v2 = this.p.getValueAtTime((this.p._caching.lastFrame + this.p.offsetTime - 0.01) / frameRate, this.p.offsetTime);
	            }
	          } else if (this.px && this.px.keyframes && this.py.keyframes && this.px.getValueAtTime && this.py.getValueAtTime) {
	            v1 = [];
	            v2 = [];
	            var px = this.px;
	            var py = this.py;

	            if (px._caching.lastFrame + px.offsetTime <= px.keyframes[0].t) {
	              v1[0] = px.getValueAtTime((px.keyframes[0].t + 0.01) / frameRate, 0);
	              v1[1] = py.getValueAtTime((py.keyframes[0].t + 0.01) / frameRate, 0);
	              v2[0] = px.getValueAtTime(px.keyframes[0].t / frameRate, 0);
	              v2[1] = py.getValueAtTime(py.keyframes[0].t / frameRate, 0);
	            } else if (px._caching.lastFrame + px.offsetTime >= px.keyframes[px.keyframes.length - 1].t) {
	              v1[0] = px.getValueAtTime(px.keyframes[px.keyframes.length - 1].t / frameRate, 0);
	              v1[1] = py.getValueAtTime(py.keyframes[py.keyframes.length - 1].t / frameRate, 0);
	              v2[0] = px.getValueAtTime((px.keyframes[px.keyframes.length - 1].t - 0.01) / frameRate, 0);
	              v2[1] = py.getValueAtTime((py.keyframes[py.keyframes.length - 1].t - 0.01) / frameRate, 0);
	            } else {
	              v1 = [px.pv, py.pv];
	              v2[0] = px.getValueAtTime((px._caching.lastFrame + px.offsetTime - 0.01) / frameRate, px.offsetTime);
	              v2[1] = py.getValueAtTime((py._caching.lastFrame + py.offsetTime - 0.01) / frameRate, py.offsetTime);
	            }
	          } else {
	            v2 = defaultVector;
	            v1 = v2;
	          }

	          this.v.rotate(-Math.atan2(v1[1] - v2[1], v1[0] - v2[0]));
	        }

	        if (this.data.p && this.data.p.s) {
	          if (this.data.p.z) {
	            this.v.translate(this.px.v, this.py.v, -this.pz.v);
	          } else {
	            this.v.translate(this.px.v, this.py.v, 0);
	          }
	        } else {
	          this.v.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
	        }
	      }

	      this.frameId = this.elem.globalData.frameId;
	    }

	    function precalculateMatrix() {
	      this.appliedTransformations = 0;
	      this.pre.reset();

	      if (!this.a.effectsSequence.length) {
	        this.pre.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
	        this.appliedTransformations = 1;
	      } else {
	        return;
	      }

	      if (!this.s.effectsSequence.length) {
	        this.pre.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
	        this.appliedTransformations = 2;
	      } else {
	        return;
	      }

	      if (this.sk) {
	        if (!this.sk.effectsSequence.length && !this.sa.effectsSequence.length) {
	          this.pre.skewFromAxis(-this.sk.v, this.sa.v);
	          this.appliedTransformations = 3;
	        } else {
	          return;
	        }
	      }

	      if (this.r) {
	        if (!this.r.effectsSequence.length) {
	          this.pre.rotate(-this.r.v);
	          this.appliedTransformations = 4;
	        }
	      } else if (!this.rz.effectsSequence.length && !this.ry.effectsSequence.length && !this.rx.effectsSequence.length && !this.or.effectsSequence.length) {
	        this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
	        this.appliedTransformations = 4;
	      }
	    }

	    function autoOrient() {//
	      // var prevP = this.getValueAtTime();
	    }

	    function addDynamicProperty(prop) {
	      this._addDynamicProperty(prop);

	      this.elem.addDynamicProperty(prop);
	      this._isDirty = true;
	    }

	    function TransformProperty(elem, data, container) {
	      this.elem = elem;
	      this.frameId = -1;
	      this.propType = 'transform';
	      this.data = data;
	      this.v = new Matrix(); // Precalculated matrix with non animated properties

	      this.pre = new Matrix();
	      this.appliedTransformations = 0;
	      this.initDynamicPropertyContainer(container || elem);

	      if (data.p && data.p.s) {
	        this.px = PropertyFactory.getProp(elem, data.p.x, 0, 0, this);
	        this.py = PropertyFactory.getProp(elem, data.p.y, 0, 0, this);

	        if (data.p.z) {
	          this.pz = PropertyFactory.getProp(elem, data.p.z, 0, 0, this);
	        }
	      } else {
	        this.p = PropertyFactory.getProp(elem, data.p || {
	          k: [0, 0, 0]
	        }, 1, 0, this);
	      }

	      if (data.rx) {
	        this.rx = PropertyFactory.getProp(elem, data.rx, 0, degToRads, this);
	        this.ry = PropertyFactory.getProp(elem, data.ry, 0, degToRads, this);
	        this.rz = PropertyFactory.getProp(elem, data.rz, 0, degToRads, this);

	        if (data.or.k[0].ti) {
	          var i;
	          var len = data.or.k.length;

	          for (i = 0; i < len; i += 1) {
	            data.or.k[i].to = null;
	            data.or.k[i].ti = null;
	          }
	        }

	        this.or = PropertyFactory.getProp(elem, data.or, 1, degToRads, this); // sh Indicates it needs to be capped between -180 and 180

	        this.or.sh = true;
	      } else {
	        this.r = PropertyFactory.getProp(elem, data.r || {
	          k: 0
	        }, 0, degToRads, this);
	      }

	      if (data.sk) {
	        this.sk = PropertyFactory.getProp(elem, data.sk, 0, degToRads, this);
	        this.sa = PropertyFactory.getProp(elem, data.sa, 0, degToRads, this);
	      }

	      this.a = PropertyFactory.getProp(elem, data.a || {
	        k: [0, 0, 0]
	      }, 1, 0, this);
	      this.s = PropertyFactory.getProp(elem, data.s || {
	        k: [100, 100, 100]
	      }, 1, 0.01, this); // Opacity is not part of the transform properties, that's why it won't use this.dynamicProperties. That way transforms won't get updated if opacity changes.

	      if (data.o) {
	        this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, elem);
	      } else {
	        this.o = {
	          _mdf: false,
	          v: 1
	        };
	      }

	      this._isDirty = true;

	      if (!this.dynamicProperties.length) {
	        this.getValue(true);
	      }
	    }

	    TransformProperty.prototype = {
	      applyToMatrix: applyToMatrix,
	      getValue: processKeys,
	      precalculateMatrix: precalculateMatrix,
	      autoOrient: autoOrient
	    };
	    extendPrototype([DynamicPropertyContainer], TransformProperty);
	    TransformProperty.prototype.addDynamicProperty = addDynamicProperty;
	    TransformProperty.prototype._addDynamicProperty = DynamicPropertyContainer.prototype.addDynamicProperty;

	    function getTransformProperty(elem, data, container) {
	      return new TransformProperty(elem, data, container);
	    }

	    return {
	      getTransformProperty: getTransformProperty
	    };
	  }();

	  function RepeaterModifier() {}

	  extendPrototype([ShapeModifier], RepeaterModifier);

	  RepeaterModifier.prototype.initModifierProperties = function (elem, data) {
	    this.getValue = this.processKeys;
	    this.c = PropertyFactory.getProp(elem, data.c, 0, null, this);
	    this.o = PropertyFactory.getProp(elem, data.o, 0, null, this);
	    this.tr = TransformPropertyFactory.getTransformProperty(elem, data.tr, this);
	    this.so = PropertyFactory.getProp(elem, data.tr.so, 0, 0.01, this);
	    this.eo = PropertyFactory.getProp(elem, data.tr.eo, 0, 0.01, this);
	    this.data = data;

	    if (!this.dynamicProperties.length) {
	      this.getValue(true);
	    }

	    this._isAnimated = !!this.dynamicProperties.length;
	    this.pMatrix = new Matrix();
	    this.rMatrix = new Matrix();
	    this.sMatrix = new Matrix();
	    this.tMatrix = new Matrix();
	    this.matrix = new Matrix();
	  };

	  RepeaterModifier.prototype.applyTransforms = function (pMatrix, rMatrix, sMatrix, transform, perc, inv) {
	    var dir = inv ? -1 : 1;
	    var scaleX = transform.s.v[0] + (1 - transform.s.v[0]) * (1 - perc);
	    var scaleY = transform.s.v[1] + (1 - transform.s.v[1]) * (1 - perc);
	    pMatrix.translate(transform.p.v[0] * dir * perc, transform.p.v[1] * dir * perc, transform.p.v[2]);
	    rMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);
	    rMatrix.rotate(-transform.r.v * dir * perc);
	    rMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);
	    sMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);
	    sMatrix.scale(inv ? 1 / scaleX : scaleX, inv ? 1 / scaleY : scaleY);
	    sMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);
	  };

	  RepeaterModifier.prototype.init = function (elem, arr, pos, elemsData) {
	    this.elem = elem;
	    this.arr = arr;
	    this.pos = pos;
	    this.elemsData = elemsData;
	    this._currentCopies = 0;
	    this._elements = [];
	    this._groups = [];
	    this.frameId = -1;
	    this.initDynamicPropertyContainer(elem);
	    this.initModifierProperties(elem, arr[pos]);

	    while (pos > 0) {
	      pos -= 1; // this._elements.unshift(arr.splice(pos,1)[0]);

	      this._elements.unshift(arr[pos]);
	    }

	    if (this.dynamicProperties.length) {
	      this.k = true;
	    } else {
	      this.getValue(true);
	    }
	  };

	  RepeaterModifier.prototype.resetElements = function (elements) {
	    var i;
	    var len = elements.length;

	    for (i = 0; i < len; i += 1) {
	      elements[i]._processed = false;

	      if (elements[i].ty === 'gr') {
	        this.resetElements(elements[i].it);
	      }
	    }
	  };

	  RepeaterModifier.prototype.cloneElements = function (elements) {
	    var newElements = JSON.parse(JSON.stringify(elements));
	    this.resetElements(newElements);
	    return newElements;
	  };

	  RepeaterModifier.prototype.changeGroupRender = function (elements, renderFlag) {
	    var i;
	    var len = elements.length;

	    for (i = 0; i < len; i += 1) {
	      elements[i]._render = renderFlag;

	      if (elements[i].ty === 'gr') {
	        this.changeGroupRender(elements[i].it, renderFlag);
	      }
	    }
	  };

	  RepeaterModifier.prototype.processShapes = function (_isFirstFrame) {
	    var items;
	    var itemsTransform;
	    var i;
	    var dir;
	    var cont;
	    var hasReloaded = false;

	    if (this._mdf || _isFirstFrame) {
	      var copies = Math.ceil(this.c.v);

	      if (this._groups.length < copies) {
	        while (this._groups.length < copies) {
	          var group = {
	            it: this.cloneElements(this._elements),
	            ty: 'gr'
	          };
	          group.it.push({
	            a: {
	              a: 0,
	              ix: 1,
	              k: [0, 0]
	            },
	            nm: 'Transform',
	            o: {
	              a: 0,
	              ix: 7,
	              k: 100
	            },
	            p: {
	              a: 0,
	              ix: 2,
	              k: [0, 0]
	            },
	            r: {
	              a: 1,
	              ix: 6,
	              k: [{
	                s: 0,
	                e: 0,
	                t: 0
	              }, {
	                s: 0,
	                e: 0,
	                t: 1
	              }]
	            },
	            s: {
	              a: 0,
	              ix: 3,
	              k: [100, 100]
	            },
	            sa: {
	              a: 0,
	              ix: 5,
	              k: 0
	            },
	            sk: {
	              a: 0,
	              ix: 4,
	              k: 0
	            },
	            ty: 'tr'
	          });
	          this.arr.splice(0, 0, group);

	          this._groups.splice(0, 0, group);

	          this._currentCopies += 1;
	        }

	        this.elem.reloadShapes();
	        hasReloaded = true;
	      }

	      cont = 0;
	      var renderFlag;

	      for (i = 0; i <= this._groups.length - 1; i += 1) {
	        renderFlag = cont < copies;
	        this._groups[i]._render = renderFlag;
	        this.changeGroupRender(this._groups[i].it, renderFlag);

	        if (!renderFlag) {
	          var elems = this.elemsData[i].it;
	          var transformData = elems[elems.length - 1];

	          if (transformData.transform.op.v !== 0) {
	            transformData.transform.op._mdf = true;
	            transformData.transform.op.v = 0;
	          } else {
	            transformData.transform.op._mdf = false;
	          }
	        }

	        cont += 1;
	      }

	      this._currentCopies = copies; /// /

	      var offset = this.o.v;
	      var offsetModulo = offset % 1;
	      var roundOffset = offset > 0 ? Math.floor(offset) : Math.ceil(offset);
	      var pProps = this.pMatrix.props;
	      var rProps = this.rMatrix.props;
	      var sProps = this.sMatrix.props;
	      this.pMatrix.reset();
	      this.rMatrix.reset();
	      this.sMatrix.reset();
	      this.tMatrix.reset();
	      this.matrix.reset();
	      var iteration = 0;

	      if (offset > 0) {
	        while (iteration < roundOffset) {
	          this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
	          iteration += 1;
	        }

	        if (offsetModulo) {
	          this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, offsetModulo, false);
	          iteration += offsetModulo;
	        }
	      } else if (offset < 0) {
	        while (iteration > roundOffset) {
	          this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, true);
	          iteration -= 1;
	        }

	        if (offsetModulo) {
	          this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, -offsetModulo, true);
	          iteration -= offsetModulo;
	        }
	      }

	      i = this.data.m === 1 ? 0 : this._currentCopies - 1;
	      dir = this.data.m === 1 ? 1 : -1;
	      cont = this._currentCopies;
	      var j;
	      var jLen;

	      while (cont) {
	        items = this.elemsData[i].it;
	        itemsTransform = items[items.length - 1].transform.mProps.v.props;
	        jLen = itemsTransform.length;
	        items[items.length - 1].transform.mProps._mdf = true;
	        items[items.length - 1].transform.op._mdf = true;
	        items[items.length - 1].transform.op.v = this._currentCopies === 1 ? this.so.v : this.so.v + (this.eo.v - this.so.v) * (i / (this._currentCopies - 1));

	        if (iteration !== 0) {
	          if (i !== 0 && dir === 1 || i !== this._currentCopies - 1 && dir === -1) {
	            this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
	          }

	          this.matrix.transform(rProps[0], rProps[1], rProps[2], rProps[3], rProps[4], rProps[5], rProps[6], rProps[7], rProps[8], rProps[9], rProps[10], rProps[11], rProps[12], rProps[13], rProps[14], rProps[15]);
	          this.matrix.transform(sProps[0], sProps[1], sProps[2], sProps[3], sProps[4], sProps[5], sProps[6], sProps[7], sProps[8], sProps[9], sProps[10], sProps[11], sProps[12], sProps[13], sProps[14], sProps[15]);
	          this.matrix.transform(pProps[0], pProps[1], pProps[2], pProps[3], pProps[4], pProps[5], pProps[6], pProps[7], pProps[8], pProps[9], pProps[10], pProps[11], pProps[12], pProps[13], pProps[14], pProps[15]);

	          for (j = 0; j < jLen; j += 1) {
	            itemsTransform[j] = this.matrix.props[j];
	          }

	          this.matrix.reset();
	        } else {
	          this.matrix.reset();

	          for (j = 0; j < jLen; j += 1) {
	            itemsTransform[j] = this.matrix.props[j];
	          }
	        }

	        iteration += 1;
	        cont -= 1;
	        i += dir;
	      }
	    } else {
	      cont = this._currentCopies;
	      i = 0;
	      dir = 1;

	      while (cont) {
	        items = this.elemsData[i].it;
	        itemsTransform = items[items.length - 1].transform.mProps.v.props;
	        items[items.length - 1].transform.mProps._mdf = false;
	        items[items.length - 1].transform.op._mdf = false;
	        cont -= 1;
	        i += dir;
	      }
	    }

	    return hasReloaded;
	  };

	  RepeaterModifier.prototype.addShape = function () {};

	  function RoundCornersModifier() {}

	  extendPrototype([ShapeModifier], RoundCornersModifier);

	  RoundCornersModifier.prototype.initModifierProperties = function (elem, data) {
	    this.getValue = this.processKeys;
	    this.rd = PropertyFactory.getProp(elem, data.r, 0, null, this);
	    this._isAnimated = !!this.rd.effectsSequence.length;
	  };

	  RoundCornersModifier.prototype.processPath = function (path, round) {
	    var clonedPath = shapePool.newElement();
	    clonedPath.c = path.c;
	    var i;
	    var len = path._length;
	    var currentV;
	    var currentI;
	    var currentO;
	    var closerV;
	    var distance;
	    var newPosPerc;
	    var index = 0;
	    var vX;
	    var vY;
	    var oX;
	    var oY;
	    var iX;
	    var iY;

	    for (i = 0; i < len; i += 1) {
	      currentV = path.v[i];
	      currentO = path.o[i];
	      currentI = path.i[i];

	      if (currentV[0] === currentO[0] && currentV[1] === currentO[1] && currentV[0] === currentI[0] && currentV[1] === currentI[1]) {
	        if ((i === 0 || i === len - 1) && !path.c) {
	          clonedPath.setTripleAt(currentV[0], currentV[1], currentO[0], currentO[1], currentI[0], currentI[1], index);
	          /* clonedPath.v[index] = currentV;
	                  clonedPath.o[index] = currentO;
	                  clonedPath.i[index] = currentI; */

	          index += 1;
	        } else {
	          if (i === 0) {
	            closerV = path.v[len - 1];
	          } else {
	            closerV = path.v[i - 1];
	          }

	          distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
	          newPosPerc = distance ? Math.min(distance / 2, round) / distance : 0;
	          iX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
	          vX = iX;
	          iY = currentV[1] - (currentV[1] - closerV[1]) * newPosPerc;
	          vY = iY;
	          oX = vX - (vX - currentV[0]) * roundCorner;
	          oY = vY - (vY - currentV[1]) * roundCorner;
	          clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index);
	          index += 1;

	          if (i === len - 1) {
	            closerV = path.v[0];
	          } else {
	            closerV = path.v[i + 1];
	          }

	          distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
	          newPosPerc = distance ? Math.min(distance / 2, round) / distance : 0;
	          oX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
	          vX = oX;
	          oY = currentV[1] + (closerV[1] - currentV[1]) * newPosPerc;
	          vY = oY;
	          iX = vX - (vX - currentV[0]) * roundCorner;
	          iY = vY - (vY - currentV[1]) * roundCorner;
	          clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index);
	          index += 1;
	        }
	      } else {
	        clonedPath.setTripleAt(path.v[i][0], path.v[i][1], path.o[i][0], path.o[i][1], path.i[i][0], path.i[i][1], index);
	        index += 1;
	      }
	    }

	    return clonedPath;
	  };

	  RoundCornersModifier.prototype.processShapes = function (_isFirstFrame) {
	    var shapePaths;
	    var i;
	    var len = this.shapes.length;
	    var j;
	    var jLen;
	    var rd = this.rd.v;

	    if (rd !== 0) {
	      var shapeData;
	      var localShapeCollection;

	      for (i = 0; i < len; i += 1) {
	        shapeData = this.shapes[i];
	        localShapeCollection = shapeData.localShapeCollection;

	        if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
	          localShapeCollection.releaseShapes();
	          shapeData.shape._mdf = true;
	          shapePaths = shapeData.shape.paths.shapes;
	          jLen = shapeData.shape.paths._length;

	          for (j = 0; j < jLen; j += 1) {
	            localShapeCollection.addShape(this.processPath(shapePaths[j], rd));
	          }
	        }

	        shapeData.shape.paths = shapeData.localShapeCollection;
	      }
	    }

	    if (!this.dynamicProperties.length) {
	      this._mdf = false;
	    }
	  };

	  function floatEqual(a, b) {
	    return Math.abs(a - b) * 100000 <= Math.min(Math.abs(a), Math.abs(b));
	  }

	  function floatZero(f) {
	    return Math.abs(f) <= 0.00001;
	  }

	  function lerp(p0, p1, amount) {
	    return p0 * (1 - amount) + p1 * amount;
	  }

	  function lerpPoint(p0, p1, amount) {
	    return [lerp(p0[0], p1[0], amount), lerp(p0[1], p1[1], amount)];
	  }

	  function quadRoots(a, b, c) {
	    // no root
	    if (a === 0) return [];
	    var s = b * b - 4 * a * c; // Complex roots

	    if (s < 0) return [];
	    var singleRoot = -b / (2 * a); // 1 root

	    if (s === 0) return [singleRoot];
	    var delta = Math.sqrt(s) / (2 * a); // 2 roots

	    return [singleRoot - delta, singleRoot + delta];
	  }

	  function polynomialCoefficients(p0, p1, p2, p3) {
	    return [-p0 + 3 * p1 - 3 * p2 + p3, 3 * p0 - 6 * p1 + 3 * p2, -3 * p0 + 3 * p1, p0];
	  }

	  function singlePoint(p) {
	    return new PolynomialBezier(p, p, p, p, false);
	  }

	  function PolynomialBezier(p0, p1, p2, p3, linearize) {
	    if (linearize && pointEqual(p0, p1)) {
	      p1 = lerpPoint(p0, p3, 1 / 3);
	    }

	    if (linearize && pointEqual(p2, p3)) {
	      p2 = lerpPoint(p0, p3, 2 / 3);
	    }

	    var coeffx = polynomialCoefficients(p0[0], p1[0], p2[0], p3[0]);
	    var coeffy = polynomialCoefficients(p0[1], p1[1], p2[1], p3[1]);
	    this.a = [coeffx[0], coeffy[0]];
	    this.b = [coeffx[1], coeffy[1]];
	    this.c = [coeffx[2], coeffy[2]];
	    this.d = [coeffx[3], coeffy[3]];
	    this.points = [p0, p1, p2, p3];
	  }

	  PolynomialBezier.prototype.point = function (t) {
	    return [((this.a[0] * t + this.b[0]) * t + this.c[0]) * t + this.d[0], ((this.a[1] * t + this.b[1]) * t + this.c[1]) * t + this.d[1]];
	  };

	  PolynomialBezier.prototype.derivative = function (t) {
	    return [(3 * t * this.a[0] + 2 * this.b[0]) * t + this.c[0], (3 * t * this.a[1] + 2 * this.b[1]) * t + this.c[1]];
	  };

	  PolynomialBezier.prototype.tangentAngle = function (t) {
	    var p = this.derivative(t);
	    return Math.atan2(p[1], p[0]);
	  };

	  PolynomialBezier.prototype.normalAngle = function (t) {
	    var p = this.derivative(t);
	    return Math.atan2(p[0], p[1]);
	  };

	  PolynomialBezier.prototype.inflectionPoints = function () {
	    var denom = this.a[1] * this.b[0] - this.a[0] * this.b[1];
	    if (floatZero(denom)) return [];
	    var tcusp = -0.5 * (this.a[1] * this.c[0] - this.a[0] * this.c[1]) / denom;
	    var square = tcusp * tcusp - 1 / 3 * (this.b[1] * this.c[0] - this.b[0] * this.c[1]) / denom;
	    if (square < 0) return [];
	    var root = Math.sqrt(square);

	    if (floatZero(root)) {
	      if (root > 0 && root < 1) return [tcusp];
	      return [];
	    }

	    return [tcusp - root, tcusp + root].filter(function (r) {
	      return r > 0 && r < 1;
	    });
	  };

	  PolynomialBezier.prototype.split = function (t) {
	    if (t <= 0) return [singlePoint(this.points[0]), this];
	    if (t >= 1) return [this, singlePoint(this.points[this.points.length - 1])];
	    var p10 = lerpPoint(this.points[0], this.points[1], t);
	    var p11 = lerpPoint(this.points[1], this.points[2], t);
	    var p12 = lerpPoint(this.points[2], this.points[3], t);
	    var p20 = lerpPoint(p10, p11, t);
	    var p21 = lerpPoint(p11, p12, t);
	    var p3 = lerpPoint(p20, p21, t);
	    return [new PolynomialBezier(this.points[0], p10, p20, p3, true), new PolynomialBezier(p3, p21, p12, this.points[3], true)];
	  };

	  function extrema(bez, comp) {
	    var min = bez.points[0][comp];
	    var max = bez.points[bez.points.length - 1][comp];

	    if (min > max) {
	      var e = max;
	      max = min;
	      min = e;
	    } // Derivative roots to find min/max


	    var f = quadRoots(3 * bez.a[comp], 2 * bez.b[comp], bez.c[comp]);

	    for (var i = 0; i < f.length; i += 1) {
	      if (f[i] > 0 && f[i] < 1) {
	        var val = bez.point(f[i])[comp];
	        if (val < min) min = val;else if (val > max) max = val;
	      }
	    }

	    return {
	      min: min,
	      max: max
	    };
	  }

	  PolynomialBezier.prototype.bounds = function () {
	    return {
	      x: extrema(this, 0),
	      y: extrema(this, 1)
	    };
	  };

	  PolynomialBezier.prototype.boundingBox = function () {
	    var bounds = this.bounds();
	    return {
	      left: bounds.x.min,
	      right: bounds.x.max,
	      top: bounds.y.min,
	      bottom: bounds.y.max,
	      width: bounds.x.max - bounds.x.min,
	      height: bounds.y.max - bounds.y.min,
	      cx: (bounds.x.max + bounds.x.min) / 2,
	      cy: (bounds.y.max + bounds.y.min) / 2
	    };
	  };

	  function intersectData(bez, t1, t2) {
	    var box = bez.boundingBox();
	    return {
	      cx: box.cx,
	      cy: box.cy,
	      width: box.width,
	      height: box.height,
	      bez: bez,
	      t: (t1 + t2) / 2,
	      t1: t1,
	      t2: t2
	    };
	  }

	  function splitData(data) {
	    var split = data.bez.split(0.5);
	    return [intersectData(split[0], data.t1, data.t), intersectData(split[1], data.t, data.t2)];
	  }

	  function boxIntersect(b1, b2) {
	    return Math.abs(b1.cx - b2.cx) * 2 < b1.width + b2.width && Math.abs(b1.cy - b2.cy) * 2 < b1.height + b2.height;
	  }

	  function intersectsImpl(d1, d2, depth, tolerance, intersections, maxRecursion) {
	    if (!boxIntersect(d1, d2)) return;

	    if (depth >= maxRecursion || d1.width <= tolerance && d1.height <= tolerance && d2.width <= tolerance && d2.height <= tolerance) {
	      intersections.push([d1.t, d2.t]);
	      return;
	    }

	    var d1s = splitData(d1);
	    var d2s = splitData(d2);
	    intersectsImpl(d1s[0], d2s[0], depth + 1, tolerance, intersections, maxRecursion);
	    intersectsImpl(d1s[0], d2s[1], depth + 1, tolerance, intersections, maxRecursion);
	    intersectsImpl(d1s[1], d2s[0], depth + 1, tolerance, intersections, maxRecursion);
	    intersectsImpl(d1s[1], d2s[1], depth + 1, tolerance, intersections, maxRecursion);
	  }

	  PolynomialBezier.prototype.intersections = function (other, tolerance, maxRecursion) {
	    if (tolerance === undefined) tolerance = 2;
	    if (maxRecursion === undefined) maxRecursion = 7;
	    var intersections = [];
	    intersectsImpl(intersectData(this, 0, 1), intersectData(other, 0, 1), 0, tolerance, intersections, maxRecursion);
	    return intersections;
	  };

	  PolynomialBezier.shapeSegment = function (shapePath, index) {
	    var nextIndex = (index + 1) % shapePath.length();
	    return new PolynomialBezier(shapePath.v[index], shapePath.o[index], shapePath.i[nextIndex], shapePath.v[nextIndex], true);
	  };

	  PolynomialBezier.shapeSegmentInverted = function (shapePath, index) {
	    var nextIndex = (index + 1) % shapePath.length();
	    return new PolynomialBezier(shapePath.v[nextIndex], shapePath.i[nextIndex], shapePath.o[index], shapePath.v[index], true);
	  };

	  function crossProduct(a, b) {
	    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
	  }

	  function lineIntersection(start1, end1, start2, end2) {
	    var v1 = [start1[0], start1[1], 1];
	    var v2 = [end1[0], end1[1], 1];
	    var v3 = [start2[0], start2[1], 1];
	    var v4 = [end2[0], end2[1], 1];
	    var r = crossProduct(crossProduct(v1, v2), crossProduct(v3, v4));
	    if (floatZero(r[2])) return null;
	    return [r[0] / r[2], r[1] / r[2]];
	  }

	  function polarOffset(p, angle, length) {
	    return [p[0] + Math.cos(angle) * length, p[1] - Math.sin(angle) * length];
	  }

	  function pointDistance(p1, p2) {
	    return Math.hypot(p1[0] - p2[0], p1[1] - p2[1]);
	  }

	  function pointEqual(p1, p2) {
	    return floatEqual(p1[0], p2[0]) && floatEqual(p1[1], p2[1]);
	  }

	  function ZigZagModifier() {}

	  extendPrototype([ShapeModifier], ZigZagModifier);

	  ZigZagModifier.prototype.initModifierProperties = function (elem, data) {
	    this.getValue = this.processKeys;
	    this.amplitude = PropertyFactory.getProp(elem, data.s, 0, null, this);
	    this.frequency = PropertyFactory.getProp(elem, data.r, 0, null, this);
	    this.pointsType = PropertyFactory.getProp(elem, data.pt, 0, null, this);
	    this._isAnimated = this.amplitude.effectsSequence.length !== 0 || this.frequency.effectsSequence.length !== 0 || this.pointsType.effectsSequence.length !== 0;
	  };

	  function setPoint(outputBezier, point, angle, direction, amplitude, outAmplitude, inAmplitude) {
	    var angO = angle - Math.PI / 2;
	    var angI = angle + Math.PI / 2;
	    var px = point[0] + Math.cos(angle) * direction * amplitude;
	    var py = point[1] - Math.sin(angle) * direction * amplitude;
	    outputBezier.setTripleAt(px, py, px + Math.cos(angO) * outAmplitude, py - Math.sin(angO) * outAmplitude, px + Math.cos(angI) * inAmplitude, py - Math.sin(angI) * inAmplitude, outputBezier.length());
	  }

	  function getPerpendicularVector(pt1, pt2) {
	    var vector = [pt2[0] - pt1[0], pt2[1] - pt1[1]];
	    var rot = -Math.PI * 0.5;
	    var rotatedVector = [Math.cos(rot) * vector[0] - Math.sin(rot) * vector[1], Math.sin(rot) * vector[0] + Math.cos(rot) * vector[1]];
	    return rotatedVector;
	  }

	  function getProjectingAngle(path, cur) {
	    var prevIndex = cur === 0 ? path.length() - 1 : cur - 1;
	    var nextIndex = (cur + 1) % path.length();
	    var prevPoint = path.v[prevIndex];
	    var nextPoint = path.v[nextIndex];
	    var pVector = getPerpendicularVector(prevPoint, nextPoint);
	    return Math.atan2(0, 1) - Math.atan2(pVector[1], pVector[0]);
	  }

	  function zigZagCorner(outputBezier, path, cur, amplitude, frequency, pointType, direction) {
	    var angle = getProjectingAngle(path, cur);
	    var point = path.v[cur % path._length];
	    var prevPoint = path.v[cur === 0 ? path._length - 1 : cur - 1];
	    var nextPoint = path.v[(cur + 1) % path._length];
	    var prevDist = pointType === 2 ? Math.sqrt(Math.pow(point[0] - prevPoint[0], 2) + Math.pow(point[1] - prevPoint[1], 2)) : 0;
	    var nextDist = pointType === 2 ? Math.sqrt(Math.pow(point[0] - nextPoint[0], 2) + Math.pow(point[1] - nextPoint[1], 2)) : 0;
	    setPoint(outputBezier, path.v[cur % path._length], angle, direction, amplitude, nextDist / ((frequency + 1) * 2), prevDist / ((frequency + 1) * 2));
	  }

	  function zigZagSegment(outputBezier, segment, amplitude, frequency, pointType, direction) {
	    for (var i = 0; i < frequency; i += 1) {
	      var t = (i + 1) / (frequency + 1);
	      var dist = pointType === 2 ? Math.sqrt(Math.pow(segment.points[3][0] - segment.points[0][0], 2) + Math.pow(segment.points[3][1] - segment.points[0][1], 2)) : 0;
	      var angle = segment.normalAngle(t);
	      var point = segment.point(t);
	      setPoint(outputBezier, point, angle, direction, amplitude, dist / ((frequency + 1) * 2), dist / ((frequency + 1) * 2));
	      direction = -direction;
	    }

	    return direction;
	  }

	  ZigZagModifier.prototype.processPath = function (path, amplitude, frequency, pointType) {
	    var count = path._length;
	    var clonedPath = shapePool.newElement();
	    clonedPath.c = path.c;

	    if (!path.c) {
	      count -= 1;
	    }

	    if (count === 0) return clonedPath;
	    var direction = -1;
	    var segment = PolynomialBezier.shapeSegment(path, 0);
	    zigZagCorner(clonedPath, path, 0, amplitude, frequency, pointType, direction);

	    for (var i = 0; i < count; i += 1) {
	      direction = zigZagSegment(clonedPath, segment, amplitude, frequency, pointType, -direction);

	      if (i === count - 1 && !path.c) {
	        segment = null;
	      } else {
	        segment = PolynomialBezier.shapeSegment(path, (i + 1) % count);
	      }

	      zigZagCorner(clonedPath, path, i + 1, amplitude, frequency, pointType, direction);
	    }

	    return clonedPath;
	  };

	  ZigZagModifier.prototype.processShapes = function (_isFirstFrame) {
	    var shapePaths;
	    var i;
	    var len = this.shapes.length;
	    var j;
	    var jLen;
	    var amplitude = this.amplitude.v;
	    var frequency = Math.max(0, Math.round(this.frequency.v));
	    var pointType = this.pointsType.v;

	    if (amplitude !== 0) {
	      var shapeData;
	      var localShapeCollection;

	      for (i = 0; i < len; i += 1) {
	        shapeData = this.shapes[i];
	        localShapeCollection = shapeData.localShapeCollection;

	        if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
	          localShapeCollection.releaseShapes();
	          shapeData.shape._mdf = true;
	          shapePaths = shapeData.shape.paths.shapes;
	          jLen = shapeData.shape.paths._length;

	          for (j = 0; j < jLen; j += 1) {
	            localShapeCollection.addShape(this.processPath(shapePaths[j], amplitude, frequency, pointType));
	          }
	        }

	        shapeData.shape.paths = shapeData.localShapeCollection;
	      }
	    }

	    if (!this.dynamicProperties.length) {
	      this._mdf = false;
	    }
	  };

	  function linearOffset(p1, p2, amount) {
	    var angle = Math.atan2(p2[0] - p1[0], p2[1] - p1[1]);
	    return [polarOffset(p1, angle, amount), polarOffset(p2, angle, amount)];
	  }

	  function offsetSegment(segment, amount) {
	    var p0;
	    var p1a;
	    var p1b;
	    var p2b;
	    var p2a;
	    var p3;
	    var e;
	    e = linearOffset(segment.points[0], segment.points[1], amount);
	    p0 = e[0];
	    p1a = e[1];
	    e = linearOffset(segment.points[1], segment.points[2], amount);
	    p1b = e[0];
	    p2b = e[1];
	    e = linearOffset(segment.points[2], segment.points[3], amount);
	    p2a = e[0];
	    p3 = e[1];
	    var p1 = lineIntersection(p0, p1a, p1b, p2b);
	    if (p1 === null) p1 = p1a;
	    var p2 = lineIntersection(p2a, p3, p1b, p2b);
	    if (p2 === null) p2 = p2a;
	    return new PolynomialBezier(p0, p1, p2, p3);
	  }

	  function joinLines(outputBezier, seg1, seg2, lineJoin, miterLimit) {
	    var p0 = seg1.points[3];
	    var p1 = seg2.points[0]; // Bevel

	    if (lineJoin === 3) return p0; // Connected, they don't need a joint

	    if (pointEqual(p0, p1)) return p0; // Round

	    if (lineJoin === 2) {
	      var angleOut = -seg1.tangentAngle(1);
	      var angleIn = -seg2.tangentAngle(0) + Math.PI;
	      var center = lineIntersection(p0, polarOffset(p0, angleOut + Math.PI / 2, 100), p1, polarOffset(p1, angleOut + Math.PI / 2, 100));
	      var radius = center ? pointDistance(center, p0) : pointDistance(p0, p1) / 2;
	      var tan = polarOffset(p0, angleOut, 2 * radius * roundCorner);
	      outputBezier.setXYAt(tan[0], tan[1], 'o', outputBezier.length() - 1);
	      tan = polarOffset(p1, angleIn, 2 * radius * roundCorner);
	      outputBezier.setTripleAt(p1[0], p1[1], p1[0], p1[1], tan[0], tan[1], outputBezier.length());
	      return p1;
	    } // Miter


	    var t0 = pointEqual(p0, seg1.points[2]) ? seg1.points[0] : seg1.points[2];
	    var t1 = pointEqual(p1, seg2.points[1]) ? seg2.points[3] : seg2.points[1];
	    var intersection = lineIntersection(t0, p0, p1, t1);

	    if (intersection && pointDistance(intersection, p0) < miterLimit) {
	      outputBezier.setTripleAt(intersection[0], intersection[1], intersection[0], intersection[1], intersection[0], intersection[1], outputBezier.length());
	      return intersection;
	    }

	    return p0;
	  }

	  function getIntersection(a, b) {
	    var intersect = a.intersections(b);
	    if (intersect.length && floatEqual(intersect[0][0], 1)) intersect.shift();
	    if (intersect.length) return intersect[0];
	    return null;
	  }

	  function pruneSegmentIntersection(a, b) {
	    var outa = a.slice();
	    var outb = b.slice();
	    var intersect = getIntersection(a[a.length - 1], b[0]);

	    if (intersect) {
	      outa[a.length - 1] = a[a.length - 1].split(intersect[0])[0];
	      outb[0] = b[0].split(intersect[1])[1];
	    }

	    if (a.length > 1 && b.length > 1) {
	      intersect = getIntersection(a[0], b[b.length - 1]);

	      if (intersect) {
	        return [[a[0].split(intersect[0])[0]], [b[b.length - 1].split(intersect[1])[1]]];
	      }
	    }

	    return [outa, outb];
	  }

	  function pruneIntersections(segments) {
	    var e;

	    for (var i = 1; i < segments.length; i += 1) {
	      e = pruneSegmentIntersection(segments[i - 1], segments[i]);
	      segments[i - 1] = e[0];
	      segments[i] = e[1];
	    }

	    if (segments.length > 1) {
	      e = pruneSegmentIntersection(segments[segments.length - 1], segments[0]);
	      segments[segments.length - 1] = e[0];
	      segments[0] = e[1];
	    }

	    return segments;
	  }

	  function offsetSegmentSplit(segment, amount) {
	    /*
	      We split each bezier segment into smaller pieces based
	      on inflection points, this ensures the control point
	      polygon is convex.
	        (A cubic bezier can have none, one, or two inflection points)
	    */
	    var flex = segment.inflectionPoints();
	    var left;
	    var right;
	    var split;
	    var mid;

	    if (flex.length === 0) {
	      return [offsetSegment(segment, amount)];
	    }

	    if (flex.length === 1 || floatEqual(flex[1], 1)) {
	      split = segment.split(flex[0]);
	      left = split[0];
	      right = split[1];
	      return [offsetSegment(left, amount), offsetSegment(right, amount)];
	    }

	    split = segment.split(flex[0]);
	    left = split[0];
	    var t = (flex[1] - flex[0]) / (1 - flex[0]);
	    split = split[1].split(t);
	    mid = split[0];
	    right = split[1];
	    return [offsetSegment(left, amount), offsetSegment(mid, amount), offsetSegment(right, amount)];
	  }

	  function OffsetPathModifier() {}

	  extendPrototype([ShapeModifier], OffsetPathModifier);

	  OffsetPathModifier.prototype.initModifierProperties = function (elem, data) {
	    this.getValue = this.processKeys;
	    this.amount = PropertyFactory.getProp(elem, data.a, 0, null, this);
	    this.miterLimit = PropertyFactory.getProp(elem, data.ml, 0, null, this);
	    this.lineJoin = data.lj;
	    this._isAnimated = this.amount.effectsSequence.length !== 0;
	  };

	  OffsetPathModifier.prototype.processPath = function (inputBezier, amount, lineJoin, miterLimit) {
	    var outputBezier = shapePool.newElement();
	    outputBezier.c = inputBezier.c;
	    var count = inputBezier.length();

	    if (!inputBezier.c) {
	      count -= 1;
	    }

	    var i;
	    var j;
	    var segment;
	    var multiSegments = [];

	    for (i = 0; i < count; i += 1) {
	      segment = PolynomialBezier.shapeSegment(inputBezier, i);
	      multiSegments.push(offsetSegmentSplit(segment, amount));
	    }

	    if (!inputBezier.c) {
	      for (i = count - 1; i >= 0; i -= 1) {
	        segment = PolynomialBezier.shapeSegmentInverted(inputBezier, i);
	        multiSegments.push(offsetSegmentSplit(segment, amount));
	      }
	    }

	    multiSegments = pruneIntersections(multiSegments); // Add bezier segments to the output and apply line joints

	    var lastPoint = null;
	    var lastSeg = null;

	    for (i = 0; i < multiSegments.length; i += 1) {
	      var multiSegment = multiSegments[i];
	      if (lastSeg) lastPoint = joinLines(outputBezier, lastSeg, multiSegment[0], lineJoin, miterLimit);
	      lastSeg = multiSegment[multiSegment.length - 1];

	      for (j = 0; j < multiSegment.length; j += 1) {
	        segment = multiSegment[j];

	        if (lastPoint && pointEqual(segment.points[0], lastPoint)) {
	          outputBezier.setXYAt(segment.points[1][0], segment.points[1][1], 'o', outputBezier.length() - 1);
	        } else {
	          outputBezier.setTripleAt(segment.points[0][0], segment.points[0][1], segment.points[1][0], segment.points[1][1], segment.points[0][0], segment.points[0][1], outputBezier.length());
	        }

	        outputBezier.setTripleAt(segment.points[3][0], segment.points[3][1], segment.points[3][0], segment.points[3][1], segment.points[2][0], segment.points[2][1], outputBezier.length());
	        lastPoint = segment.points[3];
	      }
	    }

	    if (multiSegments.length) joinLines(outputBezier, lastSeg, multiSegments[0][0], lineJoin, miterLimit);
	    return outputBezier;
	  };

	  OffsetPathModifier.prototype.processShapes = function (_isFirstFrame) {
	    var shapePaths;
	    var i;
	    var len = this.shapes.length;
	    var j;
	    var jLen;
	    var amount = this.amount.v;
	    var miterLimit = this.miterLimit.v;
	    var lineJoin = this.lineJoin;

	    if (amount !== 0) {
	      var shapeData;
	      var localShapeCollection;

	      for (i = 0; i < len; i += 1) {
	        shapeData = this.shapes[i];
	        localShapeCollection = shapeData.localShapeCollection;

	        if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
	          localShapeCollection.releaseShapes();
	          shapeData.shape._mdf = true;
	          shapePaths = shapeData.shape.paths.shapes;
	          jLen = shapeData.shape.paths._length;

	          for (j = 0; j < jLen; j += 1) {
	            localShapeCollection.addShape(this.processPath(shapePaths[j], amount, lineJoin, miterLimit));
	          }
	        }

	        shapeData.shape.paths = shapeData.localShapeCollection;
	      }
	    }

	    if (!this.dynamicProperties.length) {
	      this._mdf = false;
	    }
	  };

	  function getFontProperties(fontData) {
	    var styles = fontData.fStyle ? fontData.fStyle.split(' ') : [];
	    var fWeight = 'normal';
	    var fStyle = 'normal';
	    var len = styles.length;
	    var styleName;

	    for (var i = 0; i < len; i += 1) {
	      styleName = styles[i].toLowerCase();

	      switch (styleName) {
	        case 'italic':
	          fStyle = 'italic';
	          break;

	        case 'bold':
	          fWeight = '700';
	          break;

	        case 'black':
	          fWeight = '900';
	          break;

	        case 'medium':
	          fWeight = '500';
	          break;

	        case 'regular':
	        case 'normal':
	          fWeight = '400';
	          break;

	        case 'light':
	        case 'thin':
	          fWeight = '200';
	          break;
	      }
	    }

	    return {
	      style: fStyle,
	      weight: fontData.fWeight || fWeight
	    };
	  }

	  var FontManager = function () {
	    var maxWaitingTime = 5000;
	    var emptyChar = {
	      w: 0,
	      size: 0,
	      shapes: [],
	      data: {
	        shapes: []
	      }
	    };
	    var combinedCharacters = []; // Hindi characters

	    combinedCharacters = combinedCharacters.concat([2304, 2305, 2306, 2307, 2362, 2363, 2364, 2364, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2387, 2388, 2389, 2390, 2391, 2402, 2403]);
	    var BLACK_FLAG_CODE_POINT = 127988;
	    var CANCEL_TAG_CODE_POINT = 917631;
	    var A_TAG_CODE_POINT = 917601;
	    var Z_TAG_CODE_POINT = 917626;
	    var VARIATION_SELECTOR_16_CODE_POINT = 65039;
	    var ZERO_WIDTH_JOINER_CODE_POINT = 8205;
	    var REGIONAL_CHARACTER_A_CODE_POINT = 127462;
	    var REGIONAL_CHARACTER_Z_CODE_POINT = 127487;
	    var surrogateModifiers = ['d83cdffb', 'd83cdffc', 'd83cdffd', 'd83cdffe', 'd83cdfff'];

	    function trimFontOptions(font) {
	      var familyArray = font.split(',');
	      var i;
	      var len = familyArray.length;
	      var enabledFamilies = [];

	      for (i = 0; i < len; i += 1) {
	        if (familyArray[i] !== 'sans-serif' && familyArray[i] !== 'monospace') {
	          enabledFamilies.push(familyArray[i]);
	        }
	      }

	      return enabledFamilies.join(',');
	    }

	    function setUpNode(font, family) {
	      var parentNode = createTag('span'); // Node is invisible to screen readers.

	      parentNode.setAttribute('aria-hidden', true);
	      parentNode.style.fontFamily = family;
	      var node = createTag('span'); // Characters that vary significantly among different fonts

	      node.innerText = 'giItT1WQy@!-/#'; // Visible - so we can measure it - but not on the screen

	      parentNode.style.position = 'absolute';
	      parentNode.style.left = '-10000px';
	      parentNode.style.top = '-10000px'; // Large font size makes even subtle changes obvious

	      parentNode.style.fontSize = '300px'; // Reset any font properties

	      parentNode.style.fontVariant = 'normal';
	      parentNode.style.fontStyle = 'normal';
	      parentNode.style.fontWeight = 'normal';
	      parentNode.style.letterSpacing = '0';
	      parentNode.appendChild(node);
	      document.body.appendChild(parentNode); // Remember width with no applied web font

	      var width = node.offsetWidth;
	      node.style.fontFamily = trimFontOptions(font) + ', ' + family;
	      return {
	        node: node,
	        w: width,
	        parent: parentNode
	      };
	    }

	    function checkLoadedFonts() {
	      var i;
	      var len = this.fonts.length;
	      var node;
	      var w;
	      var loadedCount = len;

	      for (i = 0; i < len; i += 1) {
	        if (this.fonts[i].loaded) {
	          loadedCount -= 1;
	        } else if (this.fonts[i].fOrigin === 'n' || this.fonts[i].origin === 0) {
	          this.fonts[i].loaded = true;
	        } else {
	          node = this.fonts[i].monoCase.node;
	          w = this.fonts[i].monoCase.w;

	          if (node.offsetWidth !== w) {
	            loadedCount -= 1;
	            this.fonts[i].loaded = true;
	          } else {
	            node = this.fonts[i].sansCase.node;
	            w = this.fonts[i].sansCase.w;

	            if (node.offsetWidth !== w) {
	              loadedCount -= 1;
	              this.fonts[i].loaded = true;
	            }
	          }

	          if (this.fonts[i].loaded) {
	            this.fonts[i].sansCase.parent.parentNode.removeChild(this.fonts[i].sansCase.parent);
	            this.fonts[i].monoCase.parent.parentNode.removeChild(this.fonts[i].monoCase.parent);
	          }
	        }
	      }

	      if (loadedCount !== 0 && Date.now() - this.initTime < maxWaitingTime) {
	        setTimeout(this.checkLoadedFontsBinded, 20);
	      } else {
	        setTimeout(this.setIsLoadedBinded, 10);
	      }
	    }

	    function createHelper(fontData, def) {
	      var engine = document.body && def ? 'svg' : 'canvas';
	      var helper;
	      var fontProps = getFontProperties(fontData);

	      if (engine === 'svg') {
	        var tHelper = createNS('text');
	        tHelper.style.fontSize = '100px'; // tHelper.style.fontFamily = fontData.fFamily;

	        tHelper.setAttribute('font-family', fontData.fFamily);
	        tHelper.setAttribute('font-style', fontProps.style);
	        tHelper.setAttribute('font-weight', fontProps.weight);
	        tHelper.textContent = '1';

	        if (fontData.fClass) {
	          tHelper.style.fontFamily = 'inherit';
	          tHelper.setAttribute('class', fontData.fClass);
	        } else {
	          tHelper.style.fontFamily = fontData.fFamily;
	        }

	        def.appendChild(tHelper);
	        helper = tHelper;
	      } else {
	        var tCanvasHelper = new OffscreenCanvas(500, 500).getContext('2d');
	        tCanvasHelper.font = fontProps.style + ' ' + fontProps.weight + ' 100px ' + fontData.fFamily;
	        helper = tCanvasHelper;
	      }

	      function measure(text) {
	        if (engine === 'svg') {
	          helper.textContent = text;
	          return helper.getComputedTextLength();
	        }

	        return helper.measureText(text).width;
	      }

	      return {
	        measureText: measure
	      };
	    }

	    function addFonts(fontData, defs) {
	      if (!fontData) {
	        this.isLoaded = true;
	        return;
	      }

	      if (this.chars) {
	        this.isLoaded = true;
	        this.fonts = fontData.list;
	        return;
	      }

	      if (!document.body) {
	        this.isLoaded = true;
	        fontData.list.forEach(function (data) {
	          data.helper = createHelper(data);
	          data.cache = {};
	        });
	        this.fonts = fontData.list;
	        return;
	      }

	      var fontArr = fontData.list;
	      var i;
	      var len = fontArr.length;
	      var _pendingFonts = len;

	      for (i = 0; i < len; i += 1) {
	        var shouldLoadFont = true;
	        var loadedSelector;
	        var j;
	        fontArr[i].loaded = false;
	        fontArr[i].monoCase = setUpNode(fontArr[i].fFamily, 'monospace');
	        fontArr[i].sansCase = setUpNode(fontArr[i].fFamily, 'sans-serif');

	        if (!fontArr[i].fPath) {
	          fontArr[i].loaded = true;
	          _pendingFonts -= 1;
	        } else if (fontArr[i].fOrigin === 'p' || fontArr[i].origin === 3) {
	          loadedSelector = document.querySelectorAll('style[f-forigin="p"][f-family="' + fontArr[i].fFamily + '"], style[f-origin="3"][f-family="' + fontArr[i].fFamily + '"]');

	          if (loadedSelector.length > 0) {
	            shouldLoadFont = false;
	          }

	          if (shouldLoadFont) {
	            var s = createTag('style');
	            s.setAttribute('f-forigin', fontArr[i].fOrigin);
	            s.setAttribute('f-origin', fontArr[i].origin);
	            s.setAttribute('f-family', fontArr[i].fFamily);
	            s.type = 'text/css';
	            s.innerText = '@font-face {font-family: ' + fontArr[i].fFamily + "; font-style: normal; src: url('" + fontArr[i].fPath + "');}";
	            defs.appendChild(s);
	          }
	        } else if (fontArr[i].fOrigin === 'g' || fontArr[i].origin === 1) {
	          loadedSelector = document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]');

	          for (j = 0; j < loadedSelector.length; j += 1) {
	            if (loadedSelector[j].href.indexOf(fontArr[i].fPath) !== -1) {
	              // Font is already loaded
	              shouldLoadFont = false;
	            }
	          }

	          if (shouldLoadFont) {
	            var l = createTag('link');
	            l.setAttribute('f-forigin', fontArr[i].fOrigin);
	            l.setAttribute('f-origin', fontArr[i].origin);
	            l.type = 'text/css';
	            l.rel = 'stylesheet';
	            l.href = fontArr[i].fPath;
	            document.body.appendChild(l);
	          }
	        } else if (fontArr[i].fOrigin === 't' || fontArr[i].origin === 2) {
	          loadedSelector = document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]');

	          for (j = 0; j < loadedSelector.length; j += 1) {
	            if (fontArr[i].fPath === loadedSelector[j].src) {
	              // Font is already loaded
	              shouldLoadFont = false;
	            }
	          }

	          if (shouldLoadFont) {
	            var sc = createTag('link');
	            sc.setAttribute('f-forigin', fontArr[i].fOrigin);
	            sc.setAttribute('f-origin', fontArr[i].origin);
	            sc.setAttribute('rel', 'stylesheet');
	            sc.setAttribute('href', fontArr[i].fPath);
	            defs.appendChild(sc);
	          }
	        }

	        fontArr[i].helper = createHelper(fontArr[i], defs);
	        fontArr[i].cache = {};
	        this.fonts.push(fontArr[i]);
	      }

	      if (_pendingFonts === 0) {
	        this.isLoaded = true;
	      } else {
	        // On some cases even if the font is loaded, it won't load correctly when measuring text on canvas.
	        // Adding this timeout seems to fix it
	        setTimeout(this.checkLoadedFonts.bind(this), 100);
	      }
	    }

	    function addChars(chars) {
	      if (!chars) {
	        return;
	      }

	      if (!this.chars) {
	        this.chars = [];
	      }

	      var i;
	      var len = chars.length;
	      var j;
	      var jLen = this.chars.length;
	      var found;

	      for (i = 0; i < len; i += 1) {
	        j = 0;
	        found = false;

	        while (j < jLen) {
	          if (this.chars[j].style === chars[i].style && this.chars[j].fFamily === chars[i].fFamily && this.chars[j].ch === chars[i].ch) {
	            found = true;
	          }

	          j += 1;
	        }

	        if (!found) {
	          this.chars.push(chars[i]);
	          jLen += 1;
	        }
	      }
	    }

	    function getCharData(_char, style, font) {
	      var i = 0;
	      var len = this.chars.length;

	      while (i < len) {
	        if (this.chars[i].ch === _char && this.chars[i].style === style && this.chars[i].fFamily === font) {
	          return this.chars[i];
	        }

	        i += 1;
	      }

	      if ((typeof _char === 'string' && _char.charCodeAt(0) !== 13 || !_char) && console && console.warn // eslint-disable-line no-console
	      && !this._warned) {
	        this._warned = true;
	        console.warn('Missing character from exported characters list: ', _char, style, font); // eslint-disable-line no-console
	      }

	      return emptyChar;
	    }

	    function measureText(_char2, fontName, size) {
	      var fontData = this.getFontByName(fontName); // Using the char instead of char.charCodeAt(0)
	      // to avoid collisions between equal chars

	      var index = _char2;

	      if (!fontData.cache[index]) {
	        var tHelper = fontData.helper;

	        if (_char2 === ' ') {
	          var doubleSize = tHelper.measureText('|' + _char2 + '|');
	          var singleSize = tHelper.measureText('||');
	          fontData.cache[index] = (doubleSize - singleSize) / 100;
	        } else {
	          fontData.cache[index] = tHelper.measureText(_char2) / 100;
	        }
	      }

	      return fontData.cache[index] * size;
	    }

	    function getFontByName(name) {
	      var i = 0;
	      var len = this.fonts.length;

	      while (i < len) {
	        if (this.fonts[i].fName === name) {
	          return this.fonts[i];
	        }

	        i += 1;
	      }

	      return this.fonts[0];
	    }

	    function getCodePoint(string) {
	      var codePoint = 0;
	      var first = string.charCodeAt(0);

	      if (first >= 0xD800 && first <= 0xDBFF) {
	        var second = string.charCodeAt(1);

	        if (second >= 0xDC00 && second <= 0xDFFF) {
	          codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
	        }
	      }

	      return codePoint;
	    } // Skin tone modifiers


	    function isModifier(firstCharCode, secondCharCode) {
	      var sum = firstCharCode.toString(16) + secondCharCode.toString(16);
	      return surrogateModifiers.indexOf(sum) !== -1;
	    }

	    function isZeroWidthJoiner(charCode) {
	      return charCode === ZERO_WIDTH_JOINER_CODE_POINT;
	    } // This codepoint may change the appearance of the preceding character.
	    // If that is a symbol, dingbat or emoji, U+FE0F forces it to be rendered
	    // as a colorful image as compared to a monochrome text variant.


	    function isVariationSelector(charCode) {
	      return charCode === VARIATION_SELECTOR_16_CODE_POINT;
	    } // The regional indicator symbols are a set of 26 alphabetic Unicode
	    /// characters (A–Z) intended to be used to encode ISO 3166-1 alpha-2
	    // two-letter country codes in a way that allows optional special treatment.


	    function isRegionalCode(string) {
	      var codePoint = getCodePoint(string);

	      if (codePoint >= REGIONAL_CHARACTER_A_CODE_POINT && codePoint <= REGIONAL_CHARACTER_Z_CODE_POINT) {
	        return true;
	      }

	      return false;
	    } // Some Emoji implementations represent combinations of
	    // two “regional indicator” letters as a single flag symbol.


	    function isFlagEmoji(string) {
	      return isRegionalCode(string.substr(0, 2)) && isRegionalCode(string.substr(2, 2));
	    }

	    function isCombinedCharacter(_char3) {
	      return combinedCharacters.indexOf(_char3) !== -1;
	    } // Regional flags start with a BLACK_FLAG_CODE_POINT
	    // folowed by 5 chars in the TAG range
	    // and end with a CANCEL_TAG_CODE_POINT


	    function isRegionalFlag(text, index) {
	      var codePoint = getCodePoint(text.substr(index, 2));

	      if (codePoint !== BLACK_FLAG_CODE_POINT) {
	        return false;
	      }

	      var count = 0;
	      index += 2;

	      while (count < 5) {
	        codePoint = getCodePoint(text.substr(index, 2));

	        if (codePoint < A_TAG_CODE_POINT || codePoint > Z_TAG_CODE_POINT) {
	          return false;
	        }

	        count += 1;
	        index += 2;
	      }

	      return getCodePoint(text.substr(index, 2)) === CANCEL_TAG_CODE_POINT;
	    }

	    function setIsLoaded() {
	      this.isLoaded = true;
	    }

	    var Font = function Font() {
	      this.fonts = [];
	      this.chars = null;
	      this.typekitLoaded = 0;
	      this.isLoaded = false;
	      this._warned = false;
	      this.initTime = Date.now();
	      this.setIsLoadedBinded = this.setIsLoaded.bind(this);
	      this.checkLoadedFontsBinded = this.checkLoadedFonts.bind(this);
	    };

	    Font.isModifier = isModifier;
	    Font.isZeroWidthJoiner = isZeroWidthJoiner;
	    Font.isFlagEmoji = isFlagEmoji;
	    Font.isRegionalCode = isRegionalCode;
	    Font.isCombinedCharacter = isCombinedCharacter;
	    Font.isRegionalFlag = isRegionalFlag;
	    Font.isVariationSelector = isVariationSelector;
	    Font.BLACK_FLAG_CODE_POINT = BLACK_FLAG_CODE_POINT;
	    var fontPrototype = {
	      addChars: addChars,
	      addFonts: addFonts,
	      getCharData: getCharData,
	      getFontByName: getFontByName,
	      measureText: measureText,
	      checkLoadedFonts: checkLoadedFonts,
	      setIsLoaded: setIsLoaded
	    };
	    Font.prototype = fontPrototype;
	    return Font;
	  }();

	  function SlotManager(animationData) {
	    this.animationData = animationData;
	  }

	  SlotManager.prototype.getProp = function (data) {
	    if (this.animationData.slots && this.animationData.slots[data.sid]) {
	      return Object.assign(data, this.animationData.slots[data.sid].p);
	    }

	    return data;
	  };

	  function slotFactory(animationData) {
	    return new SlotManager(animationData);
	  }

	  function RenderableElement() {}

	  RenderableElement.prototype = {
	    initRenderable: function initRenderable() {
	      // layer's visibility related to inpoint and outpoint. Rename isVisible to isInRange
	      this.isInRange = false; // layer's display state

	      this.hidden = false; // If layer's transparency equals 0, it can be hidden

	      this.isTransparent = false; // list of animated components

	      this.renderableComponents = [];
	    },
	    addRenderableComponent: function addRenderableComponent(component) {
	      if (this.renderableComponents.indexOf(component) === -1) {
	        this.renderableComponents.push(component);
	      }
	    },
	    removeRenderableComponent: function removeRenderableComponent(component) {
	      if (this.renderableComponents.indexOf(component) !== -1) {
	        this.renderableComponents.splice(this.renderableComponents.indexOf(component), 1);
	      }
	    },
	    prepareRenderableFrame: function prepareRenderableFrame(num) {
	      this.checkLayerLimits(num);
	    },
	    checkTransparency: function checkTransparency() {
	      if (this.finalTransform.mProp.o.v <= 0) {
	        if (!this.isTransparent && this.globalData.renderConfig.hideOnTransparent) {
	          this.isTransparent = true;
	          this.hide();
	        }
	      } else if (this.isTransparent) {
	        this.isTransparent = false;
	        this.show();
	      }
	    },

	    /**
	       * @function
	       * Initializes frame related properties.
	       *
	       * @param {number} num
	       * current frame number in Layer's time
	       *
	       */
	    checkLayerLimits: function checkLayerLimits(num) {
	      if (this.data.ip - this.data.st <= num && this.data.op - this.data.st > num) {
	        if (this.isInRange !== true) {
	          this.globalData._mdf = true;
	          this._mdf = true;
	          this.isInRange = true;
	          this.show();
	        }
	      } else if (this.isInRange !== false) {
	        this.globalData._mdf = true;
	        this.isInRange = false;
	        this.hide();
	      }
	    },
	    renderRenderable: function renderRenderable() {
	      var i;
	      var len = this.renderableComponents.length;

	      for (i = 0; i < len; i += 1) {
	        this.renderableComponents[i].renderFrame(this._isFirstFrame);
	      }
	      /* this.maskManager.renderFrame(this.finalTransform.mat);
	          this.renderableEffectsManager.renderFrame(this._isFirstFrame); */

	    },
	    sourceRectAtTime: function sourceRectAtTime() {
	      return {
	        top: 0,
	        left: 0,
	        width: 100,
	        height: 100
	      };
	    },
	    getLayerSize: function getLayerSize() {
	      if (this.data.ty === 5) {
	        return {
	          w: this.data.textData.width,
	          h: this.data.textData.height
	        };
	      }

	      return {
	        w: this.data.width,
	        h: this.data.height
	      };
	    }
	  };

	  var getBlendMode = function () {
	    var blendModeEnums = {
	      0: 'source-over',
	      1: 'multiply',
	      2: 'screen',
	      3: 'overlay',
	      4: 'darken',
	      5: 'lighten',
	      6: 'color-dodge',
	      7: 'color-burn',
	      8: 'hard-light',
	      9: 'soft-light',
	      10: 'difference',
	      11: 'exclusion',
	      12: 'hue',
	      13: 'saturation',
	      14: 'color',
	      15: 'luminosity'
	    };
	    return function (mode) {
	      return blendModeEnums[mode] || '';
	    };
	  }();

	  function SliderEffect(data, elem, container) {
	    this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
	  }

	  function AngleEffect(data, elem, container) {
	    this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
	  }

	  function ColorEffect(data, elem, container) {
	    this.p = PropertyFactory.getProp(elem, data.v, 1, 0, container);
	  }

	  function PointEffect(data, elem, container) {
	    this.p = PropertyFactory.getProp(elem, data.v, 1, 0, container);
	  }

	  function LayerIndexEffect(data, elem, container) {
	    this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
	  }

	  function MaskIndexEffect(data, elem, container) {
	    this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
	  }

	  function CheckboxEffect(data, elem, container) {
	    this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
	  }

	  function NoValueEffect() {
	    this.p = {};
	  }

	  function EffectsManager(data, element) {
	    var effects = data.ef || [];
	    this.effectElements = [];
	    var i;
	    var len = effects.length;
	    var effectItem;

	    for (i = 0; i < len; i += 1) {
	      effectItem = new GroupEffect(effects[i], element);
	      this.effectElements.push(effectItem);
	    }
	  }

	  function GroupEffect(data, element) {
	    this.init(data, element);
	  }

	  extendPrototype([DynamicPropertyContainer], GroupEffect);
	  GroupEffect.prototype.getValue = GroupEffect.prototype.iterateDynamicProperties;

	  GroupEffect.prototype.init = function (data, element) {
	    this.data = data;
	    this.effectElements = [];
	    this.initDynamicPropertyContainer(element);
	    var i;
	    var len = this.data.ef.length;
	    var eff;
	    var effects = this.data.ef;

	    for (i = 0; i < len; i += 1) {
	      eff = null;

	      switch (effects[i].ty) {
	        case 0:
	          eff = new SliderEffect(effects[i], element, this);
	          break;

	        case 1:
	          eff = new AngleEffect(effects[i], element, this);
	          break;

	        case 2:
	          eff = new ColorEffect(effects[i], element, this);
	          break;

	        case 3:
	          eff = new PointEffect(effects[i], element, this);
	          break;

	        case 4:
	        case 7:
	          eff = new CheckboxEffect(effects[i], element, this);
	          break;

	        case 10:
	          eff = new LayerIndexEffect(effects[i], element, this);
	          break;

	        case 11:
	          eff = new MaskIndexEffect(effects[i], element, this);
	          break;

	        case 5:
	          eff = new EffectsManager(effects[i], element);
	          break;
	        // case 6:

	        default:
	          eff = new NoValueEffect(effects[i]);
	          break;
	      }

	      if (eff) {
	        this.effectElements.push(eff);
	      }
	    }
	  };

	  function BaseElement() {}

	  BaseElement.prototype = {
	    checkMasks: function checkMasks() {
	      if (!this.data.hasMask) {
	        return false;
	      }

	      var i = 0;
	      var len = this.data.masksProperties.length;

	      while (i < len) {
	        if (this.data.masksProperties[i].mode !== 'n' && this.data.masksProperties[i].cl !== false) {
	          return true;
	        }

	        i += 1;
	      }

	      return false;
	    },
	    initExpressions: function initExpressions() {
	      var expressionsInterfaces = getExpressionInterfaces();

	      if (!expressionsInterfaces) {
	        return;
	      }

	      var LayerExpressionInterface = expressionsInterfaces('layer');
	      var EffectsExpressionInterface = expressionsInterfaces('effects');
	      var ShapeExpressionInterface = expressionsInterfaces('shape');
	      var TextExpressionInterface = expressionsInterfaces('text');
	      var CompExpressionInterface = expressionsInterfaces('comp');
	      this.layerInterface = LayerExpressionInterface(this);

	      if (this.data.hasMask && this.maskManager) {
	        this.layerInterface.registerMaskInterface(this.maskManager);
	      }

	      var effectsInterface = EffectsExpressionInterface.createEffectsInterface(this, this.layerInterface);
	      this.layerInterface.registerEffectsInterface(effectsInterface);

	      if (this.data.ty === 0 || this.data.xt) {
	        this.compInterface = CompExpressionInterface(this);
	      } else if (this.data.ty === 4) {
	        this.layerInterface.shapeInterface = ShapeExpressionInterface(this.shapesData, this.itemsData, this.layerInterface);
	        this.layerInterface.content = this.layerInterface.shapeInterface;
	      } else if (this.data.ty === 5) {
	        this.layerInterface.textInterface = TextExpressionInterface(this);
	        this.layerInterface.text = this.layerInterface.textInterface;
	      }
	    },
	    setBlendMode: function setBlendMode() {
	      var blendModeValue = getBlendMode(this.data.bm);
	      var elem = this.baseElement || this.layerElement;
	      elem.style['mix-blend-mode'] = blendModeValue;
	    },
	    initBaseData: function initBaseData(data, globalData, comp) {
	      this.globalData = globalData;
	      this.comp = comp;
	      this.data = data;
	      this.layerId = createElementID(); // Stretch factor for old animations missing this property.

	      if (!this.data.sr) {
	        this.data.sr = 1;
	      } // effects manager


	      this.effectsManager = new EffectsManager(this.data, this, this.dynamicProperties);
	    },
	    getType: function getType() {
	      return this.type;
	    },
	    sourceRectAtTime: function sourceRectAtTime() {}
	  };

	  /**
	   * @file
	   * Handles element's layer frame update.
	   * Checks layer in point and out point
	   *
	   */
	  function FrameElement() {}

	  FrameElement.prototype = {
	    /**
	       * @function
	       * Initializes frame related properties.
	       *
	       */
	    initFrame: function initFrame() {
	      // set to true when inpoint is rendered
	      this._isFirstFrame = false; // list of animated properties

	      this.dynamicProperties = []; // If layer has been modified in current tick this will be true

	      this._mdf = false;
	    },

	    /**
	       * @function
	       * Calculates all dynamic values
	       *
	       * @param {number} num
	       * current frame number in Layer's time
	       * @param {boolean} isVisible
	       * if layers is currently in range
	       *
	       */
	    prepareProperties: function prepareProperties(num, isVisible) {
	      var i;
	      var len = this.dynamicProperties.length;

	      for (i = 0; i < len; i += 1) {
	        if (isVisible || this._isParent && this.dynamicProperties[i].propType === 'transform') {
	          this.dynamicProperties[i].getValue();

	          if (this.dynamicProperties[i]._mdf) {
	            this.globalData._mdf = true;
	            this._mdf = true;
	          }
	        }
	      }
	    },
	    addDynamicProperty: function addDynamicProperty(prop) {
	      if (this.dynamicProperties.indexOf(prop) === -1) {
	        this.dynamicProperties.push(prop);
	      }
	    }
	  };

	  function FootageElement(data, globalData, comp) {
	    this.initFrame();
	    this.initRenderable();
	    this.assetData = globalData.getAssetData(data.refId);
	    this.footageData = globalData.imageLoader.getAsset(this.assetData);
	    this.initBaseData(data, globalData, comp);
	  }

	  FootageElement.prototype.prepareFrame = function () {};

	  extendPrototype([RenderableElement, BaseElement, FrameElement], FootageElement);

	  FootageElement.prototype.getBaseElement = function () {
	    return null;
	  };

	  FootageElement.prototype.renderFrame = function () {};

	  FootageElement.prototype.destroy = function () {};

	  FootageElement.prototype.initExpressions = function () {
	    var expressionsInterfaces = getExpressionInterfaces();

	    if (!expressionsInterfaces) {
	      return;
	    }

	    var FootageInterface = expressionsInterfaces('footage');
	    this.layerInterface = FootageInterface(this);
	  };

	  FootageElement.prototype.getFootageData = function () {
	    return this.footageData;
	  };

	  function AudioElement(data, globalData, comp) {
	    this.initFrame();
	    this.initRenderable();
	    this.assetData = globalData.getAssetData(data.refId);
	    this.initBaseData(data, globalData, comp);
	    this._isPlaying = false;
	    this._canPlay = false;
	    var assetPath = this.globalData.getAssetsPath(this.assetData);
	    this.audio = this.globalData.audioController.createAudio(assetPath);
	    this._currentTime = 0;
	    this.globalData.audioController.addAudio(this);
	    this._volumeMultiplier = 1;
	    this._volume = 1;
	    this._previousVolume = null;
	    this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {
	      _placeholder: true
	    };
	    this.lv = PropertyFactory.getProp(this, data.au && data.au.lv ? data.au.lv : {
	      k: [100]
	    }, 1, 0.01, this);
	  }

	  AudioElement.prototype.prepareFrame = function (num) {
	    this.prepareRenderableFrame(num, true);
	    this.prepareProperties(num, true);

	    if (!this.tm._placeholder) {
	      var timeRemapped = this.tm.v;
	      this._currentTime = timeRemapped;
	    } else {
	      this._currentTime = num / this.data.sr;
	    }

	    this._volume = this.lv.v[0];
	    var totalVolume = this._volume * this._volumeMultiplier;

	    if (this._previousVolume !== totalVolume) {
	      this._previousVolume = totalVolume;
	      this.audio.volume(totalVolume);
	    }
	  };

	  extendPrototype([RenderableElement, BaseElement, FrameElement], AudioElement);

	  AudioElement.prototype.renderFrame = function () {
	    if (this.isInRange && this._canPlay) {
	      if (!this._isPlaying) {
	        this.audio.play();
	        this.audio.seek(this._currentTime / this.globalData.frameRate);
	        this._isPlaying = true;
	      } else if (!this.audio.playing() || Math.abs(this._currentTime / this.globalData.frameRate - this.audio.seek()) > 0.1) {
	        this.audio.seek(this._currentTime / this.globalData.frameRate);
	      }
	    }
	  };

	  AudioElement.prototype.show = function () {// this.audio.play()
	  };

	  AudioElement.prototype.hide = function () {
	    this.audio.pause();
	    this._isPlaying = false;
	  };

	  AudioElement.prototype.pause = function () {
	    this.audio.pause();
	    this._isPlaying = false;
	    this._canPlay = false;
	  };

	  AudioElement.prototype.resume = function () {
	    this._canPlay = true;
	  };

	  AudioElement.prototype.setRate = function (rateValue) {
	    this.audio.rate(rateValue);
	  };

	  AudioElement.prototype.volume = function (volumeValue) {
	    this._volumeMultiplier = volumeValue;
	    this._previousVolume = volumeValue * this._volume;
	    this.audio.volume(this._previousVolume);
	  };

	  AudioElement.prototype.getBaseElement = function () {
	    return null;
	  };

	  AudioElement.prototype.destroy = function () {};

	  AudioElement.prototype.sourceRectAtTime = function () {};

	  AudioElement.prototype.initExpressions = function () {};

	  function BaseRenderer() {}

	  BaseRenderer.prototype.checkLayers = function (num) {
	    var i;
	    var len = this.layers.length;
	    var data;
	    this.completeLayers = true;

	    for (i = len - 1; i >= 0; i -= 1) {
	      if (!this.elements[i]) {
	        data = this.layers[i];

	        if (data.ip - data.st <= num - this.layers[i].st && data.op - data.st > num - this.layers[i].st) {
	          this.buildItem(i);
	        }
	      }

	      this.completeLayers = this.elements[i] ? this.completeLayers : false;
	    }

	    this.checkPendingElements();
	  };

	  BaseRenderer.prototype.createItem = function (layer) {
	    switch (layer.ty) {
	      case 2:
	        return this.createImage(layer);

	      case 0:
	        return this.createComp(layer);

	      case 1:
	        return this.createSolid(layer);

	      case 3:
	        return this.createNull(layer);

	      case 4:
	        return this.createShape(layer);

	      case 5:
	        return this.createText(layer);

	      case 6:
	        return this.createAudio(layer);

	      case 13:
	        return this.createCamera(layer);

	      case 15:
	        return this.createFootage(layer);

	      default:
	        return this.createNull(layer);
	    }
	  };

	  BaseRenderer.prototype.createCamera = function () {
	    throw new Error('You\'re using a 3d camera. Try the html renderer.');
	  };

	  BaseRenderer.prototype.createAudio = function (data) {
	    return new AudioElement(data, this.globalData, this);
	  };

	  BaseRenderer.prototype.createFootage = function (data) {
	    return new FootageElement(data, this.globalData, this);
	  };

	  BaseRenderer.prototype.buildAllItems = function () {
	    var i;
	    var len = this.layers.length;

	    for (i = 0; i < len; i += 1) {
	      this.buildItem(i);
	    }

	    this.checkPendingElements();
	  };

	  BaseRenderer.prototype.includeLayers = function (newLayers) {
	    this.completeLayers = false;
	    var i;
	    var len = newLayers.length;
	    var j;
	    var jLen = this.layers.length;

	    for (i = 0; i < len; i += 1) {
	      j = 0;

	      while (j < jLen) {
	        if (this.layers[j].id === newLayers[i].id) {
	          this.layers[j] = newLayers[i];
	          break;
	        }

	        j += 1;
	      }
	    }
	  };

	  BaseRenderer.prototype.setProjectInterface = function (pInterface) {
	    this.globalData.projectInterface = pInterface;
	  };

	  BaseRenderer.prototype.initItems = function () {
	    if (!this.globalData.progressiveLoad) {
	      this.buildAllItems();
	    }
	  };

	  BaseRenderer.prototype.buildElementParenting = function (element, parentName, hierarchy) {
	    var elements = this.elements;
	    var layers = this.layers;
	    var i = 0;
	    var len = layers.length;

	    while (i < len) {
	      if (layers[i].ind == parentName) {
	        // eslint-disable-line eqeqeq
	        if (!elements[i] || elements[i] === true) {
	          this.buildItem(i);
	          this.addPendingElement(element);
	        } else {
	          hierarchy.push(elements[i]);
	          elements[i].setAsParent();

	          if (layers[i].parent !== undefined) {
	            this.buildElementParenting(element, layers[i].parent, hierarchy);
	          } else {
	            element.setHierarchy(hierarchy);
	          }
	        }
	      }

	      i += 1;
	    }
	  };

	  BaseRenderer.prototype.addPendingElement = function (element) {
	    this.pendingElements.push(element);
	  };

	  BaseRenderer.prototype.searchExtraCompositions = function (assets) {
	    var i;
	    var len = assets.length;

	    for (i = 0; i < len; i += 1) {
	      if (assets[i].xt) {
	        var comp = this.createComp(assets[i]);
	        comp.initExpressions();
	        this.globalData.projectInterface.registerComposition(comp);
	      }
	    }
	  };

	  BaseRenderer.prototype.getElementById = function (ind) {
	    var i;
	    var len = this.elements.length;

	    for (i = 0; i < len; i += 1) {
	      if (this.elements[i].data.ind === ind) {
	        return this.elements[i];
	      }
	    }

	    return null;
	  };

	  BaseRenderer.prototype.getElementByPath = function (path) {
	    var pathValue = path.shift();
	    var element;

	    if (typeof pathValue === 'number') {
	      element = this.elements[pathValue];
	    } else {
	      var i;
	      var len = this.elements.length;

	      for (i = 0; i < len; i += 1) {
	        if (this.elements[i].data.nm === pathValue) {
	          element = this.elements[i];
	          break;
	        }
	      }
	    }

	    if (path.length === 0) {
	      return element;
	    }

	    return element.getElementByPath(path);
	  };

	  BaseRenderer.prototype.setupGlobalData = function (animData, fontsContainer) {
	    this.globalData.fontManager = new FontManager();
	    this.globalData.slotManager = slotFactory(animData);
	    this.globalData.fontManager.addChars(animData.chars);
	    this.globalData.fontManager.addFonts(animData.fonts, fontsContainer);
	    this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem);
	    this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem);
	    this.globalData.imageLoader = this.animationItem.imagePreloader;
	    this.globalData.audioController = this.animationItem.audioController;
	    this.globalData.frameId = 0;
	    this.globalData.frameRate = animData.fr;
	    this.globalData.nm = animData.nm;
	    this.globalData.compSize = {
	      w: animData.w,
	      h: animData.h
	    };
	  };

	  var effectTypes = {
	    TRANSFORM_EFFECT: 'transformEFfect'
	  };

	  function TransformElement() {}

	  TransformElement.prototype = {
	    initTransform: function initTransform() {
	      var mat = new Matrix();
	      this.finalTransform = {
	        mProp: this.data.ks ? TransformPropertyFactory.getTransformProperty(this, this.data.ks, this) : {
	          o: 0
	        },
	        _matMdf: false,
	        _localMatMdf: false,
	        _opMdf: false,
	        mat: mat,
	        localMat: mat,
	        localOpacity: 1
	      };

	      if (this.data.ao) {
	        this.finalTransform.mProp.autoOriented = true;
	      } // TODO: check TYPE 11: Guided elements


	      if (this.data.ty !== 11) ;
	    },
	    renderTransform: function renderTransform() {
	      this.finalTransform._opMdf = this.finalTransform.mProp.o._mdf || this._isFirstFrame;
	      this.finalTransform._matMdf = this.finalTransform.mProp._mdf || this._isFirstFrame;

	      if (this.hierarchy) {
	        var mat;
	        var finalMat = this.finalTransform.mat;
	        var i = 0;
	        var len = this.hierarchy.length; // Checking if any of the transformation matrices in the hierarchy chain has changed.

	        if (!this.finalTransform._matMdf) {
	          while (i < len) {
	            if (this.hierarchy[i].finalTransform.mProp._mdf) {
	              this.finalTransform._matMdf = true;
	              break;
	            }

	            i += 1;
	          }
	        }

	        if (this.finalTransform._matMdf) {
	          mat = this.finalTransform.mProp.v.props;
	          finalMat.cloneFromProps(mat);

	          for (i = 0; i < len; i += 1) {
	            finalMat.multiply(this.hierarchy[i].finalTransform.mProp.v);
	          }
	        }
	      }

	      if (this.finalTransform._matMdf) {
	        this.finalTransform._localMatMdf = this.finalTransform._matMdf;
	      }

	      if (this.finalTransform._opMdf) {
	        this.finalTransform.localOpacity = this.finalTransform.mProp.o.v;
	      }
	    },
	    renderLocalTransform: function renderLocalTransform() {
	      if (this.localTransforms) {
	        var i = 0;
	        var len = this.localTransforms.length;
	        this.finalTransform._localMatMdf = this.finalTransform._matMdf;

	        if (!this.finalTransform._localMatMdf || !this.finalTransform._opMdf) {
	          while (i < len) {
	            if (this.localTransforms[i]._mdf) {
	              this.finalTransform._localMatMdf = true;
	            }

	            if (this.localTransforms[i]._opMdf && !this.finalTransform._opMdf) {
	              this.finalTransform.localOpacity = this.finalTransform.mProp.o.v;
	              this.finalTransform._opMdf = true;
	            }

	            i += 1;
	          }
	        }

	        if (this.finalTransform._localMatMdf) {
	          var localMat = this.finalTransform.localMat;
	          this.localTransforms[0].matrix.clone(localMat);

	          for (i = 1; i < len; i += 1) {
	            var lmat = this.localTransforms[i].matrix;
	            localMat.multiply(lmat);
	          }

	          localMat.multiply(this.finalTransform.mat);
	        }

	        if (this.finalTransform._opMdf) {
	          var localOp = this.finalTransform.localOpacity;

	          for (i = 0; i < len; i += 1) {
	            localOp *= this.localTransforms[i].opacity * 0.01;
	          }

	          this.finalTransform.localOpacity = localOp;
	        }
	      }
	    },
	    searchEffectTransforms: function searchEffectTransforms() {
	      if (this.renderableEffectsManager) {
	        var transformEffects = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);

	        if (transformEffects.length) {
	          this.localTransforms = [];
	          this.finalTransform.localMat = new Matrix();
	          var i = 0;
	          var len = transformEffects.length;

	          for (i = 0; i < len; i += 1) {
	            this.localTransforms.push(transformEffects[i]);
	          }
	        }
	      }
	    },
	    globalToLocal: function globalToLocal(pt) {
	      var transforms = [];
	      transforms.push(this.finalTransform);
	      var flag = true;
	      var comp = this.comp;

	      while (flag) {
	        if (comp.finalTransform) {
	          if (comp.data.hasMask) {
	            transforms.splice(0, 0, comp.finalTransform);
	          }

	          comp = comp.comp;
	        } else {
	          flag = false;
	        }
	      }

	      var i;
	      var len = transforms.length;
	      var ptNew;

	      for (i = 0; i < len; i += 1) {
	        ptNew = transforms[i].mat.applyToPointArray(0, 0, 0); // ptNew = transforms[i].mat.applyToPointArray(pt[0],pt[1],pt[2]);

	        pt = [pt[0] - ptNew[0], pt[1] - ptNew[1], 0];
	      }

	      return pt;
	    },
	    mHelper: new Matrix()
	  };

	  function MaskElement(data, element, globalData) {
	    this.data = data;
	    this.element = element;
	    this.globalData = globalData;
	    this.storedData = [];
	    this.masksProperties = this.data.masksProperties || [];
	    this.maskElement = null;
	    var defs = this.globalData.defs;
	    var i;
	    var len = this.masksProperties ? this.masksProperties.length : 0;
	    this.viewData = createSizedArray(len);
	    this.solidPath = '';
	    var path;
	    var properties = this.masksProperties;
	    var count = 0;
	    var currentMasks = [];
	    var j;
	    var jLen;
	    var layerId = createElementID();
	    var rect;
	    var expansor;
	    var feMorph;
	    var x;
	    var maskType = 'clipPath';
	    var maskRef = 'clip-path';

	    for (i = 0; i < len; i += 1) {
	      if (properties[i].mode !== 'a' && properties[i].mode !== 'n' || properties[i].inv || properties[i].o.k !== 100 || properties[i].o.x) {
	        maskType = 'mask';
	        maskRef = 'mask';
	      }

	      if ((properties[i].mode === 's' || properties[i].mode === 'i') && count === 0) {
	        rect = createNS('rect');
	        rect.setAttribute('fill', '#ffffff');
	        rect.setAttribute('width', this.element.comp.data.w || 0);
	        rect.setAttribute('height', this.element.comp.data.h || 0);
	        currentMasks.push(rect);
	      } else {
	        rect = null;
	      }

	      path = createNS('path');

	      if (properties[i].mode === 'n') {
	        // TODO move this to a factory or to a constructor
	        this.viewData[i] = {
	          op: PropertyFactory.getProp(this.element, properties[i].o, 0, 0.01, this.element),
	          prop: ShapePropertyFactory.getShapeProp(this.element, properties[i], 3),
	          elem: path,
	          lastPath: ''
	        };
	        defs.appendChild(path);
	      } else {
	        count += 1;
	        path.setAttribute('fill', properties[i].mode === 's' ? '#000000' : '#ffffff');
	        path.setAttribute('clip-rule', 'nonzero');
	        var filterID;

	        if (properties[i].x.k !== 0) {
	          maskType = 'mask';
	          maskRef = 'mask';
	          x = PropertyFactory.getProp(this.element, properties[i].x, 0, null, this.element);
	          filterID = createElementID();
	          expansor = createNS('filter');
	          expansor.setAttribute('id', filterID);
	          feMorph = createNS('feMorphology');
	          feMorph.setAttribute('operator', 'erode');
	          feMorph.setAttribute('in', 'SourceGraphic');
	          feMorph.setAttribute('radius', '0');
	          expansor.appendChild(feMorph);
	          defs.appendChild(expansor);
	          path.setAttribute('stroke', properties[i].mode === 's' ? '#000000' : '#ffffff');
	        } else {
	          feMorph = null;
	          x = null;
	        } // TODO move this to a factory or to a constructor


	        this.storedData[i] = {
	          elem: path,
	          x: x,
	          expan: feMorph,
	          lastPath: '',
	          lastOperator: '',
	          filterId: filterID,
	          lastRadius: 0
	        };

	        if (properties[i].mode === 'i') {
	          jLen = currentMasks.length;
	          var g = createNS('g');

	          for (j = 0; j < jLen; j += 1) {
	            g.appendChild(currentMasks[j]);
	          }

	          var mask = createNS('mask');
	          mask.setAttribute('mask-type', 'alpha');
	          mask.setAttribute('id', layerId + '_' + count);
	          mask.appendChild(path);
	          defs.appendChild(mask);
	          g.setAttribute('mask', 'url(' + getLocationHref() + '#' + layerId + '_' + count + ')');
	          currentMasks.length = 0;
	          currentMasks.push(g);
	        } else {
	          currentMasks.push(path);
	        }

	        if (properties[i].inv && !this.solidPath) {
	          this.solidPath = this.createLayerSolidPath();
	        } // TODO move this to a factory or to a constructor


	        this.viewData[i] = {
	          elem: path,
	          lastPath: '',
	          op: PropertyFactory.getProp(this.element, properties[i].o, 0, 0.01, this.element),
	          prop: ShapePropertyFactory.getShapeProp(this.element, properties[i], 3),
	          invRect: rect
	        };

	        if (!this.viewData[i].prop.k) {
	          this.drawPath(properties[i], this.viewData[i].prop.v, this.viewData[i]);
	        }
	      }
	    }

	    this.maskElement = createNS(maskType);
	    len = currentMasks.length;

	    for (i = 0; i < len; i += 1) {
	      this.maskElement.appendChild(currentMasks[i]);
	    }

	    if (count > 0) {
	      this.maskElement.setAttribute('id', layerId);
	      this.element.maskedElement.setAttribute(maskRef, 'url(' + getLocationHref() + '#' + layerId + ')');
	      defs.appendChild(this.maskElement);
	    }

	    if (this.viewData.length) {
	      this.element.addRenderableComponent(this);
	    }
	  }

	  MaskElement.prototype.getMaskProperty = function (pos) {
	    return this.viewData[pos].prop;
	  };

	  MaskElement.prototype.renderFrame = function (isFirstFrame) {
	    var finalMat = this.element.finalTransform.mat;
	    var i;
	    var len = this.masksProperties.length;

	    for (i = 0; i < len; i += 1) {
	      if (this.viewData[i].prop._mdf || isFirstFrame) {
	        this.drawPath(this.masksProperties[i], this.viewData[i].prop.v, this.viewData[i]);
	      }

	      if (this.viewData[i].op._mdf || isFirstFrame) {
	        this.viewData[i].elem.setAttribute('fill-opacity', this.viewData[i].op.v);
	      }

	      if (this.masksProperties[i].mode !== 'n') {
	        if (this.viewData[i].invRect && (this.element.finalTransform.mProp._mdf || isFirstFrame)) {
	          this.viewData[i].invRect.setAttribute('transform', finalMat.getInverseMatrix().to2dCSS());
	        }

	        if (this.storedData[i].x && (this.storedData[i].x._mdf || isFirstFrame)) {
	          var feMorph = this.storedData[i].expan;

	          if (this.storedData[i].x.v < 0) {
	            if (this.storedData[i].lastOperator !== 'erode') {
	              this.storedData[i].lastOperator = 'erode';
	              this.storedData[i].elem.setAttribute('filter', 'url(' + getLocationHref() + '#' + this.storedData[i].filterId + ')');
	            }

	            feMorph.setAttribute('radius', -this.storedData[i].x.v);
	          } else {
	            if (this.storedData[i].lastOperator !== 'dilate') {
	              this.storedData[i].lastOperator = 'dilate';
	              this.storedData[i].elem.setAttribute('filter', null);
	            }

	            this.storedData[i].elem.setAttribute('stroke-width', this.storedData[i].x.v * 2);
	          }
	        }
	      }
	    }
	  };

	  MaskElement.prototype.getMaskelement = function () {
	    return this.maskElement;
	  };

	  MaskElement.prototype.createLayerSolidPath = function () {
	    var path = 'M0,0 ';
	    path += ' h' + this.globalData.compSize.w;
	    path += ' v' + this.globalData.compSize.h;
	    path += ' h-' + this.globalData.compSize.w;
	    path += ' v-' + this.globalData.compSize.h + ' ';
	    return path;
	  };

	  MaskElement.prototype.drawPath = function (pathData, pathNodes, viewData) {
	    var pathString = ' M' + pathNodes.v[0][0] + ',' + pathNodes.v[0][1];
	    var i;
	    var len;
	    len = pathNodes._length;

	    for (i = 1; i < len; i += 1) {
	      // pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[i][0]+','+pathNodes.i[i][1] + " "+pathNodes.v[i][0]+','+pathNodes.v[i][1];
	      pathString += ' C' + pathNodes.o[i - 1][0] + ',' + pathNodes.o[i - 1][1] + ' ' + pathNodes.i[i][0] + ',' + pathNodes.i[i][1] + ' ' + pathNodes.v[i][0] + ',' + pathNodes.v[i][1];
	    } // pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[0][0]+','+pathNodes.i[0][1] + " "+pathNodes.v[0][0]+','+pathNodes.v[0][1];


	    if (pathNodes.c && len > 1) {
	      pathString += ' C' + pathNodes.o[i - 1][0] + ',' + pathNodes.o[i - 1][1] + ' ' + pathNodes.i[0][0] + ',' + pathNodes.i[0][1] + ' ' + pathNodes.v[0][0] + ',' + pathNodes.v[0][1];
	    } // pathNodes.__renderedString = pathString;


	    if (viewData.lastPath !== pathString) {
	      var pathShapeValue = '';

	      if (viewData.elem) {
	        if (pathNodes.c) {
	          pathShapeValue = pathData.inv ? this.solidPath + pathString : pathString;
	        }

	        viewData.elem.setAttribute('d', pathShapeValue);
	      }

	      viewData.lastPath = pathString;
	    }
	  };

	  MaskElement.prototype.destroy = function () {
	    this.element = null;
	    this.globalData = null;
	    this.maskElement = null;
	    this.data = null;
	    this.masksProperties = null;
	  };

	  var filtersFactory = function () {
	    var ob = {};
	    ob.createFilter = createFilter;
	    ob.createAlphaToLuminanceFilter = createAlphaToLuminanceFilter;

	    function createFilter(filId, skipCoordinates) {
	      var fil = createNS('filter');
	      fil.setAttribute('id', filId);

	      if (skipCoordinates !== true) {
	        fil.setAttribute('filterUnits', 'objectBoundingBox');
	        fil.setAttribute('x', '0%');
	        fil.setAttribute('y', '0%');
	        fil.setAttribute('width', '100%');
	        fil.setAttribute('height', '100%');
	      }

	      return fil;
	    }

	    function createAlphaToLuminanceFilter() {
	      var feColorMatrix = createNS('feColorMatrix');
	      feColorMatrix.setAttribute('type', 'matrix');
	      feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
	      feColorMatrix.setAttribute('values', '0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1');
	      return feColorMatrix;
	    }

	    return ob;
	  }();

	  var featureSupport = function () {
	    var ob = {
	      maskType: true,
	      svgLumaHidden: true,
	      offscreenCanvas: typeof OffscreenCanvas !== 'undefined'
	    };

	    if (/MSIE 10/i.test(navigator.userAgent) || /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge\/\d./i.test(navigator.userAgent)) {
	      ob.maskType = false;
	    }

	    if (/firefox/i.test(navigator.userAgent)) {
	      ob.svgLumaHidden = false;
	    }

	    return ob;
	  }();

	  var registeredEffects$1 = {};
	  var idPrefix = 'filter_result_';

	  function SVGEffects(elem) {
	    var i;
	    var source = 'SourceGraphic';
	    var len = elem.data.ef ? elem.data.ef.length : 0;
	    var filId = createElementID();
	    var fil = filtersFactory.createFilter(filId, true);
	    var count = 0;
	    this.filters = [];
	    var filterManager;

	    for (i = 0; i < len; i += 1) {
	      filterManager = null;
	      var type = elem.data.ef[i].ty;

	      if (registeredEffects$1[type]) {
	        var Effect = registeredEffects$1[type].effect;
	        filterManager = new Effect(fil, elem.effectsManager.effectElements[i], elem, idPrefix + count, source);
	        source = idPrefix + count;

	        if (registeredEffects$1[type].countsAsEffect) {
	          count += 1;
	        }
	      }

	      if (filterManager) {
	        this.filters.push(filterManager);
	      }
	    }

	    if (count) {
	      elem.globalData.defs.appendChild(fil);
	      elem.layerElement.setAttribute('filter', 'url(' + getLocationHref() + '#' + filId + ')');
	    }

	    if (this.filters.length) {
	      elem.addRenderableComponent(this);
	    }
	  }

	  SVGEffects.prototype.renderFrame = function (_isFirstFrame) {
	    var i;
	    var len = this.filters.length;

	    for (i = 0; i < len; i += 1) {
	      this.filters[i].renderFrame(_isFirstFrame);
	    }
	  };

	  SVGEffects.prototype.getEffects = function (type) {
	    var i;
	    var len = this.filters.length;
	    var effects = [];

	    for (i = 0; i < len; i += 1) {
	      if (this.filters[i].type === type) {
	        effects.push(this.filters[i]);
	      }
	    }

	    return effects;
	  };

	  function registerEffect$1(id, effect, countsAsEffect) {
	    registeredEffects$1[id] = {
	      effect: effect,
	      countsAsEffect: countsAsEffect
	    };
	  }

	  function SVGBaseElement() {}

	  SVGBaseElement.prototype = {
	    initRendererElement: function initRendererElement() {
	      this.layerElement = createNS('g');
	    },
	    createContainerElements: function createContainerElements() {
	      this.matteElement = createNS('g');
	      this.transformedElement = this.layerElement;
	      this.maskedElement = this.layerElement;
	      this._sizeChanged = false;
	      var layerElementParent = null; // If this layer acts as a mask for the following layer

	      if (this.data.td) {
	        this.matteMasks = {};
	        var gg = createNS('g');
	        gg.setAttribute('id', this.layerId);
	        gg.appendChild(this.layerElement);
	        layerElementParent = gg;
	        this.globalData.defs.appendChild(gg);
	      } else if (this.data.tt) {
	        this.matteElement.appendChild(this.layerElement);
	        layerElementParent = this.matteElement;
	        this.baseElement = this.matteElement;
	      } else {
	        this.baseElement = this.layerElement;
	      }

	      if (this.data.ln) {
	        this.layerElement.setAttribute('id', this.data.ln);
	      }

	      if (this.data.cl) {
	        this.layerElement.setAttribute('class', this.data.cl);
	      } // Clipping compositions to hide content that exceeds boundaries. If collapsed transformations is on, component should not be clipped


	      if (this.data.ty === 0 && !this.data.hd) {
	        var cp = createNS('clipPath');
	        var pt = createNS('path');
	        pt.setAttribute('d', 'M0,0 L' + this.data.w + ',0 L' + this.data.w + ',' + this.data.h + ' L0,' + this.data.h + 'z');
	        var clipId = createElementID();
	        cp.setAttribute('id', clipId);
	        cp.appendChild(pt);
	        this.globalData.defs.appendChild(cp);

	        if (this.checkMasks()) {
	          var cpGroup = createNS('g');
	          cpGroup.setAttribute('clip-path', 'url(' + getLocationHref() + '#' + clipId + ')');
	          cpGroup.appendChild(this.layerElement);
	          this.transformedElement = cpGroup;

	          if (layerElementParent) {
	            layerElementParent.appendChild(this.transformedElement);
	          } else {
	            this.baseElement = this.transformedElement;
	          }
	        } else {
	          this.layerElement.setAttribute('clip-path', 'url(' + getLocationHref() + '#' + clipId + ')');
	        }
	      }

	      if (this.data.bm !== 0) {
	        this.setBlendMode();
	      }
	    },
	    renderElement: function renderElement() {
	      if (this.finalTransform._localMatMdf) {
	        this.transformedElement.setAttribute('transform', this.finalTransform.localMat.to2dCSS());
	      }

	      if (this.finalTransform._opMdf) {
	        this.transformedElement.setAttribute('opacity', this.finalTransform.localOpacity);
	      }
	    },
	    destroyBaseElement: function destroyBaseElement() {
	      this.layerElement = null;
	      this.matteElement = null;
	      this.maskManager.destroy();
	    },
	    getBaseElement: function getBaseElement() {
	      if (this.data.hd) {
	        return null;
	      }

	      return this.baseElement;
	    },
	    createRenderableComponents: function createRenderableComponents() {
	      this.maskManager = new MaskElement(this.data, this, this.globalData);
	      this.renderableEffectsManager = new SVGEffects(this);
	      this.searchEffectTransforms();
	    },
	    getMatte: function getMatte(matteType) {
	      // This should not be a common case. But for backward compatibility, we'll create the matte object.
	      // It solves animations that have two consecutive layers marked as matte masks.
	      // Which is an undefined behavior in AE.
	      if (!this.matteMasks) {
	        this.matteMasks = {};
	      }

	      if (!this.matteMasks[matteType]) {
	        var id = this.layerId + '_' + matteType;
	        var filId;
	        var fil;
	        var useElement;
	        var gg;

	        if (matteType === 1 || matteType === 3) {
	          var masker = createNS('mask');
	          masker.setAttribute('id', id);
	          masker.setAttribute('mask-type', matteType === 3 ? 'luminance' : 'alpha');
	          useElement = createNS('use');
	          useElement.setAttributeNS('http://www.w3.org/1999/xlink', 'href', '#' + this.layerId);
	          masker.appendChild(useElement);
	          this.globalData.defs.appendChild(masker);

	          if (!featureSupport.maskType && matteType === 1) {
	            masker.setAttribute('mask-type', 'luminance');
	            filId = createElementID();
	            fil = filtersFactory.createFilter(filId);
	            this.globalData.defs.appendChild(fil);
	            fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
	            gg = createNS('g');
	            gg.appendChild(useElement);
	            masker.appendChild(gg);
	            gg.setAttribute('filter', 'url(' + getLocationHref() + '#' + filId + ')');
	          }
	        } else if (matteType === 2) {
	          var maskGroup = createNS('mask');
	          maskGroup.setAttribute('id', id);
	          maskGroup.setAttribute('mask-type', 'alpha');
	          var maskGrouper = createNS('g');
	          maskGroup.appendChild(maskGrouper);
	          filId = createElementID();
	          fil = filtersFactory.createFilter(filId); /// /

	          var feCTr = createNS('feComponentTransfer');
	          feCTr.setAttribute('in', 'SourceGraphic');
	          fil.appendChild(feCTr);
	          var feFunc = createNS('feFuncA');
	          feFunc.setAttribute('type', 'table');
	          feFunc.setAttribute('tableValues', '1.0 0.0');
	          feCTr.appendChild(feFunc); /// /

	          this.globalData.defs.appendChild(fil);
	          var alphaRect = createNS('rect');
	          alphaRect.setAttribute('width', this.comp.data.w);
	          alphaRect.setAttribute('height', this.comp.data.h);
	          alphaRect.setAttribute('x', '0');
	          alphaRect.setAttribute('y', '0');
	          alphaRect.setAttribute('fill', '#ffffff');
	          alphaRect.setAttribute('opacity', '0');
	          maskGrouper.setAttribute('filter', 'url(' + getLocationHref() + '#' + filId + ')');
	          maskGrouper.appendChild(alphaRect);
	          useElement = createNS('use');
	          useElement.setAttributeNS('http://www.w3.org/1999/xlink', 'href', '#' + this.layerId);
	          maskGrouper.appendChild(useElement);

	          if (!featureSupport.maskType) {
	            maskGroup.setAttribute('mask-type', 'luminance');
	            fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
	            gg = createNS('g');
	            maskGrouper.appendChild(alphaRect);
	            gg.appendChild(this.layerElement);
	            maskGrouper.appendChild(gg);
	          }

	          this.globalData.defs.appendChild(maskGroup);
	        }

	        this.matteMasks[matteType] = id;
	      }

	      return this.matteMasks[matteType];
	    },
	    setMatte: function setMatte(id) {
	      if (!this.matteElement) {
	        return;
	      }

	      this.matteElement.setAttribute('mask', 'url(' + getLocationHref() + '#' + id + ')');
	    }
	  };

	  /**
	   * @file
	   * Handles AE's layer parenting property.
	   *
	   */
	  function HierarchyElement() {}

	  HierarchyElement.prototype = {
	    /**
	       * @function
	       * Initializes hierarchy properties
	       *
	       */
	    initHierarchy: function initHierarchy() {
	      // element's parent list
	      this.hierarchy = []; // if element is parent of another layer _isParent will be true

	      this._isParent = false;
	      this.checkParenting();
	    },

	    /**
	       * @function
	       * Sets layer's hierarchy.
	       * @param {array} hierarch
	       * layer's parent list
	       *
	       */
	    setHierarchy: function setHierarchy(hierarchy) {
	      this.hierarchy = hierarchy;
	    },

	    /**
	       * @function
	       * Sets layer as parent.
	       *
	       */
	    setAsParent: function setAsParent() {
	      this._isParent = true;
	    },

	    /**
	       * @function
	       * Searches layer's parenting chain
	       *
	       */
	    checkParenting: function checkParenting() {
	      if (this.data.parent !== undefined) {
	        this.comp.buildElementParenting(this, this.data.parent, []);
	      }
	    }
	  };

	  function RenderableDOMElement() {}

	  (function () {
	    var _prototype = {
	      initElement: function initElement(data, globalData, comp) {
	        this.initFrame();
	        this.initBaseData(data, globalData, comp);
	        this.initTransform(data, globalData, comp);
	        this.initHierarchy();
	        this.initRenderable();
	        this.initRendererElement();
	        this.createContainerElements();
	        this.createRenderableComponents();
	        this.createContent();
	        this.hide();
	      },
	      hide: function hide() {
	        // console.log('HIDE', this);
	        if (!this.hidden && (!this.isInRange || this.isTransparent)) {
	          var elem = this.baseElement || this.layerElement;
	          elem.style.display = 'none';
	          this.hidden = true;
	        }
	      },
	      show: function show() {
	        // console.log('SHOW', this);
	        if (this.isInRange && !this.isTransparent) {
	          if (!this.data.hd) {
	            var elem = this.baseElement || this.layerElement;
	            elem.style.display = 'block';
	          }

	          this.hidden = false;
	          this._isFirstFrame = true;
	        }
	      },
	      renderFrame: function renderFrame() {
	        // If it is exported as hidden (data.hd === true) no need to render
	        // If it is not visible no need to render
	        if (this.data.hd || this.hidden) {
	          return;
	        }

	        this.renderTransform();
	        this.renderRenderable();
	        this.renderLocalTransform();
	        this.renderElement();
	        this.renderInnerContent();

	        if (this._isFirstFrame) {
	          this._isFirstFrame = false;
	        }
	      },
	      renderInnerContent: function renderInnerContent() {},
	      prepareFrame: function prepareFrame(num) {
	        this._mdf = false;
	        this.prepareRenderableFrame(num);
	        this.prepareProperties(num, this.isInRange);
	        this.checkTransparency();
	      },
	      destroy: function destroy() {
	        this.innerElem = null;
	        this.destroyBaseElement();
	      }
	    };
	    extendPrototype([RenderableElement, createProxyFunction(_prototype)], RenderableDOMElement);
	  })();

	  function IImageElement(data, globalData, comp) {
	    this.assetData = globalData.getAssetData(data.refId);

	    if (this.assetData && this.assetData.sid) {
	      this.assetData = globalData.slotManager.getProp(this.assetData);
	    }

	    this.initElement(data, globalData, comp);
	    this.sourceRect = {
	      top: 0,
	      left: 0,
	      width: this.assetData.w,
	      height: this.assetData.h
	    };
	  }

	  extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], IImageElement);

	  IImageElement.prototype.createContent = function () {
	    var assetPath = this.globalData.getAssetsPath(this.assetData);
	    this.innerElem = createNS('image');
	    this.innerElem.setAttribute('width', this.assetData.w + 'px');
	    this.innerElem.setAttribute('height', this.assetData.h + 'px');
	    this.innerElem.setAttribute('preserveAspectRatio', this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio);
	    this.innerElem.setAttributeNS('http://www.w3.org/1999/xlink', 'href', assetPath);
	    this.layerElement.appendChild(this.innerElem);
	  };

	  IImageElement.prototype.sourceRectAtTime = function () {
	    return this.sourceRect;
	  };

	  function ProcessedElement(element, position) {
	    this.elem = element;
	    this.pos = position;
	  }

	  function IShapeElement() {}

	  IShapeElement.prototype = {
	    addShapeToModifiers: function addShapeToModifiers(data) {
	      var i;
	      var len = this.shapeModifiers.length;

	      for (i = 0; i < len; i += 1) {
	        this.shapeModifiers[i].addShape(data);
	      }
	    },
	    isShapeInAnimatedModifiers: function isShapeInAnimatedModifiers(data) {
	      var i = 0;
	      var len = this.shapeModifiers.length;

	      while (i < len) {
	        if (this.shapeModifiers[i].isAnimatedWithShape(data)) {
	          return true;
	        }
	      }

	      return false;
	    },
	    renderModifiers: function renderModifiers() {
	      if (!this.shapeModifiers.length) {
	        return;
	      }

	      var i;
	      var len = this.shapes.length;

	      for (i = 0; i < len; i += 1) {
	        this.shapes[i].sh.reset();
	      }

	      len = this.shapeModifiers.length;
	      var shouldBreakProcess;

	      for (i = len - 1; i >= 0; i -= 1) {
	        shouldBreakProcess = this.shapeModifiers[i].processShapes(this._isFirstFrame); // workaround to fix cases where a repeater resets the shape so the following processes get called twice
	        // TODO: find a better solution for this

	        if (shouldBreakProcess) {
	          break;
	        }
	      }
	    },
	    searchProcessedElement: function searchProcessedElement(elem) {
	      var elements = this.processedElements;
	      var i = 0;
	      var len = elements.length;

	      while (i < len) {
	        if (elements[i].elem === elem) {
	          return elements[i].pos;
	        }

	        i += 1;
	      }

	      return 0;
	    },
	    addProcessedElement: function addProcessedElement(elem, pos) {
	      var elements = this.processedElements;
	      var i = elements.length;

	      while (i) {
	        i -= 1;

	        if (elements[i].elem === elem) {
	          elements[i].pos = pos;
	          return;
	        }
	      }

	      elements.push(new ProcessedElement(elem, pos));
	    },
	    prepareFrame: function prepareFrame(num) {
	      this.prepareRenderableFrame(num);
	      this.prepareProperties(num, this.isInRange);
	    }
	  };

	  var lineCapEnum = {
	    1: 'butt',
	    2: 'round',
	    3: 'square'
	  };
	  var lineJoinEnum = {
	    1: 'miter',
	    2: 'round',
	    3: 'bevel'
	  };

	  function SVGShapeData(transformers, level, shape) {
	    this.caches = [];
	    this.styles = [];
	    this.transformers = transformers;
	    this.lStr = '';
	    this.sh = shape;
	    this.lvl = level; // TODO find if there are some cases where _isAnimated can be false.
	    // For now, since shapes add up with other shapes. They have to be calculated every time.
	    // One way of finding out is checking if all styles associated to this shape depend only of this shape

	    this._isAnimated = !!shape.k; // TODO: commenting this for now since all shapes are animated

	    var i = 0;
	    var len = transformers.length;

	    while (i < len) {
	      if (transformers[i].mProps.dynamicProperties.length) {
	        this._isAnimated = true;
	        break;
	      }

	      i += 1;
	    }
	  }

	  SVGShapeData.prototype.setAsAnimated = function () {
	    this._isAnimated = true;
	  };

	  function SVGStyleData(data, level) {
	    this.data = data;
	    this.type = data.ty;
	    this.d = '';
	    this.lvl = level;
	    this._mdf = false;
	    this.closed = data.hd === true;
	    this.pElem = createNS('path');
	    this.msElem = null;
	  }

	  SVGStyleData.prototype.reset = function () {
	    this.d = '';
	    this._mdf = false;
	  };

	  function DashProperty(elem, data, renderer, container) {
	    this.elem = elem;
	    this.frameId = -1;
	    this.dataProps = createSizedArray(data.length);
	    this.renderer = renderer;
	    this.k = false;
	    this.dashStr = '';
	    this.dashArray = createTypedArray('float32', data.length ? data.length - 1 : 0);
	    this.dashoffset = createTypedArray('float32', 1);
	    this.initDynamicPropertyContainer(container);
	    var i;
	    var len = data.length || 0;
	    var prop;

	    for (i = 0; i < len; i += 1) {
	      prop = PropertyFactory.getProp(elem, data[i].v, 0, 0, this);
	      this.k = prop.k || this.k;
	      this.dataProps[i] = {
	        n: data[i].n,
	        p: prop
	      };
	    }

	    if (!this.k) {
	      this.getValue(true);
	    }

	    this._isAnimated = this.k;
	  }

	  DashProperty.prototype.getValue = function (forceRender) {
	    if (this.elem.globalData.frameId === this.frameId && !forceRender) {
	      return;
	    }

	    this.frameId = this.elem.globalData.frameId;
	    this.iterateDynamicProperties();
	    this._mdf = this._mdf || forceRender;

	    if (this._mdf) {
	      var i = 0;
	      var len = this.dataProps.length;

	      if (this.renderer === 'svg') {
	        this.dashStr = '';
	      }

	      for (i = 0; i < len; i += 1) {
	        if (this.dataProps[i].n !== 'o') {
	          if (this.renderer === 'svg') {
	            this.dashStr += ' ' + this.dataProps[i].p.v;
	          } else {
	            this.dashArray[i] = this.dataProps[i].p.v;
	          }
	        } else {
	          this.dashoffset[0] = this.dataProps[i].p.v;
	        }
	      }
	    }
	  };

	  extendPrototype([DynamicPropertyContainer], DashProperty);

	  function SVGStrokeStyleData(elem, data, styleOb) {
	    this.initDynamicPropertyContainer(elem);
	    this.getValue = this.iterateDynamicProperties;
	    this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);
	    this.w = PropertyFactory.getProp(elem, data.w, 0, null, this);
	    this.d = new DashProperty(elem, data.d || {}, 'svg', this);
	    this.c = PropertyFactory.getProp(elem, data.c, 1, 255, this);
	    this.style = styleOb;
	    this._isAnimated = !!this._isAnimated;
	  }

	  extendPrototype([DynamicPropertyContainer], SVGStrokeStyleData);

	  function SVGFillStyleData(elem, data, styleOb) {
	    this.initDynamicPropertyContainer(elem);
	    this.getValue = this.iterateDynamicProperties;
	    this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);
	    this.c = PropertyFactory.getProp(elem, data.c, 1, 255, this);
	    this.style = styleOb;
	  }

	  extendPrototype([DynamicPropertyContainer], SVGFillStyleData);

	  function SVGNoStyleData(elem, data, styleOb) {
	    this.initDynamicPropertyContainer(elem);
	    this.getValue = this.iterateDynamicProperties;
	    this.style = styleOb;
	  }

	  extendPrototype([DynamicPropertyContainer], SVGNoStyleData);

	  function GradientProperty(elem, data, container) {
	    this.data = data;
	    this.c = createTypedArray('uint8c', data.p * 4);
	    var cLength = data.k.k[0].s ? data.k.k[0].s.length - data.p * 4 : data.k.k.length - data.p * 4;
	    this.o = createTypedArray('float32', cLength);
	    this._cmdf = false;
	    this._omdf = false;
	    this._collapsable = this.checkCollapsable();
	    this._hasOpacity = cLength;
	    this.initDynamicPropertyContainer(container);
	    this.prop = PropertyFactory.getProp(elem, data.k, 1, null, this);
	    this.k = this.prop.k;
	    this.getValue(true);
	  }

	  GradientProperty.prototype.comparePoints = function (values, points) {
	    var i = 0;
	    var len = this.o.length / 2;
	    var diff;

	    while (i < len) {
	      diff = Math.abs(values[i * 4] - values[points * 4 + i * 2]);

	      if (diff > 0.01) {
	        return false;
	      }

	      i += 1;
	    }

	    return true;
	  };

	  GradientProperty.prototype.checkCollapsable = function () {
	    if (this.o.length / 2 !== this.c.length / 4) {
	      return false;
	    }

	    if (this.data.k.k[0].s) {
	      var i = 0;
	      var len = this.data.k.k.length;

	      while (i < len) {
	        if (!this.comparePoints(this.data.k.k[i].s, this.data.p)) {
	          return false;
	        }

	        i += 1;
	      }
	    } else if (!this.comparePoints(this.data.k.k, this.data.p)) {
	      return false;
	    }

	    return true;
	  };

	  GradientProperty.prototype.getValue = function (forceRender) {
	    this.prop.getValue();
	    this._mdf = false;
	    this._cmdf = false;
	    this._omdf = false;

	    if (this.prop._mdf || forceRender) {
	      var i;
	      var len = this.data.p * 4;
	      var mult;
	      var val;

	      for (i = 0; i < len; i += 1) {
	        mult = i % 4 === 0 ? 100 : 255;
	        val = Math.round(this.prop.v[i] * mult);

	        if (this.c[i] !== val) {
	          this.c[i] = val;
	          this._cmdf = !forceRender;
	        }
	      }

	      if (this.o.length) {
	        len = this.prop.v.length;

	        for (i = this.data.p * 4; i < len; i += 1) {
	          mult = i % 2 === 0 ? 100 : 1;
	          val = i % 2 === 0 ? Math.round(this.prop.v[i] * 100) : this.prop.v[i];

	          if (this.o[i - this.data.p * 4] !== val) {
	            this.o[i - this.data.p * 4] = val;
	            this._omdf = !forceRender;
	          }
	        }
	      }

	      this._mdf = !forceRender;
	    }
	  };

	  extendPrototype([DynamicPropertyContainer], GradientProperty);

	  function SVGGradientFillStyleData(elem, data, styleOb) {
	    this.initDynamicPropertyContainer(elem);
	    this.getValue = this.iterateDynamicProperties;
	    this.initGradientData(elem, data, styleOb);
	  }

	  SVGGradientFillStyleData.prototype.initGradientData = function (elem, data, styleOb) {
	    this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);
	    this.s = PropertyFactory.getProp(elem, data.s, 1, null, this);
	    this.e = PropertyFactory.getProp(elem, data.e, 1, null, this);
	    this.h = PropertyFactory.getProp(elem, data.h || {
	      k: 0
	    }, 0, 0.01, this);
	    this.a = PropertyFactory.getProp(elem, data.a || {
	      k: 0
	    }, 0, degToRads, this);
	    this.g = new GradientProperty(elem, data.g, this);
	    this.style = styleOb;
	    this.stops = [];
	    this.setGradientData(styleOb.pElem, data);
	    this.setGradientOpacity(data, styleOb);
	    this._isAnimated = !!this._isAnimated;
	  };

	  SVGGradientFillStyleData.prototype.setGradientData = function (pathElement, data) {
	    var gradientId = createElementID();
	    var gfill = createNS(data.t === 1 ? 'linearGradient' : 'radialGradient');
	    gfill.setAttribute('id', gradientId);
	    gfill.setAttribute('spreadMethod', 'pad');
	    gfill.setAttribute('gradientUnits', 'userSpaceOnUse');
	    var stops = [];
	    var stop;
	    var j;
	    var jLen;
	    jLen = data.g.p * 4;

	    for (j = 0; j < jLen; j += 4) {
	      stop = createNS('stop');
	      gfill.appendChild(stop);
	      stops.push(stop);
	    }

	    pathElement.setAttribute(data.ty === 'gf' ? 'fill' : 'stroke', 'url(' + getLocationHref() + '#' + gradientId + ')');
	    this.gf = gfill;
	    this.cst = stops;
	  };

	  SVGGradientFillStyleData.prototype.setGradientOpacity = function (data, styleOb) {
	    if (this.g._hasOpacity && !this.g._collapsable) {
	      var stop;
	      var j;
	      var jLen;
	      var mask = createNS('mask');
	      var maskElement = createNS('path');
	      mask.appendChild(maskElement);
	      var opacityId = createElementID();
	      var maskId = createElementID();
	      mask.setAttribute('id', maskId);
	      var opFill = createNS(data.t === 1 ? 'linearGradient' : 'radialGradient');
	      opFill.setAttribute('id', opacityId);
	      opFill.setAttribute('spreadMethod', 'pad');
	      opFill.setAttribute('gradientUnits', 'userSpaceOnUse');
	      jLen = data.g.k.k[0].s ? data.g.k.k[0].s.length : data.g.k.k.length;
	      var stops = this.stops;

	      for (j = data.g.p * 4; j < jLen; j += 2) {
	        stop = createNS('stop');
	        stop.setAttribute('stop-color', 'rgb(255,255,255)');
	        opFill.appendChild(stop);
	        stops.push(stop);
	      }

	      maskElement.setAttribute(data.ty === 'gf' ? 'fill' : 'stroke', 'url(' + getLocationHref() + '#' + opacityId + ')');

	      if (data.ty === 'gs') {
	        maskElement.setAttribute('stroke-linecap', lineCapEnum[data.lc || 2]);
	        maskElement.setAttribute('stroke-linejoin', lineJoinEnum[data.lj || 2]);

	        if (data.lj === 1) {
	          maskElement.setAttribute('stroke-miterlimit', data.ml);
	        }
	      }

	      this.of = opFill;
	      this.ms = mask;
	      this.ost = stops;
	      this.maskId = maskId;
	      styleOb.msElem = maskElement;
	    }
	  };

	  extendPrototype([DynamicPropertyContainer], SVGGradientFillStyleData);

	  function SVGGradientStrokeStyleData(elem, data, styleOb) {
	    this.initDynamicPropertyContainer(elem);
	    this.getValue = this.iterateDynamicProperties;
	    this.w = PropertyFactory.getProp(elem, data.w, 0, null, this);
	    this.d = new DashProperty(elem, data.d || {}, 'svg', this);
	    this.initGradientData(elem, data, styleOb);
	    this._isAnimated = !!this._isAnimated;
	  }

	  extendPrototype([SVGGradientFillStyleData, DynamicPropertyContainer], SVGGradientStrokeStyleData);

	  function ShapeGroupData() {
	    this.it = [];
	    this.prevViewData = [];
	    this.gr = createNS('g');
	  }

	  function SVGTransformData(mProps, op, container) {
	    this.transform = {
	      mProps: mProps,
	      op: op,
	      container: container
	    };
	    this.elements = [];
	    this._isAnimated = this.transform.mProps.dynamicProperties.length || this.transform.op.effectsSequence.length;
	  }

	  var buildShapeString = function buildShapeString(pathNodes, length, closed, mat) {
	    if (length === 0) {
	      return '';
	    }

	    var _o = pathNodes.o;
	    var _i = pathNodes.i;
	    var _v = pathNodes.v;
	    var i;
	    var shapeString = ' M' + mat.applyToPointStringified(_v[0][0], _v[0][1]);

	    for (i = 1; i < length; i += 1) {
	      shapeString += ' C' + mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) + ' ' + mat.applyToPointStringified(_i[i][0], _i[i][1]) + ' ' + mat.applyToPointStringified(_v[i][0], _v[i][1]);
	    }

	    if (closed && length) {
	      shapeString += ' C' + mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) + ' ' + mat.applyToPointStringified(_i[0][0], _i[0][1]) + ' ' + mat.applyToPointStringified(_v[0][0], _v[0][1]);
	      shapeString += 'z';
	    }

	    return shapeString;
	  };

	  var SVGElementsRenderer = function () {
	    var _identityMatrix = new Matrix();

	    var _matrixHelper = new Matrix();

	    var ob = {
	      createRenderFunction: createRenderFunction
	    };

	    function createRenderFunction(data) {
	      switch (data.ty) {
	        case 'fl':
	          return renderFill;

	        case 'gf':
	          return renderGradient;

	        case 'gs':
	          return renderGradientStroke;

	        case 'st':
	          return renderStroke;

	        case 'sh':
	        case 'el':
	        case 'rc':
	        case 'sr':
	          return renderPath;

	        case 'tr':
	          return renderContentTransform;

	        case 'no':
	          return renderNoop;

	        default:
	          return null;
	      }
	    }

	    function renderContentTransform(styleData, itemData, isFirstFrame) {
	      if (isFirstFrame || itemData.transform.op._mdf) {
	        itemData.transform.container.setAttribute('opacity', itemData.transform.op.v);
	      }

	      if (isFirstFrame || itemData.transform.mProps._mdf) {
	        itemData.transform.container.setAttribute('transform', itemData.transform.mProps.v.to2dCSS());
	      }
	    }

	    function renderNoop() {}

	    function renderPath(styleData, itemData, isFirstFrame) {
	      var j;
	      var jLen;
	      var pathStringTransformed;
	      var redraw;
	      var pathNodes;
	      var l;
	      var lLen = itemData.styles.length;
	      var lvl = itemData.lvl;
	      var paths;
	      var mat;
	      var iterations;
	      var k;

	      for (l = 0; l < lLen; l += 1) {
	        redraw = itemData.sh._mdf || isFirstFrame;

	        if (itemData.styles[l].lvl < lvl) {
	          mat = _matrixHelper.reset();
	          iterations = lvl - itemData.styles[l].lvl;
	          k = itemData.transformers.length - 1;

	          while (!redraw && iterations > 0) {
	            redraw = itemData.transformers[k].mProps._mdf || redraw;
	            iterations -= 1;
	            k -= 1;
	          }

	          if (redraw) {
	            iterations = lvl - itemData.styles[l].lvl;
	            k = itemData.transformers.length - 1;

	            while (iterations > 0) {
	              mat.multiply(itemData.transformers[k].mProps.v);
	              iterations -= 1;
	              k -= 1;
	            }
	          }
	        } else {
	          mat = _identityMatrix;
	        }

	        paths = itemData.sh.paths;
	        jLen = paths._length;

	        if (redraw) {
	          pathStringTransformed = '';

	          for (j = 0; j < jLen; j += 1) {
	            pathNodes = paths.shapes[j];

	            if (pathNodes && pathNodes._length) {
	              pathStringTransformed += buildShapeString(pathNodes, pathNodes._length, pathNodes.c, mat);
	            }
	          }

	          itemData.caches[l] = pathStringTransformed;
	        } else {
	          pathStringTransformed = itemData.caches[l];
	        }

	        itemData.styles[l].d += styleData.hd === true ? '' : pathStringTransformed;
	        itemData.styles[l]._mdf = redraw || itemData.styles[l]._mdf;
	      }
	    }

	    function renderFill(styleData, itemData, isFirstFrame) {
	      var styleElem = itemData.style;

	      if (itemData.c._mdf || isFirstFrame) {
	        styleElem.pElem.setAttribute('fill', 'rgb(' + bmFloor(itemData.c.v[0]) + ',' + bmFloor(itemData.c.v[1]) + ',' + bmFloor(itemData.c.v[2]) + ')');
	      }

	      if (itemData.o._mdf || isFirstFrame) {
	        styleElem.pElem.setAttribute('fill-opacity', itemData.o.v);
	      }
	    }

	    function renderGradientStroke(styleData, itemData, isFirstFrame) {
	      renderGradient(styleData, itemData, isFirstFrame);
	      renderStroke(styleData, itemData, isFirstFrame);
	    }

	    function renderGradient(styleData, itemData, isFirstFrame) {
	      var gfill = itemData.gf;
	      var hasOpacity = itemData.g._hasOpacity;
	      var pt1 = itemData.s.v;
	      var pt2 = itemData.e.v;

	      if (itemData.o._mdf || isFirstFrame) {
	        var attr = styleData.ty === 'gf' ? 'fill-opacity' : 'stroke-opacity';
	        itemData.style.pElem.setAttribute(attr, itemData.o.v);
	      }

	      if (itemData.s._mdf || isFirstFrame) {
	        var attr1 = styleData.t === 1 ? 'x1' : 'cx';
	        var attr2 = attr1 === 'x1' ? 'y1' : 'cy';
	        gfill.setAttribute(attr1, pt1[0]);
	        gfill.setAttribute(attr2, pt1[1]);

	        if (hasOpacity && !itemData.g._collapsable) {
	          itemData.of.setAttribute(attr1, pt1[0]);
	          itemData.of.setAttribute(attr2, pt1[1]);
	        }
	      }

	      var stops;
	      var i;
	      var len;
	      var stop;

	      if (itemData.g._cmdf || isFirstFrame) {
	        stops = itemData.cst;
	        var cValues = itemData.g.c;
	        len = stops.length;

	        for (i = 0; i < len; i += 1) {
	          stop = stops[i];
	          stop.setAttribute('offset', cValues[i * 4] + '%');
	          stop.setAttribute('stop-color', 'rgb(' + cValues[i * 4 + 1] + ',' + cValues[i * 4 + 2] + ',' + cValues[i * 4 + 3] + ')');
	        }
	      }

	      if (hasOpacity && (itemData.g._omdf || isFirstFrame)) {
	        var oValues = itemData.g.o;

	        if (itemData.g._collapsable) {
	          stops = itemData.cst;
	        } else {
	          stops = itemData.ost;
	        }

	        len = stops.length;

	        for (i = 0; i < len; i += 1) {
	          stop = stops[i];

	          if (!itemData.g._collapsable) {
	            stop.setAttribute('offset', oValues[i * 2] + '%');
	          }

	          stop.setAttribute('stop-opacity', oValues[i * 2 + 1]);
	        }
	      }

	      if (styleData.t === 1) {
	        if (itemData.e._mdf || isFirstFrame) {
	          gfill.setAttribute('x2', pt2[0]);
	          gfill.setAttribute('y2', pt2[1]);

	          if (hasOpacity && !itemData.g._collapsable) {
	            itemData.of.setAttribute('x2', pt2[0]);
	            itemData.of.setAttribute('y2', pt2[1]);
	          }
	        }
	      } else {
	        var rad;

	        if (itemData.s._mdf || itemData.e._mdf || isFirstFrame) {
	          rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
	          gfill.setAttribute('r', rad);

	          if (hasOpacity && !itemData.g._collapsable) {
	            itemData.of.setAttribute('r', rad);
	          }
	        }

	        if (itemData.e._mdf || itemData.h._mdf || itemData.a._mdf || isFirstFrame) {
	          if (!rad) {
	            rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
	          }

	          var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
	          var percent = itemData.h.v;

	          if (percent >= 1) {
	            percent = 0.99;
	          } else if (percent <= -1) {
	            percent = -0.99;
	          }

	          var dist = rad * percent;
	          var x = Math.cos(ang + itemData.a.v) * dist + pt1[0];
	          var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];
	          gfill.setAttribute('fx', x);
	          gfill.setAttribute('fy', y);

	          if (hasOpacity && !itemData.g._collapsable) {
	            itemData.of.setAttribute('fx', x);
	            itemData.of.setAttribute('fy', y);
	          }
	        } // gfill.setAttribute('fy','200');

	      }
	    }

	    function renderStroke(styleData, itemData, isFirstFrame) {
	      var styleElem = itemData.style;
	      var d = itemData.d;

	      if (d && (d._mdf || isFirstFrame) && d.dashStr) {
	        styleElem.pElem.setAttribute('stroke-dasharray', d.dashStr);
	        styleElem.pElem.setAttribute('stroke-dashoffset', d.dashoffset[0]);
	      }

	      if (itemData.c && (itemData.c._mdf || isFirstFrame)) {
	        styleElem.pElem.setAttribute('stroke', 'rgb(' + bmFloor(itemData.c.v[0]) + ',' + bmFloor(itemData.c.v[1]) + ',' + bmFloor(itemData.c.v[2]) + ')');
	      }

	      if (itemData.o._mdf || isFirstFrame) {
	        styleElem.pElem.setAttribute('stroke-opacity', itemData.o.v);
	      }

	      if (itemData.w._mdf || isFirstFrame) {
	        styleElem.pElem.setAttribute('stroke-width', itemData.w.v);

	        if (styleElem.msElem) {
	          styleElem.msElem.setAttribute('stroke-width', itemData.w.v);
	        }
	      }
	    }

	    return ob;
	  }();

	  function SVGShapeElement(data, globalData, comp) {
	    // List of drawable elements
	    this.shapes = []; // Full shape data

	    this.shapesData = data.shapes; // List of styles that will be applied to shapes

	    this.stylesList = []; // List of modifiers that will be applied to shapes

	    this.shapeModifiers = []; // List of items in shape tree

	    this.itemsData = []; // List of items in previous shape tree

	    this.processedElements = []; // List of animated components

	    this.animatedContents = [];
	    this.initElement(data, globalData, comp); // Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
	    // List of elements that have been created

	    this.prevViewData = []; // Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
	  }

	  extendPrototype([BaseElement, TransformElement, SVGBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableDOMElement], SVGShapeElement);

	  SVGShapeElement.prototype.initSecondaryElement = function () {};

	  SVGShapeElement.prototype.identityMatrix = new Matrix();

	  SVGShapeElement.prototype.buildExpressionInterface = function () {};

	  SVGShapeElement.prototype.createContent = function () {
	    this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
	    this.filterUniqueShapes();
	  };
	  /*
	  This method searches for multiple shapes that affect a single element and one of them is animated
	  */


	  SVGShapeElement.prototype.filterUniqueShapes = function () {
	    var i;
	    var len = this.shapes.length;
	    var shape;
	    var j;
	    var jLen = this.stylesList.length;
	    var style;
	    var tempShapes = [];
	    var areAnimated = false;

	    for (j = 0; j < jLen; j += 1) {
	      style = this.stylesList[j];
	      areAnimated = false;
	      tempShapes.length = 0;

	      for (i = 0; i < len; i += 1) {
	        shape = this.shapes[i];

	        if (shape.styles.indexOf(style) !== -1) {
	          tempShapes.push(shape);
	          areAnimated = shape._isAnimated || areAnimated;
	        }
	      }

	      if (tempShapes.length > 1 && areAnimated) {
	        this.setShapesAsAnimated(tempShapes);
	      }
	    }
	  };

	  SVGShapeElement.prototype.setShapesAsAnimated = function (shapes) {
	    var i;
	    var len = shapes.length;

	    for (i = 0; i < len; i += 1) {
	      shapes[i].setAsAnimated();
	    }
	  };

	  SVGShapeElement.prototype.createStyleElement = function (data, level) {
	    // TODO: prevent drawing of hidden styles
	    var elementData;
	    var styleOb = new SVGStyleData(data, level);
	    var pathElement = styleOb.pElem;

	    if (data.ty === 'st') {
	      elementData = new SVGStrokeStyleData(this, data, styleOb);
	    } else if (data.ty === 'fl') {
	      elementData = new SVGFillStyleData(this, data, styleOb);
	    } else if (data.ty === 'gf' || data.ty === 'gs') {
	      var GradientConstructor = data.ty === 'gf' ? SVGGradientFillStyleData : SVGGradientStrokeStyleData;
	      elementData = new GradientConstructor(this, data, styleOb);
	      this.globalData.defs.appendChild(elementData.gf);

	      if (elementData.maskId) {
	        this.globalData.defs.appendChild(elementData.ms);
	        this.globalData.defs.appendChild(elementData.of);
	        pathElement.setAttribute('mask', 'url(' + getLocationHref() + '#' + elementData.maskId + ')');
	      }
	    } else if (data.ty === 'no') {
	      elementData = new SVGNoStyleData(this, data, styleOb);
	    }

	    if (data.ty === 'st' || data.ty === 'gs') {
	      pathElement.setAttribute('stroke-linecap', lineCapEnum[data.lc || 2]);
	      pathElement.setAttribute('stroke-linejoin', lineJoinEnum[data.lj || 2]);
	      pathElement.setAttribute('fill-opacity', '0');

	      if (data.lj === 1) {
	        pathElement.setAttribute('stroke-miterlimit', data.ml);
	      }
	    }

	    if (data.r === 2) {
	      pathElement.setAttribute('fill-rule', 'evenodd');
	    }

	    if (data.ln) {
	      pathElement.setAttribute('id', data.ln);
	    }

	    if (data.cl) {
	      pathElement.setAttribute('class', data.cl);
	    }

	    if (data.bm) {
	      pathElement.style['mix-blend-mode'] = getBlendMode(data.bm);
	    }

	    this.stylesList.push(styleOb);
	    this.addToAnimatedContents(data, elementData);
	    return elementData;
	  };

	  SVGShapeElement.prototype.createGroupElement = function (data) {
	    var elementData = new ShapeGroupData();

	    if (data.ln) {
	      elementData.gr.setAttribute('id', data.ln);
	    }

	    if (data.cl) {
	      elementData.gr.setAttribute('class', data.cl);
	    }

	    if (data.bm) {
	      elementData.gr.style['mix-blend-mode'] = getBlendMode(data.bm);
	    }

	    return elementData;
	  };

	  SVGShapeElement.prototype.createTransformElement = function (data, container) {
	    var transformProperty = TransformPropertyFactory.getTransformProperty(this, data, this);
	    var elementData = new SVGTransformData(transformProperty, transformProperty.o, container);
	    this.addToAnimatedContents(data, elementData);
	    return elementData;
	  };

	  SVGShapeElement.prototype.createShapeElement = function (data, ownTransformers, level) {
	    var ty = 4;

	    if (data.ty === 'rc') {
	      ty = 5;
	    } else if (data.ty === 'el') {
	      ty = 6;
	    } else if (data.ty === 'sr') {
	      ty = 7;
	    }

	    var shapeProperty = ShapePropertyFactory.getShapeProp(this, data, ty, this);
	    var elementData = new SVGShapeData(ownTransformers, level, shapeProperty);
	    this.shapes.push(elementData);
	    this.addShapeToModifiers(elementData);
	    this.addToAnimatedContents(data, elementData);
	    return elementData;
	  };

	  SVGShapeElement.prototype.addToAnimatedContents = function (data, element) {
	    var i = 0;
	    var len = this.animatedContents.length;

	    while (i < len) {
	      if (this.animatedContents[i].element === element) {
	        return;
	      }

	      i += 1;
	    }

	    this.animatedContents.push({
	      fn: SVGElementsRenderer.createRenderFunction(data),
	      element: element,
	      data: data
	    });
	  };

	  SVGShapeElement.prototype.setElementStyles = function (elementData) {
	    var arr = elementData.styles;
	    var j;
	    var jLen = this.stylesList.length;

	    for (j = 0; j < jLen; j += 1) {
	      if (!this.stylesList[j].closed) {
	        arr.push(this.stylesList[j]);
	      }
	    }
	  };

	  SVGShapeElement.prototype.reloadShapes = function () {
	    this._isFirstFrame = true;
	    var i;
	    var len = this.itemsData.length;

	    for (i = 0; i < len; i += 1) {
	      this.prevViewData[i] = this.itemsData[i];
	    }

	    this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
	    this.filterUniqueShapes();
	    len = this.dynamicProperties.length;

	    for (i = 0; i < len; i += 1) {
	      this.dynamicProperties[i].getValue();
	    }

	    this.renderModifiers();
	  };

	  SVGShapeElement.prototype.searchShapes = function (arr, itemsData, prevViewData, container, level, transformers, render) {
	    var ownTransformers = [].concat(transformers);
	    var i;
	    var len = arr.length - 1;
	    var j;
	    var jLen;
	    var ownStyles = [];
	    var ownModifiers = [];
	    var currentTransform;
	    var modifier;
	    var processedPos;

	    for (i = len; i >= 0; i -= 1) {
	      processedPos = this.searchProcessedElement(arr[i]);

	      if (!processedPos) {
	        arr[i]._render = render;
	      } else {
	        itemsData[i] = prevViewData[processedPos - 1];
	      }

	      if (arr[i].ty === 'fl' || arr[i].ty === 'st' || arr[i].ty === 'gf' || arr[i].ty === 'gs' || arr[i].ty === 'no') {
	        if (!processedPos) {
	          itemsData[i] = this.createStyleElement(arr[i], level);
	        } else {
	          itemsData[i].style.closed = false;
	        }

	        if (arr[i]._render) {
	          if (itemsData[i].style.pElem.parentNode !== container) {
	            container.appendChild(itemsData[i].style.pElem);
	          }
	        }

	        ownStyles.push(itemsData[i].style);
	      } else if (arr[i].ty === 'gr') {
	        if (!processedPos) {
	          itemsData[i] = this.createGroupElement(arr[i]);
	        } else {
	          jLen = itemsData[i].it.length;

	          for (j = 0; j < jLen; j += 1) {
	            itemsData[i].prevViewData[j] = itemsData[i].it[j];
	          }
	        }

	        this.searchShapes(arr[i].it, itemsData[i].it, itemsData[i].prevViewData, itemsData[i].gr, level + 1, ownTransformers, render);

	        if (arr[i]._render) {
	          if (itemsData[i].gr.parentNode !== container) {
	            container.appendChild(itemsData[i].gr);
	          }
	        }
	      } else if (arr[i].ty === 'tr') {
	        if (!processedPos) {
	          itemsData[i] = this.createTransformElement(arr[i], container);
	        }

	        currentTransform = itemsData[i].transform;
	        ownTransformers.push(currentTransform);
	      } else if (arr[i].ty === 'sh' || arr[i].ty === 'rc' || arr[i].ty === 'el' || arr[i].ty === 'sr') {
	        if (!processedPos) {
	          itemsData[i] = this.createShapeElement(arr[i], ownTransformers, level);
	        }

	        this.setElementStyles(itemsData[i]);
	      } else if (arr[i].ty === 'tm' || arr[i].ty === 'rd' || arr[i].ty === 'ms' || arr[i].ty === 'pb' || arr[i].ty === 'zz' || arr[i].ty === 'op') {
	        if (!processedPos) {
	          modifier = ShapeModifiers.getModifier(arr[i].ty);
	          modifier.init(this, arr[i]);
	          itemsData[i] = modifier;
	          this.shapeModifiers.push(modifier);
	        } else {
	          modifier = itemsData[i];
	          modifier.closed = false;
	        }

	        ownModifiers.push(modifier);
	      } else if (arr[i].ty === 'rp') {
	        if (!processedPos) {
	          modifier = ShapeModifiers.getModifier(arr[i].ty);
	          itemsData[i] = modifier;
	          modifier.init(this, arr, i, itemsData);
	          this.shapeModifiers.push(modifier);
	          render = false;
	        } else {
	          modifier = itemsData[i];
	          modifier.closed = true;
	        }

	        ownModifiers.push(modifier);
	      }

	      this.addProcessedElement(arr[i], i + 1);
	    }

	    len = ownStyles.length;

	    for (i = 0; i < len; i += 1) {
	      ownStyles[i].closed = true;
	    }

	    len = ownModifiers.length;

	    for (i = 0; i < len; i += 1) {
	      ownModifiers[i].closed = true;
	    }
	  };

	  SVGShapeElement.prototype.renderInnerContent = function () {
	    this.renderModifiers();
	    var i;
	    var len = this.stylesList.length;

	    for (i = 0; i < len; i += 1) {
	      this.stylesList[i].reset();
	    }

	    this.renderShape();

	    for (i = 0; i < len; i += 1) {
	      if (this.stylesList[i]._mdf || this._isFirstFrame) {
	        if (this.stylesList[i].msElem) {
	          this.stylesList[i].msElem.setAttribute('d', this.stylesList[i].d); // Adding M0 0 fixes same mask bug on all browsers

	          this.stylesList[i].d = 'M0 0' + this.stylesList[i].d;
	        }

	        this.stylesList[i].pElem.setAttribute('d', this.stylesList[i].d || 'M0 0');
	      }
	    }
	  };

	  SVGShapeElement.prototype.renderShape = function () {
	    var i;
	    var len = this.animatedContents.length;
	    var animatedContent;

	    for (i = 0; i < len; i += 1) {
	      animatedContent = this.animatedContents[i];

	      if ((this._isFirstFrame || animatedContent.element._isAnimated) && animatedContent.data !== true) {
	        animatedContent.fn(animatedContent.data, animatedContent.element, this._isFirstFrame);
	      }
	    }
	  };

	  SVGShapeElement.prototype.destroy = function () {
	    this.destroyBaseElement();
	    this.shapesData = null;
	    this.itemsData = null;
	  };

	  function LetterProps(o, sw, sc, fc, m, p) {
	    this.o = o;
	    this.sw = sw;
	    this.sc = sc;
	    this.fc = fc;
	    this.m = m;
	    this.p = p;
	    this._mdf = {
	      o: true,
	      sw: !!sw,
	      sc: !!sc,
	      fc: !!fc,
	      m: true,
	      p: true
	    };
	  }

	  LetterProps.prototype.update = function (o, sw, sc, fc, m, p) {
	    this._mdf.o = false;
	    this._mdf.sw = false;
	    this._mdf.sc = false;
	    this._mdf.fc = false;
	    this._mdf.m = false;
	    this._mdf.p = false;
	    var updated = false;

	    if (this.o !== o) {
	      this.o = o;
	      this._mdf.o = true;
	      updated = true;
	    }

	    if (this.sw !== sw) {
	      this.sw = sw;
	      this._mdf.sw = true;
	      updated = true;
	    }

	    if (this.sc !== sc) {
	      this.sc = sc;
	      this._mdf.sc = true;
	      updated = true;
	    }

	    if (this.fc !== fc) {
	      this.fc = fc;
	      this._mdf.fc = true;
	      updated = true;
	    }

	    if (this.m !== m) {
	      this.m = m;
	      this._mdf.m = true;
	      updated = true;
	    }

	    if (p.length && (this.p[0] !== p[0] || this.p[1] !== p[1] || this.p[4] !== p[4] || this.p[5] !== p[5] || this.p[12] !== p[12] || this.p[13] !== p[13])) {
	      this.p = p;
	      this._mdf.p = true;
	      updated = true;
	    }

	    return updated;
	  };

	  function TextProperty(elem, data) {
	    this._frameId = initialDefaultFrame;
	    this.pv = '';
	    this.v = '';
	    this.kf = false;
	    this._isFirstFrame = true;
	    this._mdf = false;

	    if (data.d && data.d.sid) {
	      data.d = elem.globalData.slotManager.getProp(data.d);
	    }

	    this.data = data;
	    this.elem = elem;
	    this.comp = this.elem.comp;
	    this.keysIndex = 0;
	    this.canResize = false;
	    this.minimumFontSize = 1;
	    this.effectsSequence = [];
	    this.currentData = {
	      ascent: 0,
	      boxWidth: this.defaultBoxWidth,
	      f: '',
	      fStyle: '',
	      fWeight: '',
	      fc: '',
	      j: '',
	      justifyOffset: '',
	      l: [],
	      lh: 0,
	      lineWidths: [],
	      ls: '',
	      of: '',
	      s: '',
	      sc: '',
	      sw: 0,
	      t: 0,
	      tr: 0,
	      sz: 0,
	      ps: null,
	      fillColorAnim: false,
	      strokeColorAnim: false,
	      strokeWidthAnim: false,
	      yOffset: 0,
	      finalSize: 0,
	      finalText: [],
	      finalLineHeight: 0,
	      __complete: false
	    };
	    this.copyData(this.currentData, this.data.d.k[0].s);

	    if (!this.searchProperty()) {
	      this.completeTextData(this.currentData);
	    }
	  }

	  TextProperty.prototype.defaultBoxWidth = [0, 0];

	  TextProperty.prototype.copyData = function (obj, data) {
	    for (var s in data) {
	      if (Object.prototype.hasOwnProperty.call(data, s)) {
	        obj[s] = data[s];
	      }
	    }

	    return obj;
	  };

	  TextProperty.prototype.setCurrentData = function (data) {
	    if (!data.__complete) {
	      this.completeTextData(data);
	    }

	    this.currentData = data;
	    this.currentData.boxWidth = this.currentData.boxWidth || this.defaultBoxWidth;
	    this._mdf = true;
	  };

	  TextProperty.prototype.searchProperty = function () {
	    return this.searchKeyframes();
	  };

	  TextProperty.prototype.searchKeyframes = function () {
	    this.kf = this.data.d.k.length > 1;

	    if (this.kf) {
	      this.addEffect(this.getKeyframeValue.bind(this));
	    }

	    return this.kf;
	  };

	  TextProperty.prototype.addEffect = function (effectFunction) {
	    this.effectsSequence.push(effectFunction);
	    this.elem.addDynamicProperty(this);
	  };

	  TextProperty.prototype.getValue = function (_finalValue) {
	    if ((this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) && !_finalValue) {
	      return;
	    }

	    this.currentData.t = this.data.d.k[this.keysIndex].s.t;
	    var currentValue = this.currentData;
	    var currentIndex = this.keysIndex;

	    if (this.lock) {
	      this.setCurrentData(this.currentData);
	      return;
	    }

	    this.lock = true;
	    this._mdf = false;
	    var i;
	    var len = this.effectsSequence.length;
	    var finalValue = _finalValue || this.data.d.k[this.keysIndex].s;

	    for (i = 0; i < len; i += 1) {
	      // Checking if index changed to prevent creating a new object every time the expression updates.
	      if (currentIndex !== this.keysIndex) {
	        finalValue = this.effectsSequence[i](finalValue, finalValue.t);
	      } else {
	        finalValue = this.effectsSequence[i](this.currentData, finalValue.t);
	      }
	    }

	    if (currentValue !== finalValue) {
	      this.setCurrentData(finalValue);
	    }

	    this.v = this.currentData;
	    this.pv = this.v;
	    this.lock = false;
	    this.frameId = this.elem.globalData.frameId;
	  };

	  TextProperty.prototype.getKeyframeValue = function () {
	    var textKeys = this.data.d.k;
	    var frameNum = this.elem.comp.renderedFrame;
	    var i = 0;
	    var len = textKeys.length;

	    while (i <= len - 1) {
	      if (i === len - 1 || textKeys[i + 1].t > frameNum) {
	        break;
	      }

	      i += 1;
	    }

	    if (this.keysIndex !== i) {
	      this.keysIndex = i;
	    }

	    return this.data.d.k[this.keysIndex].s;
	  };

	  TextProperty.prototype.buildFinalText = function (text) {
	    var charactersArray = [];
	    var i = 0;
	    var len = text.length;
	    var charCode;
	    var secondCharCode;
	    var shouldCombine = false;
	    var shouldCombineNext = false;
	    var currentChars = '';

	    while (i < len) {
	      shouldCombine = shouldCombineNext;
	      shouldCombineNext = false;
	      charCode = text.charCodeAt(i);
	      currentChars = text.charAt(i);

	      if (FontManager.isCombinedCharacter(charCode)) {
	        shouldCombine = true; // It's a potential surrogate pair (this is the High surrogate)
	      } else if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	        if (FontManager.isRegionalFlag(text, i)) {
	          currentChars = text.substr(i, 14);
	        } else {
	          secondCharCode = text.charCodeAt(i + 1); // It's a surrogate pair (this is the Low surrogate)

	          if (secondCharCode >= 0xDC00 && secondCharCode <= 0xDFFF) {
	            if (FontManager.isModifier(charCode, secondCharCode)) {
	              currentChars = text.substr(i, 2);
	              shouldCombine = true;
	            } else if (FontManager.isFlagEmoji(text.substr(i, 4))) {
	              currentChars = text.substr(i, 4);
	            } else {
	              currentChars = text.substr(i, 2);
	            }
	          }
	        }
	      } else if (charCode > 0xDBFF) {
	        secondCharCode = text.charCodeAt(i + 1);

	        if (FontManager.isVariationSelector(charCode)) {
	          shouldCombine = true;
	        }
	      } else if (FontManager.isZeroWidthJoiner(charCode)) {
	        shouldCombine = true;
	        shouldCombineNext = true;
	      }

	      if (shouldCombine) {
	        charactersArray[charactersArray.length - 1] += currentChars;
	        shouldCombine = false;
	      } else {
	        charactersArray.push(currentChars);
	      }

	      i += currentChars.length;
	    }

	    return charactersArray;
	  };

	  TextProperty.prototype.completeTextData = function (documentData) {
	    documentData.__complete = true;
	    var fontManager = this.elem.globalData.fontManager;
	    var data = this.data;
	    var letters = [];
	    var i;
	    var len;
	    var newLineFlag;
	    var index = 0;
	    var val;
	    var anchorGrouping = data.m.g;
	    var currentSize = 0;
	    var currentPos = 0;
	    var currentLine = 0;
	    var lineWidths = [];
	    var lineWidth = 0;
	    var maxLineWidth = 0;
	    var j;
	    var jLen;
	    var fontData = fontManager.getFontByName(documentData.f);
	    var charData;
	    var cLength = 0;
	    var fontProps = getFontProperties(fontData);
	    documentData.fWeight = fontProps.weight;
	    documentData.fStyle = fontProps.style;
	    documentData.finalSize = documentData.s;
	    documentData.finalText = this.buildFinalText(documentData.t);
	    len = documentData.finalText.length;
	    documentData.finalLineHeight = documentData.lh;
	    var trackingOffset = documentData.tr / 1000 * documentData.finalSize;
	    var charCode;

	    if (documentData.sz) {
	      var flag = true;
	      var boxWidth = documentData.sz[0];
	      var boxHeight = documentData.sz[1];
	      var currentHeight;
	      var finalText;

	      while (flag) {
	        finalText = this.buildFinalText(documentData.t);
	        currentHeight = 0;
	        lineWidth = 0;
	        len = finalText.length;
	        trackingOffset = documentData.tr / 1000 * documentData.finalSize;
	        var lastSpaceIndex = -1;

	        for (i = 0; i < len; i += 1) {
	          charCode = finalText[i].charCodeAt(0);
	          newLineFlag = false;

	          if (finalText[i] === ' ') {
	            lastSpaceIndex = i;
	          } else if (charCode === 13 || charCode === 3) {
	            lineWidth = 0;
	            newLineFlag = true;
	            currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
	          }

	          if (fontManager.chars) {
	            charData = fontManager.getCharData(finalText[i], fontData.fStyle, fontData.fFamily);
	            cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
	          } else {
	            // tCanvasHelper.font = documentData.s + 'px '+ fontData.fFamily;
	            cLength = fontManager.measureText(finalText[i], documentData.f, documentData.finalSize);
	          }

	          if (lineWidth + cLength > boxWidth && finalText[i] !== ' ') {
	            if (lastSpaceIndex === -1) {
	              len += 1;
	            } else {
	              i = lastSpaceIndex;
	            }

	            currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
	            finalText.splice(i, lastSpaceIndex === i ? 1 : 0, '\r'); // finalText = finalText.substr(0,i) + "\r" + finalText.substr(i === lastSpaceIndex ? i + 1 : i);

	            lastSpaceIndex = -1;
	            lineWidth = 0;
	          } else {
	            lineWidth += cLength;
	            lineWidth += trackingOffset;
	          }
	        }

	        currentHeight += fontData.ascent * documentData.finalSize / 100;

	        if (this.canResize && documentData.finalSize > this.minimumFontSize && boxHeight < currentHeight) {
	          documentData.finalSize -= 1;
	          documentData.finalLineHeight = documentData.finalSize * documentData.lh / documentData.s;
	        } else {
	          documentData.finalText = finalText;
	          len = documentData.finalText.length;
	          flag = false;
	        }
	      }
	    }

	    lineWidth = -trackingOffset;
	    cLength = 0;
	    var uncollapsedSpaces = 0;
	    var currentChar;

	    for (i = 0; i < len; i += 1) {
	      newLineFlag = false;
	      currentChar = documentData.finalText[i];
	      charCode = currentChar.charCodeAt(0);

	      if (charCode === 13 || charCode === 3) {
	        uncollapsedSpaces = 0;
	        lineWidths.push(lineWidth);
	        maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
	        lineWidth = -2 * trackingOffset;
	        val = '';
	        newLineFlag = true;
	        currentLine += 1;
	      } else {
	        val = currentChar;
	      }

	      if (fontManager.chars) {
	        charData = fontManager.getCharData(currentChar, fontData.fStyle, fontManager.getFontByName(documentData.f).fFamily);
	        cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
	      } else {
	        // var charWidth = fontManager.measureText(val, documentData.f, documentData.finalSize);
	        // tCanvasHelper.font = documentData.finalSize + 'px '+ fontManager.getFontByName(documentData.f).fFamily;
	        cLength = fontManager.measureText(val, documentData.f, documentData.finalSize);
	      } //


	      if (currentChar === ' ') {
	        uncollapsedSpaces += cLength + trackingOffset;
	      } else {
	        lineWidth += cLength + trackingOffset + uncollapsedSpaces;
	        uncollapsedSpaces = 0;
	      }

	      letters.push({
	        l: cLength,
	        an: cLength,
	        add: currentSize,
	        n: newLineFlag,
	        anIndexes: [],
	        val: val,
	        line: currentLine,
	        animatorJustifyOffset: 0
	      });

	      if (anchorGrouping == 2) {
	        // eslint-disable-line eqeqeq
	        currentSize += cLength;

	        if (val === '' || val === ' ' || i === len - 1) {
	          if (val === '' || val === ' ') {
	            currentSize -= cLength;
	          }

	          while (currentPos <= i) {
	            letters[currentPos].an = currentSize;
	            letters[currentPos].ind = index;
	            letters[currentPos].extra = cLength;
	            currentPos += 1;
	          }

	          index += 1;
	          currentSize = 0;
	        }
	      } else if (anchorGrouping == 3) {
	        // eslint-disable-line eqeqeq
	        currentSize += cLength;

	        if (val === '' || i === len - 1) {
	          if (val === '') {
	            currentSize -= cLength;
	          }

	          while (currentPos <= i) {
	            letters[currentPos].an = currentSize;
	            letters[currentPos].ind = index;
	            letters[currentPos].extra = cLength;
	            currentPos += 1;
	          }

	          currentSize = 0;
	          index += 1;
	        }
	      } else {
	        letters[index].ind = index;
	        letters[index].extra = 0;
	        index += 1;
	      }
	    }

	    documentData.l = letters;
	    maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
	    lineWidths.push(lineWidth);

	    if (documentData.sz) {
	      documentData.boxWidth = documentData.sz[0];
	      documentData.justifyOffset = 0;
	    } else {
	      documentData.boxWidth = maxLineWidth;

	      switch (documentData.j) {
	        case 1:
	          documentData.justifyOffset = -documentData.boxWidth;
	          break;

	        case 2:
	          documentData.justifyOffset = -documentData.boxWidth / 2;
	          break;

	        default:
	          documentData.justifyOffset = 0;
	      }
	    }

	    documentData.lineWidths = lineWidths;
	    var animators = data.a;
	    var animatorData;
	    var letterData;
	    jLen = animators.length;
	    var based;
	    var ind;
	    var indexes = [];

	    for (j = 0; j < jLen; j += 1) {
	      animatorData = animators[j];

	      if (animatorData.a.sc) {
	        documentData.strokeColorAnim = true;
	      }

	      if (animatorData.a.sw) {
	        documentData.strokeWidthAnim = true;
	      }

	      if (animatorData.a.fc || animatorData.a.fh || animatorData.a.fs || animatorData.a.fb) {
	        documentData.fillColorAnim = true;
	      }

	      ind = 0;
	      based = animatorData.s.b;

	      for (i = 0; i < len; i += 1) {
	        letterData = letters[i];
	        letterData.anIndexes[j] = ind;

	        if (based == 1 && letterData.val !== '' || based == 2 && letterData.val !== '' && letterData.val !== ' ' || based == 3 && (letterData.n || letterData.val == ' ' || i == len - 1) || based == 4 && (letterData.n || i == len - 1)) {
	          // eslint-disable-line eqeqeq
	          if (animatorData.s.rn === 1) {
	            indexes.push(ind);
	          }

	          ind += 1;
	        }
	      }

	      data.a[j].s.totalChars = ind;
	      var currentInd = -1;
	      var newInd;

	      if (animatorData.s.rn === 1) {
	        for (i = 0; i < len; i += 1) {
	          letterData = letters[i];

	          if (currentInd != letterData.anIndexes[j]) {
	            // eslint-disable-line eqeqeq
	            currentInd = letterData.anIndexes[j];
	            newInd = indexes.splice(Math.floor(Math.random() * indexes.length), 1)[0];
	          }

	          letterData.anIndexes[j] = newInd;
	        }
	      }
	    }

	    documentData.yOffset = documentData.finalLineHeight || documentData.finalSize * 1.2;
	    documentData.ls = documentData.ls || 0;
	    documentData.ascent = fontData.ascent * documentData.finalSize / 100;
	  };

	  TextProperty.prototype.updateDocumentData = function (newData, index) {
	    index = index === undefined ? this.keysIndex : index;
	    var dData = this.copyData({}, this.data.d.k[index].s);
	    dData = this.copyData(dData, newData);
	    this.data.d.k[index].s = dData;
	    this.recalculate(index);
	    this.setCurrentData(dData);
	    this.elem.addDynamicProperty(this);
	  };

	  TextProperty.prototype.recalculate = function (index) {
	    var dData = this.data.d.k[index].s;
	    dData.__complete = false;
	    this.keysIndex = 0;
	    this._isFirstFrame = true;
	    this.getValue(dData);
	  };

	  TextProperty.prototype.canResizeFont = function (_canResize) {
	    this.canResize = _canResize;
	    this.recalculate(this.keysIndex);
	    this.elem.addDynamicProperty(this);
	  };

	  TextProperty.prototype.setMinimumFontSize = function (_fontValue) {
	    this.minimumFontSize = Math.floor(_fontValue) || 1;
	    this.recalculate(this.keysIndex);
	    this.elem.addDynamicProperty(this);
	  };

	  var TextSelectorProp = function () {
	    var max = Math.max;
	    var min = Math.min;
	    var floor = Math.floor;

	    function TextSelectorPropFactory(elem, data) {
	      this._currentTextLength = -1;
	      this.k = false;
	      this.data = data;
	      this.elem = elem;
	      this.comp = elem.comp;
	      this.finalS = 0;
	      this.finalE = 0;
	      this.initDynamicPropertyContainer(elem);
	      this.s = PropertyFactory.getProp(elem, data.s || {
	        k: 0
	      }, 0, 0, this);

	      if ('e' in data) {
	        this.e = PropertyFactory.getProp(elem, data.e, 0, 0, this);
	      } else {
	        this.e = {
	          v: 100
	        };
	      }

	      this.o = PropertyFactory.getProp(elem, data.o || {
	        k: 0
	      }, 0, 0, this);
	      this.xe = PropertyFactory.getProp(elem, data.xe || {
	        k: 0
	      }, 0, 0, this);
	      this.ne = PropertyFactory.getProp(elem, data.ne || {
	        k: 0
	      }, 0, 0, this);
	      this.sm = PropertyFactory.getProp(elem, data.sm || {
	        k: 100
	      }, 0, 0, this);
	      this.a = PropertyFactory.getProp(elem, data.a, 0, 0.01, this);

	      if (!this.dynamicProperties.length) {
	        this.getValue();
	      }
	    }

	    TextSelectorPropFactory.prototype = {
	      getMult: function getMult(ind) {
	        if (this._currentTextLength !== this.elem.textProperty.currentData.l.length) {
	          this.getValue();
	        }

	        var x1 = 0;
	        var y1 = 0;
	        var x2 = 1;
	        var y2 = 1;

	        if (this.ne.v > 0) {
	          x1 = this.ne.v / 100.0;
	        } else {
	          y1 = -this.ne.v / 100.0;
	        }

	        if (this.xe.v > 0) {
	          x2 = 1.0 - this.xe.v / 100.0;
	        } else {
	          y2 = 1.0 + this.xe.v / 100.0;
	        }

	        var easer = BezierFactory.getBezierEasing(x1, y1, x2, y2).get;
	        var mult = 0;
	        var s = this.finalS;
	        var e = this.finalE;
	        var type = this.data.sh;

	        if (type === 2) {
	          if (e === s) {
	            mult = ind >= e ? 1 : 0;
	          } else {
	            mult = max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
	          }

	          mult = easer(mult);
	        } else if (type === 3) {
	          if (e === s) {
	            mult = ind >= e ? 0 : 1;
	          } else {
	            mult = 1 - max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
	          }

	          mult = easer(mult);
	        } else if (type === 4) {
	          if (e === s) {
	            mult = 0;
	          } else {
	            mult = max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));

	            if (mult < 0.5) {
	              mult *= 2;
	            } else {
	              mult = 1 - 2 * (mult - 0.5);
	            }
	          }

	          mult = easer(mult);
	        } else if (type === 5) {
	          if (e === s) {
	            mult = 0;
	          } else {
	            var tot = e - s;
	            /* ind += 0.5;
	                      mult = -4/(tot*tot)*(ind*ind)+(4/tot)*ind; */

	            ind = min(max(0, ind + 0.5 - s), e - s);
	            var x = -tot / 2 + ind;
	            var a = tot / 2;
	            mult = Math.sqrt(1 - x * x / (a * a));
	          }

	          mult = easer(mult);
	        } else if (type === 6) {
	          if (e === s) {
	            mult = 0;
	          } else {
	            ind = min(max(0, ind + 0.5 - s), e - s);
	            mult = (1 + Math.cos(Math.PI + Math.PI * 2 * ind / (e - s))) / 2; // eslint-disable-line
	          }

	          mult = easer(mult);
	        } else {
	          if (ind >= floor(s)) {
	            if (ind - s < 0) {
	              mult = max(0, min(min(e, 1) - (s - ind), 1));
	            } else {
	              mult = max(0, min(e - ind, 1));
	            }
	          }

	          mult = easer(mult);
	        } // Smoothness implementation.
	        // The smoothness represents a reduced range of the original [0; 1] range.
	        // if smoothness is 25%, the new range will be [0.375; 0.625]
	        // Steps are:
	        // - find the lower value of the new range (threshold)
	        // - if multiplier is smaller than that value, floor it to 0
	        // - if it is larger,
	        //     - subtract the threshold
	        //     - divide it by the smoothness (this will return the range to [0; 1])
	        // Note: If it doesn't work on some scenarios, consider applying it before the easer.


	        if (this.sm.v !== 100) {
	          var smoothness = this.sm.v * 0.01;

	          if (smoothness === 0) {
	            smoothness = 0.00000001;
	          }

	          var threshold = 0.5 - smoothness * 0.5;

	          if (mult < threshold) {
	            mult = 0;
	          } else {
	            mult = (mult - threshold) / smoothness;

	            if (mult > 1) {
	              mult = 1;
	            }
	          }
	        }

	        return mult * this.a.v;
	      },
	      getValue: function getValue(newCharsFlag) {
	        this.iterateDynamicProperties();
	        this._mdf = newCharsFlag || this._mdf;
	        this._currentTextLength = this.elem.textProperty.currentData.l.length || 0;

	        if (newCharsFlag && this.data.r === 2) {
	          this.e.v = this._currentTextLength;
	        }

	        var divisor = this.data.r === 2 ? 1 : 100 / this.data.totalChars;
	        var o = this.o.v / divisor;
	        var s = this.s.v / divisor + o;
	        var e = this.e.v / divisor + o;

	        if (s > e) {
	          var _s = s;
	          s = e;
	          e = _s;
	        }

	        this.finalS = s;
	        this.finalE = e;
	      }
	    };
	    extendPrototype([DynamicPropertyContainer], TextSelectorPropFactory);

	    function getTextSelectorProp(elem, data, arr) {
	      return new TextSelectorPropFactory(elem, data);
	    }

	    return {
	      getTextSelectorProp: getTextSelectorProp
	    };
	  }();

	  function TextAnimatorDataProperty(elem, animatorProps, container) {
	    var defaultData = {
	      propType: false
	    };
	    var getProp = PropertyFactory.getProp;
	    var textAnimatorAnimatables = animatorProps.a;
	    this.a = {
	      r: textAnimatorAnimatables.r ? getProp(elem, textAnimatorAnimatables.r, 0, degToRads, container) : defaultData,
	      rx: textAnimatorAnimatables.rx ? getProp(elem, textAnimatorAnimatables.rx, 0, degToRads, container) : defaultData,
	      ry: textAnimatorAnimatables.ry ? getProp(elem, textAnimatorAnimatables.ry, 0, degToRads, container) : defaultData,
	      sk: textAnimatorAnimatables.sk ? getProp(elem, textAnimatorAnimatables.sk, 0, degToRads, container) : defaultData,
	      sa: textAnimatorAnimatables.sa ? getProp(elem, textAnimatorAnimatables.sa, 0, degToRads, container) : defaultData,
	      s: textAnimatorAnimatables.s ? getProp(elem, textAnimatorAnimatables.s, 1, 0.01, container) : defaultData,
	      a: textAnimatorAnimatables.a ? getProp(elem, textAnimatorAnimatables.a, 1, 0, container) : defaultData,
	      o: textAnimatorAnimatables.o ? getProp(elem, textAnimatorAnimatables.o, 0, 0.01, container) : defaultData,
	      p: textAnimatorAnimatables.p ? getProp(elem, textAnimatorAnimatables.p, 1, 0, container) : defaultData,
	      sw: textAnimatorAnimatables.sw ? getProp(elem, textAnimatorAnimatables.sw, 0, 0, container) : defaultData,
	      sc: textAnimatorAnimatables.sc ? getProp(elem, textAnimatorAnimatables.sc, 1, 0, container) : defaultData,
	      fc: textAnimatorAnimatables.fc ? getProp(elem, textAnimatorAnimatables.fc, 1, 0, container) : defaultData,
	      fh: textAnimatorAnimatables.fh ? getProp(elem, textAnimatorAnimatables.fh, 0, 0, container) : defaultData,
	      fs: textAnimatorAnimatables.fs ? getProp(elem, textAnimatorAnimatables.fs, 0, 0.01, container) : defaultData,
	      fb: textAnimatorAnimatables.fb ? getProp(elem, textAnimatorAnimatables.fb, 0, 0.01, container) : defaultData,
	      t: textAnimatorAnimatables.t ? getProp(elem, textAnimatorAnimatables.t, 0, 0, container) : defaultData
	    };
	    this.s = TextSelectorProp.getTextSelectorProp(elem, animatorProps.s, container);
	    this.s.t = animatorProps.s.t;
	  }

	  function TextAnimatorProperty(textData, renderType, elem) {
	    this._isFirstFrame = true;
	    this._hasMaskedPath = false;
	    this._frameId = -1;
	    this._textData = textData;
	    this._renderType = renderType;
	    this._elem = elem;
	    this._animatorsData = createSizedArray(this._textData.a.length);
	    this._pathData = {};
	    this._moreOptions = {
	      alignment: {}
	    };
	    this.renderedLetters = [];
	    this.lettersChangedFlag = false;
	    this.initDynamicPropertyContainer(elem);
	  }

	  TextAnimatorProperty.prototype.searchProperties = function () {
	    var i;
	    var len = this._textData.a.length;
	    var animatorProps;
	    var getProp = PropertyFactory.getProp;

	    for (i = 0; i < len; i += 1) {
	      animatorProps = this._textData.a[i];
	      this._animatorsData[i] = new TextAnimatorDataProperty(this._elem, animatorProps, this);
	    }

	    if (this._textData.p && 'm' in this._textData.p) {
	      this._pathData = {
	        a: getProp(this._elem, this._textData.p.a, 0, 0, this),
	        f: getProp(this._elem, this._textData.p.f, 0, 0, this),
	        l: getProp(this._elem, this._textData.p.l, 0, 0, this),
	        r: getProp(this._elem, this._textData.p.r, 0, 0, this),
	        p: getProp(this._elem, this._textData.p.p, 0, 0, this),
	        m: this._elem.maskManager.getMaskProperty(this._textData.p.m)
	      };
	      this._hasMaskedPath = true;
	    } else {
	      this._hasMaskedPath = false;
	    }

	    this._moreOptions.alignment = getProp(this._elem, this._textData.m.a, 1, 0, this);
	  };

	  TextAnimatorProperty.prototype.getMeasures = function (documentData, lettersChangedFlag) {
	    this.lettersChangedFlag = lettersChangedFlag;

	    if (!this._mdf && !this._isFirstFrame && !lettersChangedFlag && (!this._hasMaskedPath || !this._pathData.m._mdf)) {
	      return;
	    }

	    this._isFirstFrame = false;
	    var alignment = this._moreOptions.alignment.v;
	    var animators = this._animatorsData;
	    var textData = this._textData;
	    var matrixHelper = this.mHelper;
	    var renderType = this._renderType;
	    var renderedLettersCount = this.renderedLetters.length;
	    var xPos;
	    var yPos;
	    var i;
	    var len;
	    var letters = documentData.l;
	    var pathInfo;
	    var currentLength;
	    var currentPoint;
	    var segmentLength;
	    var flag;
	    var pointInd;
	    var segmentInd;
	    var prevPoint;
	    var points;
	    var segments;
	    var partialLength;
	    var totalLength;
	    var perc;
	    var tanAngle;
	    var mask;

	    if (this._hasMaskedPath) {
	      mask = this._pathData.m;

	      if (!this._pathData.n || this._pathData._mdf) {
	        var paths = mask.v;

	        if (this._pathData.r.v) {
	          paths = paths.reverse();
	        } // TODO: release bezier data cached from previous pathInfo: this._pathData.pi


	        pathInfo = {
	          tLength: 0,
	          segments: []
	        };
	        len = paths._length - 1;
	        var bezierData;
	        totalLength = 0;

	        for (i = 0; i < len; i += 1) {
	          bezierData = bez.buildBezierData(paths.v[i], paths.v[i + 1], [paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]], [paths.i[i + 1][0] - paths.v[i + 1][0], paths.i[i + 1][1] - paths.v[i + 1][1]]);
	          pathInfo.tLength += bezierData.segmentLength;
	          pathInfo.segments.push(bezierData);
	          totalLength += bezierData.segmentLength;
	        }

	        i = len;

	        if (mask.v.c) {
	          bezierData = bez.buildBezierData(paths.v[i], paths.v[0], [paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]], [paths.i[0][0] - paths.v[0][0], paths.i[0][1] - paths.v[0][1]]);
	          pathInfo.tLength += bezierData.segmentLength;
	          pathInfo.segments.push(bezierData);
	          totalLength += bezierData.segmentLength;
	        }

	        this._pathData.pi = pathInfo;
	      }

	      pathInfo = this._pathData.pi;
	      currentLength = this._pathData.f.v;
	      segmentInd = 0;
	      pointInd = 1;
	      segmentLength = 0;
	      flag = true;
	      segments = pathInfo.segments;

	      if (currentLength < 0 && mask.v.c) {
	        if (pathInfo.tLength < Math.abs(currentLength)) {
	          currentLength = -Math.abs(currentLength) % pathInfo.tLength;
	        }

	        segmentInd = segments.length - 1;
	        points = segments[segmentInd].points;
	        pointInd = points.length - 1;

	        while (currentLength < 0) {
	          currentLength += points[pointInd].partialLength;
	          pointInd -= 1;

	          if (pointInd < 0) {
	            segmentInd -= 1;
	            points = segments[segmentInd].points;
	            pointInd = points.length - 1;
	          }
	        }
	      }

	      points = segments[segmentInd].points;
	      prevPoint = points[pointInd - 1];
	      currentPoint = points[pointInd];
	      partialLength = currentPoint.partialLength;
	    }

	    len = letters.length;
	    xPos = 0;
	    yPos = 0;
	    var yOff = documentData.finalSize * 1.2 * 0.714;
	    var firstLine = true;
	    var animatorProps;
	    var animatorSelector;
	    var j;
	    var jLen;
	    var letterValue;
	    jLen = animators.length;
	    var mult;
	    var ind = -1;
	    var offf;
	    var xPathPos;
	    var yPathPos;
	    var initPathPos = currentLength;
	    var initSegmentInd = segmentInd;
	    var initPointInd = pointInd;
	    var currentLine = -1;
	    var elemOpacity;
	    var sc;
	    var sw;
	    var fc;
	    var k;
	    var letterSw;
	    var letterSc;
	    var letterFc;
	    var letterM = '';
	    var letterP = this.defaultPropsArray;
	    var letterO; //

	    if (documentData.j === 2 || documentData.j === 1) {
	      var animatorJustifyOffset = 0;
	      var animatorFirstCharOffset = 0;
	      var justifyOffsetMult = documentData.j === 2 ? -0.5 : -1;
	      var lastIndex = 0;
	      var isNewLine = true;

	      for (i = 0; i < len; i += 1) {
	        if (letters[i].n) {
	          if (animatorJustifyOffset) {
	            animatorJustifyOffset += animatorFirstCharOffset;
	          }

	          while (lastIndex < i) {
	            letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
	            lastIndex += 1;
	          }

	          animatorJustifyOffset = 0;
	          isNewLine = true;
	        } else {
	          for (j = 0; j < jLen; j += 1) {
	            animatorProps = animators[j].a;

	            if (animatorProps.t.propType) {
	              if (isNewLine && documentData.j === 2) {
	                animatorFirstCharOffset += animatorProps.t.v * justifyOffsetMult;
	              }

	              animatorSelector = animators[j].s;
	              mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);

	              if (mult.length) {
	                animatorJustifyOffset += animatorProps.t.v * mult[0] * justifyOffsetMult;
	              } else {
	                animatorJustifyOffset += animatorProps.t.v * mult * justifyOffsetMult;
	              }
	            }
	          }

	          isNewLine = false;
	        }
	      }

	      if (animatorJustifyOffset) {
	        animatorJustifyOffset += animatorFirstCharOffset;
	      }

	      while (lastIndex < i) {
	        letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
	        lastIndex += 1;
	      }
	    } //


	    for (i = 0; i < len; i += 1) {
	      matrixHelper.reset();
	      elemOpacity = 1;

	      if (letters[i].n) {
	        xPos = 0;
	        yPos += documentData.yOffset;
	        yPos += firstLine ? 1 : 0;
	        currentLength = initPathPos;
	        firstLine = false;

	        if (this._hasMaskedPath) {
	          segmentInd = initSegmentInd;
	          pointInd = initPointInd;
	          points = segments[segmentInd].points;
	          prevPoint = points[pointInd - 1];
	          currentPoint = points[pointInd];
	          partialLength = currentPoint.partialLength;
	          segmentLength = 0;
	        }

	        letterM = '';
	        letterFc = '';
	        letterSw = '';
	        letterO = '';
	        letterP = this.defaultPropsArray;
	      } else {
	        if (this._hasMaskedPath) {
	          if (currentLine !== letters[i].line) {
	            switch (documentData.j) {
	              case 1:
	                currentLength += totalLength - documentData.lineWidths[letters[i].line];
	                break;

	              case 2:
	                currentLength += (totalLength - documentData.lineWidths[letters[i].line]) / 2;
	                break;
	            }

	            currentLine = letters[i].line;
	          }

	          if (ind !== letters[i].ind) {
	            if (letters[ind]) {
	              currentLength += letters[ind].extra;
	            }

	            currentLength += letters[i].an / 2;
	            ind = letters[i].ind;
	          }

	          currentLength += alignment[0] * letters[i].an * 0.005;
	          var animatorOffset = 0;

	          for (j = 0; j < jLen; j += 1) {
	            animatorProps = animators[j].a;

	            if (animatorProps.p.propType) {
	              animatorSelector = animators[j].s;
	              mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);

	              if (mult.length) {
	                animatorOffset += animatorProps.p.v[0] * mult[0];
	              } else {
	                animatorOffset += animatorProps.p.v[0] * mult;
	              }
	            }

	            if (animatorProps.a.propType) {
	              animatorSelector = animators[j].s;
	              mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);

	              if (mult.length) {
	                animatorOffset += animatorProps.a.v[0] * mult[0];
	              } else {
	                animatorOffset += animatorProps.a.v[0] * mult;
	              }
	            }
	          }

	          flag = true; // Force alignment only works with a single line for now

	          if (this._pathData.a.v) {
	            currentLength = letters[0].an * 0.5 + (totalLength - this._pathData.f.v - letters[0].an * 0.5 - letters[letters.length - 1].an * 0.5) * ind / (len - 1);
	            currentLength += this._pathData.f.v;
	          }

	          while (flag) {
	            if (segmentLength + partialLength >= currentLength + animatorOffset || !points) {
	              perc = (currentLength + animatorOffset - segmentLength) / currentPoint.partialLength;
	              xPathPos = prevPoint.point[0] + (currentPoint.point[0] - prevPoint.point[0]) * perc;
	              yPathPos = prevPoint.point[1] + (currentPoint.point[1] - prevPoint.point[1]) * perc;
	              matrixHelper.translate(-alignment[0] * letters[i].an * 0.005, -(alignment[1] * yOff) * 0.01);
	              flag = false;
	            } else if (points) {
	              segmentLength += currentPoint.partialLength;
	              pointInd += 1;

	              if (pointInd >= points.length) {
	                pointInd = 0;
	                segmentInd += 1;

	                if (!segments[segmentInd]) {
	                  if (mask.v.c) {
	                    pointInd = 0;
	                    segmentInd = 0;
	                    points = segments[segmentInd].points;
	                  } else {
	                    segmentLength -= currentPoint.partialLength;
	                    points = null;
	                  }
	                } else {
	                  points = segments[segmentInd].points;
	                }
	              }

	              if (points) {
	                prevPoint = currentPoint;
	                currentPoint = points[pointInd];
	                partialLength = currentPoint.partialLength;
	              }
	            }
	          }

	          offf = letters[i].an / 2 - letters[i].add;
	          matrixHelper.translate(-offf, 0, 0);
	        } else {
	          offf = letters[i].an / 2 - letters[i].add;
	          matrixHelper.translate(-offf, 0, 0); // Grouping alignment

	          matrixHelper.translate(-alignment[0] * letters[i].an * 0.005, -alignment[1] * yOff * 0.01, 0);
	        }

	        for (j = 0; j < jLen; j += 1) {
	          animatorProps = animators[j].a;

	          if (animatorProps.t.propType) {
	            animatorSelector = animators[j].s;
	            mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars); // This condition is to prevent applying tracking to first character in each line. Might be better to use a boolean "isNewLine"

	            if (xPos !== 0 || documentData.j !== 0) {
	              if (this._hasMaskedPath) {
	                if (mult.length) {
	                  currentLength += animatorProps.t.v * mult[0];
	                } else {
	                  currentLength += animatorProps.t.v * mult;
	                }
	              } else if (mult.length) {
	                xPos += animatorProps.t.v * mult[0];
	              } else {
	                xPos += animatorProps.t.v * mult;
	              }
	            }
	          }
	        }

	        if (documentData.strokeWidthAnim) {
	          sw = documentData.sw || 0;
	        }

	        if (documentData.strokeColorAnim) {
	          if (documentData.sc) {
	            sc = [documentData.sc[0], documentData.sc[1], documentData.sc[2]];
	          } else {
	            sc = [0, 0, 0];
	          }
	        }

	        if (documentData.fillColorAnim && documentData.fc) {
	          fc = [documentData.fc[0], documentData.fc[1], documentData.fc[2]];
	        }

	        for (j = 0; j < jLen; j += 1) {
	          animatorProps = animators[j].a;

	          if (animatorProps.a.propType) {
	            animatorSelector = animators[j].s;
	            mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);

	            if (mult.length) {
	              matrixHelper.translate(-animatorProps.a.v[0] * mult[0], -animatorProps.a.v[1] * mult[1], animatorProps.a.v[2] * mult[2]);
	            } else {
	              matrixHelper.translate(-animatorProps.a.v[0] * mult, -animatorProps.a.v[1] * mult, animatorProps.a.v[2] * mult);
	            }
	          }
	        }

	        for (j = 0; j < jLen; j += 1) {
	          animatorProps = animators[j].a;

	          if (animatorProps.s.propType) {
	            animatorSelector = animators[j].s;
	            mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);

	            if (mult.length) {
	              matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult[0], 1 + (animatorProps.s.v[1] - 1) * mult[1], 1);
	            } else {
	              matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult, 1 + (animatorProps.s.v[1] - 1) * mult, 1);
	            }
	          }
	        }

	        for (j = 0; j < jLen; j += 1) {
	          animatorProps = animators[j].a;
	          animatorSelector = animators[j].s;
	          mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);

	          if (animatorProps.sk.propType) {
	            if (mult.length) {
	              matrixHelper.skewFromAxis(-animatorProps.sk.v * mult[0], animatorProps.sa.v * mult[1]);
	            } else {
	              matrixHelper.skewFromAxis(-animatorProps.sk.v * mult, animatorProps.sa.v * mult);
	            }
	          }

	          if (animatorProps.r.propType) {
	            if (mult.length) {
	              matrixHelper.rotateZ(-animatorProps.r.v * mult[2]);
	            } else {
	              matrixHelper.rotateZ(-animatorProps.r.v * mult);
	            }
	          }

	          if (animatorProps.ry.propType) {
	            if (mult.length) {
	              matrixHelper.rotateY(animatorProps.ry.v * mult[1]);
	            } else {
	              matrixHelper.rotateY(animatorProps.ry.v * mult);
	            }
	          }

	          if (animatorProps.rx.propType) {
	            if (mult.length) {
	              matrixHelper.rotateX(animatorProps.rx.v * mult[0]);
	            } else {
	              matrixHelper.rotateX(animatorProps.rx.v * mult);
	            }
	          }

	          if (animatorProps.o.propType) {
	            if (mult.length) {
	              elemOpacity += (animatorProps.o.v * mult[0] - elemOpacity) * mult[0];
	            } else {
	              elemOpacity += (animatorProps.o.v * mult - elemOpacity) * mult;
	            }
	          }

	          if (documentData.strokeWidthAnim && animatorProps.sw.propType) {
	            if (mult.length) {
	              sw += animatorProps.sw.v * mult[0];
	            } else {
	              sw += animatorProps.sw.v * mult;
	            }
	          }

	          if (documentData.strokeColorAnim && animatorProps.sc.propType) {
	            for (k = 0; k < 3; k += 1) {
	              if (mult.length) {
	                sc[k] += (animatorProps.sc.v[k] - sc[k]) * mult[0];
	              } else {
	                sc[k] += (animatorProps.sc.v[k] - sc[k]) * mult;
	              }
	            }
	          }

	          if (documentData.fillColorAnim && documentData.fc) {
	            if (animatorProps.fc.propType) {
	              for (k = 0; k < 3; k += 1) {
	                if (mult.length) {
	                  fc[k] += (animatorProps.fc.v[k] - fc[k]) * mult[0];
	                } else {
	                  fc[k] += (animatorProps.fc.v[k] - fc[k]) * mult;
	                }
	              }
	            }

	            if (animatorProps.fh.propType) {
	              if (mult.length) {
	                fc = addHueToRGB(fc, animatorProps.fh.v * mult[0]);
	              } else {
	                fc = addHueToRGB(fc, animatorProps.fh.v * mult);
	              }
	            }

	            if (animatorProps.fs.propType) {
	              if (mult.length) {
	                fc = addSaturationToRGB(fc, animatorProps.fs.v * mult[0]);
	              } else {
	                fc = addSaturationToRGB(fc, animatorProps.fs.v * mult);
	              }
	            }

	            if (animatorProps.fb.propType) {
	              if (mult.length) {
	                fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult[0]);
	              } else {
	                fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult);
	              }
	            }
	          }
	        }

	        for (j = 0; j < jLen; j += 1) {
	          animatorProps = animators[j].a;

	          if (animatorProps.p.propType) {
	            animatorSelector = animators[j].s;
	            mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);

	            if (this._hasMaskedPath) {
	              if (mult.length) {
	                matrixHelper.translate(0, animatorProps.p.v[1] * mult[0], -animatorProps.p.v[2] * mult[1]);
	              } else {
	                matrixHelper.translate(0, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
	              }
	            } else if (mult.length) {
	              matrixHelper.translate(animatorProps.p.v[0] * mult[0], animatorProps.p.v[1] * mult[1], -animatorProps.p.v[2] * mult[2]);
	            } else {
	              matrixHelper.translate(animatorProps.p.v[0] * mult, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
	            }
	          }
	        }

	        if (documentData.strokeWidthAnim) {
	          letterSw = sw < 0 ? 0 : sw;
	        }

	        if (documentData.strokeColorAnim) {
	          letterSc = 'rgb(' + Math.round(sc[0] * 255) + ',' + Math.round(sc[1] * 255) + ',' + Math.round(sc[2] * 255) + ')';
	        }

	        if (documentData.fillColorAnim && documentData.fc) {
	          letterFc = 'rgb(' + Math.round(fc[0] * 255) + ',' + Math.round(fc[1] * 255) + ',' + Math.round(fc[2] * 255) + ')';
	        }

	        if (this._hasMaskedPath) {
	          matrixHelper.translate(0, -documentData.ls);
	          matrixHelper.translate(0, alignment[1] * yOff * 0.01 + yPos, 0);

	          if (this._pathData.p.v) {
	            tanAngle = (currentPoint.point[1] - prevPoint.point[1]) / (currentPoint.point[0] - prevPoint.point[0]);
	            var rot = Math.atan(tanAngle) * 180 / Math.PI;

	            if (currentPoint.point[0] < prevPoint.point[0]) {
	              rot += 180;
	            }

	            matrixHelper.rotate(-rot * Math.PI / 180);
	          }

	          matrixHelper.translate(xPathPos, yPathPos, 0);
	          currentLength -= alignment[0] * letters[i].an * 0.005;

	          if (letters[i + 1] && ind !== letters[i + 1].ind) {
	            currentLength += letters[i].an / 2;
	            currentLength += documentData.tr * 0.001 * documentData.finalSize;
	          }
	        } else {
	          matrixHelper.translate(xPos, yPos, 0);

	          if (documentData.ps) {
	            // matrixHelper.translate(documentData.ps[0],documentData.ps[1],0);
	            matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
	          }

	          switch (documentData.j) {
	            case 1:
	              matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line]), 0, 0);
	              break;

	            case 2:
	              matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line]) / 2, 0, 0);
	              break;
	          }

	          matrixHelper.translate(0, -documentData.ls);
	          matrixHelper.translate(offf, 0, 0);
	          matrixHelper.translate(alignment[0] * letters[i].an * 0.005, alignment[1] * yOff * 0.01, 0);
	          xPos += letters[i].l + documentData.tr * 0.001 * documentData.finalSize;
	        }

	        if (renderType === 'html') {
	          letterM = matrixHelper.toCSS();
	        } else if (renderType === 'svg') {
	          letterM = matrixHelper.to2dCSS();
	        } else {
	          letterP = [matrixHelper.props[0], matrixHelper.props[1], matrixHelper.props[2], matrixHelper.props[3], matrixHelper.props[4], matrixHelper.props[5], matrixHelper.props[6], matrixHelper.props[7], matrixHelper.props[8], matrixHelper.props[9], matrixHelper.props[10], matrixHelper.props[11], matrixHelper.props[12], matrixHelper.props[13], matrixHelper.props[14], matrixHelper.props[15]];
	        }

	        letterO = elemOpacity;
	      }

	      if (renderedLettersCount <= i) {
	        letterValue = new LetterProps(letterO, letterSw, letterSc, letterFc, letterM, letterP);
	        this.renderedLetters.push(letterValue);
	        renderedLettersCount += 1;
	        this.lettersChangedFlag = true;
	      } else {
	        letterValue = this.renderedLetters[i];
	        this.lettersChangedFlag = letterValue.update(letterO, letterSw, letterSc, letterFc, letterM, letterP) || this.lettersChangedFlag;
	      }
	    }
	  };

	  TextAnimatorProperty.prototype.getValue = function () {
	    if (this._elem.globalData.frameId === this._frameId) {
	      return;
	    }

	    this._frameId = this._elem.globalData.frameId;
	    this.iterateDynamicProperties();
	  };

	  TextAnimatorProperty.prototype.mHelper = new Matrix();
	  TextAnimatorProperty.prototype.defaultPropsArray = [];
	  extendPrototype([DynamicPropertyContainer], TextAnimatorProperty);

	  function ITextElement() {}

	  ITextElement.prototype.initElement = function (data, globalData, comp) {
	    this.lettersChangedFlag = true;
	    this.initFrame();
	    this.initBaseData(data, globalData, comp);
	    this.textProperty = new TextProperty(this, data.t, this.dynamicProperties);
	    this.textAnimator = new TextAnimatorProperty(data.t, this.renderType, this);
	    this.initTransform(data, globalData, comp);
	    this.initHierarchy();
	    this.initRenderable();
	    this.initRendererElement();
	    this.createContainerElements();
	    this.createRenderableComponents();
	    this.createContent();
	    this.hide();
	    this.textAnimator.searchProperties(this.dynamicProperties);
	  };

	  ITextElement.prototype.prepareFrame = function (num) {
	    this._mdf = false;
	    this.prepareRenderableFrame(num);
	    this.prepareProperties(num, this.isInRange);
	  };

	  ITextElement.prototype.createPathShape = function (matrixHelper, shapes) {
	    var j;
	    var jLen = shapes.length;
	    var pathNodes;
	    var shapeStr = '';

	    for (j = 0; j < jLen; j += 1) {
	      if (shapes[j].ty === 'sh') {
	        pathNodes = shapes[j].ks.k;
	        shapeStr += buildShapeString(pathNodes, pathNodes.i.length, true, matrixHelper);
	      }
	    }

	    return shapeStr;
	  };

	  ITextElement.prototype.updateDocumentData = function (newData, index) {
	    this.textProperty.updateDocumentData(newData, index);
	  };

	  ITextElement.prototype.canResizeFont = function (_canResize) {
	    this.textProperty.canResizeFont(_canResize);
	  };

	  ITextElement.prototype.setMinimumFontSize = function (_fontSize) {
	    this.textProperty.setMinimumFontSize(_fontSize);
	  };

	  ITextElement.prototype.applyTextPropertiesToMatrix = function (documentData, matrixHelper, lineNumber, xPos, yPos) {
	    if (documentData.ps) {
	      matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
	    }

	    matrixHelper.translate(0, -documentData.ls, 0);

	    switch (documentData.j) {
	      case 1:
	        matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]), 0, 0);
	        break;

	      case 2:
	        matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]) / 2, 0, 0);
	        break;
	    }

	    matrixHelper.translate(xPos, yPos, 0);
	  };

	  ITextElement.prototype.buildColor = function (colorData) {
	    return 'rgb(' + Math.round(colorData[0] * 255) + ',' + Math.round(colorData[1] * 255) + ',' + Math.round(colorData[2] * 255) + ')';
	  };

	  ITextElement.prototype.emptyProp = new LetterProps();

	  ITextElement.prototype.destroy = function () {};

	  ITextElement.prototype.validateText = function () {
	    if (this.textProperty._mdf || this.textProperty._isFirstFrame) {
	      this.buildNewText();
	      this.textProperty._isFirstFrame = false;
	      this.textProperty._mdf = false;
	    }
	  };

	  var emptyShapeData = {
	    shapes: []
	  };

	  function SVGTextLottieElement(data, globalData, comp) {
	    this.textSpans = [];
	    this.renderType = 'svg';
	    this.initElement(data, globalData, comp);
	  }

	  extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], SVGTextLottieElement);

	  SVGTextLottieElement.prototype.createContent = function () {
	    if (this.data.singleShape && !this.globalData.fontManager.chars) {
	      this.textContainer = createNS('text');
	    }
	  };

	  SVGTextLottieElement.prototype.buildTextContents = function (textArray) {
	    var i = 0;
	    var len = textArray.length;
	    var textContents = [];
	    var currentTextContent = '';

	    while (i < len) {
	      if (textArray[i] === String.fromCharCode(13) || textArray[i] === String.fromCharCode(3)) {
	        textContents.push(currentTextContent);
	        currentTextContent = '';
	      } else {
	        currentTextContent += textArray[i];
	      }

	      i += 1;
	    }

	    textContents.push(currentTextContent);
	    return textContents;
	  };

	  SVGTextLottieElement.prototype.buildShapeData = function (data, scale) {
	    // data should probably be cloned to apply scale separately to each instance of a text on different layers
	    // but since text internal content gets only rendered once and then it's never rerendered,
	    // it's probably safe not to clone data and reuse always the same instance even if the object is mutated.
	    // Avoiding cloning is preferred since cloning each character shape data is expensive
	    if (data.shapes && data.shapes.length) {
	      var shape = data.shapes[0];

	      if (shape.it) {
	        var shapeItem = shape.it[shape.it.length - 1];

	        if (shapeItem.s) {
	          shapeItem.s.k[0] = scale;
	          shapeItem.s.k[1] = scale;
	        }
	      }
	    }

	    return data;
	  };

	  SVGTextLottieElement.prototype.buildNewText = function () {
	    this.addDynamicProperty(this);
	    var i;
	    var len;
	    var documentData = this.textProperty.currentData;
	    this.renderedLetters = createSizedArray(documentData ? documentData.l.length : 0);

	    if (documentData.fc) {
	      this.layerElement.setAttribute('fill', this.buildColor(documentData.fc));
	    } else {
	      this.layerElement.setAttribute('fill', 'rgba(0,0,0,0)');
	    }

	    if (documentData.sc) {
	      this.layerElement.setAttribute('stroke', this.buildColor(documentData.sc));
	      this.layerElement.setAttribute('stroke-width', documentData.sw);
	    }

	    this.layerElement.setAttribute('font-size', documentData.finalSize);
	    var fontData = this.globalData.fontManager.getFontByName(documentData.f);

	    if (fontData.fClass) {
	      this.layerElement.setAttribute('class', fontData.fClass);
	    } else {
	      this.layerElement.setAttribute('font-family', fontData.fFamily);
	      var fWeight = documentData.fWeight;
	      var fStyle = documentData.fStyle;
	      this.layerElement.setAttribute('font-style', fStyle);
	      this.layerElement.setAttribute('font-weight', fWeight);
	    }

	    this.layerElement.setAttribute('aria-label', documentData.t);
	    var letters = documentData.l || [];
	    var usesGlyphs = !!this.globalData.fontManager.chars;
	    len = letters.length;
	    var tSpan;
	    var matrixHelper = this.mHelper;
	    var shapeStr = '';
	    var singleShape = this.data.singleShape;
	    var xPos = 0;
	    var yPos = 0;
	    var firstLine = true;
	    var trackingOffset = documentData.tr * 0.001 * documentData.finalSize;

	    if (singleShape && !usesGlyphs && !documentData.sz) {
	      var tElement = this.textContainer;
	      var justify = 'start';

	      switch (documentData.j) {
	        case 1:
	          justify = 'end';
	          break;

	        case 2:
	          justify = 'middle';
	          break;

	        default:
	          justify = 'start';
	          break;
	      }

	      tElement.setAttribute('text-anchor', justify);
	      tElement.setAttribute('letter-spacing', trackingOffset);
	      var textContent = this.buildTextContents(documentData.finalText);
	      len = textContent.length;
	      yPos = documentData.ps ? documentData.ps[1] + documentData.ascent : 0;

	      for (i = 0; i < len; i += 1) {
	        tSpan = this.textSpans[i].span || createNS('tspan');
	        tSpan.textContent = textContent[i];
	        tSpan.setAttribute('x', 0);
	        tSpan.setAttribute('y', yPos);
	        tSpan.style.display = 'inherit';
	        tElement.appendChild(tSpan);

	        if (!this.textSpans[i]) {
	          this.textSpans[i] = {
	            span: null,
	            glyph: null
	          };
	        }

	        this.textSpans[i].span = tSpan;
	        yPos += documentData.finalLineHeight;
	      }

	      this.layerElement.appendChild(tElement);
	    } else {
	      var cachedSpansLength = this.textSpans.length;
	      var charData;

	      for (i = 0; i < len; i += 1) {
	        if (!this.textSpans[i]) {
	          this.textSpans[i] = {
	            span: null,
	            childSpan: null,
	            glyph: null
	          };
	        }

	        if (!usesGlyphs || !singleShape || i === 0) {
	          tSpan = cachedSpansLength > i ? this.textSpans[i].span : createNS(usesGlyphs ? 'g' : 'text');

	          if (cachedSpansLength <= i) {
	            tSpan.setAttribute('stroke-linecap', 'butt');
	            tSpan.setAttribute('stroke-linejoin', 'round');
	            tSpan.setAttribute('stroke-miterlimit', '4');
	            this.textSpans[i].span = tSpan;

	            if (usesGlyphs) {
	              var childSpan = createNS('g');
	              tSpan.appendChild(childSpan);
	              this.textSpans[i].childSpan = childSpan;
	            }

	            this.textSpans[i].span = tSpan;
	            this.layerElement.appendChild(tSpan);
	          }

	          tSpan.style.display = 'inherit';
	        }

	        matrixHelper.reset();

	        if (singleShape) {
	          if (letters[i].n) {
	            xPos = -trackingOffset;
	            yPos += documentData.yOffset;
	            yPos += firstLine ? 1 : 0;
	            firstLine = false;
	          }

	          this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i].line, xPos, yPos);
	          xPos += letters[i].l || 0; // xPos += letters[i].val === ' ' ? 0 : trackingOffset;

	          xPos += trackingOffset;
	        }

	        if (usesGlyphs) {
	          charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
	          var glyphElement; // t === 1 means the character has been replaced with an animated shaped

	          if (charData.t === 1) {
	            glyphElement = new SVGCompElement(charData.data, this.globalData, this);
	          } else {
	            var data = emptyShapeData;

	            if (charData.data && charData.data.shapes) {
	              data = this.buildShapeData(charData.data, documentData.finalSize);
	            }

	            glyphElement = new SVGShapeElement(data, this.globalData, this);
	          }

	          if (this.textSpans[i].glyph) {
	            var glyph = this.textSpans[i].glyph;
	            this.textSpans[i].childSpan.removeChild(glyph.layerElement);
	            glyph.destroy();
	          }

	          this.textSpans[i].glyph = glyphElement;
	          glyphElement._debug = true;
	          glyphElement.prepareFrame(0);
	          glyphElement.renderFrame();
	          this.textSpans[i].childSpan.appendChild(glyphElement.layerElement); // when using animated shapes, the layer will be scaled instead of replacing the internal scale
	          // this might have issues with strokes and might need a different solution

	          if (charData.t === 1) {
	            this.textSpans[i].childSpan.setAttribute('transform', 'scale(' + documentData.finalSize / 100 + ',' + documentData.finalSize / 100 + ')');
	          }
	        } else {
	          if (singleShape) {
	            tSpan.setAttribute('transform', 'translate(' + matrixHelper.props[12] + ',' + matrixHelper.props[13] + ')');
	          }

	          tSpan.textContent = letters[i].val;
	          tSpan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');
	        } //

	      }

	      if (singleShape && tSpan) {
	        tSpan.setAttribute('d', shapeStr);
	      }
	    }

	    while (i < this.textSpans.length) {
	      this.textSpans[i].span.style.display = 'none';
	      i += 1;
	    }

	    this._sizeChanged = true;
	  };

	  SVGTextLottieElement.prototype.sourceRectAtTime = function () {
	    this.prepareFrame(this.comp.renderedFrame - this.data.st);
	    this.renderInnerContent();

	    if (this._sizeChanged) {
	      this._sizeChanged = false;
	      var textBox = this.layerElement.getBBox();
	      this.bbox = {
	        top: textBox.y,
	        left: textBox.x,
	        width: textBox.width,
	        height: textBox.height
	      };
	    }

	    return this.bbox;
	  };

	  SVGTextLottieElement.prototype.getValue = function () {
	    var i;
	    var len = this.textSpans.length;
	    var glyphElement;
	    this.renderedFrame = this.comp.renderedFrame;

	    for (i = 0; i < len; i += 1) {
	      glyphElement = this.textSpans[i].glyph;

	      if (glyphElement) {
	        glyphElement.prepareFrame(this.comp.renderedFrame - this.data.st);

	        if (glyphElement._mdf) {
	          this._mdf = true;
	        }
	      }
	    }
	  };

	  SVGTextLottieElement.prototype.renderInnerContent = function () {
	    this.validateText();

	    if (!this.data.singleShape || this._mdf) {
	      this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);

	      if (this.lettersChangedFlag || this.textAnimator.lettersChangedFlag) {
	        this._sizeChanged = true;
	        var i;
	        var len;
	        var renderedLetters = this.textAnimator.renderedLetters;
	        var letters = this.textProperty.currentData.l;
	        len = letters.length;
	        var renderedLetter;
	        var textSpan;
	        var glyphElement;

	        for (i = 0; i < len; i += 1) {
	          if (!letters[i].n) {
	            renderedLetter = renderedLetters[i];
	            textSpan = this.textSpans[i].span;
	            glyphElement = this.textSpans[i].glyph;

	            if (glyphElement) {
	              glyphElement.renderFrame();
	            }

	            if (renderedLetter._mdf.m) {
	              textSpan.setAttribute('transform', renderedLetter.m);
	            }

	            if (renderedLetter._mdf.o) {
	              textSpan.setAttribute('opacity', renderedLetter.o);
	            }

	            if (renderedLetter._mdf.sw) {
	              textSpan.setAttribute('stroke-width', renderedLetter.sw);
	            }

	            if (renderedLetter._mdf.sc) {
	              textSpan.setAttribute('stroke', renderedLetter.sc);
	            }

	            if (renderedLetter._mdf.fc) {
	              textSpan.setAttribute('fill', renderedLetter.fc);
	            }
	          }
	        }
	      }
	    }
	  };

	  function ISolidElement(data, globalData, comp) {
	    this.initElement(data, globalData, comp);
	  }

	  extendPrototype([IImageElement], ISolidElement);

	  ISolidElement.prototype.createContent = function () {
	    var rect = createNS('rect'); /// /rect.style.width = this.data.sw;
	    /// /rect.style.height = this.data.sh;
	    /// /rect.style.fill = this.data.sc;

	    rect.setAttribute('width', this.data.sw);
	    rect.setAttribute('height', this.data.sh);
	    rect.setAttribute('fill', this.data.sc);
	    this.layerElement.appendChild(rect);
	  };

	  function NullElement(data, globalData, comp) {
	    this.initFrame();
	    this.initBaseData(data, globalData, comp);
	    this.initFrame();
	    this.initTransform(data, globalData, comp);
	    this.initHierarchy();
	  }

	  NullElement.prototype.prepareFrame = function (num) {
	    this.prepareProperties(num, true);
	  };

	  NullElement.prototype.renderFrame = function () {};

	  NullElement.prototype.getBaseElement = function () {
	    return null;
	  };

	  NullElement.prototype.destroy = function () {};

	  NullElement.prototype.sourceRectAtTime = function () {};

	  NullElement.prototype.hide = function () {};

	  extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement], NullElement);

	  function SVGRendererBase() {}

	  extendPrototype([BaseRenderer], SVGRendererBase);

	  SVGRendererBase.prototype.createNull = function (data) {
	    return new NullElement(data, this.globalData, this);
	  };

	  SVGRendererBase.prototype.createShape = function (data) {
	    return new SVGShapeElement(data, this.globalData, this);
	  };

	  SVGRendererBase.prototype.createText = function (data) {
	    return new SVGTextLottieElement(data, this.globalData, this);
	  };

	  SVGRendererBase.prototype.createImage = function (data) {
	    return new IImageElement(data, this.globalData, this);
	  };

	  SVGRendererBase.prototype.createSolid = function (data) {
	    return new ISolidElement(data, this.globalData, this);
	  };

	  SVGRendererBase.prototype.configAnimation = function (animData) {
	    this.svgElement.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
	    this.svgElement.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink');

	    if (this.renderConfig.viewBoxSize) {
	      this.svgElement.setAttribute('viewBox', this.renderConfig.viewBoxSize);
	    } else {
	      this.svgElement.setAttribute('viewBox', '0 0 ' + animData.w + ' ' + animData.h);
	    }

	    if (!this.renderConfig.viewBoxOnly) {
	      this.svgElement.setAttribute('width', animData.w);
	      this.svgElement.setAttribute('height', animData.h);
	      this.svgElement.style.width = '100%';
	      this.svgElement.style.height = '100%';
	      this.svgElement.style.transform = 'translate3d(0,0,0)';
	      this.svgElement.style.contentVisibility = this.renderConfig.contentVisibility;
	    }

	    if (this.renderConfig.width) {
	      this.svgElement.setAttribute('width', this.renderConfig.width);
	    }

	    if (this.renderConfig.height) {
	      this.svgElement.setAttribute('height', this.renderConfig.height);
	    }

	    if (this.renderConfig.className) {
	      this.svgElement.setAttribute('class', this.renderConfig.className);
	    }

	    if (this.renderConfig.id) {
	      this.svgElement.setAttribute('id', this.renderConfig.id);
	    }

	    if (this.renderConfig.focusable !== undefined) {
	      this.svgElement.setAttribute('focusable', this.renderConfig.focusable);
	    }

	    this.svgElement.setAttribute('preserveAspectRatio', this.renderConfig.preserveAspectRatio); // this.layerElement.style.transform = 'translate3d(0,0,0)';
	    // this.layerElement.style.transformOrigin = this.layerElement.style.mozTransformOrigin = this.layerElement.style.webkitTransformOrigin = this.layerElement.style['-webkit-transform'] = "0px 0px 0px";

	    this.animationItem.wrapper.appendChild(this.svgElement); // Mask animation

	    var defs = this.globalData.defs;
	    this.setupGlobalData(animData, defs);
	    this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
	    this.data = animData;
	    var maskElement = createNS('clipPath');
	    var rect = createNS('rect');
	    rect.setAttribute('width', animData.w);
	    rect.setAttribute('height', animData.h);
	    rect.setAttribute('x', 0);
	    rect.setAttribute('y', 0);
	    var maskId = createElementID();
	    maskElement.setAttribute('id', maskId);
	    maskElement.appendChild(rect);
	    this.layerElement.setAttribute('clip-path', 'url(' + getLocationHref() + '#' + maskId + ')');
	    defs.appendChild(maskElement);
	    this.layers = animData.layers;
	    this.elements = createSizedArray(animData.layers.length);
	  };

	  SVGRendererBase.prototype.destroy = function () {
	    if (this.animationItem.wrapper) {
	      this.animationItem.wrapper.innerText = '';
	    }

	    this.layerElement = null;
	    this.globalData.defs = null;
	    var i;
	    var len = this.layers ? this.layers.length : 0;

	    for (i = 0; i < len; i += 1) {
	      if (this.elements[i] && this.elements[i].destroy) {
	        this.elements[i].destroy();
	      }
	    }

	    this.elements.length = 0;
	    this.destroyed = true;
	    this.animationItem = null;
	  };

	  SVGRendererBase.prototype.updateContainerSize = function () {};

	  SVGRendererBase.prototype.findIndexByInd = function (ind) {
	    var i = 0;
	    var len = this.layers.length;

	    for (i = 0; i < len; i += 1) {
	      if (this.layers[i].ind === ind) {
	        return i;
	      }
	    }

	    return -1;
	  };

	  SVGRendererBase.prototype.buildItem = function (pos) {
	    var elements = this.elements;

	    if (elements[pos] || this.layers[pos].ty === 99) {
	      return;
	    }

	    elements[pos] = true;
	    var element = this.createItem(this.layers[pos]);
	    elements[pos] = element;

	    if (getExpressionsPlugin()) {
	      if (this.layers[pos].ty === 0) {
	        this.globalData.projectInterface.registerComposition(element);
	      }

	      element.initExpressions();
	    }

	    this.appendElementInPos(element, pos);

	    if (this.layers[pos].tt) {
	      var elementIndex = 'tp' in this.layers[pos] ? this.findIndexByInd(this.layers[pos].tp) : pos - 1;

	      if (elementIndex === -1) {
	        return;
	      }

	      if (!this.elements[elementIndex] || this.elements[elementIndex] === true) {
	        this.buildItem(elementIndex);
	        this.addPendingElement(element);
	      } else {
	        var matteElement = elements[elementIndex];
	        var matteMask = matteElement.getMatte(this.layers[pos].tt);
	        element.setMatte(matteMask);
	      }
	    }
	  };

	  SVGRendererBase.prototype.checkPendingElements = function () {
	    while (this.pendingElements.length) {
	      var element = this.pendingElements.pop();
	      element.checkParenting();

	      if (element.data.tt) {
	        var i = 0;
	        var len = this.elements.length;

	        while (i < len) {
	          if (this.elements[i] === element) {
	            var elementIndex = 'tp' in element.data ? this.findIndexByInd(element.data.tp) : i - 1;
	            var matteElement = this.elements[elementIndex];
	            var matteMask = matteElement.getMatte(this.layers[i].tt);
	            element.setMatte(matteMask);
	            break;
	          }

	          i += 1;
	        }
	      }
	    }
	  };

	  SVGRendererBase.prototype.renderFrame = function (num) {
	    if (this.renderedFrame === num || this.destroyed) {
	      return;
	    }

	    if (num === null) {
	      num = this.renderedFrame;
	    } else {
	      this.renderedFrame = num;
	    } // console.log('-------');
	    // console.log('FRAME ',num);


	    this.globalData.frameNum = num;
	    this.globalData.frameId += 1;
	    this.globalData.projectInterface.currentFrame = num;
	    this.globalData._mdf = false;
	    var i;
	    var len = this.layers.length;

	    if (!this.completeLayers) {
	      this.checkLayers(num);
	    }

	    for (i = len - 1; i >= 0; i -= 1) {
	      if (this.completeLayers || this.elements[i]) {
	        this.elements[i].prepareFrame(num - this.layers[i].st);
	      }
	    }

	    if (this.globalData._mdf) {
	      for (i = 0; i < len; i += 1) {
	        if (this.completeLayers || this.elements[i]) {
	          this.elements[i].renderFrame();
	        }
	      }
	    }
	  };

	  SVGRendererBase.prototype.appendElementInPos = function (element, pos) {
	    var newElement = element.getBaseElement();

	    if (!newElement) {
	      return;
	    }

	    var i = 0;
	    var nextElement;

	    while (i < pos) {
	      if (this.elements[i] && this.elements[i] !== true && this.elements[i].getBaseElement()) {
	        nextElement = this.elements[i].getBaseElement();
	      }

	      i += 1;
	    }

	    if (nextElement) {
	      this.layerElement.insertBefore(newElement, nextElement);
	    } else {
	      this.layerElement.appendChild(newElement);
	    }
	  };

	  SVGRendererBase.prototype.hide = function () {
	    this.layerElement.style.display = 'none';
	  };

	  SVGRendererBase.prototype.show = function () {
	    this.layerElement.style.display = 'block';
	  };

	  function ICompElement() {}

	  extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement, RenderableDOMElement], ICompElement);

	  ICompElement.prototype.initElement = function (data, globalData, comp) {
	    this.initFrame();
	    this.initBaseData(data, globalData, comp);
	    this.initTransform(data, globalData, comp);
	    this.initRenderable();
	    this.initHierarchy();
	    this.initRendererElement();
	    this.createContainerElements();
	    this.createRenderableComponents();

	    if (this.data.xt || !globalData.progressiveLoad) {
	      this.buildAllItems();
	    }

	    this.hide();
	  };
	  /* ICompElement.prototype.hide = function(){
	      if(!this.hidden){
	          this.hideElement();
	          var i,len = this.elements.length;
	          for( i = 0; i < len; i+=1 ){
	              if(this.elements[i]){
	                  this.elements[i].hide();
	              }
	          }
	      }
	  }; */


	  ICompElement.prototype.prepareFrame = function (num) {
	    this._mdf = false;
	    this.prepareRenderableFrame(num);
	    this.prepareProperties(num, this.isInRange);

	    if (!this.isInRange && !this.data.xt) {
	      return;
	    }

	    if (!this.tm._placeholder) {
	      var timeRemapped = this.tm.v;

	      if (timeRemapped === this.data.op) {
	        timeRemapped = this.data.op - 1;
	      }

	      this.renderedFrame = timeRemapped;
	    } else {
	      this.renderedFrame = num / this.data.sr;
	    }

	    var i;
	    var len = this.elements.length;

	    if (!this.completeLayers) {
	      this.checkLayers(this.renderedFrame);
	    } // This iteration needs to be backwards because of how expressions connect between each other


	    for (i = len - 1; i >= 0; i -= 1) {
	      if (this.completeLayers || this.elements[i]) {
	        this.elements[i].prepareFrame(this.renderedFrame - this.layers[i].st);

	        if (this.elements[i]._mdf) {
	          this._mdf = true;
	        }
	      }
	    }
	  };

	  ICompElement.prototype.renderInnerContent = function () {
	    var i;
	    var len = this.layers.length;

	    for (i = 0; i < len; i += 1) {
	      if (this.completeLayers || this.elements[i]) {
	        this.elements[i].renderFrame();
	      }
	    }
	  };

	  ICompElement.prototype.setElements = function (elems) {
	    this.elements = elems;
	  };

	  ICompElement.prototype.getElements = function () {
	    return this.elements;
	  };

	  ICompElement.prototype.destroyElements = function () {
	    var i;
	    var len = this.layers.length;

	    for (i = 0; i < len; i += 1) {
	      if (this.elements[i]) {
	        this.elements[i].destroy();
	      }
	    }
	  };

	  ICompElement.prototype.destroy = function () {
	    this.destroyElements();
	    this.destroyBaseElement();
	  };

	  function SVGCompElement(data, globalData, comp) {
	    this.layers = data.layers;
	    this.supports3d = true;
	    this.completeLayers = false;
	    this.pendingElements = [];
	    this.elements = this.layers ? createSizedArray(this.layers.length) : [];
	    this.initElement(data, globalData, comp);
	    this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {
	      _placeholder: true
	    };
	  }

	  extendPrototype([SVGRendererBase, ICompElement, SVGBaseElement], SVGCompElement);

	  SVGCompElement.prototype.createComp = function (data) {
	    return new SVGCompElement(data, this.globalData, this);
	  };

	  function SVGRenderer(animationItem, config) {
	    this.animationItem = animationItem;
	    this.layers = null;
	    this.renderedFrame = -1;
	    this.svgElement = createNS('svg');
	    var ariaLabel = '';

	    if (config && config.title) {
	      var titleElement = createNS('title');
	      var titleId = createElementID();
	      titleElement.setAttribute('id', titleId);
	      titleElement.textContent = config.title;
	      this.svgElement.appendChild(titleElement);
	      ariaLabel += titleId;
	    }

	    if (config && config.description) {
	      var descElement = createNS('desc');
	      var descId = createElementID();
	      descElement.setAttribute('id', descId);
	      descElement.textContent = config.description;
	      this.svgElement.appendChild(descElement);
	      ariaLabel += ' ' + descId;
	    }

	    if (ariaLabel) {
	      this.svgElement.setAttribute('aria-labelledby', ariaLabel);
	    }

	    var defs = createNS('defs');
	    this.svgElement.appendChild(defs);
	    var maskElement = createNS('g');
	    this.svgElement.appendChild(maskElement);
	    this.layerElement = maskElement;
	    this.renderConfig = {
	      preserveAspectRatio: config && config.preserveAspectRatio || 'xMidYMid meet',
	      imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || 'xMidYMid slice',
	      contentVisibility: config && config.contentVisibility || 'visible',
	      progressiveLoad: config && config.progressiveLoad || false,
	      hideOnTransparent: !(config && config.hideOnTransparent === false),
	      viewBoxOnly: config && config.viewBoxOnly || false,
	      viewBoxSize: config && config.viewBoxSize || false,
	      className: config && config.className || '',
	      id: config && config.id || '',
	      focusable: config && config.focusable,
	      filterSize: {
	        width: config && config.filterSize && config.filterSize.width || '100%',
	        height: config && config.filterSize && config.filterSize.height || '100%',
	        x: config && config.filterSize && config.filterSize.x || '0%',
	        y: config && config.filterSize && config.filterSize.y || '0%'
	      },
	      width: config && config.width,
	      height: config && config.height,
	      runExpressions: !config || config.runExpressions === undefined || config.runExpressions
	    };
	    this.globalData = {
	      _mdf: false,
	      frameNum: -1,
	      defs: defs,
	      renderConfig: this.renderConfig
	    };
	    this.elements = [];
	    this.pendingElements = [];
	    this.destroyed = false;
	    this.rendererType = 'svg';
	  }

	  extendPrototype([SVGRendererBase], SVGRenderer);

	  SVGRenderer.prototype.createComp = function (data) {
	    return new SVGCompElement(data, this.globalData, this);
	  };

	  function ShapeTransformManager() {
	    this.sequences = {};
	    this.sequenceList = [];
	    this.transform_key_count = 0;
	  }

	  ShapeTransformManager.prototype = {
	    addTransformSequence: function addTransformSequence(transforms) {
	      var i;
	      var len = transforms.length;
	      var key = '_';

	      for (i = 0; i < len; i += 1) {
	        key += transforms[i].transform.key + '_';
	      }

	      var sequence = this.sequences[key];

	      if (!sequence) {
	        sequence = {
	          transforms: [].concat(transforms),
	          finalTransform: new Matrix(),
	          _mdf: false
	        };
	        this.sequences[key] = sequence;
	        this.sequenceList.push(sequence);
	      }

	      return sequence;
	    },
	    processSequence: function processSequence(sequence, isFirstFrame) {
	      var i = 0;
	      var len = sequence.transforms.length;
	      var _mdf = isFirstFrame;

	      while (i < len && !isFirstFrame) {
	        if (sequence.transforms[i].transform.mProps._mdf) {
	          _mdf = true;
	          break;
	        }

	        i += 1;
	      }

	      if (_mdf) {
	        sequence.finalTransform.reset();

	        for (i = len - 1; i >= 0; i -= 1) {
	          sequence.finalTransform.multiply(sequence.transforms[i].transform.mProps.v);
	        }
	      }

	      sequence._mdf = _mdf;
	    },
	    processSequences: function processSequences(isFirstFrame) {
	      var i;
	      var len = this.sequenceList.length;

	      for (i = 0; i < len; i += 1) {
	        this.processSequence(this.sequenceList[i], isFirstFrame);
	      }
	    },
	    getNewKey: function getNewKey() {
	      this.transform_key_count += 1;
	      return '_' + this.transform_key_count;
	    }
	  };

	  var lumaLoader = function lumaLoader() {
	    var id = '__lottie_element_luma_buffer';
	    var lumaBuffer = null;
	    var lumaBufferCtx = null;
	    var svg = null; // This alternate solution has a slight delay before the filter is applied, resulting in a flicker on the first frame.
	    // Keeping this here for reference, and in the future, if offscreen canvas supports url filters, this can be used.
	    // For now, neither of them work for offscreen canvas, so canvas workers can't support the luma track matte mask.
	    // Naming it solution 2 to mark the extra comment lines.

	    /*
	    var svgString = [
	      '<svg xmlns="http://www.w3.org/2000/svg">',
	      '<filter id="' + id + '">',
	      '<feColorMatrix type="matrix" color-interpolation-filters="sRGB" values="',
	      '0.3, 0.3, 0.3, 0, 0, ',
	      '0.3, 0.3, 0.3, 0, 0, ',
	      '0.3, 0.3, 0.3, 0, 0, ',
	      '0.3, 0.3, 0.3, 0, 0',
	      '"/>',
	      '</filter>',
	      '</svg>',
	    ].join('');
	    var blob = new Blob([svgString], { type: 'image/svg+xml' });
	    var url = URL.createObjectURL(blob);
	    */

	    function createLumaSvgFilter() {
	      var _svg = createNS('svg');

	      var fil = createNS('filter');
	      var matrix = createNS('feColorMatrix');
	      fil.setAttribute('id', id);
	      matrix.setAttribute('type', 'matrix');
	      matrix.setAttribute('color-interpolation-filters', 'sRGB');
	      matrix.setAttribute('values', '0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0');
	      fil.appendChild(matrix);

	      _svg.appendChild(fil);

	      _svg.setAttribute('id', id + '_svg');

	      if (featureSupport.svgLumaHidden) {
	        _svg.style.display = 'none';
	      }

	      return _svg;
	    }

	    function loadLuma() {
	      if (!lumaBuffer) {
	        svg = createLumaSvgFilter();
	        document.body.appendChild(svg);
	        lumaBuffer = createTag('canvas');
	        lumaBufferCtx = lumaBuffer.getContext('2d'); // lumaBufferCtx.filter = `url('${url}#__lottie_element_luma_buffer')`; // part of solution 2

	        lumaBufferCtx.filter = 'url(#' + id + ')';
	        lumaBufferCtx.fillStyle = 'rgba(0,0,0,0)';
	        lumaBufferCtx.fillRect(0, 0, 1, 1);
	      }
	    }

	    function getLuma(canvas) {
	      if (!lumaBuffer) {
	        loadLuma();
	      }

	      lumaBuffer.width = canvas.width;
	      lumaBuffer.height = canvas.height; // lumaBufferCtx.filter = `url('${url}#__lottie_element_luma_buffer')`; // part of solution 2

	      lumaBufferCtx.filter = 'url(#' + id + ')';
	      return lumaBuffer;
	    }

	    return {
	      load: loadLuma,
	      get: getLuma
	    };
	  };

	  function createCanvas(width, height) {
	    if (featureSupport.offscreenCanvas) {
	      return new OffscreenCanvas(width, height);
	    }

	    var canvas = createTag('canvas');
	    canvas.width = width;
	    canvas.height = height;
	    return canvas;
	  }

	  var assetLoader = function () {
	    return {
	      loadLumaCanvas: lumaLoader.load,
	      getLumaCanvas: lumaLoader.get,
	      createCanvas: createCanvas
	    };
	  }();

	  var registeredEffects = {};

	  function CVEffects(elem) {
	    var i;
	    var len = elem.data.ef ? elem.data.ef.length : 0;
	    this.filters = [];
	    var filterManager;

	    for (i = 0; i < len; i += 1) {
	      filterManager = null;
	      var type = elem.data.ef[i].ty;

	      if (registeredEffects[type]) {
	        var Effect = registeredEffects[type].effect;
	        filterManager = new Effect(elem.effectsManager.effectElements[i], elem);
	      }

	      if (filterManager) {
	        this.filters.push(filterManager);
	      }
	    }

	    if (this.filters.length) {
	      elem.addRenderableComponent(this);
	    }
	  }

	  CVEffects.prototype.renderFrame = function (_isFirstFrame) {
	    var i;
	    var len = this.filters.length;

	    for (i = 0; i < len; i += 1) {
	      this.filters[i].renderFrame(_isFirstFrame);
	    }
	  };

	  CVEffects.prototype.getEffects = function (type) {
	    var i;
	    var len = this.filters.length;
	    var effects = [];

	    for (i = 0; i < len; i += 1) {
	      if (this.filters[i].type === type) {
	        effects.push(this.filters[i]);
	      }
	    }

	    return effects;
	  };

	  function registerEffect(id, effect) {
	    registeredEffects[id] = {
	      effect: effect
	    };
	  }

	  function CVMaskElement(data, element) {
	    this.data = data;
	    this.element = element;
	    this.masksProperties = this.data.masksProperties || [];
	    this.viewData = createSizedArray(this.masksProperties.length);
	    var i;
	    var len = this.masksProperties.length;
	    var hasMasks = false;

	    for (i = 0; i < len; i += 1) {
	      if (this.masksProperties[i].mode !== 'n') {
	        hasMasks = true;
	      }

	      this.viewData[i] = ShapePropertyFactory.getShapeProp(this.element, this.masksProperties[i], 3);
	    }

	    this.hasMasks = hasMasks;

	    if (hasMasks) {
	      this.element.addRenderableComponent(this);
	    }
	  }

	  CVMaskElement.prototype.renderFrame = function () {
	    if (!this.hasMasks) {
	      return;
	    }

	    var transform = this.element.finalTransform.mat;
	    var ctx = this.element.canvasContext;
	    var i;
	    var len = this.masksProperties.length;
	    var pt;
	    var pts;
	    var data;
	    ctx.beginPath();

	    for (i = 0; i < len; i += 1) {
	      if (this.masksProperties[i].mode !== 'n') {
	        if (this.masksProperties[i].inv) {
	          ctx.moveTo(0, 0);
	          ctx.lineTo(this.element.globalData.compSize.w, 0);
	          ctx.lineTo(this.element.globalData.compSize.w, this.element.globalData.compSize.h);
	          ctx.lineTo(0, this.element.globalData.compSize.h);
	          ctx.lineTo(0, 0);
	        }

	        data = this.viewData[i].v;
	        pt = transform.applyToPointArray(data.v[0][0], data.v[0][1], 0);
	        ctx.moveTo(pt[0], pt[1]);
	        var j;
	        var jLen = data._length;

	        for (j = 1; j < jLen; j += 1) {
	          pts = transform.applyToTriplePoints(data.o[j - 1], data.i[j], data.v[j]);
	          ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
	        }

	        pts = transform.applyToTriplePoints(data.o[j - 1], data.i[0], data.v[0]);
	        ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
	      }
	    }

	    this.element.globalData.renderer.save(true);
	    ctx.clip();
	  };

	  CVMaskElement.prototype.getMaskProperty = MaskElement.prototype.getMaskProperty;

	  CVMaskElement.prototype.destroy = function () {
	    this.element = null;
	  };

	  function CVBaseElement() {}

	  var operationsMap = {
	    1: 'source-in',
	    2: 'source-out',
	    3: 'source-in',
	    4: 'source-out'
	  };
	  CVBaseElement.prototype = {
	    createElements: function createElements() {},
	    initRendererElement: function initRendererElement() {},
	    createContainerElements: function createContainerElements() {
	      // If the layer is masked we will use two buffers to store each different states of the drawing
	      // This solution is not ideal for several reason. But unfortunately, because of the recursive
	      // nature of the render tree, it's the only simple way to make sure one inner mask doesn't override an outer mask.
	      // TODO: try to reduce the size of these buffers to the size of the composition contaning the layer
	      // It might be challenging because the layer most likely is transformed in some way
	      if (this.data.tt >= 1) {
	        this.buffers = [];
	        var canvasContext = this.globalData.canvasContext;
	        var bufferCanvas = assetLoader.createCanvas(canvasContext.canvas.width, canvasContext.canvas.height);
	        this.buffers.push(bufferCanvas);
	        var bufferCanvas2 = assetLoader.createCanvas(canvasContext.canvas.width, canvasContext.canvas.height);
	        this.buffers.push(bufferCanvas2);

	        if (this.data.tt >= 3 && !document._isProxy) {
	          assetLoader.loadLumaCanvas();
	        }
	      }

	      this.canvasContext = this.globalData.canvasContext;
	      this.transformCanvas = this.globalData.transformCanvas;
	      this.renderableEffectsManager = new CVEffects(this);
	      this.searchEffectTransforms();
	    },
	    createContent: function createContent() {},
	    setBlendMode: function setBlendMode() {
	      var globalData = this.globalData;

	      if (globalData.blendMode !== this.data.bm) {
	        globalData.blendMode = this.data.bm;
	        var blendModeValue = getBlendMode(this.data.bm);
	        globalData.canvasContext.globalCompositeOperation = blendModeValue;
	      }
	    },
	    createRenderableComponents: function createRenderableComponents() {
	      this.maskManager = new CVMaskElement(this.data, this);
	      this.transformEffects = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);
	    },
	    hideElement: function hideElement() {
	      if (!this.hidden && (!this.isInRange || this.isTransparent)) {
	        this.hidden = true;
	      }
	    },
	    showElement: function showElement() {
	      if (this.isInRange && !this.isTransparent) {
	        this.hidden = false;
	        this._isFirstFrame = true;
	        this.maskManager._isFirstFrame = true;
	      }
	    },
	    clearCanvas: function clearCanvas(canvasContext) {
	      canvasContext.clearRect(this.transformCanvas.tx, this.transformCanvas.ty, this.transformCanvas.w * this.transformCanvas.sx, this.transformCanvas.h * this.transformCanvas.sy);
	    },
	    prepareLayer: function prepareLayer() {
	      if (this.data.tt >= 1) {
	        var buffer = this.buffers[0];
	        var bufferCtx = buffer.getContext('2d');
	        this.clearCanvas(bufferCtx); // on the first buffer we store the current state of the global drawing

	        bufferCtx.drawImage(this.canvasContext.canvas, 0, 0); // The next four lines are to clear the canvas
	        // TODO: Check if there is a way to clear the canvas without resetting the transform

	        this.currentTransform = this.canvasContext.getTransform();
	        this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);
	        this.clearCanvas(this.canvasContext);
	        this.canvasContext.setTransform(this.currentTransform);
	      }
	    },
	    exitLayer: function exitLayer() {
	      if (this.data.tt >= 1) {
	        var buffer = this.buffers[1]; // On the second buffer we store the current state of the global drawing
	        // that only contains the content of this layer
	        // (if it is a composition, it also includes the nested layers)

	        var bufferCtx = buffer.getContext('2d');
	        this.clearCanvas(bufferCtx);
	        bufferCtx.drawImage(this.canvasContext.canvas, 0, 0); // We clear the canvas again

	        this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);
	        this.clearCanvas(this.canvasContext);
	        this.canvasContext.setTransform(this.currentTransform); // We draw the mask

	        var mask = this.comp.getElementById('tp' in this.data ? this.data.tp : this.data.ind - 1);
	        mask.renderFrame(true); // We draw the second buffer (that contains the content of this layer)

	        this.canvasContext.setTransform(1, 0, 0, 1, 0, 0); // If the mask is a Luma matte, we need to do two extra painting operations
	        // the _isProxy check is to avoid drawing a fake canvas in workers that will throw an error

	        if (this.data.tt >= 3 && !document._isProxy) {
	          // We copy the painted mask to a buffer that has a color matrix filter applied to it
	          // that applies the rgb values to the alpha channel
	          var lumaBuffer = assetLoader.getLumaCanvas(this.canvasContext.canvas);
	          var lumaBufferCtx = lumaBuffer.getContext('2d');
	          lumaBufferCtx.drawImage(this.canvasContext.canvas, 0, 0);
	          this.clearCanvas(this.canvasContext); // we repaint the context with the mask applied to it

	          this.canvasContext.drawImage(lumaBuffer, 0, 0);
	        }

	        this.canvasContext.globalCompositeOperation = operationsMap[this.data.tt];
	        this.canvasContext.drawImage(buffer, 0, 0); // We finally draw the first buffer (that contains the content of the global drawing)
	        // We use destination-over to draw the global drawing below the current layer

	        this.canvasContext.globalCompositeOperation = 'destination-over';
	        this.canvasContext.drawImage(this.buffers[0], 0, 0);
	        this.canvasContext.setTransform(this.currentTransform); // We reset the globalCompositeOperation to source-over, the standard type of operation

	        this.canvasContext.globalCompositeOperation = 'source-over';
	      }
	    },
	    renderFrame: function renderFrame(forceRender) {
	      if (this.hidden || this.data.hd) {
	        return;
	      }

	      if (this.data.td === 1 && !forceRender) {
	        return;
	      }

	      this.renderTransform();
	      this.renderRenderable();
	      this.renderLocalTransform();
	      this.setBlendMode();
	      var forceRealStack = this.data.ty === 0;
	      this.prepareLayer();
	      this.globalData.renderer.save(forceRealStack);
	      this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props);
	      this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity);
	      this.renderInnerContent();
	      this.globalData.renderer.restore(forceRealStack);
	      this.exitLayer();

	      if (this.maskManager.hasMasks) {
	        this.globalData.renderer.restore(true);
	      }

	      if (this._isFirstFrame) {
	        this._isFirstFrame = false;
	      }
	    },
	    destroy: function destroy() {
	      this.canvasContext = null;
	      this.data = null;
	      this.globalData = null;
	      this.maskManager.destroy();
	    },
	    mHelper: new Matrix()
	  };
	  CVBaseElement.prototype.hide = CVBaseElement.prototype.hideElement;
	  CVBaseElement.prototype.show = CVBaseElement.prototype.showElement;

	  function CVShapeData(element, data, styles, transformsManager) {
	    this.styledShapes = [];
	    this.tr = [0, 0, 0, 0, 0, 0];
	    var ty = 4;

	    if (data.ty === 'rc') {
	      ty = 5;
	    } else if (data.ty === 'el') {
	      ty = 6;
	    } else if (data.ty === 'sr') {
	      ty = 7;
	    }

	    this.sh = ShapePropertyFactory.getShapeProp(element, data, ty, element);
	    var i;
	    var len = styles.length;
	    var styledShape;

	    for (i = 0; i < len; i += 1) {
	      if (!styles[i].closed) {
	        styledShape = {
	          transforms: transformsManager.addTransformSequence(styles[i].transforms),
	          trNodes: []
	        };
	        this.styledShapes.push(styledShape);
	        styles[i].elements.push(styledShape);
	      }
	    }
	  }

	  CVShapeData.prototype.setAsAnimated = SVGShapeData.prototype.setAsAnimated;

	  function CVShapeElement(data, globalData, comp) {
	    this.shapes = [];
	    this.shapesData = data.shapes;
	    this.stylesList = [];
	    this.itemsData = [];
	    this.prevViewData = [];
	    this.shapeModifiers = [];
	    this.processedElements = [];
	    this.transformsManager = new ShapeTransformManager();
	    this.initElement(data, globalData, comp);
	  }

	  extendPrototype([BaseElement, TransformElement, CVBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableElement], CVShapeElement);
	  CVShapeElement.prototype.initElement = RenderableDOMElement.prototype.initElement;
	  CVShapeElement.prototype.transformHelper = {
	    opacity: 1,
	    _opMdf: false
	  };
	  CVShapeElement.prototype.dashResetter = [];

	  CVShapeElement.prototype.createContent = function () {
	    this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);
	  };

	  CVShapeElement.prototype.createStyleElement = function (data, transforms) {
	    var styleElem = {
	      data: data,
	      type: data.ty,
	      preTransforms: this.transformsManager.addTransformSequence(transforms),
	      transforms: [],
	      elements: [],
	      closed: data.hd === true
	    };
	    var elementData = {};

	    if (data.ty === 'fl' || data.ty === 'st') {
	      elementData.c = PropertyFactory.getProp(this, data.c, 1, 255, this);

	      if (!elementData.c.k) {
	        styleElem.co = 'rgb(' + bmFloor(elementData.c.v[0]) + ',' + bmFloor(elementData.c.v[1]) + ',' + bmFloor(elementData.c.v[2]) + ')';
	      }
	    } else if (data.ty === 'gf' || data.ty === 'gs') {
	      elementData.s = PropertyFactory.getProp(this, data.s, 1, null, this);
	      elementData.e = PropertyFactory.getProp(this, data.e, 1, null, this);
	      elementData.h = PropertyFactory.getProp(this, data.h || {
	        k: 0
	      }, 0, 0.01, this);
	      elementData.a = PropertyFactory.getProp(this, data.a || {
	        k: 0
	      }, 0, degToRads, this);
	      elementData.g = new GradientProperty(this, data.g, this);
	    }

	    elementData.o = PropertyFactory.getProp(this, data.o, 0, 0.01, this);

	    if (data.ty === 'st' || data.ty === 'gs') {
	      styleElem.lc = lineCapEnum[data.lc || 2];
	      styleElem.lj = lineJoinEnum[data.lj || 2];

	      if (data.lj == 1) {
	        // eslint-disable-line eqeqeq
	        styleElem.ml = data.ml;
	      }

	      elementData.w = PropertyFactory.getProp(this, data.w, 0, null, this);

	      if (!elementData.w.k) {
	        styleElem.wi = elementData.w.v;
	      }

	      if (data.d) {
	        var d = new DashProperty(this, data.d, 'canvas', this);
	        elementData.d = d;

	        if (!elementData.d.k) {
	          styleElem.da = elementData.d.dashArray;
	          styleElem["do"] = elementData.d.dashoffset[0];
	        }
	      }
	    } else {
	      styleElem.r = data.r === 2 ? 'evenodd' : 'nonzero';
	    }

	    this.stylesList.push(styleElem);
	    elementData.style = styleElem;
	    return elementData;
	  };

	  CVShapeElement.prototype.createGroupElement = function () {
	    var elementData = {
	      it: [],
	      prevViewData: []
	    };
	    return elementData;
	  };

	  CVShapeElement.prototype.createTransformElement = function (data) {
	    var elementData = {
	      transform: {
	        opacity: 1,
	        _opMdf: false,
	        key: this.transformsManager.getNewKey(),
	        op: PropertyFactory.getProp(this, data.o, 0, 0.01, this),
	        mProps: TransformPropertyFactory.getTransformProperty(this, data, this)
	      }
	    };
	    return elementData;
	  };

	  CVShapeElement.prototype.createShapeElement = function (data) {
	    var elementData = new CVShapeData(this, data, this.stylesList, this.transformsManager);
	    this.shapes.push(elementData);
	    this.addShapeToModifiers(elementData);
	    return elementData;
	  };

	  CVShapeElement.prototype.reloadShapes = function () {
	    this._isFirstFrame = true;
	    var i;
	    var len = this.itemsData.length;

	    for (i = 0; i < len; i += 1) {
	      this.prevViewData[i] = this.itemsData[i];
	    }

	    this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);
	    len = this.dynamicProperties.length;

	    for (i = 0; i < len; i += 1) {
	      this.dynamicProperties[i].getValue();
	    }

	    this.renderModifiers();
	    this.transformsManager.processSequences(this._isFirstFrame);
	  };

	  CVShapeElement.prototype.addTransformToStyleList = function (transform) {
	    var i;
	    var len = this.stylesList.length;

	    for (i = 0; i < len; i += 1) {
	      if (!this.stylesList[i].closed) {
	        this.stylesList[i].transforms.push(transform);
	      }
	    }
	  };

	  CVShapeElement.prototype.removeTransformFromStyleList = function () {
	    var i;
	    var len = this.stylesList.length;

	    for (i = 0; i < len; i += 1) {
	      if (!this.stylesList[i].closed) {
	        this.stylesList[i].transforms.pop();
	      }
	    }
	  };

	  CVShapeElement.prototype.closeStyles = function (styles) {
	    var i;
	    var len = styles.length;

	    for (i = 0; i < len; i += 1) {
	      styles[i].closed = true;
	    }
	  };

	  CVShapeElement.prototype.searchShapes = function (arr, itemsData, prevViewData, shouldRender, transforms) {
	    var i;
	    var len = arr.length - 1;
	    var j;
	    var jLen;
	    var ownStyles = [];
	    var ownModifiers = [];
	    var processedPos;
	    var modifier;
	    var currentTransform;
	    var ownTransforms = [].concat(transforms);

	    for (i = len; i >= 0; i -= 1) {
	      processedPos = this.searchProcessedElement(arr[i]);

	      if (!processedPos) {
	        arr[i]._shouldRender = shouldRender;
	      } else {
	        itemsData[i] = prevViewData[processedPos - 1];
	      }

	      if (arr[i].ty === 'fl' || arr[i].ty === 'st' || arr[i].ty === 'gf' || arr[i].ty === 'gs') {
	        if (!processedPos) {
	          itemsData[i] = this.createStyleElement(arr[i], ownTransforms);
	        } else {
	          itemsData[i].style.closed = false;
	        }

	        ownStyles.push(itemsData[i].style);
	      } else if (arr[i].ty === 'gr') {
	        if (!processedPos) {
	          itemsData[i] = this.createGroupElement(arr[i]);
	        } else {
	          jLen = itemsData[i].it.length;

	          for (j = 0; j < jLen; j += 1) {
	            itemsData[i].prevViewData[j] = itemsData[i].it[j];
	          }
	        }

	        this.searchShapes(arr[i].it, itemsData[i].it, itemsData[i].prevViewData, shouldRender, ownTransforms);
	      } else if (arr[i].ty === 'tr') {
	        if (!processedPos) {
	          currentTransform = this.createTransformElement(arr[i]);
	          itemsData[i] = currentTransform;
	        }

	        ownTransforms.push(itemsData[i]);
	        this.addTransformToStyleList(itemsData[i]);
	      } else if (arr[i].ty === 'sh' || arr[i].ty === 'rc' || arr[i].ty === 'el' || arr[i].ty === 'sr') {
	        if (!processedPos) {
	          itemsData[i] = this.createShapeElement(arr[i]);
	        }
	      } else if (arr[i].ty === 'tm' || arr[i].ty === 'rd' || arr[i].ty === 'pb' || arr[i].ty === 'zz' || arr[i].ty === 'op') {
	        if (!processedPos) {
	          modifier = ShapeModifiers.getModifier(arr[i].ty);
	          modifier.init(this, arr[i]);
	          itemsData[i] = modifier;
	          this.shapeModifiers.push(modifier);
	        } else {
	          modifier = itemsData[i];
	          modifier.closed = false;
	        }

	        ownModifiers.push(modifier);
	      } else if (arr[i].ty === 'rp') {
	        if (!processedPos) {
	          modifier = ShapeModifiers.getModifier(arr[i].ty);
	          itemsData[i] = modifier;
	          modifier.init(this, arr, i, itemsData);
	          this.shapeModifiers.push(modifier);
	          shouldRender = false;
	        } else {
	          modifier = itemsData[i];
	          modifier.closed = true;
	        }

	        ownModifiers.push(modifier);
	      }

	      this.addProcessedElement(arr[i], i + 1);
	    }

	    this.removeTransformFromStyleList();
	    this.closeStyles(ownStyles);
	    len = ownModifiers.length;

	    for (i = 0; i < len; i += 1) {
	      ownModifiers[i].closed = true;
	    }
	  };

	  CVShapeElement.prototype.renderInnerContent = function () {
	    this.transformHelper.opacity = 1;
	    this.transformHelper._opMdf = false;
	    this.renderModifiers();
	    this.transformsManager.processSequences(this._isFirstFrame);
	    this.renderShape(this.transformHelper, this.shapesData, this.itemsData, true);
	  };

	  CVShapeElement.prototype.renderShapeTransform = function (parentTransform, groupTransform) {
	    if (parentTransform._opMdf || groupTransform.op._mdf || this._isFirstFrame) {
	      groupTransform.opacity = parentTransform.opacity;
	      groupTransform.opacity *= groupTransform.op.v;
	      groupTransform._opMdf = true;
	    }
	  };

	  CVShapeElement.prototype.drawLayer = function () {
	    var i;
	    var len = this.stylesList.length;
	    var j;
	    var jLen;
	    var k;
	    var kLen;
	    var elems;
	    var nodes;
	    var renderer = this.globalData.renderer;
	    var ctx = this.globalData.canvasContext;
	    var type;
	    var currentStyle;

	    for (i = 0; i < len; i += 1) {
	      currentStyle = this.stylesList[i];
	      type = currentStyle.type; // Skipping style when
	      // Stroke width equals 0
	      // style should not be rendered (extra unused repeaters)
	      // current opacity equals 0
	      // global opacity equals 0

	      if (!((type === 'st' || type === 'gs') && currentStyle.wi === 0 || !currentStyle.data._shouldRender || currentStyle.coOp === 0 || this.globalData.currentGlobalAlpha === 0)) {
	        renderer.save();
	        elems = currentStyle.elements;

	        if (type === 'st' || type === 'gs') {
	          renderer.ctxStrokeStyle(type === 'st' ? currentStyle.co : currentStyle.grd); // ctx.strokeStyle = type === 'st' ? currentStyle.co : currentStyle.grd;

	          renderer.ctxLineWidth(currentStyle.wi); // ctx.lineWidth = currentStyle.wi;

	          renderer.ctxLineCap(currentStyle.lc); // ctx.lineCap = currentStyle.lc;

	          renderer.ctxLineJoin(currentStyle.lj); // ctx.lineJoin = currentStyle.lj;

	          renderer.ctxMiterLimit(currentStyle.ml || 0); // ctx.miterLimit = currentStyle.ml || 0;
	        } else {
	          renderer.ctxFillStyle(type === 'fl' ? currentStyle.co : currentStyle.grd); // ctx.fillStyle = type === 'fl' ? currentStyle.co : currentStyle.grd;
	        }

	        renderer.ctxOpacity(currentStyle.coOp);

	        if (type !== 'st' && type !== 'gs') {
	          ctx.beginPath();
	        }

	        renderer.ctxTransform(currentStyle.preTransforms.finalTransform.props);
	        jLen = elems.length;

	        for (j = 0; j < jLen; j += 1) {
	          if (type === 'st' || type === 'gs') {
	            ctx.beginPath();

	            if (currentStyle.da) {
	              ctx.setLineDash(currentStyle.da);
	              ctx.lineDashOffset = currentStyle["do"];
	            }
	          }

	          nodes = elems[j].trNodes;
	          kLen = nodes.length;

	          for (k = 0; k < kLen; k += 1) {
	            if (nodes[k].t === 'm') {
	              ctx.moveTo(nodes[k].p[0], nodes[k].p[1]);
	            } else if (nodes[k].t === 'c') {
	              ctx.bezierCurveTo(nodes[k].pts[0], nodes[k].pts[1], nodes[k].pts[2], nodes[k].pts[3], nodes[k].pts[4], nodes[k].pts[5]);
	            } else {
	              ctx.closePath();
	            }
	          }

	          if (type === 'st' || type === 'gs') {
	            // ctx.stroke();
	            renderer.ctxStroke();

	            if (currentStyle.da) {
	              ctx.setLineDash(this.dashResetter);
	            }
	          }
	        }

	        if (type !== 'st' && type !== 'gs') {
	          // ctx.fill(currentStyle.r);
	          this.globalData.renderer.ctxFill(currentStyle.r);
	        }

	        renderer.restore();
	      }
	    }
	  };

	  CVShapeElement.prototype.renderShape = function (parentTransform, items, data, isMain) {
	    var i;
	    var len = items.length - 1;
	    var groupTransform;
	    groupTransform = parentTransform;

	    for (i = len; i >= 0; i -= 1) {
	      if (items[i].ty === 'tr') {
	        groupTransform = data[i].transform;
	        this.renderShapeTransform(parentTransform, groupTransform);
	      } else if (items[i].ty === 'sh' || items[i].ty === 'el' || items[i].ty === 'rc' || items[i].ty === 'sr') {
	        this.renderPath(items[i], data[i]);
	      } else if (items[i].ty === 'fl') {
	        this.renderFill(items[i], data[i], groupTransform);
	      } else if (items[i].ty === 'st') {
	        this.renderStroke(items[i], data[i], groupTransform);
	      } else if (items[i].ty === 'gf' || items[i].ty === 'gs') {
	        this.renderGradientFill(items[i], data[i], groupTransform);
	      } else if (items[i].ty === 'gr') {
	        this.renderShape(groupTransform, items[i].it, data[i].it);
	      } else if (items[i].ty === 'tm') ;
	    }

	    if (isMain) {
	      this.drawLayer();
	    }
	  };

	  CVShapeElement.prototype.renderStyledShape = function (styledShape, shape) {
	    if (this._isFirstFrame || shape._mdf || styledShape.transforms._mdf) {
	      var shapeNodes = styledShape.trNodes;
	      var paths = shape.paths;
	      var i;
	      var len;
	      var j;
	      var jLen = paths._length;
	      shapeNodes.length = 0;
	      var groupTransformMat = styledShape.transforms.finalTransform;

	      for (j = 0; j < jLen; j += 1) {
	        var pathNodes = paths.shapes[j];

	        if (pathNodes && pathNodes.v) {
	          len = pathNodes._length;

	          for (i = 1; i < len; i += 1) {
	            if (i === 1) {
	              shapeNodes.push({
	                t: 'm',
	                p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
	              });
	            }

	            shapeNodes.push({
	              t: 'c',
	              pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i - 1], pathNodes.i[i], pathNodes.v[i])
	            });
	          }

	          if (len === 1) {
	            shapeNodes.push({
	              t: 'm',
	              p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
	            });
	          }

	          if (pathNodes.c && len) {
	            shapeNodes.push({
	              t: 'c',
	              pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i - 1], pathNodes.i[0], pathNodes.v[0])
	            });
	            shapeNodes.push({
	              t: 'z'
	            });
	          }
	        }
	      }

	      styledShape.trNodes = shapeNodes;
	    }
	  };

	  CVShapeElement.prototype.renderPath = function (pathData, itemData) {
	    if (pathData.hd !== true && pathData._shouldRender) {
	      var i;
	      var len = itemData.styledShapes.length;

	      for (i = 0; i < len; i += 1) {
	        this.renderStyledShape(itemData.styledShapes[i], itemData.sh);
	      }
	    }
	  };

	  CVShapeElement.prototype.renderFill = function (styleData, itemData, groupTransform) {
	    var styleElem = itemData.style;

	    if (itemData.c._mdf || this._isFirstFrame) {
	      styleElem.co = 'rgb(' + bmFloor(itemData.c.v[0]) + ',' + bmFloor(itemData.c.v[1]) + ',' + bmFloor(itemData.c.v[2]) + ')';
	    }

	    if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
	      styleElem.coOp = itemData.o.v * groupTransform.opacity;
	    }
	  };

	  CVShapeElement.prototype.renderGradientFill = function (styleData, itemData, groupTransform) {
	    var styleElem = itemData.style;
	    var grd;

	    if (!styleElem.grd || itemData.g._mdf || itemData.s._mdf || itemData.e._mdf || styleData.t !== 1 && (itemData.h._mdf || itemData.a._mdf)) {
	      var ctx = this.globalData.canvasContext;
	      var pt1 = itemData.s.v;
	      var pt2 = itemData.e.v;

	      if (styleData.t === 1) {
	        grd = ctx.createLinearGradient(pt1[0], pt1[1], pt2[0], pt2[1]);
	      } else {
	        var rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
	        var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
	        var percent = itemData.h.v;

	        if (percent >= 1) {
	          percent = 0.99;
	        } else if (percent <= -1) {
	          percent = -0.99;
	        }

	        var dist = rad * percent;
	        var x = Math.cos(ang + itemData.a.v) * dist + pt1[0];
	        var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];
	        grd = ctx.createRadialGradient(x, y, 0, pt1[0], pt1[1], rad);
	      }

	      var i;
	      var len = styleData.g.p;
	      var cValues = itemData.g.c;
	      var opacity = 1;

	      for (i = 0; i < len; i += 1) {
	        if (itemData.g._hasOpacity && itemData.g._collapsable) {
	          opacity = itemData.g.o[i * 2 + 1];
	        }

	        grd.addColorStop(cValues[i * 4] / 100, 'rgba(' + cValues[i * 4 + 1] + ',' + cValues[i * 4 + 2] + ',' + cValues[i * 4 + 3] + ',' + opacity + ')');
	      }

	      styleElem.grd = grd;
	    }

	    styleElem.coOp = itemData.o.v * groupTransform.opacity;
	  };

	  CVShapeElement.prototype.renderStroke = function (styleData, itemData, groupTransform) {
	    var styleElem = itemData.style;
	    var d = itemData.d;

	    if (d && (d._mdf || this._isFirstFrame)) {
	      styleElem.da = d.dashArray;
	      styleElem["do"] = d.dashoffset[0];
	    }

	    if (itemData.c._mdf || this._isFirstFrame) {
	      styleElem.co = 'rgb(' + bmFloor(itemData.c.v[0]) + ',' + bmFloor(itemData.c.v[1]) + ',' + bmFloor(itemData.c.v[2]) + ')';
	    }

	    if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
	      styleElem.coOp = itemData.o.v * groupTransform.opacity;
	    }

	    if (itemData.w._mdf || this._isFirstFrame) {
	      styleElem.wi = itemData.w.v;
	    }
	  };

	  CVShapeElement.prototype.destroy = function () {
	    this.shapesData = null;
	    this.globalData = null;
	    this.canvasContext = null;
	    this.stylesList.length = 0;
	    this.itemsData.length = 0;
	  };

	  function CVTextElement(data, globalData, comp) {
	    this.textSpans = [];
	    this.yOffset = 0;
	    this.fillColorAnim = false;
	    this.strokeColorAnim = false;
	    this.strokeWidthAnim = false;
	    this.stroke = false;
	    this.fill = false;
	    this.justifyOffset = 0;
	    this.currentRender = null;
	    this.renderType = 'canvas';
	    this.values = {
	      fill: 'rgba(0,0,0,0)',
	      stroke: 'rgba(0,0,0,0)',
	      sWidth: 0,
	      fValue: ''
	    };
	    this.initElement(data, globalData, comp);
	  }

	  extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement, ITextElement], CVTextElement);
	  CVTextElement.prototype.tHelper = createTag('canvas').getContext('2d');

	  CVTextElement.prototype.buildNewText = function () {
	    var documentData = this.textProperty.currentData;
	    this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
	    var hasFill = false;

	    if (documentData.fc) {
	      hasFill = true;
	      this.values.fill = this.buildColor(documentData.fc);
	    } else {
	      this.values.fill = 'rgba(0,0,0,0)';
	    }

	    this.fill = hasFill;
	    var hasStroke = false;

	    if (documentData.sc) {
	      hasStroke = true;
	      this.values.stroke = this.buildColor(documentData.sc);
	      this.values.sWidth = documentData.sw;
	    }

	    var fontData = this.globalData.fontManager.getFontByName(documentData.f);
	    var i;
	    var len;
	    var letters = documentData.l;
	    var matrixHelper = this.mHelper;
	    this.stroke = hasStroke;
	    this.values.fValue = documentData.finalSize + 'px ' + this.globalData.fontManager.getFontByName(documentData.f).fFamily;
	    len = documentData.finalText.length; // this.tHelper.font = this.values.fValue;

	    var charData;
	    var shapeData;
	    var k;
	    var kLen;
	    var shapes;
	    var j;
	    var jLen;
	    var pathNodes;
	    var commands;
	    var pathArr;
	    var singleShape = this.data.singleShape;
	    var trackingOffset = documentData.tr * 0.001 * documentData.finalSize;
	    var xPos = 0;
	    var yPos = 0;
	    var firstLine = true;
	    var cnt = 0;

	    for (i = 0; i < len; i += 1) {
	      charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
	      shapeData = charData && charData.data || {};
	      matrixHelper.reset();

	      if (singleShape && letters[i].n) {
	        xPos = -trackingOffset;
	        yPos += documentData.yOffset;
	        yPos += firstLine ? 1 : 0;
	        firstLine = false;
	      }

	      shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
	      jLen = shapes.length;
	      matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);

	      if (singleShape) {
	        this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i].line, xPos, yPos);
	      }

	      commands = createSizedArray(jLen - 1);
	      var commandsCounter = 0;

	      for (j = 0; j < jLen; j += 1) {
	        if (shapes[j].ty === 'sh') {
	          kLen = shapes[j].ks.k.i.length;
	          pathNodes = shapes[j].ks.k;
	          pathArr = [];

	          for (k = 1; k < kLen; k += 1) {
	            if (k === 1) {
	              pathArr.push(matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));
	            }

	            pathArr.push(matrixHelper.applyToX(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToX(pathNodes.i[k][0], pathNodes.i[k][1], 0), matrixHelper.applyToY(pathNodes.i[k][0], pathNodes.i[k][1], 0), matrixHelper.applyToX(pathNodes.v[k][0], pathNodes.v[k][1], 0), matrixHelper.applyToY(pathNodes.v[k][0], pathNodes.v[k][1], 0));
	          }

	          pathArr.push(matrixHelper.applyToX(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToX(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToY(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));
	          commands[commandsCounter] = pathArr;
	          commandsCounter += 1;
	        }
	      }

	      if (singleShape) {
	        xPos += letters[i].l;
	        xPos += trackingOffset;
	      }

	      if (this.textSpans[cnt]) {
	        this.textSpans[cnt].elem = commands;
	      } else {
	        this.textSpans[cnt] = {
	          elem: commands
	        };
	      }

	      cnt += 1;
	    }
	  };

	  CVTextElement.prototype.renderInnerContent = function () {
	    this.validateText();
	    var ctx = this.canvasContext;
	    ctx.font = this.values.fValue;
	    this.globalData.renderer.ctxLineCap('butt'); // ctx.lineCap = 'butt';

	    this.globalData.renderer.ctxLineJoin('miter'); // ctx.lineJoin = 'miter';

	    this.globalData.renderer.ctxMiterLimit(4); // ctx.miterLimit = 4;

	    if (!this.data.singleShape) {
	      this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
	    }

	    var i;
	    var len;
	    var j;
	    var jLen;
	    var k;
	    var kLen;
	    var renderedLetters = this.textAnimator.renderedLetters;
	    var letters = this.textProperty.currentData.l;
	    len = letters.length;
	    var renderedLetter;
	    var lastFill = null;
	    var lastStroke = null;
	    var lastStrokeW = null;
	    var commands;
	    var pathArr;
	    var renderer = this.globalData.renderer;

	    for (i = 0; i < len; i += 1) {
	      if (!letters[i].n) {
	        renderedLetter = renderedLetters[i];

	        if (renderedLetter) {
	          renderer.save();
	          renderer.ctxTransform(renderedLetter.p);
	          renderer.ctxOpacity(renderedLetter.o);
	        }

	        if (this.fill) {
	          if (renderedLetter && renderedLetter.fc) {
	            if (lastFill !== renderedLetter.fc) {
	              renderer.ctxFillStyle(renderedLetter.fc);
	              lastFill = renderedLetter.fc; // ctx.fillStyle = renderedLetter.fc;
	            }
	          } else if (lastFill !== this.values.fill) {
	            lastFill = this.values.fill;
	            renderer.ctxFillStyle(this.values.fill); // ctx.fillStyle = this.values.fill;
	          }

	          commands = this.textSpans[i].elem;
	          jLen = commands.length;
	          this.globalData.canvasContext.beginPath();

	          for (j = 0; j < jLen; j += 1) {
	            pathArr = commands[j];
	            kLen = pathArr.length;
	            this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);

	            for (k = 2; k < kLen; k += 6) {
	              this.globalData.canvasContext.bezierCurveTo(pathArr[k], pathArr[k + 1], pathArr[k + 2], pathArr[k + 3], pathArr[k + 4], pathArr[k + 5]);
	            }
	          }

	          this.globalData.canvasContext.closePath();
	          renderer.ctxFill(); // this.globalData.canvasContext.fill();
	          /// ctx.fillText(this.textSpans[i].val,0,0);
	        }

	        if (this.stroke) {
	          if (renderedLetter && renderedLetter.sw) {
	            if (lastStrokeW !== renderedLetter.sw) {
	              lastStrokeW = renderedLetter.sw;
	              renderer.ctxLineWidth(renderedLetter.sw); // ctx.lineWidth = renderedLetter.sw;
	            }
	          } else if (lastStrokeW !== this.values.sWidth) {
	            lastStrokeW = this.values.sWidth;
	            renderer.ctxLineWidth(this.values.sWidth); // ctx.lineWidth = this.values.sWidth;
	          }

	          if (renderedLetter && renderedLetter.sc) {
	            if (lastStroke !== renderedLetter.sc) {
	              lastStroke = renderedLetter.sc;
	              renderer.ctxStrokeStyle(renderedLetter.sc); // ctx.strokeStyle = renderedLetter.sc;
	            }
	          } else if (lastStroke !== this.values.stroke) {
	            lastStroke = this.values.stroke;
	            renderer.ctxStrokeStyle(this.values.stroke); // ctx.strokeStyle = this.values.stroke;
	          }

	          commands = this.textSpans[i].elem;
	          jLen = commands.length;
	          this.globalData.canvasContext.beginPath();

	          for (j = 0; j < jLen; j += 1) {
	            pathArr = commands[j];
	            kLen = pathArr.length;
	            this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);

	            for (k = 2; k < kLen; k += 6) {
	              this.globalData.canvasContext.bezierCurveTo(pathArr[k], pathArr[k + 1], pathArr[k + 2], pathArr[k + 3], pathArr[k + 4], pathArr[k + 5]);
	            }
	          }

	          this.globalData.canvasContext.closePath();
	          renderer.ctxStroke(); // this.globalData.canvasContext.stroke();
	          /// ctx.strokeText(letters[i].val,0,0);
	        }

	        if (renderedLetter) {
	          this.globalData.renderer.restore();
	        }
	      }
	    }
	  };

	  function CVImageElement(data, globalData, comp) {
	    this.assetData = globalData.getAssetData(data.refId);
	    this.img = globalData.imageLoader.getAsset(this.assetData);
	    this.initElement(data, globalData, comp);
	  }

	  extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVImageElement);
	  CVImageElement.prototype.initElement = SVGShapeElement.prototype.initElement;
	  CVImageElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;

	  CVImageElement.prototype.createContent = function () {
	    if (this.img.width && (this.assetData.w !== this.img.width || this.assetData.h !== this.img.height)) {
	      var canvas = createTag('canvas');
	      canvas.width = this.assetData.w;
	      canvas.height = this.assetData.h;
	      var ctx = canvas.getContext('2d');
	      var imgW = this.img.width;
	      var imgH = this.img.height;
	      var imgRel = imgW / imgH;
	      var canvasRel = this.assetData.w / this.assetData.h;
	      var widthCrop;
	      var heightCrop;
	      var par = this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio;

	      if (imgRel > canvasRel && par === 'xMidYMid slice' || imgRel < canvasRel && par !== 'xMidYMid slice') {
	        heightCrop = imgH;
	        widthCrop = heightCrop * canvasRel;
	      } else {
	        widthCrop = imgW;
	        heightCrop = widthCrop / canvasRel;
	      }

	      ctx.drawImage(this.img, (imgW - widthCrop) / 2, (imgH - heightCrop) / 2, widthCrop, heightCrop, 0, 0, this.assetData.w, this.assetData.h);
	      this.img = canvas;
	    }
	  };

	  CVImageElement.prototype.renderInnerContent = function () {
	    this.canvasContext.drawImage(this.img, 0, 0);
	  };

	  CVImageElement.prototype.destroy = function () {
	    this.img = null;
	  };

	  function CVSolidElement(data, globalData, comp) {
	    this.initElement(data, globalData, comp);
	  }

	  extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVSolidElement);
	  CVSolidElement.prototype.initElement = SVGShapeElement.prototype.initElement;
	  CVSolidElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;

	  CVSolidElement.prototype.renderInnerContent = function () {
	    // var ctx = this.canvasContext;
	    this.globalData.renderer.ctxFillStyle(this.data.sc); // ctx.fillStyle = this.data.sc;

	    this.globalData.renderer.ctxFillRect(0, 0, this.data.sw, this.data.sh); // ctx.fillRect(0, 0, this.data.sw, this.data.sh);
	    //
	  };

	  function CanvasRendererBase() {}

	  extendPrototype([BaseRenderer], CanvasRendererBase);

	  CanvasRendererBase.prototype.createShape = function (data) {
	    return new CVShapeElement(data, this.globalData, this);
	  };

	  CanvasRendererBase.prototype.createText = function (data) {
	    return new CVTextElement(data, this.globalData, this);
	  };

	  CanvasRendererBase.prototype.createImage = function (data) {
	    return new CVImageElement(data, this.globalData, this);
	  };

	  CanvasRendererBase.prototype.createSolid = function (data) {
	    return new CVSolidElement(data, this.globalData, this);
	  };

	  CanvasRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;

	  CanvasRendererBase.prototype.ctxTransform = function (props) {
	    if (props[0] === 1 && props[1] === 0 && props[4] === 0 && props[5] === 1 && props[12] === 0 && props[13] === 0) {
	      return;
	    }

	    this.canvasContext.transform(props[0], props[1], props[4], props[5], props[12], props[13]);
	  };

	  CanvasRendererBase.prototype.ctxOpacity = function (op) {
	    this.canvasContext.globalAlpha *= op < 0 ? 0 : op;
	  };

	  CanvasRendererBase.prototype.ctxFillStyle = function (value) {
	    this.canvasContext.fillStyle = value;
	  };

	  CanvasRendererBase.prototype.ctxStrokeStyle = function (value) {
	    this.canvasContext.strokeStyle = value;
	  };

	  CanvasRendererBase.prototype.ctxLineWidth = function (value) {
	    this.canvasContext.lineWidth = value;
	  };

	  CanvasRendererBase.prototype.ctxLineCap = function (value) {
	    this.canvasContext.lineCap = value;
	  };

	  CanvasRendererBase.prototype.ctxLineJoin = function (value) {
	    this.canvasContext.lineJoin = value;
	  };

	  CanvasRendererBase.prototype.ctxMiterLimit = function (value) {
	    this.canvasContext.miterLimit = value;
	  };

	  CanvasRendererBase.prototype.ctxFill = function (rule) {
	    this.canvasContext.fill(rule);
	  };

	  CanvasRendererBase.prototype.ctxFillRect = function (x, y, w, h) {
	    this.canvasContext.fillRect(x, y, w, h);
	  };

	  CanvasRendererBase.prototype.ctxStroke = function () {
	    this.canvasContext.stroke();
	  };

	  CanvasRendererBase.prototype.reset = function () {
	    if (!this.renderConfig.clearCanvas) {
	      this.canvasContext.restore();
	      return;
	    }

	    this.contextData.reset();
	  };

	  CanvasRendererBase.prototype.save = function () {
	    this.canvasContext.save();
	  };

	  CanvasRendererBase.prototype.restore = function (actionFlag) {
	    if (!this.renderConfig.clearCanvas) {
	      this.canvasContext.restore();
	      return;
	    }

	    if (actionFlag) {
	      this.globalData.blendMode = 'source-over';
	    }

	    this.contextData.restore(actionFlag);
	  };

	  CanvasRendererBase.prototype.configAnimation = function (animData) {
	    if (this.animationItem.wrapper) {
	      this.animationItem.container = createTag('canvas');
	      var containerStyle = this.animationItem.container.style;
	      containerStyle.width = '100%';
	      containerStyle.height = '100%';
	      var origin = '0px 0px 0px';
	      containerStyle.transformOrigin = origin;
	      containerStyle.mozTransformOrigin = origin;
	      containerStyle.webkitTransformOrigin = origin;
	      containerStyle['-webkit-transform'] = origin;
	      containerStyle.contentVisibility = this.renderConfig.contentVisibility;
	      this.animationItem.wrapper.appendChild(this.animationItem.container);
	      this.canvasContext = this.animationItem.container.getContext('2d');

	      if (this.renderConfig.className) {
	        this.animationItem.container.setAttribute('class', this.renderConfig.className);
	      }

	      if (this.renderConfig.id) {
	        this.animationItem.container.setAttribute('id', this.renderConfig.id);
	      }
	    } else {
	      this.canvasContext = this.renderConfig.context;
	    }

	    this.contextData.setContext(this.canvasContext);
	    this.data = animData;
	    this.layers = animData.layers;
	    this.transformCanvas = {
	      w: animData.w,
	      h: animData.h,
	      sx: 0,
	      sy: 0,
	      tx: 0,
	      ty: 0
	    };
	    this.setupGlobalData(animData, document.body);
	    this.globalData.canvasContext = this.canvasContext;
	    this.globalData.renderer = this;
	    this.globalData.isDashed = false;
	    this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
	    this.globalData.transformCanvas = this.transformCanvas;
	    this.elements = createSizedArray(animData.layers.length);
	    this.updateContainerSize();
	  };

	  CanvasRendererBase.prototype.updateContainerSize = function (width, height) {
	    this.reset();
	    var elementWidth;
	    var elementHeight;

	    if (width) {
	      elementWidth = width;
	      elementHeight = height;
	      this.canvasContext.canvas.width = elementWidth;
	      this.canvasContext.canvas.height = elementHeight;
	    } else {
	      if (this.animationItem.wrapper && this.animationItem.container) {
	        elementWidth = this.animationItem.wrapper.offsetWidth;
	        elementHeight = this.animationItem.wrapper.offsetHeight;
	      } else {
	        elementWidth = this.canvasContext.canvas.width;
	        elementHeight = this.canvasContext.canvas.height;
	      }

	      this.canvasContext.canvas.width = elementWidth * this.renderConfig.dpr;
	      this.canvasContext.canvas.height = elementHeight * this.renderConfig.dpr;
	    }

	    var elementRel;
	    var animationRel;

	    if (this.renderConfig.preserveAspectRatio.indexOf('meet') !== -1 || this.renderConfig.preserveAspectRatio.indexOf('slice') !== -1) {
	      var par = this.renderConfig.preserveAspectRatio.split(' ');
	      var fillType = par[1] || 'meet';
	      var pos = par[0] || 'xMidYMid';
	      var xPos = pos.substr(0, 4);
	      var yPos = pos.substr(4);
	      elementRel = elementWidth / elementHeight;
	      animationRel = this.transformCanvas.w / this.transformCanvas.h;

	      if (animationRel > elementRel && fillType === 'meet' || animationRel < elementRel && fillType === 'slice') {
	        this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
	        this.transformCanvas.sy = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
	      } else {
	        this.transformCanvas.sx = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
	        this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
	      }

	      if (xPos === 'xMid' && (animationRel < elementRel && fillType === 'meet' || animationRel > elementRel && fillType === 'slice')) {
	        this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) / 2 * this.renderConfig.dpr;
	      } else if (xPos === 'xMax' && (animationRel < elementRel && fillType === 'meet' || animationRel > elementRel && fillType === 'slice')) {
	        this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) * this.renderConfig.dpr;
	      } else {
	        this.transformCanvas.tx = 0;
	      }

	      if (yPos === 'YMid' && (animationRel > elementRel && fillType === 'meet' || animationRel < elementRel && fillType === 'slice')) {
	        this.transformCanvas.ty = (elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w)) / 2 * this.renderConfig.dpr;
	      } else if (yPos === 'YMax' && (animationRel > elementRel && fillType === 'meet' || animationRel < elementRel && fillType === 'slice')) {
	        this.transformCanvas.ty = (elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w)) * this.renderConfig.dpr;
	      } else {
	        this.transformCanvas.ty = 0;
	      }
	    } else if (this.renderConfig.preserveAspectRatio === 'none') {
	      this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
	      this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
	      this.transformCanvas.tx = 0;
	      this.transformCanvas.ty = 0;
	    } else {
	      this.transformCanvas.sx = this.renderConfig.dpr;
	      this.transformCanvas.sy = this.renderConfig.dpr;
	      this.transformCanvas.tx = 0;
	      this.transformCanvas.ty = 0;
	    }

	    this.transformCanvas.props = [this.transformCanvas.sx, 0, 0, 0, 0, this.transformCanvas.sy, 0, 0, 0, 0, 1, 0, this.transformCanvas.tx, this.transformCanvas.ty, 0, 1];
	    /* var i, len = this.elements.length;
	      for(i=0;i<len;i+=1){
	          if(this.elements[i] && this.elements[i].data.ty === 0){
	              this.elements[i].resize(this.globalData.transformCanvas);
	          }
	      } */

	    this.ctxTransform(this.transformCanvas.props);
	    this.canvasContext.beginPath();
	    this.canvasContext.rect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
	    this.canvasContext.closePath();
	    this.canvasContext.clip();
	    this.renderFrame(this.renderedFrame, true);
	  };

	  CanvasRendererBase.prototype.destroy = function () {
	    if (this.renderConfig.clearCanvas && this.animationItem.wrapper) {
	      this.animationItem.wrapper.innerText = '';
	    }

	    var i;
	    var len = this.layers ? this.layers.length : 0;

	    for (i = len - 1; i >= 0; i -= 1) {
	      if (this.elements[i] && this.elements[i].destroy) {
	        this.elements[i].destroy();
	      }
	    }

	    this.elements.length = 0;
	    this.globalData.canvasContext = null;
	    this.animationItem.container = null;
	    this.destroyed = true;
	  };

	  CanvasRendererBase.prototype.renderFrame = function (num, forceRender) {
	    if (this.renderedFrame === num && this.renderConfig.clearCanvas === true && !forceRender || this.destroyed || num === -1) {
	      return;
	    }

	    this.renderedFrame = num;
	    this.globalData.frameNum = num - this.animationItem._isFirstFrame;
	    this.globalData.frameId += 1;
	    this.globalData._mdf = !this.renderConfig.clearCanvas || forceRender;
	    this.globalData.projectInterface.currentFrame = num; // console.log('--------');
	    // console.log('NEW: ',num);

	    var i;
	    var len = this.layers.length;

	    if (!this.completeLayers) {
	      this.checkLayers(num);
	    }

	    for (i = len - 1; i >= 0; i -= 1) {
	      if (this.completeLayers || this.elements[i]) {
	        this.elements[i].prepareFrame(num - this.layers[i].st);
	      }
	    }

	    if (this.globalData._mdf) {
	      if (this.renderConfig.clearCanvas === true) {
	        this.canvasContext.clearRect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
	      } else {
	        this.save();
	      }

	      for (i = len - 1; i >= 0; i -= 1) {
	        if (this.completeLayers || this.elements[i]) {
	          this.elements[i].renderFrame();
	        }
	      }

	      if (this.renderConfig.clearCanvas !== true) {
	        this.restore();
	      }
	    }
	  };

	  CanvasRendererBase.prototype.buildItem = function (pos) {
	    var elements = this.elements;

	    if (elements[pos] || this.layers[pos].ty === 99) {
	      return;
	    }

	    var element = this.createItem(this.layers[pos], this, this.globalData);
	    elements[pos] = element;
	    element.initExpressions();
	    /* if(this.layers[pos].ty === 0){
	          element.resize(this.globalData.transformCanvas);
	      } */
	  };

	  CanvasRendererBase.prototype.checkPendingElements = function () {
	    while (this.pendingElements.length) {
	      var element = this.pendingElements.pop();
	      element.checkParenting();
	    }
	  };

	  CanvasRendererBase.prototype.hide = function () {
	    this.animationItem.container.style.display = 'none';
	  };

	  CanvasRendererBase.prototype.show = function () {
	    this.animationItem.container.style.display = 'block';
	  };

	  function CanvasContext() {
	    this.opacity = -1;
	    this.transform = createTypedArray('float32', 16);
	    this.fillStyle = '';
	    this.strokeStyle = '';
	    this.lineWidth = '';
	    this.lineCap = '';
	    this.lineJoin = '';
	    this.miterLimit = '';
	    this.id = Math.random();
	  }

	  function CVContextData() {
	    this.stack = [];
	    this.cArrPos = 0;
	    this.cTr = new Matrix();
	    var i;
	    var len = 15;

	    for (i = 0; i < len; i += 1) {
	      var canvasContext = new CanvasContext();
	      this.stack[i] = canvasContext;
	    }

	    this._length = len;
	    this.nativeContext = null;
	    this.transformMat = new Matrix();
	    this.currentOpacity = 1; //

	    this.currentFillStyle = '';
	    this.appliedFillStyle = ''; //

	    this.currentStrokeStyle = '';
	    this.appliedStrokeStyle = ''; //

	    this.currentLineWidth = '';
	    this.appliedLineWidth = ''; //

	    this.currentLineCap = '';
	    this.appliedLineCap = ''; //

	    this.currentLineJoin = '';
	    this.appliedLineJoin = ''; //

	    this.appliedMiterLimit = '';
	    this.currentMiterLimit = '';
	  }

	  CVContextData.prototype.duplicate = function () {
	    var newLength = this._length * 2;
	    var i = 0;

	    for (i = this._length; i < newLength; i += 1) {
	      this.stack[i] = new CanvasContext();
	    }

	    this._length = newLength;
	  };

	  CVContextData.prototype.reset = function () {
	    this.cArrPos = 0;
	    this.cTr.reset();
	    this.stack[this.cArrPos].opacity = 1;
	  };

	  CVContextData.prototype.restore = function (forceRestore) {
	    this.cArrPos -= 1;
	    var currentContext = this.stack[this.cArrPos];
	    var transform = currentContext.transform;
	    var i;
	    var arr = this.cTr.props;

	    for (i = 0; i < 16; i += 1) {
	      arr[i] = transform[i];
	    }

	    if (forceRestore) {
	      this.nativeContext.restore();
	      var prevStack = this.stack[this.cArrPos + 1];
	      this.appliedFillStyle = prevStack.fillStyle;
	      this.appliedStrokeStyle = prevStack.strokeStyle;
	      this.appliedLineWidth = prevStack.lineWidth;
	      this.appliedLineCap = prevStack.lineCap;
	      this.appliedLineJoin = prevStack.lineJoin;
	      this.appliedMiterLimit = prevStack.miterLimit;
	    }

	    this.nativeContext.setTransform(transform[0], transform[1], transform[4], transform[5], transform[12], transform[13]);

	    if (forceRestore || currentContext.opacity !== -1 && this.currentOpacity !== currentContext.opacity) {
	      this.nativeContext.globalAlpha = currentContext.opacity;
	      this.currentOpacity = currentContext.opacity;
	    }

	    this.currentFillStyle = currentContext.fillStyle;
	    this.currentStrokeStyle = currentContext.strokeStyle;
	    this.currentLineWidth = currentContext.lineWidth;
	    this.currentLineCap = currentContext.lineCap;
	    this.currentLineJoin = currentContext.lineJoin;
	    this.currentMiterLimit = currentContext.miterLimit;
	  };

	  CVContextData.prototype.save = function (saveOnNativeFlag) {
	    if (saveOnNativeFlag) {
	      this.nativeContext.save();
	    }

	    var props = this.cTr.props;

	    if (this._length <= this.cArrPos) {
	      this.duplicate();
	    }

	    var currentStack = this.stack[this.cArrPos];
	    var i;

	    for (i = 0; i < 16; i += 1) {
	      currentStack.transform[i] = props[i];
	    }

	    this.cArrPos += 1;
	    var newStack = this.stack[this.cArrPos];
	    newStack.opacity = currentStack.opacity;
	    newStack.fillStyle = currentStack.fillStyle;
	    newStack.strokeStyle = currentStack.strokeStyle;
	    newStack.lineWidth = currentStack.lineWidth;
	    newStack.lineCap = currentStack.lineCap;
	    newStack.lineJoin = currentStack.lineJoin;
	    newStack.miterLimit = currentStack.miterLimit;
	  };

	  CVContextData.prototype.setOpacity = function (value) {
	    this.stack[this.cArrPos].opacity = value;
	  };

	  CVContextData.prototype.setContext = function (value) {
	    this.nativeContext = value;
	  };

	  CVContextData.prototype.fillStyle = function (value) {
	    if (this.stack[this.cArrPos].fillStyle !== value) {
	      this.currentFillStyle = value;
	      this.stack[this.cArrPos].fillStyle = value;
	    }
	  };

	  CVContextData.prototype.strokeStyle = function (value) {
	    if (this.stack[this.cArrPos].strokeStyle !== value) {
	      this.currentStrokeStyle = value;
	      this.stack[this.cArrPos].strokeStyle = value;
	    }
	  };

	  CVContextData.prototype.lineWidth = function (value) {
	    if (this.stack[this.cArrPos].lineWidth !== value) {
	      this.currentLineWidth = value;
	      this.stack[this.cArrPos].lineWidth = value;
	    }
	  };

	  CVContextData.prototype.lineCap = function (value) {
	    if (this.stack[this.cArrPos].lineCap !== value) {
	      this.currentLineCap = value;
	      this.stack[this.cArrPos].lineCap = value;
	    }
	  };

	  CVContextData.prototype.lineJoin = function (value) {
	    if (this.stack[this.cArrPos].lineJoin !== value) {
	      this.currentLineJoin = value;
	      this.stack[this.cArrPos].lineJoin = value;
	    }
	  };

	  CVContextData.prototype.miterLimit = function (value) {
	    if (this.stack[this.cArrPos].miterLimit !== value) {
	      this.currentMiterLimit = value;
	      this.stack[this.cArrPos].miterLimit = value;
	    }
	  };

	  CVContextData.prototype.transform = function (props) {
	    this.transformMat.cloneFromProps(props); // Taking the last transform value from the stored stack of transforms

	    var currentTransform = this.cTr; // Applying the last transform value after the new transform to respect the order of transformations

	    this.transformMat.multiply(currentTransform); // Storing the new transformed value in the stored transform

	    currentTransform.cloneFromProps(this.transformMat.props);
	    var trProps = currentTransform.props; // Applying the new transform to the canvas

	    this.nativeContext.setTransform(trProps[0], trProps[1], trProps[4], trProps[5], trProps[12], trProps[13]);
	  };

	  CVContextData.prototype.opacity = function (op) {
	    var currentOpacity = this.stack[this.cArrPos].opacity;
	    currentOpacity *= op < 0 ? 0 : op;

	    if (this.stack[this.cArrPos].opacity !== currentOpacity) {
	      if (this.currentOpacity !== op) {
	        this.nativeContext.globalAlpha = op;
	        this.currentOpacity = op;
	      }

	      this.stack[this.cArrPos].opacity = currentOpacity;
	    }
	  };

	  CVContextData.prototype.fill = function (rule) {
	    if (this.appliedFillStyle !== this.currentFillStyle) {
	      this.appliedFillStyle = this.currentFillStyle;
	      this.nativeContext.fillStyle = this.appliedFillStyle;
	    }

	    this.nativeContext.fill(rule);
	  };

	  CVContextData.prototype.fillRect = function (x, y, w, h) {
	    if (this.appliedFillStyle !== this.currentFillStyle) {
	      this.appliedFillStyle = this.currentFillStyle;
	      this.nativeContext.fillStyle = this.appliedFillStyle;
	    }

	    this.nativeContext.fillRect(x, y, w, h);
	  };

	  CVContextData.prototype.stroke = function () {
	    if (this.appliedStrokeStyle !== this.currentStrokeStyle) {
	      this.appliedStrokeStyle = this.currentStrokeStyle;
	      this.nativeContext.strokeStyle = this.appliedStrokeStyle;
	    }

	    if (this.appliedLineWidth !== this.currentLineWidth) {
	      this.appliedLineWidth = this.currentLineWidth;
	      this.nativeContext.lineWidth = this.appliedLineWidth;
	    }

	    if (this.appliedLineCap !== this.currentLineCap) {
	      this.appliedLineCap = this.currentLineCap;
	      this.nativeContext.lineCap = this.appliedLineCap;
	    }

	    if (this.appliedLineJoin !== this.currentLineJoin) {
	      this.appliedLineJoin = this.currentLineJoin;
	      this.nativeContext.lineJoin = this.appliedLineJoin;
	    }

	    if (this.appliedMiterLimit !== this.currentMiterLimit) {
	      this.appliedMiterLimit = this.currentMiterLimit;
	      this.nativeContext.miterLimit = this.appliedMiterLimit;
	    }

	    this.nativeContext.stroke();
	  };

	  function CVCompElement(data, globalData, comp) {
	    this.completeLayers = false;
	    this.layers = data.layers;
	    this.pendingElements = [];
	    this.elements = createSizedArray(this.layers.length);
	    this.initElement(data, globalData, comp);
	    this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {
	      _placeholder: true
	    };
	  }

	  extendPrototype([CanvasRendererBase, ICompElement, CVBaseElement], CVCompElement);

	  CVCompElement.prototype.renderInnerContent = function () {
	    var ctx = this.canvasContext;
	    ctx.beginPath();
	    ctx.moveTo(0, 0);
	    ctx.lineTo(this.data.w, 0);
	    ctx.lineTo(this.data.w, this.data.h);
	    ctx.lineTo(0, this.data.h);
	    ctx.lineTo(0, 0);
	    ctx.clip();
	    var i;
	    var len = this.layers.length;

	    for (i = len - 1; i >= 0; i -= 1) {
	      if (this.completeLayers || this.elements[i]) {
	        this.elements[i].renderFrame();
	      }
	    }
	  };

	  CVCompElement.prototype.destroy = function () {
	    var i;
	    var len = this.layers.length;

	    for (i = len - 1; i >= 0; i -= 1) {
	      if (this.elements[i]) {
	        this.elements[i].destroy();
	      }
	    }

	    this.layers = null;
	    this.elements = null;
	  };

	  CVCompElement.prototype.createComp = function (data) {
	    return new CVCompElement(data, this.globalData, this);
	  };

	  function CanvasRenderer(animationItem, config) {
	    this.animationItem = animationItem;
	    this.renderConfig = {
	      clearCanvas: config && config.clearCanvas !== undefined ? config.clearCanvas : true,
	      context: config && config.context || null,
	      progressiveLoad: config && config.progressiveLoad || false,
	      preserveAspectRatio: config && config.preserveAspectRatio || 'xMidYMid meet',
	      imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || 'xMidYMid slice',
	      contentVisibility: config && config.contentVisibility || 'visible',
	      className: config && config.className || '',
	      id: config && config.id || '',
	      runExpressions: !config || config.runExpressions === undefined || config.runExpressions
	    };
	    this.renderConfig.dpr = config && config.dpr || 1;

	    if (this.animationItem.wrapper) {
	      this.renderConfig.dpr = config && config.dpr || window.devicePixelRatio || 1;
	    }

	    this.renderedFrame = -1;
	    this.globalData = {
	      frameNum: -1,
	      _mdf: false,
	      renderConfig: this.renderConfig,
	      currentGlobalAlpha: -1
	    };
	    this.contextData = new CVContextData();
	    this.elements = [];
	    this.pendingElements = [];
	    this.transformMat = new Matrix();
	    this.completeLayers = false;
	    this.rendererType = 'canvas';

	    if (this.renderConfig.clearCanvas) {
	      this.ctxTransform = this.contextData.transform.bind(this.contextData);
	      this.ctxOpacity = this.contextData.opacity.bind(this.contextData);
	      this.ctxFillStyle = this.contextData.fillStyle.bind(this.contextData);
	      this.ctxStrokeStyle = this.contextData.strokeStyle.bind(this.contextData);
	      this.ctxLineWidth = this.contextData.lineWidth.bind(this.contextData);
	      this.ctxLineCap = this.contextData.lineCap.bind(this.contextData);
	      this.ctxLineJoin = this.contextData.lineJoin.bind(this.contextData);
	      this.ctxMiterLimit = this.contextData.miterLimit.bind(this.contextData);
	      this.ctxFill = this.contextData.fill.bind(this.contextData);
	      this.ctxFillRect = this.contextData.fillRect.bind(this.contextData);
	      this.ctxStroke = this.contextData.stroke.bind(this.contextData);
	      this.save = this.contextData.save.bind(this.contextData);
	    }
	  }

	  extendPrototype([CanvasRendererBase], CanvasRenderer);

	  CanvasRenderer.prototype.createComp = function (data) {
	    return new CVCompElement(data, this.globalData, this);
	  };

	  function HBaseElement() {}

	  HBaseElement.prototype = {
	    checkBlendMode: function checkBlendMode() {},
	    initRendererElement: function initRendererElement() {
	      this.baseElement = createTag(this.data.tg || 'div');

	      if (this.data.hasMask) {
	        this.svgElement = createNS('svg');
	        this.layerElement = createNS('g');
	        this.maskedElement = this.layerElement;
	        this.svgElement.appendChild(this.layerElement);
	        this.baseElement.appendChild(this.svgElement);
	      } else {
	        this.layerElement = this.baseElement;
	      }

	      styleDiv(this.baseElement);
	    },
	    createContainerElements: function createContainerElements() {
	      this.renderableEffectsManager = new CVEffects(this);
	      this.transformedElement = this.baseElement;
	      this.maskedElement = this.layerElement;

	      if (this.data.ln) {
	        this.layerElement.setAttribute('id', this.data.ln);
	      }

	      if (this.data.cl) {
	        this.layerElement.setAttribute('class', this.data.cl);
	      }

	      if (this.data.bm !== 0) {
	        this.setBlendMode();
	      }
	    },
	    renderElement: function renderElement() {
	      var transformedElementStyle = this.transformedElement ? this.transformedElement.style : {};

	      if (this.finalTransform._matMdf) {
	        var matrixValue = this.finalTransform.mat.toCSS();
	        transformedElementStyle.transform = matrixValue;
	        transformedElementStyle.webkitTransform = matrixValue;
	      }

	      if (this.finalTransform._opMdf) {
	        transformedElementStyle.opacity = this.finalTransform.mProp.o.v;
	      }
	    },
	    renderFrame: function renderFrame() {
	      // If it is exported as hidden (data.hd === true) no need to render
	      // If it is not visible no need to render
	      if (this.data.hd || this.hidden) {
	        return;
	      }

	      this.renderTransform();
	      this.renderRenderable();
	      this.renderElement();
	      this.renderInnerContent();

	      if (this._isFirstFrame) {
	        this._isFirstFrame = false;
	      }
	    },
	    destroy: function destroy() {
	      this.layerElement = null;
	      this.transformedElement = null;

	      if (this.matteElement) {
	        this.matteElement = null;
	      }

	      if (this.maskManager) {
	        this.maskManager.destroy();
	        this.maskManager = null;
	      }
	    },
	    createRenderableComponents: function createRenderableComponents() {
	      this.maskManager = new MaskElement(this.data, this, this.globalData);
	    },
	    addEffects: function addEffects() {},
	    setMatte: function setMatte() {}
	  };
	  HBaseElement.prototype.getBaseElement = SVGBaseElement.prototype.getBaseElement;
	  HBaseElement.prototype.destroyBaseElement = HBaseElement.prototype.destroy;
	  HBaseElement.prototype.buildElementParenting = BaseRenderer.prototype.buildElementParenting;

	  function HSolidElement(data, globalData, comp) {
	    this.initElement(data, globalData, comp);
	  }

	  extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], HSolidElement);

	  HSolidElement.prototype.createContent = function () {
	    var rect;

	    if (this.data.hasMask) {
	      rect = createNS('rect');
	      rect.setAttribute('width', this.data.sw);
	      rect.setAttribute('height', this.data.sh);
	      rect.setAttribute('fill', this.data.sc);
	      this.svgElement.setAttribute('width', this.data.sw);
	      this.svgElement.setAttribute('height', this.data.sh);
	    } else {
	      rect = createTag('div');
	      rect.style.width = this.data.sw + 'px';
	      rect.style.height = this.data.sh + 'px';
	      rect.style.backgroundColor = this.data.sc;
	    }

	    this.layerElement.appendChild(rect);
	  };

	  function HShapeElement(data, globalData, comp) {
	    // List of drawable elements
	    this.shapes = []; // Full shape data

	    this.shapesData = data.shapes; // List of styles that will be applied to shapes

	    this.stylesList = []; // List of modifiers that will be applied to shapes

	    this.shapeModifiers = []; // List of items in shape tree

	    this.itemsData = []; // List of items in previous shape tree

	    this.processedElements = []; // List of animated components

	    this.animatedContents = [];
	    this.shapesContainer = createNS('g');
	    this.initElement(data, globalData, comp); // Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
	    // List of elements that have been created

	    this.prevViewData = [];
	    this.currentBBox = {
	      x: 999999,
	      y: -999999,
	      h: 0,
	      w: 0
	    };
	  }

	  extendPrototype([BaseElement, TransformElement, HSolidElement, SVGShapeElement, HBaseElement, HierarchyElement, FrameElement, RenderableElement], HShapeElement);
	  HShapeElement.prototype._renderShapeFrame = HShapeElement.prototype.renderInnerContent;

	  HShapeElement.prototype.createContent = function () {
	    var cont;
	    this.baseElement.style.fontSize = 0;

	    if (this.data.hasMask) {
	      this.layerElement.appendChild(this.shapesContainer);
	      cont = this.svgElement;
	    } else {
	      cont = createNS('svg');
	      var size = this.comp.data ? this.comp.data : this.globalData.compSize;
	      cont.setAttribute('width', size.w);
	      cont.setAttribute('height', size.h);
	      cont.appendChild(this.shapesContainer);
	      this.layerElement.appendChild(cont);
	    }

	    this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.shapesContainer, 0, [], true);
	    this.filterUniqueShapes();
	    this.shapeCont = cont;
	  };

	  HShapeElement.prototype.getTransformedPoint = function (transformers, point) {
	    var i;
	    var len = transformers.length;

	    for (i = 0; i < len; i += 1) {
	      point = transformers[i].mProps.v.applyToPointArray(point[0], point[1], 0);
	    }

	    return point;
	  };

	  HShapeElement.prototype.calculateShapeBoundingBox = function (item, boundingBox) {
	    var shape = item.sh.v;
	    var transformers = item.transformers;
	    var i;
	    var len = shape._length;
	    var vPoint;
	    var oPoint;
	    var nextIPoint;
	    var nextVPoint;

	    if (len <= 1) {
	      return;
	    }

	    for (i = 0; i < len - 1; i += 1) {
	      vPoint = this.getTransformedPoint(transformers, shape.v[i]);
	      oPoint = this.getTransformedPoint(transformers, shape.o[i]);
	      nextIPoint = this.getTransformedPoint(transformers, shape.i[i + 1]);
	      nextVPoint = this.getTransformedPoint(transformers, shape.v[i + 1]);
	      this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
	    }

	    if (shape.c) {
	      vPoint = this.getTransformedPoint(transformers, shape.v[i]);
	      oPoint = this.getTransformedPoint(transformers, shape.o[i]);
	      nextIPoint = this.getTransformedPoint(transformers, shape.i[0]);
	      nextVPoint = this.getTransformedPoint(transformers, shape.v[0]);
	      this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
	    }
	  };

	  HShapeElement.prototype.checkBounds = function (vPoint, oPoint, nextIPoint, nextVPoint, boundingBox) {
	    this.getBoundsOfCurve(vPoint, oPoint, nextIPoint, nextVPoint);
	    var bounds = this.shapeBoundingBox;
	    boundingBox.x = bmMin(bounds.left, boundingBox.x);
	    boundingBox.xMax = bmMax(bounds.right, boundingBox.xMax);
	    boundingBox.y = bmMin(bounds.top, boundingBox.y);
	    boundingBox.yMax = bmMax(bounds.bottom, boundingBox.yMax);
	  };

	  HShapeElement.prototype.shapeBoundingBox = {
	    left: 0,
	    right: 0,
	    top: 0,
	    bottom: 0
	  };
	  HShapeElement.prototype.tempBoundingBox = {
	    x: 0,
	    xMax: 0,
	    y: 0,
	    yMax: 0,
	    width: 0,
	    height: 0
	  };

	  HShapeElement.prototype.getBoundsOfCurve = function (p0, p1, p2, p3) {
	    var bounds = [[p0[0], p3[0]], [p0[1], p3[1]]];

	    for (var a, b, c, t, b2ac, t1, t2, i = 0; i < 2; ++i) {
	      // eslint-disable-line no-plusplus
	      b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
	      a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
	      c = 3 * p1[i] - 3 * p0[i];
	      b |= 0; // eslint-disable-line no-bitwise

	      a |= 0; // eslint-disable-line no-bitwise

	      c |= 0; // eslint-disable-line no-bitwise

	      if (a === 0 && b === 0) ; else if (a === 0) {
	        t = -c / b;

	        if (t > 0 && t < 1) {
	          bounds[i].push(this.calculateF(t, p0, p1, p2, p3, i));
	        }
	      } else {
	        b2ac = b * b - 4 * c * a;

	        if (b2ac >= 0) {
	          t1 = (-b + bmSqrt(b2ac)) / (2 * a);
	          if (t1 > 0 && t1 < 1) bounds[i].push(this.calculateF(t1, p0, p1, p2, p3, i));
	          t2 = (-b - bmSqrt(b2ac)) / (2 * a);
	          if (t2 > 0 && t2 < 1) bounds[i].push(this.calculateF(t2, p0, p1, p2, p3, i));
	        }
	      }
	    }

	    this.shapeBoundingBox.left = bmMin.apply(null, bounds[0]);
	    this.shapeBoundingBox.top = bmMin.apply(null, bounds[1]);
	    this.shapeBoundingBox.right = bmMax.apply(null, bounds[0]);
	    this.shapeBoundingBox.bottom = bmMax.apply(null, bounds[1]);
	  };

	  HShapeElement.prototype.calculateF = function (t, p0, p1, p2, p3, i) {
	    return bmPow(1 - t, 3) * p0[i] + 3 * bmPow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * bmPow(t, 2) * p2[i] + bmPow(t, 3) * p3[i];
	  };

	  HShapeElement.prototype.calculateBoundingBox = function (itemsData, boundingBox) {
	    var i;
	    var len = itemsData.length;

	    for (i = 0; i < len; i += 1) {
	      if (itemsData[i] && itemsData[i].sh) {
	        this.calculateShapeBoundingBox(itemsData[i], boundingBox);
	      } else if (itemsData[i] && itemsData[i].it) {
	        this.calculateBoundingBox(itemsData[i].it, boundingBox);
	      } else if (itemsData[i] && itemsData[i].style && itemsData[i].w) {
	        this.expandStrokeBoundingBox(itemsData[i].w, boundingBox);
	      }
	    }
	  };

	  HShapeElement.prototype.expandStrokeBoundingBox = function (widthProperty, boundingBox) {
	    var width = 0;

	    if (widthProperty.keyframes) {
	      for (var i = 0; i < widthProperty.keyframes.length; i += 1) {
	        var kfw = widthProperty.keyframes[i].s;

	        if (kfw > width) {
	          width = kfw;
	        }
	      }

	      width *= widthProperty.mult;
	    } else {
	      width = widthProperty.v * widthProperty.mult;
	    }

	    boundingBox.x -= width;
	    boundingBox.xMax += width;
	    boundingBox.y -= width;
	    boundingBox.yMax += width;
	  };

	  HShapeElement.prototype.currentBoxContains = function (box) {
	    return this.currentBBox.x <= box.x && this.currentBBox.y <= box.y && this.currentBBox.width + this.currentBBox.x >= box.x + box.width && this.currentBBox.height + this.currentBBox.y >= box.y + box.height;
	  };

	  HShapeElement.prototype.renderInnerContent = function () {
	    this._renderShapeFrame();

	    if (!this.hidden && (this._isFirstFrame || this._mdf)) {
	      var tempBoundingBox = this.tempBoundingBox;
	      var max = 999999;
	      tempBoundingBox.x = max;
	      tempBoundingBox.xMax = -max;
	      tempBoundingBox.y = max;
	      tempBoundingBox.yMax = -max;
	      this.calculateBoundingBox(this.itemsData, tempBoundingBox);
	      tempBoundingBox.width = tempBoundingBox.xMax < tempBoundingBox.x ? 0 : tempBoundingBox.xMax - tempBoundingBox.x;
	      tempBoundingBox.height = tempBoundingBox.yMax < tempBoundingBox.y ? 0 : tempBoundingBox.yMax - tempBoundingBox.y; // var tempBoundingBox = this.shapeCont.getBBox();

	      if (this.currentBoxContains(tempBoundingBox)) {
	        return;
	      }

	      var changed = false;

	      if (this.currentBBox.w !== tempBoundingBox.width) {
	        this.currentBBox.w = tempBoundingBox.width;
	        this.shapeCont.setAttribute('width', tempBoundingBox.width);
	        changed = true;
	      }

	      if (this.currentBBox.h !== tempBoundingBox.height) {
	        this.currentBBox.h = tempBoundingBox.height;
	        this.shapeCont.setAttribute('height', tempBoundingBox.height);
	        changed = true;
	      }

	      if (changed || this.currentBBox.x !== tempBoundingBox.x || this.currentBBox.y !== tempBoundingBox.y) {
	        this.currentBBox.w = tempBoundingBox.width;
	        this.currentBBox.h = tempBoundingBox.height;
	        this.currentBBox.x = tempBoundingBox.x;
	        this.currentBBox.y = tempBoundingBox.y;
	        this.shapeCont.setAttribute('viewBox', this.currentBBox.x + ' ' + this.currentBBox.y + ' ' + this.currentBBox.w + ' ' + this.currentBBox.h);
	        var shapeStyle = this.shapeCont.style;
	        var shapeTransform = 'translate(' + this.currentBBox.x + 'px,' + this.currentBBox.y + 'px)';
	        shapeStyle.transform = shapeTransform;
	        shapeStyle.webkitTransform = shapeTransform;
	      }
	    }
	  };

	  function HTextElement(data, globalData, comp) {
	    this.textSpans = [];
	    this.textPaths = [];
	    this.currentBBox = {
	      x: 999999,
	      y: -999999,
	      h: 0,
	      w: 0
	    };
	    this.renderType = 'svg';
	    this.isMasked = false;
	    this.initElement(data, globalData, comp);
	  }

	  extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], HTextElement);

	  HTextElement.prototype.createContent = function () {
	    this.isMasked = this.checkMasks();

	    if (this.isMasked) {
	      this.renderType = 'svg';
	      this.compW = this.comp.data.w;
	      this.compH = this.comp.data.h;
	      this.svgElement.setAttribute('width', this.compW);
	      this.svgElement.setAttribute('height', this.compH);
	      var g = createNS('g');
	      this.maskedElement.appendChild(g);
	      this.innerElem = g;
	    } else {
	      this.renderType = 'html';
	      this.innerElem = this.layerElement;
	    }

	    this.checkParenting();
	  };

	  HTextElement.prototype.buildNewText = function () {
	    var documentData = this.textProperty.currentData;
	    this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
	    var innerElemStyle = this.innerElem.style;
	    var textColor = documentData.fc ? this.buildColor(documentData.fc) : 'rgba(0,0,0,0)';
	    innerElemStyle.fill = textColor;
	    innerElemStyle.color = textColor;

	    if (documentData.sc) {
	      innerElemStyle.stroke = this.buildColor(documentData.sc);
	      innerElemStyle.strokeWidth = documentData.sw + 'px';
	    }

	    var fontData = this.globalData.fontManager.getFontByName(documentData.f);

	    if (!this.globalData.fontManager.chars) {
	      innerElemStyle.fontSize = documentData.finalSize + 'px';
	      innerElemStyle.lineHeight = documentData.finalSize + 'px';

	      if (fontData.fClass) {
	        this.innerElem.className = fontData.fClass;
	      } else {
	        innerElemStyle.fontFamily = fontData.fFamily;
	        var fWeight = documentData.fWeight;
	        var fStyle = documentData.fStyle;
	        innerElemStyle.fontStyle = fStyle;
	        innerElemStyle.fontWeight = fWeight;
	      }
	    }

	    var i;
	    var len;
	    var letters = documentData.l;
	    len = letters.length;
	    var tSpan;
	    var tParent;
	    var tCont;
	    var matrixHelper = this.mHelper;
	    var shapes;
	    var shapeStr = '';
	    var cnt = 0;

	    for (i = 0; i < len; i += 1) {
	      if (this.globalData.fontManager.chars) {
	        if (!this.textPaths[cnt]) {
	          tSpan = createNS('path');
	          tSpan.setAttribute('stroke-linecap', lineCapEnum[1]);
	          tSpan.setAttribute('stroke-linejoin', lineJoinEnum[2]);
	          tSpan.setAttribute('stroke-miterlimit', '4');
	        } else {
	          tSpan = this.textPaths[cnt];
	        }

	        if (!this.isMasked) {
	          if (this.textSpans[cnt]) {
	            tParent = this.textSpans[cnt];
	            tCont = tParent.children[0];
	          } else {
	            tParent = createTag('div');
	            tParent.style.lineHeight = 0;
	            tCont = createNS('svg');
	            tCont.appendChild(tSpan);
	            styleDiv(tParent);
	          }
	        }
	      } else if (!this.isMasked) {
	        if (this.textSpans[cnt]) {
	          tParent = this.textSpans[cnt];
	          tSpan = this.textPaths[cnt];
	        } else {
	          tParent = createTag('span');
	          styleDiv(tParent);
	          tSpan = createTag('span');
	          styleDiv(tSpan);
	          tParent.appendChild(tSpan);
	        }
	      } else {
	        tSpan = this.textPaths[cnt] ? this.textPaths[cnt] : createNS('text');
	      } // tSpan.setAttribute('visibility', 'hidden');


	      if (this.globalData.fontManager.chars) {
	        var charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
	        var shapeData;

	        if (charData) {
	          shapeData = charData.data;
	        } else {
	          shapeData = null;
	        }

	        matrixHelper.reset();

	        if (shapeData && shapeData.shapes && shapeData.shapes.length) {
	          shapes = shapeData.shapes[0].it;
	          matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
	          shapeStr = this.createPathShape(matrixHelper, shapes);
	          tSpan.setAttribute('d', shapeStr);
	        }

	        if (!this.isMasked) {
	          this.innerElem.appendChild(tParent);

	          if (shapeData && shapeData.shapes) {
	            // document.body.appendChild is needed to get exact measure of shape
	            document.body.appendChild(tCont);
	            var boundingBox = tCont.getBBox();
	            tCont.setAttribute('width', boundingBox.width + 2);
	            tCont.setAttribute('height', boundingBox.height + 2);
	            tCont.setAttribute('viewBox', boundingBox.x - 1 + ' ' + (boundingBox.y - 1) + ' ' + (boundingBox.width + 2) + ' ' + (boundingBox.height + 2));
	            var tContStyle = tCont.style;
	            var tContTranslation = 'translate(' + (boundingBox.x - 1) + 'px,' + (boundingBox.y - 1) + 'px)';
	            tContStyle.transform = tContTranslation;
	            tContStyle.webkitTransform = tContTranslation;
	            letters[i].yOffset = boundingBox.y - 1;
	          } else {
	            tCont.setAttribute('width', 1);
	            tCont.setAttribute('height', 1);
	          }

	          tParent.appendChild(tCont);
	        } else {
	          this.innerElem.appendChild(tSpan);
	        }
	      } else {
	        tSpan.textContent = letters[i].val;
	        tSpan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');

	        if (!this.isMasked) {
	          this.innerElem.appendChild(tParent); //

	          var tStyle = tSpan.style;
	          var tSpanTranslation = 'translate3d(0,' + -documentData.finalSize / 1.2 + 'px,0)';
	          tStyle.transform = tSpanTranslation;
	          tStyle.webkitTransform = tSpanTranslation;
	        } else {
	          this.innerElem.appendChild(tSpan);
	        }
	      } //


	      if (!this.isMasked) {
	        this.textSpans[cnt] = tParent;
	      } else {
	        this.textSpans[cnt] = tSpan;
	      }

	      this.textSpans[cnt].style.display = 'block';
	      this.textPaths[cnt] = tSpan;
	      cnt += 1;
	    }

	    while (cnt < this.textSpans.length) {
	      this.textSpans[cnt].style.display = 'none';
	      cnt += 1;
	    }
	  };

	  HTextElement.prototype.renderInnerContent = function () {
	    this.validateText();
	    var svgStyle;

	    if (this.data.singleShape) {
	      if (!this._isFirstFrame && !this.lettersChangedFlag) {
	        return;
	      }

	      if (this.isMasked && this.finalTransform._matMdf) {
	        // Todo Benchmark if using this is better than getBBox
	        this.svgElement.setAttribute('viewBox', -this.finalTransform.mProp.p.v[0] + ' ' + -this.finalTransform.mProp.p.v[1] + ' ' + this.compW + ' ' + this.compH);
	        svgStyle = this.svgElement.style;
	        var translation = 'translate(' + -this.finalTransform.mProp.p.v[0] + 'px,' + -this.finalTransform.mProp.p.v[1] + 'px)';
	        svgStyle.transform = translation;
	        svgStyle.webkitTransform = translation;
	      }
	    }

	    this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);

	    if (!this.lettersChangedFlag && !this.textAnimator.lettersChangedFlag) {
	      return;
	    }

	    var i;
	    var len;
	    var count = 0;
	    var renderedLetters = this.textAnimator.renderedLetters;
	    var letters = this.textProperty.currentData.l;
	    len = letters.length;
	    var renderedLetter;
	    var textSpan;
	    var textPath;

	    for (i = 0; i < len; i += 1) {
	      if (letters[i].n) {
	        count += 1;
	      } else {
	        textSpan = this.textSpans[i];
	        textPath = this.textPaths[i];
	        renderedLetter = renderedLetters[count];
	        count += 1;

	        if (renderedLetter._mdf.m) {
	          if (!this.isMasked) {
	            textSpan.style.webkitTransform = renderedLetter.m;
	            textSpan.style.transform = renderedLetter.m;
	          } else {
	            textSpan.setAttribute('transform', renderedLetter.m);
	          }
	        } /// /textSpan.setAttribute('opacity',renderedLetter.o);


	        textSpan.style.opacity = renderedLetter.o;

	        if (renderedLetter.sw && renderedLetter._mdf.sw) {
	          textPath.setAttribute('stroke-width', renderedLetter.sw);
	        }

	        if (renderedLetter.sc && renderedLetter._mdf.sc) {
	          textPath.setAttribute('stroke', renderedLetter.sc);
	        }

	        if (renderedLetter.fc && renderedLetter._mdf.fc) {
	          textPath.setAttribute('fill', renderedLetter.fc);
	          textPath.style.color = renderedLetter.fc;
	        }
	      }
	    }

	    if (this.innerElem.getBBox && !this.hidden && (this._isFirstFrame || this._mdf)) {
	      var boundingBox = this.innerElem.getBBox();

	      if (this.currentBBox.w !== boundingBox.width) {
	        this.currentBBox.w = boundingBox.width;
	        this.svgElement.setAttribute('width', boundingBox.width);
	      }

	      if (this.currentBBox.h !== boundingBox.height) {
	        this.currentBBox.h = boundingBox.height;
	        this.svgElement.setAttribute('height', boundingBox.height);
	      }

	      var margin = 1;

	      if (this.currentBBox.w !== boundingBox.width + margin * 2 || this.currentBBox.h !== boundingBox.height + margin * 2 || this.currentBBox.x !== boundingBox.x - margin || this.currentBBox.y !== boundingBox.y - margin) {
	        this.currentBBox.w = boundingBox.width + margin * 2;
	        this.currentBBox.h = boundingBox.height + margin * 2;
	        this.currentBBox.x = boundingBox.x - margin;
	        this.currentBBox.y = boundingBox.y - margin;
	        this.svgElement.setAttribute('viewBox', this.currentBBox.x + ' ' + this.currentBBox.y + ' ' + this.currentBBox.w + ' ' + this.currentBBox.h);
	        svgStyle = this.svgElement.style;
	        var svgTransform = 'translate(' + this.currentBBox.x + 'px,' + this.currentBBox.y + 'px)';
	        svgStyle.transform = svgTransform;
	        svgStyle.webkitTransform = svgTransform;
	      }
	    }
	  };

	  function HCameraElement(data, globalData, comp) {
	    this.initFrame();
	    this.initBaseData(data, globalData, comp);
	    this.initHierarchy();
	    var getProp = PropertyFactory.getProp;
	    this.pe = getProp(this, data.pe, 0, 0, this);

	    if (data.ks.p.s) {
	      this.px = getProp(this, data.ks.p.x, 1, 0, this);
	      this.py = getProp(this, data.ks.p.y, 1, 0, this);
	      this.pz = getProp(this, data.ks.p.z, 1, 0, this);
	    } else {
	      this.p = getProp(this, data.ks.p, 1, 0, this);
	    }

	    if (data.ks.a) {
	      this.a = getProp(this, data.ks.a, 1, 0, this);
	    }

	    if (data.ks.or.k.length && data.ks.or.k[0].to) {
	      var i;
	      var len = data.ks.or.k.length;

	      for (i = 0; i < len; i += 1) {
	        data.ks.or.k[i].to = null;
	        data.ks.or.k[i].ti = null;
	      }
	    }

	    this.or = getProp(this, data.ks.or, 1, degToRads, this);
	    this.or.sh = true;
	    this.rx = getProp(this, data.ks.rx, 0, degToRads, this);
	    this.ry = getProp(this, data.ks.ry, 0, degToRads, this);
	    this.rz = getProp(this, data.ks.rz, 0, degToRads, this);
	    this.mat = new Matrix();
	    this._prevMat = new Matrix();
	    this._isFirstFrame = true; // TODO: find a better way to make the HCamera element to be compatible with the LayerInterface and TransformInterface.

	    this.finalTransform = {
	      mProp: this
	    };
	  }

	  extendPrototype([BaseElement, FrameElement, HierarchyElement], HCameraElement);

	  HCameraElement.prototype.setup = function () {
	    var i;
	    var len = this.comp.threeDElements.length;
	    var comp;
	    var perspectiveStyle;
	    var containerStyle;

	    for (i = 0; i < len; i += 1) {
	      // [perspectiveElem,container]
	      comp = this.comp.threeDElements[i];

	      if (comp.type === '3d') {
	        perspectiveStyle = comp.perspectiveElem.style;
	        containerStyle = comp.container.style;
	        var perspective = this.pe.v + 'px';
	        var origin = '0px 0px 0px';
	        var matrix = 'matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';
	        perspectiveStyle.perspective = perspective;
	        perspectiveStyle.webkitPerspective = perspective;
	        containerStyle.transformOrigin = origin;
	        containerStyle.mozTransformOrigin = origin;
	        containerStyle.webkitTransformOrigin = origin;
	        perspectiveStyle.transform = matrix;
	        perspectiveStyle.webkitTransform = matrix;
	      }
	    }
	  };

	  HCameraElement.prototype.createElements = function () {};

	  HCameraElement.prototype.hide = function () {};

	  HCameraElement.prototype.renderFrame = function () {
	    var _mdf = this._isFirstFrame;
	    var i;
	    var len;

	    if (this.hierarchy) {
	      len = this.hierarchy.length;

	      for (i = 0; i < len; i += 1) {
	        _mdf = this.hierarchy[i].finalTransform.mProp._mdf || _mdf;
	      }
	    }

	    if (_mdf || this.pe._mdf || this.p && this.p._mdf || this.px && (this.px._mdf || this.py._mdf || this.pz._mdf) || this.rx._mdf || this.ry._mdf || this.rz._mdf || this.or._mdf || this.a && this.a._mdf) {
	      this.mat.reset();

	      if (this.hierarchy) {
	        len = this.hierarchy.length - 1;

	        for (i = len; i >= 0; i -= 1) {
	          var mTransf = this.hierarchy[i].finalTransform.mProp;
	          this.mat.translate(-mTransf.p.v[0], -mTransf.p.v[1], mTransf.p.v[2]);
	          this.mat.rotateX(-mTransf.or.v[0]).rotateY(-mTransf.or.v[1]).rotateZ(mTransf.or.v[2]);
	          this.mat.rotateX(-mTransf.rx.v).rotateY(-mTransf.ry.v).rotateZ(mTransf.rz.v);
	          this.mat.scale(1 / mTransf.s.v[0], 1 / mTransf.s.v[1], 1 / mTransf.s.v[2]);
	          this.mat.translate(mTransf.a.v[0], mTransf.a.v[1], mTransf.a.v[2]);
	        }
	      }

	      if (this.p) {
	        this.mat.translate(-this.p.v[0], -this.p.v[1], this.p.v[2]);
	      } else {
	        this.mat.translate(-this.px.v, -this.py.v, this.pz.v);
	      }

	      if (this.a) {
	        var diffVector;

	        if (this.p) {
	          diffVector = [this.p.v[0] - this.a.v[0], this.p.v[1] - this.a.v[1], this.p.v[2] - this.a.v[2]];
	        } else {
	          diffVector = [this.px.v - this.a.v[0], this.py.v - this.a.v[1], this.pz.v - this.a.v[2]];
	        }

	        var mag = Math.sqrt(Math.pow(diffVector[0], 2) + Math.pow(diffVector[1], 2) + Math.pow(diffVector[2], 2)); // var lookDir = getNormalizedPoint(getDiffVector(this.a.v,this.p.v));

	        var lookDir = [diffVector[0] / mag, diffVector[1] / mag, diffVector[2] / mag];
	        var lookLengthOnXZ = Math.sqrt(lookDir[2] * lookDir[2] + lookDir[0] * lookDir[0]);
	        var mRotationX = Math.atan2(lookDir[1], lookLengthOnXZ);
	        var mRotationY = Math.atan2(lookDir[0], -lookDir[2]);
	        this.mat.rotateY(mRotationY).rotateX(-mRotationX);
	      }

	      this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v);
	      this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]);
	      this.mat.translate(this.globalData.compSize.w / 2, this.globalData.compSize.h / 2, 0);
	      this.mat.translate(0, 0, this.pe.v);
	      var hasMatrixChanged = !this._prevMat.equals(this.mat);

	      if ((hasMatrixChanged || this.pe._mdf) && this.comp.threeDElements) {
	        len = this.comp.threeDElements.length;
	        var comp;
	        var perspectiveStyle;
	        var containerStyle;

	        for (i = 0; i < len; i += 1) {
	          comp = this.comp.threeDElements[i];

	          if (comp.type === '3d') {
	            if (hasMatrixChanged) {
	              var matValue = this.mat.toCSS();
	              containerStyle = comp.container.style;
	              containerStyle.transform = matValue;
	              containerStyle.webkitTransform = matValue;
	            }

	            if (this.pe._mdf) {
	              perspectiveStyle = comp.perspectiveElem.style;
	              perspectiveStyle.perspective = this.pe.v + 'px';
	              perspectiveStyle.webkitPerspective = this.pe.v + 'px';
	            }
	          }
	        }

	        this.mat.clone(this._prevMat);
	      }
	    }

	    this._isFirstFrame = false;
	  };

	  HCameraElement.prototype.prepareFrame = function (num) {
	    this.prepareProperties(num, true);
	  };

	  HCameraElement.prototype.destroy = function () {};

	  HCameraElement.prototype.getBaseElement = function () {
	    return null;
	  };

	  function HImageElement(data, globalData, comp) {
	    this.assetData = globalData.getAssetData(data.refId);
	    this.initElement(data, globalData, comp);
	  }

	  extendPrototype([BaseElement, TransformElement, HBaseElement, HSolidElement, HierarchyElement, FrameElement, RenderableElement], HImageElement);

	  HImageElement.prototype.createContent = function () {
	    var assetPath = this.globalData.getAssetsPath(this.assetData);
	    var img = new Image();

	    if (this.data.hasMask) {
	      this.imageElem = createNS('image');
	      this.imageElem.setAttribute('width', this.assetData.w + 'px');
	      this.imageElem.setAttribute('height', this.assetData.h + 'px');
	      this.imageElem.setAttributeNS('http://www.w3.org/1999/xlink', 'href', assetPath);
	      this.layerElement.appendChild(this.imageElem);
	      this.baseElement.setAttribute('width', this.assetData.w);
	      this.baseElement.setAttribute('height', this.assetData.h);
	    } else {
	      this.layerElement.appendChild(img);
	    }

	    img.crossOrigin = 'anonymous';
	    img.src = assetPath;

	    if (this.data.ln) {
	      this.baseElement.setAttribute('id', this.data.ln);
	    }
	  };

	  function HybridRendererBase(animationItem, config) {
	    this.animationItem = animationItem;
	    this.layers = null;
	    this.renderedFrame = -1;
	    this.renderConfig = {
	      className: config && config.className || '',
	      imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || 'xMidYMid slice',
	      hideOnTransparent: !(config && config.hideOnTransparent === false),
	      filterSize: {
	        width: config && config.filterSize && config.filterSize.width || '400%',
	        height: config && config.filterSize && config.filterSize.height || '400%',
	        x: config && config.filterSize && config.filterSize.x || '-100%',
	        y: config && config.filterSize && config.filterSize.y || '-100%'
	      }
	    };
	    this.globalData = {
	      _mdf: false,
	      frameNum: -1,
	      renderConfig: this.renderConfig
	    };
	    this.pendingElements = [];
	    this.elements = [];
	    this.threeDElements = [];
	    this.destroyed = false;
	    this.camera = null;
	    this.supports3d = true;
	    this.rendererType = 'html';
	  }

	  extendPrototype([BaseRenderer], HybridRendererBase);
	  HybridRendererBase.prototype.buildItem = SVGRenderer.prototype.buildItem;

	  HybridRendererBase.prototype.checkPendingElements = function () {
	    while (this.pendingElements.length) {
	      var element = this.pendingElements.pop();
	      element.checkParenting();
	    }
	  };

	  HybridRendererBase.prototype.appendElementInPos = function (element, pos) {
	    var newDOMElement = element.getBaseElement();

	    if (!newDOMElement) {
	      return;
	    }

	    var layer = this.layers[pos];

	    if (!layer.ddd || !this.supports3d) {
	      if (this.threeDElements) {
	        this.addTo3dContainer(newDOMElement, pos);
	      } else {
	        var i = 0;
	        var nextDOMElement;
	        var nextLayer;
	        var tmpDOMElement;

	        while (i < pos) {
	          if (this.elements[i] && this.elements[i] !== true && this.elements[i].getBaseElement) {
	            nextLayer = this.elements[i];
	            tmpDOMElement = this.layers[i].ddd ? this.getThreeDContainerByPos(i) : nextLayer.getBaseElement();
	            nextDOMElement = tmpDOMElement || nextDOMElement;
	          }

	          i += 1;
	        }

	        if (nextDOMElement) {
	          if (!layer.ddd || !this.supports3d) {
	            this.layerElement.insertBefore(newDOMElement, nextDOMElement);
	          }
	        } else if (!layer.ddd || !this.supports3d) {
	          this.layerElement.appendChild(newDOMElement);
	        }
	      }
	    } else {
	      this.addTo3dContainer(newDOMElement, pos);
	    }
	  };

	  HybridRendererBase.prototype.createShape = function (data) {
	    if (!this.supports3d) {
	      return new SVGShapeElement(data, this.globalData, this);
	    }

	    return new HShapeElement(data, this.globalData, this);
	  };

	  HybridRendererBase.prototype.createText = function (data) {
	    if (!this.supports3d) {
	      return new SVGTextLottieElement(data, this.globalData, this);
	    }

	    return new HTextElement(data, this.globalData, this);
	  };

	  HybridRendererBase.prototype.createCamera = function (data) {
	    this.camera = new HCameraElement(data, this.globalData, this);
	    return this.camera;
	  };

	  HybridRendererBase.prototype.createImage = function (data) {
	    if (!this.supports3d) {
	      return new IImageElement(data, this.globalData, this);
	    }

	    return new HImageElement(data, this.globalData, this);
	  };

	  HybridRendererBase.prototype.createSolid = function (data) {
	    if (!this.supports3d) {
	      return new ISolidElement(data, this.globalData, this);
	    }

	    return new HSolidElement(data, this.globalData, this);
	  };

	  HybridRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;

	  HybridRendererBase.prototype.getThreeDContainerByPos = function (pos) {
	    var i = 0;
	    var len = this.threeDElements.length;

	    while (i < len) {
	      if (this.threeDElements[i].startPos <= pos && this.threeDElements[i].endPos >= pos) {
	        return this.threeDElements[i].perspectiveElem;
	      }

	      i += 1;
	    }

	    return null;
	  };

	  HybridRendererBase.prototype.createThreeDContainer = function (pos, type) {
	    var perspectiveElem = createTag('div');
	    var style;
	    var containerStyle;
	    styleDiv(perspectiveElem);
	    var container = createTag('div');
	    styleDiv(container);

	    if (type === '3d') {
	      style = perspectiveElem.style;
	      style.width = this.globalData.compSize.w + 'px';
	      style.height = this.globalData.compSize.h + 'px';
	      var center = '50% 50%';
	      style.webkitTransformOrigin = center;
	      style.mozTransformOrigin = center;
	      style.transformOrigin = center;
	      containerStyle = container.style;
	      var matrix = 'matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';
	      containerStyle.transform = matrix;
	      containerStyle.webkitTransform = matrix;
	    }

	    perspectiveElem.appendChild(container); // this.resizerElem.appendChild(perspectiveElem);

	    var threeDContainerData = {
	      container: container,
	      perspectiveElem: perspectiveElem,
	      startPos: pos,
	      endPos: pos,
	      type: type
	    };
	    this.threeDElements.push(threeDContainerData);
	    return threeDContainerData;
	  };

	  HybridRendererBase.prototype.build3dContainers = function () {
	    var i;
	    var len = this.layers.length;
	    var lastThreeDContainerData;
	    var currentContainer = '';

	    for (i = 0; i < len; i += 1) {
	      if (this.layers[i].ddd && this.layers[i].ty !== 3) {
	        if (currentContainer !== '3d') {
	          currentContainer = '3d';
	          lastThreeDContainerData = this.createThreeDContainer(i, '3d');
	        }

	        lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i);
	      } else {
	        if (currentContainer !== '2d') {
	          currentContainer = '2d';
	          lastThreeDContainerData = this.createThreeDContainer(i, '2d');
	        }

	        lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i);
	      }
	    }

	    len = this.threeDElements.length;

	    for (i = len - 1; i >= 0; i -= 1) {
	      this.resizerElem.appendChild(this.threeDElements[i].perspectiveElem);
	    }
	  };

	  HybridRendererBase.prototype.addTo3dContainer = function (elem, pos) {
	    var i = 0;
	    var len = this.threeDElements.length;

	    while (i < len) {
	      if (pos <= this.threeDElements[i].endPos) {
	        var j = this.threeDElements[i].startPos;
	        var nextElement;

	        while (j < pos) {
	          if (this.elements[j] && this.elements[j].getBaseElement) {
	            nextElement = this.elements[j].getBaseElement();
	          }

	          j += 1;
	        }

	        if (nextElement) {
	          this.threeDElements[i].container.insertBefore(elem, nextElement);
	        } else {
	          this.threeDElements[i].container.appendChild(elem);
	        }

	        break;
	      }

	      i += 1;
	    }
	  };

	  HybridRendererBase.prototype.configAnimation = function (animData) {
	    var resizerElem = createTag('div');
	    var wrapper = this.animationItem.wrapper;
	    var style = resizerElem.style;
	    style.width = animData.w + 'px';
	    style.height = animData.h + 'px';
	    this.resizerElem = resizerElem;
	    styleDiv(resizerElem);
	    style.transformStyle = 'flat';
	    style.mozTransformStyle = 'flat';
	    style.webkitTransformStyle = 'flat';

	    if (this.renderConfig.className) {
	      resizerElem.setAttribute('class', this.renderConfig.className);
	    }

	    wrapper.appendChild(resizerElem);
	    style.overflow = 'hidden';
	    var svg = createNS('svg');
	    svg.setAttribute('width', '1');
	    svg.setAttribute('height', '1');
	    styleDiv(svg);
	    this.resizerElem.appendChild(svg);
	    var defs = createNS('defs');
	    svg.appendChild(defs);
	    this.data = animData; // Mask animation

	    this.setupGlobalData(animData, svg);
	    this.globalData.defs = defs;
	    this.layers = animData.layers;
	    this.layerElement = this.resizerElem;
	    this.build3dContainers();
	    this.updateContainerSize();
	  };

	  HybridRendererBase.prototype.destroy = function () {
	    if (this.animationItem.wrapper) {
	      this.animationItem.wrapper.innerText = '';
	    }

	    this.animationItem.container = null;
	    this.globalData.defs = null;
	    var i;
	    var len = this.layers ? this.layers.length : 0;

	    for (i = 0; i < len; i += 1) {
	      if (this.elements[i] && this.elements[i].destroy) {
	        this.elements[i].destroy();
	      }
	    }

	    this.elements.length = 0;
	    this.destroyed = true;
	    this.animationItem = null;
	  };

	  HybridRendererBase.prototype.updateContainerSize = function () {
	    var elementWidth = this.animationItem.wrapper.offsetWidth;
	    var elementHeight = this.animationItem.wrapper.offsetHeight;
	    var elementRel = elementWidth / elementHeight;
	    var animationRel = this.globalData.compSize.w / this.globalData.compSize.h;
	    var sx;
	    var sy;
	    var tx;
	    var ty;

	    if (animationRel > elementRel) {
	      sx = elementWidth / this.globalData.compSize.w;
	      sy = elementWidth / this.globalData.compSize.w;
	      tx = 0;
	      ty = (elementHeight - this.globalData.compSize.h * (elementWidth / this.globalData.compSize.w)) / 2;
	    } else {
	      sx = elementHeight / this.globalData.compSize.h;
	      sy = elementHeight / this.globalData.compSize.h;
	      tx = (elementWidth - this.globalData.compSize.w * (elementHeight / this.globalData.compSize.h)) / 2;
	      ty = 0;
	    }

	    var style = this.resizerElem.style;
	    style.webkitTransform = 'matrix3d(' + sx + ',0,0,0,0,' + sy + ',0,0,0,0,1,0,' + tx + ',' + ty + ',0,1)';
	    style.transform = style.webkitTransform;
	  };

	  HybridRendererBase.prototype.renderFrame = SVGRenderer.prototype.renderFrame;

	  HybridRendererBase.prototype.hide = function () {
	    this.resizerElem.style.display = 'none';
	  };

	  HybridRendererBase.prototype.show = function () {
	    this.resizerElem.style.display = 'block';
	  };

	  HybridRendererBase.prototype.initItems = function () {
	    this.buildAllItems();

	    if (this.camera) {
	      this.camera.setup();
	    } else {
	      var cWidth = this.globalData.compSize.w;
	      var cHeight = this.globalData.compSize.h;
	      var i;
	      var len = this.threeDElements.length;

	      for (i = 0; i < len; i += 1) {
	        var style = this.threeDElements[i].perspectiveElem.style;
	        style.webkitPerspective = Math.sqrt(Math.pow(cWidth, 2) + Math.pow(cHeight, 2)) + 'px';
	        style.perspective = style.webkitPerspective;
	      }
	    }
	  };

	  HybridRendererBase.prototype.searchExtraCompositions = function (assets) {
	    var i;
	    var len = assets.length;
	    var floatingContainer = createTag('div');

	    for (i = 0; i < len; i += 1) {
	      if (assets[i].xt) {
	        var comp = this.createComp(assets[i], floatingContainer, this.globalData.comp, null);
	        comp.initExpressions();
	        this.globalData.projectInterface.registerComposition(comp);
	      }
	    }
	  };

	  function HCompElement(data, globalData, comp) {
	    this.layers = data.layers;
	    this.supports3d = !data.hasMask;
	    this.completeLayers = false;
	    this.pendingElements = [];
	    this.elements = this.layers ? createSizedArray(this.layers.length) : [];
	    this.initElement(data, globalData, comp);
	    this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {
	      _placeholder: true
	    };
	  }

	  extendPrototype([HybridRendererBase, ICompElement, HBaseElement], HCompElement);
	  HCompElement.prototype._createBaseContainerElements = HCompElement.prototype.createContainerElements;

	  HCompElement.prototype.createContainerElements = function () {
	    this._createBaseContainerElements(); // divElement.style.clip = 'rect(0px, '+this.data.w+'px, '+this.data.h+'px, 0px)';


	    if (this.data.hasMask) {
	      this.svgElement.setAttribute('width', this.data.w);
	      this.svgElement.setAttribute('height', this.data.h);
	      this.transformedElement = this.baseElement;
	    } else {
	      this.transformedElement = this.layerElement;
	    }
	  };

	  HCompElement.prototype.addTo3dContainer = function (elem, pos) {
	    var j = 0;
	    var nextElement;

	    while (j < pos) {
	      if (this.elements[j] && this.elements[j].getBaseElement) {
	        nextElement = this.elements[j].getBaseElement();
	      }

	      j += 1;
	    }

	    if (nextElement) {
	      this.layerElement.insertBefore(elem, nextElement);
	    } else {
	      this.layerElement.appendChild(elem);
	    }
	  };

	  HCompElement.prototype.createComp = function (data) {
	    if (!this.supports3d) {
	      return new SVGCompElement(data, this.globalData, this);
	    }

	    return new HCompElement(data, this.globalData, this);
	  };

	  function HybridRenderer(animationItem, config) {
	    this.animationItem = animationItem;
	    this.layers = null;
	    this.renderedFrame = -1;
	    this.renderConfig = {
	      className: config && config.className || '',
	      imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || 'xMidYMid slice',
	      hideOnTransparent: !(config && config.hideOnTransparent === false),
	      filterSize: {
	        width: config && config.filterSize && config.filterSize.width || '400%',
	        height: config && config.filterSize && config.filterSize.height || '400%',
	        x: config && config.filterSize && config.filterSize.x || '-100%',
	        y: config && config.filterSize && config.filterSize.y || '-100%'
	      },
	      runExpressions: !config || config.runExpressions === undefined || config.runExpressions
	    };
	    this.globalData = {
	      _mdf: false,
	      frameNum: -1,
	      renderConfig: this.renderConfig
	    };
	    this.pendingElements = [];
	    this.elements = [];
	    this.threeDElements = [];
	    this.destroyed = false;
	    this.camera = null;
	    this.supports3d = true;
	    this.rendererType = 'html';
	  }

	  extendPrototype([HybridRendererBase], HybridRenderer);

	  HybridRenderer.prototype.createComp = function (data) {
	    if (!this.supports3d) {
	      return new SVGCompElement(data, this.globalData, this);
	    }

	    return new HCompElement(data, this.globalData, this);
	  };

	  var CompExpressionInterface = function () {
	    return function (comp) {
	      function _thisLayerFunction(name) {
	        var i = 0;
	        var len = comp.layers.length;

	        while (i < len) {
	          if (comp.layers[i].nm === name || comp.layers[i].ind === name) {
	            return comp.elements[i].layerInterface;
	          }

	          i += 1;
	        }

	        return null; // return {active:false};
	      }

	      Object.defineProperty(_thisLayerFunction, '_name', {
	        value: comp.data.nm
	      });
	      _thisLayerFunction.layer = _thisLayerFunction;
	      _thisLayerFunction.pixelAspect = 1;
	      _thisLayerFunction.height = comp.data.h || comp.globalData.compSize.h;
	      _thisLayerFunction.width = comp.data.w || comp.globalData.compSize.w;
	      _thisLayerFunction.pixelAspect = 1;
	      _thisLayerFunction.frameDuration = 1 / comp.globalData.frameRate;
	      _thisLayerFunction.displayStartTime = 0;
	      _thisLayerFunction.numLayers = comp.layers.length;
	      return _thisLayerFunction;
	    };
	  }();

	  function _typeof$2(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$2 = function _typeof(obj) { return typeof obj; }; } else { _typeof$2 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$2(obj); }

	  /* eslint-disable */

	  /*
	   Copyright 2014 David Bau.

	   Permission is hereby granted, free of charge, to any person obtaining
	   a copy of this software and associated documentation files (the
	   "Software"), to deal in the Software without restriction, including
	   without limitation the rights to use, copy, modify, merge, publish,
	   distribute, sublicense, and/or sell copies of the Software, and to
	   permit persons to whom the Software is furnished to do so, subject to
	   the following conditions:

	   The above copyright notice and this permission notice shall be
	   included in all copies or substantial portions of the Software.

	   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	   SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	   */
	  function seedRandom(pool, math) {
	    //
	    // The following constants are related to IEEE 754 limits.
	    //
	    var global = this,
	        width = 256,
	        // each RC4 output is 0 <= x < 256
	    chunks = 6,
	        // at least six RC4 outputs for each double
	    digits = 52,
	        // there are 52 significant digits in a double
	    rngname = 'random',
	        // rngname: name for Math.random and Math.seedrandom
	    startdenom = math.pow(width, chunks),
	        significance = math.pow(2, digits),
	        overflow = significance * 2,
	        mask = width - 1,
	        nodecrypto; // node.js crypto module, initialized at the bottom.
	    //
	    // seedrandom()
	    // This is the seedrandom function described above.
	    //

	    function seedrandom(seed, options, callback) {
	      var key = [];
	      options = options === true ? {
	        entropy: true
	      } : options || {}; // Flatten the seed string or build one from local entropy if needed.

	      var shortseed = mixkey(flatten(options.entropy ? [seed, tostring(pool)] : seed === null ? autoseed() : seed, 3), key); // Use the seed to initialize an ARC4 generator.

	      var arc4 = new ARC4(key); // This function returns a random double in [0, 1) that contains
	      // randomness in every bit of the mantissa of the IEEE 754 value.

	      var prng = function prng() {
	        var n = arc4.g(chunks),
	            // Start with a numerator n < 2 ^ 48
	        d = startdenom,
	            //   and denominator d = 2 ^ 48.
	        x = 0; //   and no 'extra last byte'.

	        while (n < significance) {
	          // Fill up all significant digits by
	          n = (n + x) * width; //   shifting numerator and

	          d *= width; //   denominator and generating a

	          x = arc4.g(1); //   new least-significant-byte.
	        }

	        while (n >= overflow) {
	          // To avoid rounding up, before adding
	          n /= 2; //   last byte, shift everything

	          d /= 2; //   right using integer math until

	          x >>>= 1; //   we have exactly the desired bits.
	        }

	        return (n + x) / d; // Form the number within [0, 1).
	      };

	      prng.int32 = function () {
	        return arc4.g(4) | 0;
	      };

	      prng.quick = function () {
	        return arc4.g(4) / 0x100000000;
	      };

	      prng["double"] = prng; // Mix the randomness into accumulated entropy.

	      mixkey(tostring(arc4.S), pool); // Calling convention: what to return as a function of prng, seed, is_math.

	      return (options.pass || callback || function (prng, seed, is_math_call, state) {
	        if (state) {
	          // Load the arc4 state from the given state if it has an S array.
	          if (state.S) {
	            copy(state, arc4);
	          } // Only provide the .state method if requested via options.state.


	          prng.state = function () {
	            return copy(arc4, {});
	          };
	        } // If called as a method of Math (Math.seedrandom()), mutate
	        // Math.random because that is how seedrandom.js has worked since v1.0.


	        if (is_math_call) {
	          math[rngname] = prng;
	          return seed;
	        } // Otherwise, it is a newer calling convention, so return the
	        // prng directly.
	        else return prng;
	      })(prng, shortseed, 'global' in options ? options.global : this == math, options.state);
	    }

	    math['seed' + rngname] = seedrandom; //
	    // ARC4
	    //
	    // An ARC4 implementation.  The constructor takes a key in the form of
	    // an array of at most (width) integers that should be 0 <= x < (width).
	    //
	    // The g(count) method returns a pseudorandom integer that concatenates
	    // the next (count) outputs from ARC4.  Its return value is a number x
	    // that is in the range 0 <= x < (width ^ count).
	    //

	    function ARC4(key) {
	      var t,
	          keylen = key.length,
	          me = this,
	          i = 0,
	          j = me.i = me.j = 0,
	          s = me.S = []; // The empty key [] is treated as [0].

	      if (!keylen) {
	        key = [keylen++];
	      } // Set up S using the standard key scheduling algorithm.


	      while (i < width) {
	        s[i] = i++;
	      }

	      for (i = 0; i < width; i++) {
	        s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];
	        s[j] = t;
	      } // The "g" method returns the next (count) outputs as one number.


	      me.g = function (count) {
	        // Using instance members instead of closure state nearly doubles speed.
	        var t,
	            r = 0,
	            i = me.i,
	            j = me.j,
	            s = me.S;

	        while (count--) {
	          t = s[i = mask & i + 1];
	          r = r * width + s[mask & (s[i] = s[j = mask & j + t]) + (s[j] = t)];
	        }

	        me.i = i;
	        me.j = j;
	        return r; // For robust unpredictability, the function call below automatically
	        // discards an initial batch of values.  This is called RC4-drop[256].
	        // See http://google.com/search?q=rsa+fluhrer+response&btnI
	      };
	    } //
	    // copy()
	    // Copies internal state of ARC4 to or from a plain object.
	    //


	    function copy(f, t) {
	      t.i = f.i;
	      t.j = f.j;
	      t.S = f.S.slice();
	      return t;
	    } //
	    // flatten()
	    // Converts an object tree to nested arrays of strings.
	    //


	    function flatten(obj, depth) {
	      var result = [],
	          typ = _typeof$2(obj),
	          prop;

	      if (depth && typ == 'object') {
	        for (prop in obj) {
	          try {
	            result.push(flatten(obj[prop], depth - 1));
	          } catch (e) {}
	        }
	      }

	      return result.length ? result : typ == 'string' ? obj : obj + '\0';
	    } //
	    // mixkey()
	    // Mixes a string seed into a key that is an array of integers, and
	    // returns a shortened string seed that is equivalent to the result key.
	    //


	    function mixkey(seed, key) {
	      var stringseed = seed + '',
	          smear,
	          j = 0;

	      while (j < stringseed.length) {
	        key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);
	      }

	      return tostring(key);
	    } //
	    // autoseed()
	    // Returns an object for autoseeding, using window.crypto and Node crypto
	    // module if available.
	    //


	    function autoseed() {
	      try {
	        if (nodecrypto) ;

	        var out = new Uint8Array(width);
	        (global.crypto || global.msCrypto).getRandomValues(out);
	        return tostring(out);
	      } catch (e) {
	        var browser = global.navigator,
	            plugins = browser && browser.plugins;
	        return [+new Date(), global, plugins, global.screen, tostring(pool)];
	      }
	    } //
	    // tostring()
	    // Converts an array of charcodes to a string
	    //


	    function tostring(a) {
	      return String.fromCharCode.apply(0, a);
	    } //
	    // When seedrandom.js is loaded, we immediately mix a few bits
	    // from the built-in RNG into the entropy pool.  Because we do
	    // not want to interfere with deterministic PRNG state later,
	    // seedrandom will not call math.random on its own again after
	    // initialization.
	    //


	    mixkey(math.random(), pool); //
	    // Nodejs and AMD support: export the implementation as a module using
	    // either convention.
	    //
	    // End anonymous scope, and pass initial values.
	  }

	  function initialize$2(BMMath) {
	    seedRandom([], BMMath);
	  }

	  var propTypes = {
	    SHAPE: 'shape'
	  };

	  function _typeof$1(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$1(obj); }

	  var ExpressionManager = function () {

	    var ob = {};
	    var Math = BMMath;
	    var window = null;
	    var document = null;
	    var XMLHttpRequest = null;
	    var fetch = null;
	    var frames = null;
	    var _lottieGlobal = {};
	    initialize$2(BMMath);

	    function resetFrame() {
	      _lottieGlobal = {};
	    }

	    function $bm_isInstanceOfArray(arr) {
	      return arr.constructor === Array || arr.constructor === Float32Array;
	    }

	    function isNumerable(tOfV, v) {
	      return tOfV === 'number' || v instanceof Number || tOfV === 'boolean' || tOfV === 'string';
	    }

	    function $bm_neg(a) {
	      var tOfA = _typeof$1(a);

	      if (tOfA === 'number' || a instanceof Number || tOfA === 'boolean') {
	        return -a;
	      }

	      if ($bm_isInstanceOfArray(a)) {
	        var i;
	        var lenA = a.length;
	        var retArr = [];

	        for (i = 0; i < lenA; i += 1) {
	          retArr[i] = -a[i];
	        }

	        return retArr;
	      }

	      if (a.propType) {
	        return a.v;
	      }

	      return -a;
	    }

	    var easeInBez = BezierFactory.getBezierEasing(0.333, 0, 0.833, 0.833, 'easeIn').get;
	    var easeOutBez = BezierFactory.getBezierEasing(0.167, 0.167, 0.667, 1, 'easeOut').get;
	    var easeInOutBez = BezierFactory.getBezierEasing(0.33, 0, 0.667, 1, 'easeInOut').get;

	    function sum(a, b) {
	      var tOfA = _typeof$1(a);

	      var tOfB = _typeof$1(b);

	      if (isNumerable(tOfA, a) && isNumerable(tOfB, b) || tOfA === 'string' || tOfB === 'string') {
	        return a + b;
	      }

	      if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
	        a = a.slice(0);
	        a[0] += b;
	        return a;
	      }

	      if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
	        b = b.slice(0);
	        b[0] = a + b[0];
	        return b;
	      }

	      if ($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)) {
	        var i = 0;
	        var lenA = a.length;
	        var lenB = b.length;
	        var retArr = [];

	        while (i < lenA || i < lenB) {
	          if ((typeof a[i] === 'number' || a[i] instanceof Number) && (typeof b[i] === 'number' || b[i] instanceof Number)) {
	            retArr[i] = a[i] + b[i];
	          } else {
	            retArr[i] = b[i] === undefined ? a[i] : a[i] || b[i];
	          }

	          i += 1;
	        }

	        return retArr;
	      }

	      return 0;
	    }

	    var add = sum;

	    function sub(a, b) {
	      var tOfA = _typeof$1(a);

	      var tOfB = _typeof$1(b);

	      if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
	        if (tOfA === 'string') {
	          a = parseInt(a, 10);
	        }

	        if (tOfB === 'string') {
	          b = parseInt(b, 10);
	        }

	        return a - b;
	      }

	      if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
	        a = a.slice(0);
	        a[0] -= b;
	        return a;
	      }

	      if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
	        b = b.slice(0);
	        b[0] = a - b[0];
	        return b;
	      }

	      if ($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)) {
	        var i = 0;
	        var lenA = a.length;
	        var lenB = b.length;
	        var retArr = [];

	        while (i < lenA || i < lenB) {
	          if ((typeof a[i] === 'number' || a[i] instanceof Number) && (typeof b[i] === 'number' || b[i] instanceof Number)) {
	            retArr[i] = a[i] - b[i];
	          } else {
	            retArr[i] = b[i] === undefined ? a[i] : a[i] || b[i];
	          }

	          i += 1;
	        }

	        return retArr;
	      }

	      return 0;
	    }

	    function mul(a, b) {
	      var tOfA = _typeof$1(a);

	      var tOfB = _typeof$1(b);

	      var arr;

	      if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
	        return a * b;
	      }

	      var i;
	      var len;

	      if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
	        len = a.length;
	        arr = createTypedArray('float32', len);

	        for (i = 0; i < len; i += 1) {
	          arr[i] = a[i] * b;
	        }

	        return arr;
	      }

	      if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
	        len = b.length;
	        arr = createTypedArray('float32', len);

	        for (i = 0; i < len; i += 1) {
	          arr[i] = a * b[i];
	        }

	        return arr;
	      }

	      return 0;
	    }

	    function div(a, b) {
	      var tOfA = _typeof$1(a);

	      var tOfB = _typeof$1(b);

	      var arr;

	      if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
	        return a / b;
	      }

	      var i;
	      var len;

	      if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
	        len = a.length;
	        arr = createTypedArray('float32', len);

	        for (i = 0; i < len; i += 1) {
	          arr[i] = a[i] / b;
	        }

	        return arr;
	      }

	      if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
	        len = b.length;
	        arr = createTypedArray('float32', len);

	        for (i = 0; i < len; i += 1) {
	          arr[i] = a / b[i];
	        }

	        return arr;
	      }

	      return 0;
	    }

	    function mod(a, b) {
	      if (typeof a === 'string') {
	        a = parseInt(a, 10);
	      }

	      if (typeof b === 'string') {
	        b = parseInt(b, 10);
	      }

	      return a % b;
	    }

	    var $bm_sum = sum;
	    var $bm_sub = sub;
	    var $bm_mul = mul;
	    var $bm_div = div;
	    var $bm_mod = mod;

	    function clamp(num, min, max) {
	      if (min > max) {
	        var mm = max;
	        max = min;
	        min = mm;
	      }

	      return Math.min(Math.max(num, min), max);
	    }

	    function radiansToDegrees(val) {
	      return val / degToRads;
	    }

	    var radians_to_degrees = radiansToDegrees;

	    function degreesToRadians(val) {
	      return val * degToRads;
	    }

	    var degrees_to_radians = radiansToDegrees;
	    var helperLengthArray = [0, 0, 0, 0, 0, 0];

	    function length(arr1, arr2) {
	      if (typeof arr1 === 'number' || arr1 instanceof Number) {
	        arr2 = arr2 || 0;
	        return Math.abs(arr1 - arr2);
	      }

	      if (!arr2) {
	        arr2 = helperLengthArray;
	      }

	      var i;
	      var len = Math.min(arr1.length, arr2.length);
	      var addedLength = 0;

	      for (i = 0; i < len; i += 1) {
	        addedLength += Math.pow(arr2[i] - arr1[i], 2);
	      }

	      return Math.sqrt(addedLength);
	    }

	    function normalize(vec) {
	      return div(vec, length(vec));
	    }

	    function rgbToHsl(val) {
	      var r = val[0];
	      var g = val[1];
	      var b = val[2];
	      var max = Math.max(r, g, b);
	      var min = Math.min(r, g, b);
	      var h;
	      var s;
	      var l = (max + min) / 2;

	      if (max === min) {
	        h = 0; // achromatic

	        s = 0; // achromatic
	      } else {
	        var d = max - min;
	        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

	        switch (max) {
	          case r:
	            h = (g - b) / d + (g < b ? 6 : 0);
	            break;

	          case g:
	            h = (b - r) / d + 2;
	            break;

	          case b:
	            h = (r - g) / d + 4;
	            break;
	        }

	        h /= 6;
	      }

	      return [h, s, l, val[3]];
	    }

	    function hue2rgb(p, q, t) {
	      if (t < 0) t += 1;
	      if (t > 1) t -= 1;
	      if (t < 1 / 6) return p + (q - p) * 6 * t;
	      if (t < 1 / 2) return q;
	      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
	      return p;
	    }

	    function hslToRgb(val) {
	      var h = val[0];
	      var s = val[1];
	      var l = val[2];
	      var r;
	      var g;
	      var b;

	      if (s === 0) {
	        r = l; // achromatic

	        b = l; // achromatic

	        g = l; // achromatic
	      } else {
	        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	        var p = 2 * l - q;
	        r = hue2rgb(p, q, h + 1 / 3);
	        g = hue2rgb(p, q, h);
	        b = hue2rgb(p, q, h - 1 / 3);
	      }

	      return [r, g, b, val[3]];
	    }

	    function linear(t, tMin, tMax, value1, value2) {
	      if (value1 === undefined || value2 === undefined) {
	        value1 = tMin;
	        value2 = tMax;
	        tMin = 0;
	        tMax = 1;
	      }

	      if (tMax < tMin) {
	        var _tMin = tMax;
	        tMax = tMin;
	        tMin = _tMin;
	      }

	      if (t <= tMin) {
	        return value1;
	      }

	      if (t >= tMax) {
	        return value2;
	      }

	      var perc = tMax === tMin ? 0 : (t - tMin) / (tMax - tMin);

	      if (!value1.length) {
	        return value1 + (value2 - value1) * perc;
	      }

	      var i;
	      var len = value1.length;
	      var arr = createTypedArray('float32', len);

	      for (i = 0; i < len; i += 1) {
	        arr[i] = value1[i] + (value2[i] - value1[i]) * perc;
	      }

	      return arr;
	    }

	    function random(min, max) {
	      if (max === undefined) {
	        if (min === undefined) {
	          min = 0;
	          max = 1;
	        } else {
	          max = min;
	          min = undefined;
	        }
	      }

	      if (max.length) {
	        var i;
	        var len = max.length;

	        if (!min) {
	          min = createTypedArray('float32', len);
	        }

	        var arr = createTypedArray('float32', len);
	        var rnd = BMMath.random();

	        for (i = 0; i < len; i += 1) {
	          arr[i] = min[i] + rnd * (max[i] - min[i]);
	        }

	        return arr;
	      }

	      if (min === undefined) {
	        min = 0;
	      }

	      var rndm = BMMath.random();
	      return min + rndm * (max - min);
	    }

	    function createPath(points, inTangents, outTangents, closed) {
	      var i;
	      var len = points.length;
	      var path = shapePool.newElement();
	      path.setPathData(!!closed, len);
	      var arrPlaceholder = [0, 0];
	      var inVertexPoint;
	      var outVertexPoint;

	      for (i = 0; i < len; i += 1) {
	        inVertexPoint = inTangents && inTangents[i] ? inTangents[i] : arrPlaceholder;
	        outVertexPoint = outTangents && outTangents[i] ? outTangents[i] : arrPlaceholder;
	        path.setTripleAt(points[i][0], points[i][1], outVertexPoint[0] + points[i][0], outVertexPoint[1] + points[i][1], inVertexPoint[0] + points[i][0], inVertexPoint[1] + points[i][1], i, true);
	      }

	      return path;
	    }

	    function initiateExpression(elem, data, property) {
	      // Bail out if we don't want expressions
	      function noOp(_value) {
	        return _value;
	      }

	      if (!elem.globalData.renderConfig.runExpressions) {
	        return noOp;
	      }

	      var val = data.x;
	      var needsVelocity = /velocity(?![\w\d])/.test(val);

	      var _needsRandom = val.indexOf('random') !== -1;

	      var elemType = elem.data.ty;
	      var transform;
	      var $bm_transform;
	      var content;
	      var effect;
	      var thisProperty = property;
	      thisProperty.valueAtTime = thisProperty.getValueAtTime;
	      Object.defineProperty(thisProperty, 'value', {
	        get: function get() {
	          return thisProperty.v;
	        }
	      });
	      elem.comp.frameDuration = 1 / elem.comp.globalData.frameRate;
	      elem.comp.displayStartTime = 0;
	      var inPoint = elem.data.ip / elem.comp.globalData.frameRate;
	      var outPoint = elem.data.op / elem.comp.globalData.frameRate;
	      var width = elem.data.sw ? elem.data.sw : 0;
	      var height = elem.data.sh ? elem.data.sh : 0;
	      var name = elem.data.nm;
	      var loopIn;
	      var loop_in;
	      var loopOut;
	      var loop_out;
	      var smooth;
	      var toWorld;
	      var fromWorld;
	      var fromComp;
	      var toComp;
	      var fromCompToSurface;
	      var position;
	      var rotation;
	      var anchorPoint;
	      var scale;
	      var thisLayer;
	      var thisComp;
	      var mask;
	      var valueAtTime;
	      var velocityAtTime;
	      var scoped_bm_rt; // val = val.replace(/(\\?"|')((http)(s)?(:\/))?\/.*?(\\?"|')/g, "\"\""); // deter potential network calls

	      var expression_function = eval('[function _expression_function(){' + val + ';scoped_bm_rt=$bm_rt}]')[0]; // eslint-disable-line no-eval

	      var numKeys = property.kf ? data.k.length : 0;
	      var active = !this.data || this.data.hd !== true;

	      var wiggle = function wiggle(freq, amp) {
	        var iWiggle;
	        var j;
	        var lenWiggle = this.pv.length ? this.pv.length : 1;
	        var addedAmps = createTypedArray('float32', lenWiggle);
	        freq = 5;
	        var iterations = Math.floor(time * freq);
	        iWiggle = 0;
	        j = 0;

	        while (iWiggle < iterations) {
	          // var rnd = BMMath.random();
	          for (j = 0; j < lenWiggle; j += 1) {
	            addedAmps[j] += -amp + amp * 2 * BMMath.random(); // addedAmps[j] += -amp + amp*2*rnd;
	          }

	          iWiggle += 1;
	        } // var rnd2 = BMMath.random();


	        var periods = time * freq;
	        var perc = periods - Math.floor(periods);
	        var arr = createTypedArray('float32', lenWiggle);

	        if (lenWiggle > 1) {
	          for (j = 0; j < lenWiggle; j += 1) {
	            arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp * 2 * BMMath.random()) * perc; // arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp*2*rnd)*perc;
	            // arr[i] = this.pv[i] + addedAmp + amp1*perc + amp2*(1-perc);
	          }

	          return arr;
	        }

	        return this.pv + addedAmps[0] + (-amp + amp * 2 * BMMath.random()) * perc;
	      }.bind(this);

	      if (thisProperty.loopIn) {
	        loopIn = thisProperty.loopIn.bind(thisProperty);
	        loop_in = loopIn;
	      }

	      if (thisProperty.loopOut) {
	        loopOut = thisProperty.loopOut.bind(thisProperty);
	        loop_out = loopOut;
	      }

	      if (thisProperty.smooth) {
	        smooth = thisProperty.smooth.bind(thisProperty);
	      }

	      function loopInDuration(type, duration) {
	        return loopIn(type, duration, true);
	      }

	      function loopOutDuration(type, duration) {
	        return loopOut(type, duration, true);
	      }

	      if (this.getValueAtTime) {
	        valueAtTime = this.getValueAtTime.bind(this);
	      }

	      if (this.getVelocityAtTime) {
	        velocityAtTime = this.getVelocityAtTime.bind(this);
	      }

	      var comp = elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);

	      function lookAt(elem1, elem2) {
	        var fVec = [elem2[0] - elem1[0], elem2[1] - elem1[1], elem2[2] - elem1[2]];
	        var pitch = Math.atan2(fVec[0], Math.sqrt(fVec[1] * fVec[1] + fVec[2] * fVec[2])) / degToRads;
	        var yaw = -Math.atan2(fVec[1], fVec[2]) / degToRads;
	        return [yaw, pitch, 0];
	      }

	      function easeOut(t, tMin, tMax, val1, val2) {
	        return applyEase(easeOutBez, t, tMin, tMax, val1, val2);
	      }

	      function easeIn(t, tMin, tMax, val1, val2) {
	        return applyEase(easeInBez, t, tMin, tMax, val1, val2);
	      }

	      function ease(t, tMin, tMax, val1, val2) {
	        return applyEase(easeInOutBez, t, tMin, tMax, val1, val2);
	      }

	      function applyEase(fn, t, tMin, tMax, val1, val2) {
	        if (val1 === undefined) {
	          val1 = tMin;
	          val2 = tMax;
	        } else {
	          t = (t - tMin) / (tMax - tMin);
	        }

	        if (t > 1) {
	          t = 1;
	        } else if (t < 0) {
	          t = 0;
	        }

	        var mult = fn(t);

	        if ($bm_isInstanceOfArray(val1)) {
	          var iKey;
	          var lenKey = val1.length;
	          var arr = createTypedArray('float32', lenKey);

	          for (iKey = 0; iKey < lenKey; iKey += 1) {
	            arr[iKey] = (val2[iKey] - val1[iKey]) * mult + val1[iKey];
	          }

	          return arr;
	        }

	        return (val2 - val1) * mult + val1;
	      }

	      function nearestKey(time) {
	        var iKey;
	        var lenKey = data.k.length;
	        var index;
	        var keyTime;

	        if (!data.k.length || typeof data.k[0] === 'number') {
	          index = 0;
	          keyTime = 0;
	        } else {
	          index = -1;
	          time *= elem.comp.globalData.frameRate;

	          if (time < data.k[0].t) {
	            index = 1;
	            keyTime = data.k[0].t;
	          } else {
	            for (iKey = 0; iKey < lenKey - 1; iKey += 1) {
	              if (time === data.k[iKey].t) {
	                index = iKey + 1;
	                keyTime = data.k[iKey].t;
	                break;
	              } else if (time > data.k[iKey].t && time < data.k[iKey + 1].t) {
	                if (time - data.k[iKey].t > data.k[iKey + 1].t - time) {
	                  index = iKey + 2;
	                  keyTime = data.k[iKey + 1].t;
	                } else {
	                  index = iKey + 1;
	                  keyTime = data.k[iKey].t;
	                }

	                break;
	              }
	            }

	            if (index === -1) {
	              index = iKey + 1;
	              keyTime = data.k[iKey].t;
	            }
	          }
	        }

	        var obKey = {};
	        obKey.index = index;
	        obKey.time = keyTime / elem.comp.globalData.frameRate;
	        return obKey;
	      }

	      function key(ind) {
	        var obKey;
	        var iKey;
	        var lenKey;

	        if (!data.k.length || typeof data.k[0] === 'number') {
	          throw new Error('The property has no keyframe at index ' + ind);
	        }

	        ind -= 1;
	        obKey = {
	          time: data.k[ind].t / elem.comp.globalData.frameRate,
	          value: []
	        };
	        var arr = Object.prototype.hasOwnProperty.call(data.k[ind], 's') ? data.k[ind].s : data.k[ind - 1].e;
	        lenKey = arr.length;

	        for (iKey = 0; iKey < lenKey; iKey += 1) {
	          obKey[iKey] = arr[iKey];
	          obKey.value[iKey] = arr[iKey];
	        }

	        return obKey;
	      }

	      function framesToTime(fr, fps) {
	        if (!fps) {
	          fps = elem.comp.globalData.frameRate;
	        }

	        return fr / fps;
	      }

	      function timeToFrames(t, fps) {
	        if (!t && t !== 0) {
	          t = time;
	        }

	        if (!fps) {
	          fps = elem.comp.globalData.frameRate;
	        }

	        return t * fps;
	      }

	      function seedRandom(seed) {
	        BMMath.seedrandom(randSeed + seed);
	      }

	      function sourceRectAtTime() {
	        return elem.sourceRectAtTime();
	      }

	      function substring(init, end) {
	        if (typeof value === 'string') {
	          if (end === undefined) {
	            return value.substring(init);
	          }

	          return value.substring(init, end);
	        }

	        return '';
	      }

	      function substr(init, end) {
	        if (typeof value === 'string') {
	          if (end === undefined) {
	            return value.substr(init);
	          }

	          return value.substr(init, end);
	        }

	        return '';
	      }

	      function posterizeTime(framesPerSecond) {
	        time = framesPerSecond === 0 ? 0 : Math.floor(time * framesPerSecond) / framesPerSecond;
	        value = valueAtTime(time);
	      }

	      var time;
	      var velocity;
	      var value;
	      var text;
	      var textIndex;
	      var textTotal;
	      var selectorValue;
	      var index = elem.data.ind;
	      var hasParent = !!(elem.hierarchy && elem.hierarchy.length);
	      var parent;
	      var randSeed = Math.floor(Math.random() * 1000000);
	      var globalData = elem.globalData;

	      function executeExpression(_value) {
	        // globalData.pushExpression();
	        value = _value;

	        if (this.frameExpressionId === elem.globalData.frameId && this.propType !== 'textSelector') {
	          return value;
	        }

	        if (this.propType === 'textSelector') {
	          textIndex = this.textIndex;
	          textTotal = this.textTotal;
	          selectorValue = this.selectorValue;
	        }

	        if (!thisLayer) {
	          text = elem.layerInterface.text;
	          thisLayer = elem.layerInterface;
	          thisComp = elem.comp.compInterface;
	          toWorld = thisLayer.toWorld.bind(thisLayer);
	          fromWorld = thisLayer.fromWorld.bind(thisLayer);
	          fromComp = thisLayer.fromComp.bind(thisLayer);
	          toComp = thisLayer.toComp.bind(thisLayer);
	          mask = thisLayer.mask ? thisLayer.mask.bind(thisLayer) : null;
	          fromCompToSurface = fromComp;
	        }

	        if (!transform) {
	          transform = elem.layerInterface('ADBE Transform Group');
	          $bm_transform = transform;

	          if (transform) {
	            anchorPoint = transform.anchorPoint;
	            /* position = transform.position;
	                      rotation = transform.rotation;
	                      scale = transform.scale; */
	          }
	        }

	        if (elemType === 4 && !content) {
	          content = thisLayer('ADBE Root Vectors Group');
	        }

	        if (!effect) {
	          effect = thisLayer(4);
	        }

	        hasParent = !!(elem.hierarchy && elem.hierarchy.length);

	        if (hasParent && !parent) {
	          parent = elem.hierarchy[0].layerInterface;
	        }

	        time = this.comp.renderedFrame / this.comp.globalData.frameRate;

	        if (_needsRandom) {
	          seedRandom(randSeed + time);
	        }

	        if (needsVelocity) {
	          velocity = velocityAtTime(time);
	        }

	        expression_function();
	        this.frameExpressionId = elem.globalData.frameId; // TODO: Check if it's possible to return on ShapeInterface the .v value
	        // Changed this to a ternary operation because Rollup failed compiling it correctly

	        scoped_bm_rt = scoped_bm_rt.propType === propTypes.SHAPE ? scoped_bm_rt.v : scoped_bm_rt;
	        return scoped_bm_rt;
	      } // Bundlers will see these as dead code and unless we reference them


	      executeExpression.__preventDeadCodeRemoval = [$bm_transform, anchorPoint, time, velocity, inPoint, outPoint, width, height, name, loop_in, loop_out, smooth, toComp, fromCompToSurface, toWorld, fromWorld, mask, position, rotation, scale, thisComp, numKeys, active, wiggle, loopInDuration, loopOutDuration, comp, lookAt, easeOut, easeIn, ease, nearestKey, key, text, textIndex, textTotal, selectorValue, framesToTime, timeToFrames, sourceRectAtTime, substring, substr, posterizeTime, index, globalData];
	      return executeExpression;
	    }

	    ob.initiateExpression = initiateExpression;
	    ob.__preventDeadCodeRemoval = [window, document, XMLHttpRequest, fetch, frames, $bm_neg, add, $bm_sum, $bm_sub, $bm_mul, $bm_div, $bm_mod, clamp, radians_to_degrees, degreesToRadians, degrees_to_radians, normalize, rgbToHsl, hslToRgb, linear, random, createPath, _lottieGlobal];
	    ob.resetFrame = resetFrame;
	    return ob;
	  }();

	  var Expressions = function () {
	    var ob = {};
	    ob.initExpressions = initExpressions;
	    ob.resetFrame = ExpressionManager.resetFrame;

	    function initExpressions(animation) {
	      var stackCount = 0;
	      var registers = [];

	      function pushExpression() {
	        stackCount += 1;
	      }

	      function popExpression() {
	        stackCount -= 1;

	        if (stackCount === 0) {
	          releaseInstances();
	        }
	      }

	      function registerExpressionProperty(expression) {
	        if (registers.indexOf(expression) === -1) {
	          registers.push(expression);
	        }
	      }

	      function releaseInstances() {
	        var i;
	        var len = registers.length;

	        for (i = 0; i < len; i += 1) {
	          registers[i].release();
	        }

	        registers.length = 0;
	      }

	      animation.renderer.compInterface = CompExpressionInterface(animation.renderer);
	      animation.renderer.globalData.projectInterface.registerComposition(animation.renderer);
	      animation.renderer.globalData.pushExpression = pushExpression;
	      animation.renderer.globalData.popExpression = popExpression;
	      animation.renderer.globalData.registerExpressionProperty = registerExpressionProperty;
	    }

	    return ob;
	  }();

	  var MaskManagerInterface = function () {
	    function MaskInterface(mask, data) {
	      this._mask = mask;
	      this._data = data;
	    }

	    Object.defineProperty(MaskInterface.prototype, 'maskPath', {
	      get: function get() {
	        if (this._mask.prop.k) {
	          this._mask.prop.getValue();
	        }

	        return this._mask.prop;
	      }
	    });
	    Object.defineProperty(MaskInterface.prototype, 'maskOpacity', {
	      get: function get() {
	        if (this._mask.op.k) {
	          this._mask.op.getValue();
	        }

	        return this._mask.op.v * 100;
	      }
	    });

	    var MaskManager = function MaskManager(maskManager) {
	      var _masksInterfaces = createSizedArray(maskManager.viewData.length);

	      var i;
	      var len = maskManager.viewData.length;

	      for (i = 0; i < len; i += 1) {
	        _masksInterfaces[i] = new MaskInterface(maskManager.viewData[i], maskManager.masksProperties[i]);
	      }

	      var maskFunction = function maskFunction(name) {
	        i = 0;

	        while (i < len) {
	          if (maskManager.masksProperties[i].nm === name) {
	            return _masksInterfaces[i];
	          }

	          i += 1;
	        }

	        return null;
	      };

	      return maskFunction;
	    };

	    return MaskManager;
	  }();

	  var ExpressionPropertyInterface = function () {
	    var defaultUnidimensionalValue = {
	      pv: 0,
	      v: 0,
	      mult: 1
	    };
	    var defaultMultidimensionalValue = {
	      pv: [0, 0, 0],
	      v: [0, 0, 0],
	      mult: 1
	    };

	    function completeProperty(expressionValue, property, type) {
	      Object.defineProperty(expressionValue, 'velocity', {
	        get: function get() {
	          return property.getVelocityAtTime(property.comp.currentFrame);
	        }
	      });
	      expressionValue.numKeys = property.keyframes ? property.keyframes.length : 0;

	      expressionValue.key = function (pos) {
	        if (!expressionValue.numKeys) {
	          return 0;
	        }

	        var value = '';

	        if ('s' in property.keyframes[pos - 1]) {
	          value = property.keyframes[pos - 1].s;
	        } else if ('e' in property.keyframes[pos - 2]) {
	          value = property.keyframes[pos - 2].e;
	        } else {
	          value = property.keyframes[pos - 2].s;
	        }

	        var valueProp = type === 'unidimensional' ? new Number(value) : Object.assign({}, value); // eslint-disable-line no-new-wrappers

	        valueProp.time = property.keyframes[pos - 1].t / property.elem.comp.globalData.frameRate;
	        valueProp.value = type === 'unidimensional' ? value[0] : value;
	        return valueProp;
	      };

	      expressionValue.valueAtTime = property.getValueAtTime;
	      expressionValue.speedAtTime = property.getSpeedAtTime;
	      expressionValue.velocityAtTime = property.getVelocityAtTime;
	      expressionValue.propertyGroup = property.propertyGroup;
	    }

	    function UnidimensionalPropertyInterface(property) {
	      if (!property || !('pv' in property)) {
	        property = defaultUnidimensionalValue;
	      }

	      var mult = 1 / property.mult;
	      var val = property.pv * mult;
	      var expressionValue = new Number(val); // eslint-disable-line no-new-wrappers

	      expressionValue.value = val;
	      completeProperty(expressionValue, property, 'unidimensional');
	      return function () {
	        if (property.k) {
	          property.getValue();
	        }

	        val = property.v * mult;

	        if (expressionValue.value !== val) {
	          expressionValue = new Number(val); // eslint-disable-line no-new-wrappers

	          expressionValue.value = val;
	          completeProperty(expressionValue, property, 'unidimensional');
	        }

	        return expressionValue;
	      };
	    }

	    function MultidimensionalPropertyInterface(property) {
	      if (!property || !('pv' in property)) {
	        property = defaultMultidimensionalValue;
	      }

	      var mult = 1 / property.mult;
	      var len = property.data && property.data.l || property.pv.length;
	      var expressionValue = createTypedArray('float32', len);
	      var arrValue = createTypedArray('float32', len);
	      expressionValue.value = arrValue;
	      completeProperty(expressionValue, property, 'multidimensional');
	      return function () {
	        if (property.k) {
	          property.getValue();
	        }

	        for (var i = 0; i < len; i += 1) {
	          arrValue[i] = property.v[i] * mult;
	          expressionValue[i] = arrValue[i];
	        }

	        return expressionValue;
	      };
	    } // TODO: try to avoid using this getter


	    function defaultGetter() {
	      return defaultUnidimensionalValue;
	    }

	    return function (property) {
	      if (!property) {
	        return defaultGetter;
	      }

	      if (property.propType === 'unidimensional') {
	        return UnidimensionalPropertyInterface(property);
	      }

	      return MultidimensionalPropertyInterface(property);
	    };
	  }();

	  var TransformExpressionInterface = function () {
	    return function (transform) {
	      function _thisFunction(name) {
	        switch (name) {
	          case 'scale':
	          case 'Scale':
	          case 'ADBE Scale':
	          case 6:
	            return _thisFunction.scale;

	          case 'rotation':
	          case 'Rotation':
	          case 'ADBE Rotation':
	          case 'ADBE Rotate Z':
	          case 10:
	            return _thisFunction.rotation;

	          case 'ADBE Rotate X':
	            return _thisFunction.xRotation;

	          case 'ADBE Rotate Y':
	            return _thisFunction.yRotation;

	          case 'position':
	          case 'Position':
	          case 'ADBE Position':
	          case 2:
	            return _thisFunction.position;

	          case 'ADBE Position_0':
	            return _thisFunction.xPosition;

	          case 'ADBE Position_1':
	            return _thisFunction.yPosition;

	          case 'ADBE Position_2':
	            return _thisFunction.zPosition;

	          case 'anchorPoint':
	          case 'AnchorPoint':
	          case 'Anchor Point':
	          case 'ADBE AnchorPoint':
	          case 1:
	            return _thisFunction.anchorPoint;

	          case 'opacity':
	          case 'Opacity':
	          case 11:
	            return _thisFunction.opacity;

	          default:
	            return null;
	        }
	      }

	      Object.defineProperty(_thisFunction, 'rotation', {
	        get: ExpressionPropertyInterface(transform.r || transform.rz)
	      });
	      Object.defineProperty(_thisFunction, 'zRotation', {
	        get: ExpressionPropertyInterface(transform.rz || transform.r)
	      });
	      Object.defineProperty(_thisFunction, 'xRotation', {
	        get: ExpressionPropertyInterface(transform.rx)
	      });
	      Object.defineProperty(_thisFunction, 'yRotation', {
	        get: ExpressionPropertyInterface(transform.ry)
	      });
	      Object.defineProperty(_thisFunction, 'scale', {
	        get: ExpressionPropertyInterface(transform.s)
	      });

	      var _px;

	      var _py;

	      var _pz;

	      var _transformFactory;

	      if (transform.p) {
	        _transformFactory = ExpressionPropertyInterface(transform.p);
	      } else {
	        _px = ExpressionPropertyInterface(transform.px);
	        _py = ExpressionPropertyInterface(transform.py);

	        if (transform.pz) {
	          _pz = ExpressionPropertyInterface(transform.pz);
	        }
	      }

	      Object.defineProperty(_thisFunction, 'position', {
	        get: function get() {
	          if (transform.p) {
	            return _transformFactory();
	          }

	          return [_px(), _py(), _pz ? _pz() : 0];
	        }
	      });
	      Object.defineProperty(_thisFunction, 'xPosition', {
	        get: ExpressionPropertyInterface(transform.px)
	      });
	      Object.defineProperty(_thisFunction, 'yPosition', {
	        get: ExpressionPropertyInterface(transform.py)
	      });
	      Object.defineProperty(_thisFunction, 'zPosition', {
	        get: ExpressionPropertyInterface(transform.pz)
	      });
	      Object.defineProperty(_thisFunction, 'anchorPoint', {
	        get: ExpressionPropertyInterface(transform.a)
	      });
	      Object.defineProperty(_thisFunction, 'opacity', {
	        get: ExpressionPropertyInterface(transform.o)
	      });
	      Object.defineProperty(_thisFunction, 'skew', {
	        get: ExpressionPropertyInterface(transform.sk)
	      });
	      Object.defineProperty(_thisFunction, 'skewAxis', {
	        get: ExpressionPropertyInterface(transform.sa)
	      });
	      Object.defineProperty(_thisFunction, 'orientation', {
	        get: ExpressionPropertyInterface(transform.or)
	      });
	      return _thisFunction;
	    };
	  }();

	  var LayerExpressionInterface = function () {
	    function getMatrix(time) {
	      var toWorldMat = new Matrix();

	      if (time !== undefined) {
	        var propMatrix = this._elem.finalTransform.mProp.getValueAtTime(time);

	        propMatrix.clone(toWorldMat);
	      } else {
	        var transformMat = this._elem.finalTransform.mProp;
	        transformMat.applyToMatrix(toWorldMat);
	      }

	      return toWorldMat;
	    }

	    function toWorldVec(arr, time) {
	      var toWorldMat = this.getMatrix(time);
	      toWorldMat.props[12] = 0;
	      toWorldMat.props[13] = 0;
	      toWorldMat.props[14] = 0;
	      return this.applyPoint(toWorldMat, arr);
	    }

	    function toWorld(arr, time) {
	      var toWorldMat = this.getMatrix(time);
	      return this.applyPoint(toWorldMat, arr);
	    }

	    function fromWorldVec(arr, time) {
	      var toWorldMat = this.getMatrix(time);
	      toWorldMat.props[12] = 0;
	      toWorldMat.props[13] = 0;
	      toWorldMat.props[14] = 0;
	      return this.invertPoint(toWorldMat, arr);
	    }

	    function fromWorld(arr, time) {
	      var toWorldMat = this.getMatrix(time);
	      return this.invertPoint(toWorldMat, arr);
	    }

	    function applyPoint(matrix, arr) {
	      if (this._elem.hierarchy && this._elem.hierarchy.length) {
	        var i;
	        var len = this._elem.hierarchy.length;

	        for (i = 0; i < len; i += 1) {
	          this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(matrix);
	        }
	      }

	      return matrix.applyToPointArray(arr[0], arr[1], arr[2] || 0);
	    }

	    function invertPoint(matrix, arr) {
	      if (this._elem.hierarchy && this._elem.hierarchy.length) {
	        var i;
	        var len = this._elem.hierarchy.length;

	        for (i = 0; i < len; i += 1) {
	          this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(matrix);
	        }
	      }

	      return matrix.inversePoint(arr);
	    }

	    function fromComp(arr) {
	      var toWorldMat = new Matrix();
	      toWorldMat.reset();

	      this._elem.finalTransform.mProp.applyToMatrix(toWorldMat);

	      if (this._elem.hierarchy && this._elem.hierarchy.length) {
	        var i;
	        var len = this._elem.hierarchy.length;

	        for (i = 0; i < len; i += 1) {
	          this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(toWorldMat);
	        }

	        return toWorldMat.inversePoint(arr);
	      }

	      return toWorldMat.inversePoint(arr);
	    }

	    function sampleImage() {
	      return [1, 1, 1, 1];
	    }

	    return function (elem) {
	      var transformInterface;

	      function _registerMaskInterface(maskManager) {
	        _thisLayerFunction.mask = new MaskManagerInterface(maskManager, elem);
	      }

	      function _registerEffectsInterface(effects) {
	        _thisLayerFunction.effect = effects;
	      }

	      function _thisLayerFunction(name) {
	        switch (name) {
	          case 'ADBE Root Vectors Group':
	          case 'Contents':
	          case 2:
	            return _thisLayerFunction.shapeInterface;

	          case 1:
	          case 6:
	          case 'Transform':
	          case 'transform':
	          case 'ADBE Transform Group':
	            return transformInterface;

	          case 4:
	          case 'ADBE Effect Parade':
	          case 'effects':
	          case 'Effects':
	            return _thisLayerFunction.effect;

	          case 'ADBE Text Properties':
	            return _thisLayerFunction.textInterface;

	          default:
	            return null;
	        }
	      }

	      _thisLayerFunction.getMatrix = getMatrix;
	      _thisLayerFunction.invertPoint = invertPoint;
	      _thisLayerFunction.applyPoint = applyPoint;
	      _thisLayerFunction.toWorld = toWorld;
	      _thisLayerFunction.toWorldVec = toWorldVec;
	      _thisLayerFunction.fromWorld = fromWorld;
	      _thisLayerFunction.fromWorldVec = fromWorldVec;
	      _thisLayerFunction.toComp = toWorld;
	      _thisLayerFunction.fromComp = fromComp;
	      _thisLayerFunction.sampleImage = sampleImage;
	      _thisLayerFunction.sourceRectAtTime = elem.sourceRectAtTime.bind(elem);
	      _thisLayerFunction._elem = elem;
	      transformInterface = TransformExpressionInterface(elem.finalTransform.mProp);
	      var anchorPointDescriptor = getDescriptor(transformInterface, 'anchorPoint');
	      Object.defineProperties(_thisLayerFunction, {
	        hasParent: {
	          get: function get() {
	            return elem.hierarchy.length;
	          }
	        },
	        parent: {
	          get: function get() {
	            return elem.hierarchy[0].layerInterface;
	          }
	        },
	        rotation: getDescriptor(transformInterface, 'rotation'),
	        scale: getDescriptor(transformInterface, 'scale'),
	        position: getDescriptor(transformInterface, 'position'),
	        opacity: getDescriptor(transformInterface, 'opacity'),
	        anchorPoint: anchorPointDescriptor,
	        anchor_point: anchorPointDescriptor,
	        transform: {
	          get: function get() {
	            return transformInterface;
	          }
	        },
	        active: {
	          get: function get() {
	            return elem.isInRange;
	          }
	        }
	      });
	      _thisLayerFunction.startTime = elem.data.st;
	      _thisLayerFunction.index = elem.data.ind;
	      _thisLayerFunction.source = elem.data.refId;
	      _thisLayerFunction.height = elem.data.ty === 0 ? elem.data.h : 100;
	      _thisLayerFunction.width = elem.data.ty === 0 ? elem.data.w : 100;
	      _thisLayerFunction.inPoint = elem.data.ip / elem.comp.globalData.frameRate;
	      _thisLayerFunction.outPoint = elem.data.op / elem.comp.globalData.frameRate;
	      _thisLayerFunction._name = elem.data.nm;
	      _thisLayerFunction.registerMaskInterface = _registerMaskInterface;
	      _thisLayerFunction.registerEffectsInterface = _registerEffectsInterface;
	      return _thisLayerFunction;
	    };
	  }();

	  var propertyGroupFactory = function () {
	    return function (interfaceFunction, parentPropertyGroup) {
	      return function (val) {
	        val = val === undefined ? 1 : val;

	        if (val <= 0) {
	          return interfaceFunction;
	        }

	        return parentPropertyGroup(val - 1);
	      };
	    };
	  }();

	  var PropertyInterface = function () {
	    return function (propertyName, propertyGroup) {
	      var interfaceFunction = {
	        _name: propertyName
	      };

	      function _propertyGroup(val) {
	        val = val === undefined ? 1 : val;

	        if (val <= 0) {
	          return interfaceFunction;
	        }

	        return propertyGroup(val - 1);
	      }

	      return _propertyGroup;
	    };
	  }();

	  var EffectsExpressionInterface = function () {
	    var ob = {
	      createEffectsInterface: createEffectsInterface
	    };

	    function createEffectsInterface(elem, propertyGroup) {
	      if (elem.effectsManager) {
	        var effectElements = [];
	        var effectsData = elem.data.ef;
	        var i;
	        var len = elem.effectsManager.effectElements.length;

	        for (i = 0; i < len; i += 1) {
	          effectElements.push(createGroupInterface(effectsData[i], elem.effectsManager.effectElements[i], propertyGroup, elem));
	        }

	        var effects = elem.data.ef || [];

	        var groupInterface = function groupInterface(name) {
	          i = 0;
	          len = effects.length;

	          while (i < len) {
	            if (name === effects[i].nm || name === effects[i].mn || name === effects[i].ix) {
	              return effectElements[i];
	            }

	            i += 1;
	          }

	          return null;
	        };

	        Object.defineProperty(groupInterface, 'numProperties', {
	          get: function get() {
	            return effects.length;
	          }
	        });
	        return groupInterface;
	      }

	      return null;
	    }

	    function createGroupInterface(data, elements, propertyGroup, elem) {
	      function groupInterface(name) {
	        var effects = data.ef;
	        var i = 0;
	        var len = effects.length;

	        while (i < len) {
	          if (name === effects[i].nm || name === effects[i].mn || name === effects[i].ix) {
	            if (effects[i].ty === 5) {
	              return effectElements[i];
	            }

	            return effectElements[i]();
	          }

	          i += 1;
	        }

	        throw new Error();
	      }

	      var _propertyGroup = propertyGroupFactory(groupInterface, propertyGroup);

	      var effectElements = [];
	      var i;
	      var len = data.ef.length;

	      for (i = 0; i < len; i += 1) {
	        if (data.ef[i].ty === 5) {
	          effectElements.push(createGroupInterface(data.ef[i], elements.effectElements[i], elements.effectElements[i].propertyGroup, elem));
	        } else {
	          effectElements.push(createValueInterface(elements.effectElements[i], data.ef[i].ty, elem, _propertyGroup));
	        }
	      }

	      if (data.mn === 'ADBE Color Control') {
	        Object.defineProperty(groupInterface, 'color', {
	          get: function get() {
	            return effectElements[0]();
	          }
	        });
	      }

	      Object.defineProperties(groupInterface, {
	        numProperties: {
	          get: function get() {
	            return data.np;
	          }
	        },
	        _name: {
	          value: data.nm
	        },
	        propertyGroup: {
	          value: _propertyGroup
	        }
	      });
	      groupInterface.enabled = data.en !== 0;
	      groupInterface.active = groupInterface.enabled;
	      return groupInterface;
	    }

	    function createValueInterface(element, type, elem, propertyGroup) {
	      var expressionProperty = ExpressionPropertyInterface(element.p);

	      function interfaceFunction() {
	        if (type === 10) {
	          return elem.comp.compInterface(element.p.v);
	        }

	        return expressionProperty();
	      }

	      if (element.p.setGroupProperty) {
	        element.p.setGroupProperty(PropertyInterface('', propertyGroup));
	      }

	      return interfaceFunction;
	    }

	    return ob;
	  }();

	  var ShapePathInterface = function () {
	    return function pathInterfaceFactory(shape, view, propertyGroup) {
	      var prop = view.sh;

	      function interfaceFunction(val) {
	        if (val === 'Shape' || val === 'shape' || val === 'Path' || val === 'path' || val === 'ADBE Vector Shape' || val === 2) {
	          return interfaceFunction.path;
	        }

	        return null;
	      }

	      var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);

	      prop.setGroupProperty(PropertyInterface('Path', _propertyGroup));
	      Object.defineProperties(interfaceFunction, {
	        path: {
	          get: function get() {
	            if (prop.k) {
	              prop.getValue();
	            }

	            return prop;
	          }
	        },
	        shape: {
	          get: function get() {
	            if (prop.k) {
	              prop.getValue();
	            }

	            return prop;
	          }
	        },
	        _name: {
	          value: shape.nm
	        },
	        ix: {
	          value: shape.ix
	        },
	        propertyIndex: {
	          value: shape.ix
	        },
	        mn: {
	          value: shape.mn
	        },
	        propertyGroup: {
	          value: propertyGroup
	        }
	      });
	      return interfaceFunction;
	    };
	  }();

	  var ShapeExpressionInterface = function () {
	    function iterateElements(shapes, view, propertyGroup) {
	      var arr = [];
	      var i;
	      var len = shapes ? shapes.length : 0;

	      for (i = 0; i < len; i += 1) {
	        if (shapes[i].ty === 'gr') {
	          arr.push(groupInterfaceFactory(shapes[i], view[i], propertyGroup));
	        } else if (shapes[i].ty === 'fl') {
	          arr.push(fillInterfaceFactory(shapes[i], view[i], propertyGroup));
	        } else if (shapes[i].ty === 'st') {
	          arr.push(strokeInterfaceFactory(shapes[i], view[i], propertyGroup));
	        } else if (shapes[i].ty === 'tm') {
	          arr.push(trimInterfaceFactory(shapes[i], view[i], propertyGroup));
	        } else if (shapes[i].ty === 'tr') ; else if (shapes[i].ty === 'el') {
	          arr.push(ellipseInterfaceFactory(shapes[i], view[i], propertyGroup));
	        } else if (shapes[i].ty === 'sr') {
	          arr.push(starInterfaceFactory(shapes[i], view[i], propertyGroup));
	        } else if (shapes[i].ty === 'sh') {
	          arr.push(ShapePathInterface(shapes[i], view[i], propertyGroup));
	        } else if (shapes[i].ty === 'rc') {
	          arr.push(rectInterfaceFactory(shapes[i], view[i], propertyGroup));
	        } else if (shapes[i].ty === 'rd') {
	          arr.push(roundedInterfaceFactory(shapes[i], view[i], propertyGroup));
	        } else if (shapes[i].ty === 'rp') {
	          arr.push(repeaterInterfaceFactory(shapes[i], view[i], propertyGroup));
	        } else if (shapes[i].ty === 'gf') {
	          arr.push(gradientFillInterfaceFactory(shapes[i], view[i], propertyGroup));
	        } else {
	          arr.push(defaultInterfaceFactory(shapes[i], view[i]));
	        }
	      }

	      return arr;
	    }

	    function contentsInterfaceFactory(shape, view, propertyGroup) {
	      var interfaces;

	      var interfaceFunction = function _interfaceFunction(value) {
	        var i = 0;
	        var len = interfaces.length;

	        while (i < len) {
	          if (interfaces[i]._name === value || interfaces[i].mn === value || interfaces[i].propertyIndex === value || interfaces[i].ix === value || interfaces[i].ind === value) {
	            return interfaces[i];
	          }

	          i += 1;
	        }

	        if (typeof value === 'number') {
	          return interfaces[value - 1];
	        }

	        return null;
	      };

	      interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
	      interfaces = iterateElements(shape.it, view.it, interfaceFunction.propertyGroup);
	      interfaceFunction.numProperties = interfaces.length;
	      var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1], view.it[view.it.length - 1], interfaceFunction.propertyGroup);
	      interfaceFunction.transform = transformInterface;
	      interfaceFunction.propertyIndex = shape.cix;
	      interfaceFunction._name = shape.nm;
	      return interfaceFunction;
	    }

	    function groupInterfaceFactory(shape, view, propertyGroup) {
	      var interfaceFunction = function _interfaceFunction(value) {
	        switch (value) {
	          case 'ADBE Vectors Group':
	          case 'Contents':
	          case 2:
	            return interfaceFunction.content;
	          // Not necessary for now. Keeping them here in case a new case appears
	          // case 'ADBE Vector Transform Group':
	          // case 3:

	          default:
	            return interfaceFunction.transform;
	        }
	      };

	      interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
	      var content = contentsInterfaceFactory(shape, view, interfaceFunction.propertyGroup);
	      var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1], view.it[view.it.length - 1], interfaceFunction.propertyGroup);
	      interfaceFunction.content = content;
	      interfaceFunction.transform = transformInterface;
	      Object.defineProperty(interfaceFunction, '_name', {
	        get: function get() {
	          return shape.nm;
	        }
	      }); // interfaceFunction.content = interfaceFunction;

	      interfaceFunction.numProperties = shape.np;
	      interfaceFunction.propertyIndex = shape.ix;
	      interfaceFunction.nm = shape.nm;
	      interfaceFunction.mn = shape.mn;
	      return interfaceFunction;
	    }

	    function fillInterfaceFactory(shape, view, propertyGroup) {
	      function interfaceFunction(val) {
	        if (val === 'Color' || val === 'color') {
	          return interfaceFunction.color;
	        }

	        if (val === 'Opacity' || val === 'opacity') {
	          return interfaceFunction.opacity;
	        }

	        return null;
	      }

	      Object.defineProperties(interfaceFunction, {
	        color: {
	          get: ExpressionPropertyInterface(view.c)
	        },
	        opacity: {
	          get: ExpressionPropertyInterface(view.o)
	        },
	        _name: {
	          value: shape.nm
	        },
	        mn: {
	          value: shape.mn
	        }
	      });
	      view.c.setGroupProperty(PropertyInterface('Color', propertyGroup));
	      view.o.setGroupProperty(PropertyInterface('Opacity', propertyGroup));
	      return interfaceFunction;
	    }

	    function gradientFillInterfaceFactory(shape, view, propertyGroup) {
	      function interfaceFunction(val) {
	        if (val === 'Start Point' || val === 'start point') {
	          return interfaceFunction.startPoint;
	        }

	        if (val === 'End Point' || val === 'end point') {
	          return interfaceFunction.endPoint;
	        }

	        if (val === 'Opacity' || val === 'opacity') {
	          return interfaceFunction.opacity;
	        }

	        return null;
	      }

	      Object.defineProperties(interfaceFunction, {
	        startPoint: {
	          get: ExpressionPropertyInterface(view.s)
	        },
	        endPoint: {
	          get: ExpressionPropertyInterface(view.e)
	        },
	        opacity: {
	          get: ExpressionPropertyInterface(view.o)
	        },
	        type: {
	          get: function get() {
	            return 'a';
	          }
	        },
	        _name: {
	          value: shape.nm
	        },
	        mn: {
	          value: shape.mn
	        }
	      });
	      view.s.setGroupProperty(PropertyInterface('Start Point', propertyGroup));
	      view.e.setGroupProperty(PropertyInterface('End Point', propertyGroup));
	      view.o.setGroupProperty(PropertyInterface('Opacity', propertyGroup));
	      return interfaceFunction;
	    }

	    function defaultInterfaceFactory() {
	      function interfaceFunction() {
	        return null;
	      }

	      return interfaceFunction;
	    }

	    function strokeInterfaceFactory(shape, view, propertyGroup) {
	      var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);

	      var _dashPropertyGroup = propertyGroupFactory(dashOb, _propertyGroup);

	      function addPropertyToDashOb(i) {
	        Object.defineProperty(dashOb, shape.d[i].nm, {
	          get: ExpressionPropertyInterface(view.d.dataProps[i].p)
	        });
	      }

	      var i;
	      var len = shape.d ? shape.d.length : 0;
	      var dashOb = {};

	      for (i = 0; i < len; i += 1) {
	        addPropertyToDashOb(i);
	        view.d.dataProps[i].p.setGroupProperty(_dashPropertyGroup);
	      }

	      function interfaceFunction(val) {
	        if (val === 'Color' || val === 'color') {
	          return interfaceFunction.color;
	        }

	        if (val === 'Opacity' || val === 'opacity') {
	          return interfaceFunction.opacity;
	        }

	        if (val === 'Stroke Width' || val === 'stroke width') {
	          return interfaceFunction.strokeWidth;
	        }

	        return null;
	      }

	      Object.defineProperties(interfaceFunction, {
	        color: {
	          get: ExpressionPropertyInterface(view.c)
	        },
	        opacity: {
	          get: ExpressionPropertyInterface(view.o)
	        },
	        strokeWidth: {
	          get: ExpressionPropertyInterface(view.w)
	        },
	        dash: {
	          get: function get() {
	            return dashOb;
	          }
	        },
	        _name: {
	          value: shape.nm
	        },
	        mn: {
	          value: shape.mn
	        }
	      });
	      view.c.setGroupProperty(PropertyInterface('Color', _propertyGroup));
	      view.o.setGroupProperty(PropertyInterface('Opacity', _propertyGroup));
	      view.w.setGroupProperty(PropertyInterface('Stroke Width', _propertyGroup));
	      return interfaceFunction;
	    }

	    function trimInterfaceFactory(shape, view, propertyGroup) {
	      function interfaceFunction(val) {
	        if (val === shape.e.ix || val === 'End' || val === 'end') {
	          return interfaceFunction.end;
	        }

	        if (val === shape.s.ix) {
	          return interfaceFunction.start;
	        }

	        if (val === shape.o.ix) {
	          return interfaceFunction.offset;
	        }

	        return null;
	      }

	      var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);

	      interfaceFunction.propertyIndex = shape.ix;
	      view.s.setGroupProperty(PropertyInterface('Start', _propertyGroup));
	      view.e.setGroupProperty(PropertyInterface('End', _propertyGroup));
	      view.o.setGroupProperty(PropertyInterface('Offset', _propertyGroup));
	      interfaceFunction.propertyIndex = shape.ix;
	      interfaceFunction.propertyGroup = propertyGroup;
	      Object.defineProperties(interfaceFunction, {
	        start: {
	          get: ExpressionPropertyInterface(view.s)
	        },
	        end: {
	          get: ExpressionPropertyInterface(view.e)
	        },
	        offset: {
	          get: ExpressionPropertyInterface(view.o)
	        },
	        _name: {
	          value: shape.nm
	        }
	      });
	      interfaceFunction.mn = shape.mn;
	      return interfaceFunction;
	    }

	    function transformInterfaceFactory(shape, view, propertyGroup) {
	      function interfaceFunction(value) {
	        if (shape.a.ix === value || value === 'Anchor Point') {
	          return interfaceFunction.anchorPoint;
	        }

	        if (shape.o.ix === value || value === 'Opacity') {
	          return interfaceFunction.opacity;
	        }

	        if (shape.p.ix === value || value === 'Position') {
	          return interfaceFunction.position;
	        }

	        if (shape.r.ix === value || value === 'Rotation' || value === 'ADBE Vector Rotation') {
	          return interfaceFunction.rotation;
	        }

	        if (shape.s.ix === value || value === 'Scale') {
	          return interfaceFunction.scale;
	        }

	        if (shape.sk && shape.sk.ix === value || value === 'Skew') {
	          return interfaceFunction.skew;
	        }

	        if (shape.sa && shape.sa.ix === value || value === 'Skew Axis') {
	          return interfaceFunction.skewAxis;
	        }

	        return null;
	      }

	      var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);

	      view.transform.mProps.o.setGroupProperty(PropertyInterface('Opacity', _propertyGroup));
	      view.transform.mProps.p.setGroupProperty(PropertyInterface('Position', _propertyGroup));
	      view.transform.mProps.a.setGroupProperty(PropertyInterface('Anchor Point', _propertyGroup));
	      view.transform.mProps.s.setGroupProperty(PropertyInterface('Scale', _propertyGroup));
	      view.transform.mProps.r.setGroupProperty(PropertyInterface('Rotation', _propertyGroup));

	      if (view.transform.mProps.sk) {
	        view.transform.mProps.sk.setGroupProperty(PropertyInterface('Skew', _propertyGroup));
	        view.transform.mProps.sa.setGroupProperty(PropertyInterface('Skew Angle', _propertyGroup));
	      }

	      view.transform.op.setGroupProperty(PropertyInterface('Opacity', _propertyGroup));
	      Object.defineProperties(interfaceFunction, {
	        opacity: {
	          get: ExpressionPropertyInterface(view.transform.mProps.o)
	        },
	        position: {
	          get: ExpressionPropertyInterface(view.transform.mProps.p)
	        },
	        anchorPoint: {
	          get: ExpressionPropertyInterface(view.transform.mProps.a)
	        },
	        scale: {
	          get: ExpressionPropertyInterface(view.transform.mProps.s)
	        },
	        rotation: {
	          get: ExpressionPropertyInterface(view.transform.mProps.r)
	        },
	        skew: {
	          get: ExpressionPropertyInterface(view.transform.mProps.sk)
	        },
	        skewAxis: {
	          get: ExpressionPropertyInterface(view.transform.mProps.sa)
	        },
	        _name: {
	          value: shape.nm
	        }
	      });
	      interfaceFunction.ty = 'tr';
	      interfaceFunction.mn = shape.mn;
	      interfaceFunction.propertyGroup = propertyGroup;
	      return interfaceFunction;
	    }

	    function ellipseInterfaceFactory(shape, view, propertyGroup) {
	      function interfaceFunction(value) {
	        if (shape.p.ix === value) {
	          return interfaceFunction.position;
	        }

	        if (shape.s.ix === value) {
	          return interfaceFunction.size;
	        }

	        return null;
	      }

	      var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);

	      interfaceFunction.propertyIndex = shape.ix;
	      var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
	      prop.s.setGroupProperty(PropertyInterface('Size', _propertyGroup));
	      prop.p.setGroupProperty(PropertyInterface('Position', _propertyGroup));
	      Object.defineProperties(interfaceFunction, {
	        size: {
	          get: ExpressionPropertyInterface(prop.s)
	        },
	        position: {
	          get: ExpressionPropertyInterface(prop.p)
	        },
	        _name: {
	          value: shape.nm
	        }
	      });
	      interfaceFunction.mn = shape.mn;
	      return interfaceFunction;
	    }

	    function starInterfaceFactory(shape, view, propertyGroup) {
	      function interfaceFunction(value) {
	        if (shape.p.ix === value) {
	          return interfaceFunction.position;
	        }

	        if (shape.r.ix === value) {
	          return interfaceFunction.rotation;
	        }

	        if (shape.pt.ix === value) {
	          return interfaceFunction.points;
	        }

	        if (shape.or.ix === value || value === 'ADBE Vector Star Outer Radius') {
	          return interfaceFunction.outerRadius;
	        }

	        if (shape.os.ix === value) {
	          return interfaceFunction.outerRoundness;
	        }

	        if (shape.ir && (shape.ir.ix === value || value === 'ADBE Vector Star Inner Radius')) {
	          return interfaceFunction.innerRadius;
	        }

	        if (shape.is && shape.is.ix === value) {
	          return interfaceFunction.innerRoundness;
	        }

	        return null;
	      }

	      var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);

	      var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
	      interfaceFunction.propertyIndex = shape.ix;
	      prop.or.setGroupProperty(PropertyInterface('Outer Radius', _propertyGroup));
	      prop.os.setGroupProperty(PropertyInterface('Outer Roundness', _propertyGroup));
	      prop.pt.setGroupProperty(PropertyInterface('Points', _propertyGroup));
	      prop.p.setGroupProperty(PropertyInterface('Position', _propertyGroup));
	      prop.r.setGroupProperty(PropertyInterface('Rotation', _propertyGroup));

	      if (shape.ir) {
	        prop.ir.setGroupProperty(PropertyInterface('Inner Radius', _propertyGroup));
	        prop.is.setGroupProperty(PropertyInterface('Inner Roundness', _propertyGroup));
	      }

	      Object.defineProperties(interfaceFunction, {
	        position: {
	          get: ExpressionPropertyInterface(prop.p)
	        },
	        rotation: {
	          get: ExpressionPropertyInterface(prop.r)
	        },
	        points: {
	          get: ExpressionPropertyInterface(prop.pt)
	        },
	        outerRadius: {
	          get: ExpressionPropertyInterface(prop.or)
	        },
	        outerRoundness: {
	          get: ExpressionPropertyInterface(prop.os)
	        },
	        innerRadius: {
	          get: ExpressionPropertyInterface(prop.ir)
	        },
	        innerRoundness: {
	          get: ExpressionPropertyInterface(prop.is)
	        },
	        _name: {
	          value: shape.nm
	        }
	      });
	      interfaceFunction.mn = shape.mn;
	      return interfaceFunction;
	    }

	    function rectInterfaceFactory(shape, view, propertyGroup) {
	      function interfaceFunction(value) {
	        if (shape.p.ix === value) {
	          return interfaceFunction.position;
	        }

	        if (shape.r.ix === value) {
	          return interfaceFunction.roundness;
	        }

	        if (shape.s.ix === value || value === 'Size' || value === 'ADBE Vector Rect Size') {
	          return interfaceFunction.size;
	        }

	        return null;
	      }

	      var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);

	      var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
	      interfaceFunction.propertyIndex = shape.ix;
	      prop.p.setGroupProperty(PropertyInterface('Position', _propertyGroup));
	      prop.s.setGroupProperty(PropertyInterface('Size', _propertyGroup));
	      prop.r.setGroupProperty(PropertyInterface('Rotation', _propertyGroup));
	      Object.defineProperties(interfaceFunction, {
	        position: {
	          get: ExpressionPropertyInterface(prop.p)
	        },
	        roundness: {
	          get: ExpressionPropertyInterface(prop.r)
	        },
	        size: {
	          get: ExpressionPropertyInterface(prop.s)
	        },
	        _name: {
	          value: shape.nm
	        }
	      });
	      interfaceFunction.mn = shape.mn;
	      return interfaceFunction;
	    }

	    function roundedInterfaceFactory(shape, view, propertyGroup) {
	      function interfaceFunction(value) {
	        if (shape.r.ix === value || value === 'Round Corners 1') {
	          return interfaceFunction.radius;
	        }

	        return null;
	      }

	      var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);

	      var prop = view;
	      interfaceFunction.propertyIndex = shape.ix;
	      prop.rd.setGroupProperty(PropertyInterface('Radius', _propertyGroup));
	      Object.defineProperties(interfaceFunction, {
	        radius: {
	          get: ExpressionPropertyInterface(prop.rd)
	        },
	        _name: {
	          value: shape.nm
	        }
	      });
	      interfaceFunction.mn = shape.mn;
	      return interfaceFunction;
	    }

	    function repeaterInterfaceFactory(shape, view, propertyGroup) {
	      function interfaceFunction(value) {
	        if (shape.c.ix === value || value === 'Copies') {
	          return interfaceFunction.copies;
	        }

	        if (shape.o.ix === value || value === 'Offset') {
	          return interfaceFunction.offset;
	        }

	        return null;
	      }

	      var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);

	      var prop = view;
	      interfaceFunction.propertyIndex = shape.ix;
	      prop.c.setGroupProperty(PropertyInterface('Copies', _propertyGroup));
	      prop.o.setGroupProperty(PropertyInterface('Offset', _propertyGroup));
	      Object.defineProperties(interfaceFunction, {
	        copies: {
	          get: ExpressionPropertyInterface(prop.c)
	        },
	        offset: {
	          get: ExpressionPropertyInterface(prop.o)
	        },
	        _name: {
	          value: shape.nm
	        }
	      });
	      interfaceFunction.mn = shape.mn;
	      return interfaceFunction;
	    }

	    return function (shapes, view, propertyGroup) {
	      var interfaces;

	      function _interfaceFunction(value) {
	        if (typeof value === 'number') {
	          value = value === undefined ? 1 : value;

	          if (value === 0) {
	            return propertyGroup;
	          }

	          return interfaces[value - 1];
	        }

	        var i = 0;
	        var len = interfaces.length;

	        while (i < len) {
	          if (interfaces[i]._name === value) {
	            return interfaces[i];
	          }

	          i += 1;
	        }

	        return null;
	      }

	      function parentGroupWrapper() {
	        return propertyGroup;
	      }

	      _interfaceFunction.propertyGroup = propertyGroupFactory(_interfaceFunction, parentGroupWrapper);
	      interfaces = iterateElements(shapes, view, _interfaceFunction.propertyGroup);
	      _interfaceFunction.numProperties = interfaces.length;
	      _interfaceFunction._name = 'Contents';
	      return _interfaceFunction;
	    };
	  }();

	  var TextExpressionInterface = function () {
	    return function (elem) {
	      var _sourceText;

	      function _thisLayerFunction(name) {
	        switch (name) {
	          case 'ADBE Text Document':
	            return _thisLayerFunction.sourceText;

	          default:
	            return null;
	        }
	      }

	      Object.defineProperty(_thisLayerFunction, 'sourceText', {
	        get: function get() {
	          elem.textProperty.getValue();
	          var stringValue = elem.textProperty.currentData.t;

	          if (!_sourceText || stringValue !== _sourceText.value) {
	            _sourceText = new String(stringValue); // eslint-disable-line no-new-wrappers
	            // If stringValue is an empty string, eval returns undefined, so it has to be returned as a String primitive

	            _sourceText.value = stringValue || new String(stringValue); // eslint-disable-line no-new-wrappers

	            Object.defineProperty(_sourceText, 'style', {
	              get: function get() {
	                return {
	                  fillColor: elem.textProperty.currentData.fc
	                };
	              }
	            });
	          }

	          return _sourceText;
	        }
	      });
	      return _thisLayerFunction;
	    };
	  }();

	  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

	  var FootageInterface = function () {
	    var outlineInterfaceFactory = function outlineInterfaceFactory(elem) {
	      var currentPropertyName = '';
	      var currentProperty = elem.getFootageData();

	      function init() {
	        currentPropertyName = '';
	        currentProperty = elem.getFootageData();
	        return searchProperty;
	      }

	      function searchProperty(value) {
	        if (currentProperty[value]) {
	          currentPropertyName = value;
	          currentProperty = currentProperty[value];

	          if (_typeof(currentProperty) === 'object') {
	            return searchProperty;
	          }

	          return currentProperty;
	        }

	        var propertyNameIndex = value.indexOf(currentPropertyName);

	        if (propertyNameIndex !== -1) {
	          var index = parseInt(value.substr(propertyNameIndex + currentPropertyName.length), 10);
	          currentProperty = currentProperty[index];

	          if (_typeof(currentProperty) === 'object') {
	            return searchProperty;
	          }

	          return currentProperty;
	        }

	        return '';
	      }

	      return init;
	    };

	    var dataInterfaceFactory = function dataInterfaceFactory(elem) {
	      function interfaceFunction(value) {
	        if (value === 'Outline') {
	          return interfaceFunction.outlineInterface();
	        }

	        return null;
	      }

	      interfaceFunction._name = 'Outline';
	      interfaceFunction.outlineInterface = outlineInterfaceFactory(elem);
	      return interfaceFunction;
	    };

	    return function (elem) {
	      function _interfaceFunction(value) {
	        if (value === 'Data') {
	          return _interfaceFunction.dataInterface;
	        }

	        return null;
	      }

	      _interfaceFunction._name = 'Data';
	      _interfaceFunction.dataInterface = dataInterfaceFactory(elem);
	      return _interfaceFunction;
	    };
	  }();

	  var interfaces = {
	    layer: LayerExpressionInterface,
	    effects: EffectsExpressionInterface,
	    comp: CompExpressionInterface,
	    shape: ShapeExpressionInterface,
	    text: TextExpressionInterface,
	    footage: FootageInterface
	  };

	  function getInterface(type) {
	    return interfaces[type] || null;
	  }

	  var expressionHelpers = function () {
	    function searchExpressions(elem, data, prop) {
	      if (data.x) {
	        prop.k = true;
	        prop.x = true;
	        prop.initiateExpression = ExpressionManager.initiateExpression;
	        prop.effectsSequence.push(prop.initiateExpression(elem, data, prop).bind(prop));
	      }
	    }

	    function getValueAtTime(frameNum) {
	      frameNum *= this.elem.globalData.frameRate;
	      frameNum -= this.offsetTime;

	      if (frameNum !== this._cachingAtTime.lastFrame) {
	        this._cachingAtTime.lastIndex = this._cachingAtTime.lastFrame < frameNum ? this._cachingAtTime.lastIndex : 0;
	        this._cachingAtTime.value = this.interpolateValue(frameNum, this._cachingAtTime);
	        this._cachingAtTime.lastFrame = frameNum;
	      }

	      return this._cachingAtTime.value;
	    }

	    function getSpeedAtTime(frameNum) {
	      var delta = -0.01;
	      var v1 = this.getValueAtTime(frameNum);
	      var v2 = this.getValueAtTime(frameNum + delta);
	      var speed = 0;

	      if (v1.length) {
	        var i;

	        for (i = 0; i < v1.length; i += 1) {
	          speed += Math.pow(v2[i] - v1[i], 2);
	        }

	        speed = Math.sqrt(speed) * 100;
	      } else {
	        speed = 0;
	      }

	      return speed;
	    }

	    function getVelocityAtTime(frameNum) {
	      if (this.vel !== undefined) {
	        return this.vel;
	      }

	      var delta = -0.001; // frameNum += this.elem.data.st;

	      var v1 = this.getValueAtTime(frameNum);
	      var v2 = this.getValueAtTime(frameNum + delta);
	      var velocity;

	      if (v1.length) {
	        velocity = createTypedArray('float32', v1.length);
	        var i;

	        for (i = 0; i < v1.length; i += 1) {
	          // removing frameRate
	          // if needed, don't add it here
	          // velocity[i] = this.elem.globalData.frameRate*((v2[i] - v1[i])/delta);
	          velocity[i] = (v2[i] - v1[i]) / delta;
	        }
	      } else {
	        velocity = (v2 - v1) / delta;
	      }

	      return velocity;
	    }

	    function getStaticValueAtTime() {
	      return this.pv;
	    }

	    function setGroupProperty(propertyGroup) {
	      this.propertyGroup = propertyGroup;
	    }

	    return {
	      searchExpressions: searchExpressions,
	      getSpeedAtTime: getSpeedAtTime,
	      getVelocityAtTime: getVelocityAtTime,
	      getValueAtTime: getValueAtTime,
	      getStaticValueAtTime: getStaticValueAtTime,
	      setGroupProperty: setGroupProperty
	    };
	  }();

	  function addPropertyDecorator() {
	    function loopOut(type, duration, durationFlag) {
	      if (!this.k || !this.keyframes) {
	        return this.pv;
	      }

	      type = type ? type.toLowerCase() : '';
	      var currentFrame = this.comp.renderedFrame;
	      var keyframes = this.keyframes;
	      var lastKeyFrame = keyframes[keyframes.length - 1].t;

	      if (currentFrame <= lastKeyFrame) {
	        return this.pv;
	      }

	      var cycleDuration;
	      var firstKeyFrame;

	      if (!durationFlag) {
	        if (!duration || duration > keyframes.length - 1) {
	          duration = keyframes.length - 1;
	        }

	        firstKeyFrame = keyframes[keyframes.length - 1 - duration].t;
	        cycleDuration = lastKeyFrame - firstKeyFrame;
	      } else {
	        if (!duration) {
	          cycleDuration = Math.max(0, lastKeyFrame - this.elem.data.ip);
	        } else {
	          cycleDuration = Math.abs(lastKeyFrame - this.elem.comp.globalData.frameRate * duration);
	        }

	        firstKeyFrame = lastKeyFrame - cycleDuration;
	      }

	      var i;
	      var len;
	      var ret;

	      if (type === 'pingpong') {
	        var iterations = Math.floor((currentFrame - firstKeyFrame) / cycleDuration);

	        if (iterations % 2 !== 0) {
	          return this.getValueAtTime((cycleDuration - (currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0); // eslint-disable-line
	        }
	      } else if (type === 'offset') {
	        var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
	        var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
	        var current = this.getValueAtTime(((currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0); // eslint-disable-line

	        var repeats = Math.floor((currentFrame - firstKeyFrame) / cycleDuration);

	        if (this.pv.length) {
	          ret = new Array(initV.length);
	          len = ret.length;

	          for (i = 0; i < len; i += 1) {
	            ret[i] = (endV[i] - initV[i]) * repeats + current[i];
	          }

	          return ret;
	        }

	        return (endV - initV) * repeats + current;
	      } else if (type === 'continue') {
	        var lastValue = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
	        var nextLastValue = this.getValueAtTime((lastKeyFrame - 0.001) / this.comp.globalData.frameRate, 0);

	        if (this.pv.length) {
	          ret = new Array(lastValue.length);
	          len = ret.length;

	          for (i = 0; i < len; i += 1) {
	            ret[i] = lastValue[i] + (lastValue[i] - nextLastValue[i]) * ((currentFrame - lastKeyFrame) / this.comp.globalData.frameRate) / 0.0005; // eslint-disable-line
	          }

	          return ret;
	        }

	        return lastValue + (lastValue - nextLastValue) * ((currentFrame - lastKeyFrame) / 0.001);
	      }

	      return this.getValueAtTime(((currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0); // eslint-disable-line
	    }

	    function loopIn(type, duration, durationFlag) {
	      if (!this.k) {
	        return this.pv;
	      }

	      type = type ? type.toLowerCase() : '';
	      var currentFrame = this.comp.renderedFrame;
	      var keyframes = this.keyframes;
	      var firstKeyFrame = keyframes[0].t;

	      if (currentFrame >= firstKeyFrame) {
	        return this.pv;
	      }

	      var cycleDuration;
	      var lastKeyFrame;

	      if (!durationFlag) {
	        if (!duration || duration > keyframes.length - 1) {
	          duration = keyframes.length - 1;
	        }

	        lastKeyFrame = keyframes[duration].t;
	        cycleDuration = lastKeyFrame - firstKeyFrame;
	      } else {
	        if (!duration) {
	          cycleDuration = Math.max(0, this.elem.data.op - firstKeyFrame);
	        } else {
	          cycleDuration = Math.abs(this.elem.comp.globalData.frameRate * duration);
	        }

	        lastKeyFrame = firstKeyFrame + cycleDuration;
	      }

	      var i;
	      var len;
	      var ret;

	      if (type === 'pingpong') {
	        var iterations = Math.floor((firstKeyFrame - currentFrame) / cycleDuration);

	        if (iterations % 2 === 0) {
	          return this.getValueAtTime(((firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0); // eslint-disable-line
	        }
	      } else if (type === 'offset') {
	        var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
	        var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
	        var current = this.getValueAtTime((cycleDuration - (firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
	        var repeats = Math.floor((firstKeyFrame - currentFrame) / cycleDuration) + 1;

	        if (this.pv.length) {
	          ret = new Array(initV.length);
	          len = ret.length;

	          for (i = 0; i < len; i += 1) {
	            ret[i] = current[i] - (endV[i] - initV[i]) * repeats;
	          }

	          return ret;
	        }

	        return current - (endV - initV) * repeats;
	      } else if (type === 'continue') {
	        var firstValue = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
	        var nextFirstValue = this.getValueAtTime((firstKeyFrame + 0.001) / this.comp.globalData.frameRate, 0);

	        if (this.pv.length) {
	          ret = new Array(firstValue.length);
	          len = ret.length;

	          for (i = 0; i < len; i += 1) {
	            ret[i] = firstValue[i] + (firstValue[i] - nextFirstValue[i]) * (firstKeyFrame - currentFrame) / 0.001;
	          }

	          return ret;
	        }

	        return firstValue + (firstValue - nextFirstValue) * (firstKeyFrame - currentFrame) / 0.001;
	      }

	      return this.getValueAtTime((cycleDuration - ((firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame)) / this.comp.globalData.frameRate, 0); // eslint-disable-line
	    }

	    function smooth(width, samples) {
	      if (!this.k) {
	        return this.pv;
	      }

	      width = (width || 0.4) * 0.5;
	      samples = Math.floor(samples || 5);

	      if (samples <= 1) {
	        return this.pv;
	      }

	      var currentTime = this.comp.renderedFrame / this.comp.globalData.frameRate;
	      var initFrame = currentTime - width;
	      var endFrame = currentTime + width;
	      var sampleFrequency = samples > 1 ? (endFrame - initFrame) / (samples - 1) : 1;
	      var i = 0;
	      var j = 0;
	      var value;

	      if (this.pv.length) {
	        value = createTypedArray('float32', this.pv.length);
	      } else {
	        value = 0;
	      }

	      var sampleValue;

	      while (i < samples) {
	        sampleValue = this.getValueAtTime(initFrame + i * sampleFrequency);

	        if (this.pv.length) {
	          for (j = 0; j < this.pv.length; j += 1) {
	            value[j] += sampleValue[j];
	          }
	        } else {
	          value += sampleValue;
	        }

	        i += 1;
	      }

	      if (this.pv.length) {
	        for (j = 0; j < this.pv.length; j += 1) {
	          value[j] /= samples;
	        }
	      } else {
	        value /= samples;
	      }

	      return value;
	    }

	    function getTransformValueAtTime(time) {
	      if (!this._transformCachingAtTime) {
	        this._transformCachingAtTime = {
	          v: new Matrix()
	        };
	      } /// /


	      var matrix = this._transformCachingAtTime.v;
	      matrix.cloneFromProps(this.pre.props);

	      if (this.appliedTransformations < 1) {
	        var anchor = this.a.getValueAtTime(time);
	        matrix.translate(-anchor[0] * this.a.mult, -anchor[1] * this.a.mult, anchor[2] * this.a.mult);
	      }

	      if (this.appliedTransformations < 2) {
	        var scale = this.s.getValueAtTime(time);
	        matrix.scale(scale[0] * this.s.mult, scale[1] * this.s.mult, scale[2] * this.s.mult);
	      }

	      if (this.sk && this.appliedTransformations < 3) {
	        var skew = this.sk.getValueAtTime(time);
	        var skewAxis = this.sa.getValueAtTime(time);
	        matrix.skewFromAxis(-skew * this.sk.mult, skewAxis * this.sa.mult);
	      }

	      if (this.r && this.appliedTransformations < 4) {
	        var rotation = this.r.getValueAtTime(time);
	        matrix.rotate(-rotation * this.r.mult);
	      } else if (!this.r && this.appliedTransformations < 4) {
	        var rotationZ = this.rz.getValueAtTime(time);
	        var rotationY = this.ry.getValueAtTime(time);
	        var rotationX = this.rx.getValueAtTime(time);
	        var orientation = this.or.getValueAtTime(time);
	        matrix.rotateZ(-rotationZ * this.rz.mult).rotateY(rotationY * this.ry.mult).rotateX(rotationX * this.rx.mult).rotateZ(-orientation[2] * this.or.mult).rotateY(orientation[1] * this.or.mult).rotateX(orientation[0] * this.or.mult);
	      }

	      if (this.data.p && this.data.p.s) {
	        var positionX = this.px.getValueAtTime(time);
	        var positionY = this.py.getValueAtTime(time);

	        if (this.data.p.z) {
	          var positionZ = this.pz.getValueAtTime(time);
	          matrix.translate(positionX * this.px.mult, positionY * this.py.mult, -positionZ * this.pz.mult);
	        } else {
	          matrix.translate(positionX * this.px.mult, positionY * this.py.mult, 0);
	        }
	      } else {
	        var position = this.p.getValueAtTime(time);
	        matrix.translate(position[0] * this.p.mult, position[1] * this.p.mult, -position[2] * this.p.mult);
	      }

	      return matrix; /// /
	    }

	    function getTransformStaticValueAtTime() {
	      return this.v.clone(new Matrix());
	    }

	    var getTransformProperty = TransformPropertyFactory.getTransformProperty;

	    TransformPropertyFactory.getTransformProperty = function (elem, data, container) {
	      var prop = getTransformProperty(elem, data, container);

	      if (prop.dynamicProperties.length) {
	        prop.getValueAtTime = getTransformValueAtTime.bind(prop);
	      } else {
	        prop.getValueAtTime = getTransformStaticValueAtTime.bind(prop);
	      }

	      prop.setGroupProperty = expressionHelpers.setGroupProperty;
	      return prop;
	    };

	    var propertyGetProp = PropertyFactory.getProp;

	    PropertyFactory.getProp = function (elem, data, type, mult, container) {
	      var prop = propertyGetProp(elem, data, type, mult, container); // prop.getVelocityAtTime = getVelocityAtTime;
	      // prop.loopOut = loopOut;
	      // prop.loopIn = loopIn;

	      if (prop.kf) {
	        prop.getValueAtTime = expressionHelpers.getValueAtTime.bind(prop);
	      } else {
	        prop.getValueAtTime = expressionHelpers.getStaticValueAtTime.bind(prop);
	      }

	      prop.setGroupProperty = expressionHelpers.setGroupProperty;
	      prop.loopOut = loopOut;
	      prop.loopIn = loopIn;
	      prop.smooth = smooth;
	      prop.getVelocityAtTime = expressionHelpers.getVelocityAtTime.bind(prop);
	      prop.getSpeedAtTime = expressionHelpers.getSpeedAtTime.bind(prop);
	      prop.numKeys = data.a === 1 ? data.k.length : 0;
	      prop.propertyIndex = data.ix;
	      var value = 0;

	      if (type !== 0) {
	        value = createTypedArray('float32', data.a === 1 ? data.k[0].s.length : data.k.length);
	      }

	      prop._cachingAtTime = {
	        lastFrame: initialDefaultFrame,
	        lastIndex: 0,
	        value: value
	      };
	      expressionHelpers.searchExpressions(elem, data, prop);

	      if (prop.k) {
	        container.addDynamicProperty(prop);
	      }

	      return prop;
	    };

	    function getShapeValueAtTime(frameNum) {
	      // For now this caching object is created only when needed instead of creating it when the shape is initialized.
	      if (!this._cachingAtTime) {
	        this._cachingAtTime = {
	          shapeValue: shapePool.clone(this.pv),
	          lastIndex: 0,
	          lastTime: initialDefaultFrame
	        };
	      }

	      frameNum *= this.elem.globalData.frameRate;
	      frameNum -= this.offsetTime;

	      if (frameNum !== this._cachingAtTime.lastTime) {
	        this._cachingAtTime.lastIndex = this._cachingAtTime.lastTime < frameNum ? this._caching.lastIndex : 0;
	        this._cachingAtTime.lastTime = frameNum;
	        this.interpolateShape(frameNum, this._cachingAtTime.shapeValue, this._cachingAtTime);
	      }

	      return this._cachingAtTime.shapeValue;
	    }

	    var ShapePropertyConstructorFunction = ShapePropertyFactory.getConstructorFunction();
	    var KeyframedShapePropertyConstructorFunction = ShapePropertyFactory.getKeyframedConstructorFunction();

	    function ShapeExpressions() {}

	    ShapeExpressions.prototype = {
	      vertices: function vertices(prop, time) {
	        if (this.k) {
	          this.getValue();
	        }

	        var shapePath = this.v;

	        if (time !== undefined) {
	          shapePath = this.getValueAtTime(time, 0);
	        }

	        var i;
	        var len = shapePath._length;
	        var vertices = shapePath[prop];
	        var points = shapePath.v;
	        var arr = createSizedArray(len);

	        for (i = 0; i < len; i += 1) {
	          if (prop === 'i' || prop === 'o') {
	            arr[i] = [vertices[i][0] - points[i][0], vertices[i][1] - points[i][1]];
	          } else {
	            arr[i] = [vertices[i][0], vertices[i][1]];
	          }
	        }

	        return arr;
	      },
	      points: function points(time) {
	        return this.vertices('v', time);
	      },
	      inTangents: function inTangents(time) {
	        return this.vertices('i', time);
	      },
	      outTangents: function outTangents(time) {
	        return this.vertices('o', time);
	      },
	      isClosed: function isClosed() {
	        return this.v.c;
	      },
	      pointOnPath: function pointOnPath(perc, time) {
	        var shapePath = this.v;

	        if (time !== undefined) {
	          shapePath = this.getValueAtTime(time, 0);
	        }

	        if (!this._segmentsLength) {
	          this._segmentsLength = bez.getSegmentsLength(shapePath);
	        }

	        var segmentsLength = this._segmentsLength;
	        var lengths = segmentsLength.lengths;
	        var lengthPos = segmentsLength.totalLength * perc;
	        var i = 0;
	        var len = lengths.length;
	        var accumulatedLength = 0;
	        var pt;

	        while (i < len) {
	          if (accumulatedLength + lengths[i].addedLength > lengthPos) {
	            var initIndex = i;
	            var endIndex = shapePath.c && i === len - 1 ? 0 : i + 1;
	            var segmentPerc = (lengthPos - accumulatedLength) / lengths[i].addedLength;
	            pt = bez.getPointInSegment(shapePath.v[initIndex], shapePath.v[endIndex], shapePath.o[initIndex], shapePath.i[endIndex], segmentPerc, lengths[i]);
	            break;
	          } else {
	            accumulatedLength += lengths[i].addedLength;
	          }

	          i += 1;
	        }

	        if (!pt) {
	          pt = shapePath.c ? [shapePath.v[0][0], shapePath.v[0][1]] : [shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1]];
	        }

	        return pt;
	      },
	      vectorOnPath: function vectorOnPath(perc, time, vectorType) {
	        // perc doesn't use triple equality because it can be a Number object as well as a primitive.
	        if (perc == 1) {
	          // eslint-disable-line eqeqeq
	          perc = this.v.c;
	        } else if (perc == 0) {
	          // eslint-disable-line eqeqeq
	          perc = 0.999;
	        }

	        var pt1 = this.pointOnPath(perc, time);
	        var pt2 = this.pointOnPath(perc + 0.001, time);
	        var xLength = pt2[0] - pt1[0];
	        var yLength = pt2[1] - pt1[1];
	        var magnitude = Math.sqrt(Math.pow(xLength, 2) + Math.pow(yLength, 2));

	        if (magnitude === 0) {
	          return [0, 0];
	        }

	        var unitVector = vectorType === 'tangent' ? [xLength / magnitude, yLength / magnitude] : [-yLength / magnitude, xLength / magnitude];
	        return unitVector;
	      },
	      tangentOnPath: function tangentOnPath(perc, time) {
	        return this.vectorOnPath(perc, time, 'tangent');
	      },
	      normalOnPath: function normalOnPath(perc, time) {
	        return this.vectorOnPath(perc, time, 'normal');
	      },
	      setGroupProperty: expressionHelpers.setGroupProperty,
	      getValueAtTime: expressionHelpers.getStaticValueAtTime
	    };
	    extendPrototype([ShapeExpressions], ShapePropertyConstructorFunction);
	    extendPrototype([ShapeExpressions], KeyframedShapePropertyConstructorFunction);
	    KeyframedShapePropertyConstructorFunction.prototype.getValueAtTime = getShapeValueAtTime;
	    KeyframedShapePropertyConstructorFunction.prototype.initiateExpression = ExpressionManager.initiateExpression;
	    var propertyGetShapeProp = ShapePropertyFactory.getShapeProp;

	    ShapePropertyFactory.getShapeProp = function (elem, data, type, arr, trims) {
	      var prop = propertyGetShapeProp(elem, data, type, arr, trims);
	      prop.propertyIndex = data.ix;
	      prop.lock = false;

	      if (type === 3) {
	        expressionHelpers.searchExpressions(elem, data.pt, prop);
	      } else if (type === 4) {
	        expressionHelpers.searchExpressions(elem, data.ks, prop);
	      }

	      if (prop.k) {
	        elem.addDynamicProperty(prop);
	      }

	      return prop;
	    };
	  }

	  function initialize$1() {
	    addPropertyDecorator();
	  }

	  function addDecorator() {
	    function searchExpressions() {
	      if (this.data.d.x) {
	        this.calculateExpression = ExpressionManager.initiateExpression.bind(this)(this.elem, this.data.d, this);
	        this.addEffect(this.getExpressionValue.bind(this));
	        return true;
	      }

	      return null;
	    }

	    TextProperty.prototype.getExpressionValue = function (currentValue, text) {
	      var newValue = this.calculateExpression(text);

	      if (currentValue.t !== newValue) {
	        var newData = {};
	        this.copyData(newData, currentValue);
	        newData.t = newValue.toString();
	        newData.__complete = false;
	        return newData;
	      }

	      return currentValue;
	    };

	    TextProperty.prototype.searchProperty = function () {
	      var isKeyframed = this.searchKeyframes();
	      var hasExpressions = this.searchExpressions();
	      this.kf = isKeyframed || hasExpressions;
	      return this.kf;
	    };

	    TextProperty.prototype.searchExpressions = searchExpressions;
	  }

	  function initialize() {
	    addDecorator();
	  }

	  function SVGComposableEffect() {}

	  SVGComposableEffect.prototype = {
	    createMergeNode: function createMergeNode(resultId, ins) {
	      var feMerge = createNS('feMerge');
	      feMerge.setAttribute('result', resultId);
	      var feMergeNode;
	      var i;

	      for (i = 0; i < ins.length; i += 1) {
	        feMergeNode = createNS('feMergeNode');
	        feMergeNode.setAttribute('in', ins[i]);
	        feMerge.appendChild(feMergeNode);
	        feMerge.appendChild(feMergeNode);
	      }

	      return feMerge;
	    }
	  };

	  var linearFilterValue = '0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0';

	  function SVGTintFilter(filter, filterManager, elem, id, source) {
	    this.filterManager = filterManager;
	    var feColorMatrix = createNS('feColorMatrix');
	    feColorMatrix.setAttribute('type', 'matrix');
	    feColorMatrix.setAttribute('color-interpolation-filters', 'linearRGB');
	    feColorMatrix.setAttribute('values', linearFilterValue + ' 1 0');
	    this.linearFilter = feColorMatrix;
	    feColorMatrix.setAttribute('result', id + '_tint_1');
	    filter.appendChild(feColorMatrix);
	    feColorMatrix = createNS('feColorMatrix');
	    feColorMatrix.setAttribute('type', 'matrix');
	    feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
	    feColorMatrix.setAttribute('values', '1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');
	    feColorMatrix.setAttribute('result', id + '_tint_2');
	    filter.appendChild(feColorMatrix);
	    this.matrixFilter = feColorMatrix;
	    var feMerge = this.createMergeNode(id, [source, id + '_tint_1', id + '_tint_2']);
	    filter.appendChild(feMerge);
	  }

	  extendPrototype([SVGComposableEffect], SVGTintFilter);

	  SVGTintFilter.prototype.renderFrame = function (forceRender) {
	    if (forceRender || this.filterManager._mdf) {
	      var colorBlack = this.filterManager.effectElements[0].p.v;
	      var colorWhite = this.filterManager.effectElements[1].p.v;
	      var opacity = this.filterManager.effectElements[2].p.v / 100;
	      this.linearFilter.setAttribute('values', linearFilterValue + ' ' + opacity + ' 0');
	      this.matrixFilter.setAttribute('values', colorWhite[0] - colorBlack[0] + ' 0 0 0 ' + colorBlack[0] + ' ' + (colorWhite[1] - colorBlack[1]) + ' 0 0 0 ' + colorBlack[1] + ' ' + (colorWhite[2] - colorBlack[2]) + ' 0 0 0 ' + colorBlack[2] + ' 0 0 0 1 0');
	    }
	  };

	  function SVGFillFilter(filter, filterManager, elem, id) {
	    this.filterManager = filterManager;
	    var feColorMatrix = createNS('feColorMatrix');
	    feColorMatrix.setAttribute('type', 'matrix');
	    feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
	    feColorMatrix.setAttribute('values', '1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');
	    feColorMatrix.setAttribute('result', id);
	    filter.appendChild(feColorMatrix);
	    this.matrixFilter = feColorMatrix;
	  }

	  SVGFillFilter.prototype.renderFrame = function (forceRender) {
	    if (forceRender || this.filterManager._mdf) {
	      var color = this.filterManager.effectElements[2].p.v;
	      var opacity = this.filterManager.effectElements[6].p.v;
	      this.matrixFilter.setAttribute('values', '0 0 0 0 ' + color[0] + ' 0 0 0 0 ' + color[1] + ' 0 0 0 0 ' + color[2] + ' 0 0 0 ' + opacity + ' 0');
	    }
	  };

	  function SVGStrokeEffect(fil, filterManager, elem) {
	    this.initialized = false;
	    this.filterManager = filterManager;
	    this.elem = elem;
	    this.paths = [];
	  }

	  SVGStrokeEffect.prototype.initialize = function () {
	    var elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
	    var path;
	    var groupPath;
	    var i;
	    var len;

	    if (this.filterManager.effectElements[1].p.v === 1) {
	      len = this.elem.maskManager.masksProperties.length;
	      i = 0;
	    } else {
	      i = this.filterManager.effectElements[0].p.v - 1;
	      len = i + 1;
	    }

	    groupPath = createNS('g');
	    groupPath.setAttribute('fill', 'none');
	    groupPath.setAttribute('stroke-linecap', 'round');
	    groupPath.setAttribute('stroke-dashoffset', 1);

	    for (i; i < len; i += 1) {
	      path = createNS('path');
	      groupPath.appendChild(path);
	      this.paths.push({
	        p: path,
	        m: i
	      });
	    }

	    if (this.filterManager.effectElements[10].p.v === 3) {
	      var mask = createNS('mask');
	      var id = createElementID();
	      mask.setAttribute('id', id);
	      mask.setAttribute('mask-type', 'alpha');
	      mask.appendChild(groupPath);
	      this.elem.globalData.defs.appendChild(mask);
	      var g = createNS('g');
	      g.setAttribute('mask', 'url(' + getLocationHref() + '#' + id + ')');

	      while (elemChildren[0]) {
	        g.appendChild(elemChildren[0]);
	      }

	      this.elem.layerElement.appendChild(g);
	      this.masker = mask;
	      groupPath.setAttribute('stroke', '#fff');
	    } else if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
	      if (this.filterManager.effectElements[10].p.v === 2) {
	        elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;

	        while (elemChildren.length) {
	          this.elem.layerElement.removeChild(elemChildren[0]);
	        }
	      }

	      this.elem.layerElement.appendChild(groupPath);
	      this.elem.layerElement.removeAttribute('mask');
	      groupPath.setAttribute('stroke', '#fff');
	    }

	    this.initialized = true;
	    this.pathMasker = groupPath;
	  };

	  SVGStrokeEffect.prototype.renderFrame = function (forceRender) {
	    if (!this.initialized) {
	      this.initialize();
	    }

	    var i;
	    var len = this.paths.length;
	    var mask;
	    var path;

	    for (i = 0; i < len; i += 1) {
	      if (this.paths[i].m !== -1) {
	        mask = this.elem.maskManager.viewData[this.paths[i].m];
	        path = this.paths[i].p;

	        if (forceRender || this.filterManager._mdf || mask.prop._mdf) {
	          path.setAttribute('d', mask.lastPath);
	        }

	        if (forceRender || this.filterManager.effectElements[9].p._mdf || this.filterManager.effectElements[4].p._mdf || this.filterManager.effectElements[7].p._mdf || this.filterManager.effectElements[8].p._mdf || mask.prop._mdf) {
	          var dasharrayValue;

	          if (this.filterManager.effectElements[7].p.v !== 0 || this.filterManager.effectElements[8].p.v !== 100) {
	            var s = Math.min(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;
	            var e = Math.max(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;
	            var l = path.getTotalLength();
	            dasharrayValue = '0 0 0 ' + l * s + ' ';
	            var lineLength = l * (e - s);
	            var segment = 1 + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;
	            var units = Math.floor(lineLength / segment);
	            var j;

	            for (j = 0; j < units; j += 1) {
	              dasharrayValue += '1 ' + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01 + ' ';
	            }

	            dasharrayValue += '0 ' + l * 10 + ' 0 0';
	          } else {
	            dasharrayValue = '1 ' + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;
	          }

	          path.setAttribute('stroke-dasharray', dasharrayValue);
	        }
	      }
	    }

	    if (forceRender || this.filterManager.effectElements[4].p._mdf) {
	      this.pathMasker.setAttribute('stroke-width', this.filterManager.effectElements[4].p.v * 2);
	    }

	    if (forceRender || this.filterManager.effectElements[6].p._mdf) {
	      this.pathMasker.setAttribute('opacity', this.filterManager.effectElements[6].p.v);
	    }

	    if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
	      if (forceRender || this.filterManager.effectElements[3].p._mdf) {
	        var color = this.filterManager.effectElements[3].p.v;
	        this.pathMasker.setAttribute('stroke', 'rgb(' + bmFloor(color[0] * 255) + ',' + bmFloor(color[1] * 255) + ',' + bmFloor(color[2] * 255) + ')');
	      }
	    }
	  };

	  function SVGTritoneFilter(filter, filterManager, elem, id) {
	    this.filterManager = filterManager;
	    var feColorMatrix = createNS('feColorMatrix');
	    feColorMatrix.setAttribute('type', 'matrix');
	    feColorMatrix.setAttribute('color-interpolation-filters', 'linearRGB');
	    feColorMatrix.setAttribute('values', '0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0');
	    filter.appendChild(feColorMatrix);
	    var feComponentTransfer = createNS('feComponentTransfer');
	    feComponentTransfer.setAttribute('color-interpolation-filters', 'sRGB');
	    feComponentTransfer.setAttribute('result', id);
	    this.matrixFilter = feComponentTransfer;
	    var feFuncR = createNS('feFuncR');
	    feFuncR.setAttribute('type', 'table');
	    feComponentTransfer.appendChild(feFuncR);
	    this.feFuncR = feFuncR;
	    var feFuncG = createNS('feFuncG');
	    feFuncG.setAttribute('type', 'table');
	    feComponentTransfer.appendChild(feFuncG);
	    this.feFuncG = feFuncG;
	    var feFuncB = createNS('feFuncB');
	    feFuncB.setAttribute('type', 'table');
	    feComponentTransfer.appendChild(feFuncB);
	    this.feFuncB = feFuncB;
	    filter.appendChild(feComponentTransfer);
	  }

	  SVGTritoneFilter.prototype.renderFrame = function (forceRender) {
	    if (forceRender || this.filterManager._mdf) {
	      var color1 = this.filterManager.effectElements[0].p.v;
	      var color2 = this.filterManager.effectElements[1].p.v;
	      var color3 = this.filterManager.effectElements[2].p.v;
	      var tableR = color3[0] + ' ' + color2[0] + ' ' + color1[0];
	      var tableG = color3[1] + ' ' + color2[1] + ' ' + color1[1];
	      var tableB = color3[2] + ' ' + color2[2] + ' ' + color1[2];
	      this.feFuncR.setAttribute('tableValues', tableR);
	      this.feFuncG.setAttribute('tableValues', tableG);
	      this.feFuncB.setAttribute('tableValues', tableB);
	    }
	  };

	  function SVGProLevelsFilter(filter, filterManager, elem, id) {
	    this.filterManager = filterManager;
	    var effectElements = this.filterManager.effectElements;
	    var feComponentTransfer = createNS('feComponentTransfer'); // Red

	    if (effectElements[10].p.k || effectElements[10].p.v !== 0 || effectElements[11].p.k || effectElements[11].p.v !== 1 || effectElements[12].p.k || effectElements[12].p.v !== 1 || effectElements[13].p.k || effectElements[13].p.v !== 0 || effectElements[14].p.k || effectElements[14].p.v !== 1) {
	      this.feFuncR = this.createFeFunc('feFuncR', feComponentTransfer);
	    } // Green


	    if (effectElements[17].p.k || effectElements[17].p.v !== 0 || effectElements[18].p.k || effectElements[18].p.v !== 1 || effectElements[19].p.k || effectElements[19].p.v !== 1 || effectElements[20].p.k || effectElements[20].p.v !== 0 || effectElements[21].p.k || effectElements[21].p.v !== 1) {
	      this.feFuncG = this.createFeFunc('feFuncG', feComponentTransfer);
	    } // Blue


	    if (effectElements[24].p.k || effectElements[24].p.v !== 0 || effectElements[25].p.k || effectElements[25].p.v !== 1 || effectElements[26].p.k || effectElements[26].p.v !== 1 || effectElements[27].p.k || effectElements[27].p.v !== 0 || effectElements[28].p.k || effectElements[28].p.v !== 1) {
	      this.feFuncB = this.createFeFunc('feFuncB', feComponentTransfer);
	    } // Alpha


	    if (effectElements[31].p.k || effectElements[31].p.v !== 0 || effectElements[32].p.k || effectElements[32].p.v !== 1 || effectElements[33].p.k || effectElements[33].p.v !== 1 || effectElements[34].p.k || effectElements[34].p.v !== 0 || effectElements[35].p.k || effectElements[35].p.v !== 1) {
	      this.feFuncA = this.createFeFunc('feFuncA', feComponentTransfer);
	    } // RGB


	    if (this.feFuncR || this.feFuncG || this.feFuncB || this.feFuncA) {
	      feComponentTransfer.setAttribute('color-interpolation-filters', 'sRGB');
	      filter.appendChild(feComponentTransfer);
	    }

	    if (effectElements[3].p.k || effectElements[3].p.v !== 0 || effectElements[4].p.k || effectElements[4].p.v !== 1 || effectElements[5].p.k || effectElements[5].p.v !== 1 || effectElements[6].p.k || effectElements[6].p.v !== 0 || effectElements[7].p.k || effectElements[7].p.v !== 1) {
	      feComponentTransfer = createNS('feComponentTransfer');
	      feComponentTransfer.setAttribute('color-interpolation-filters', 'sRGB');
	      feComponentTransfer.setAttribute('result', id);
	      filter.appendChild(feComponentTransfer);
	      this.feFuncRComposed = this.createFeFunc('feFuncR', feComponentTransfer);
	      this.feFuncGComposed = this.createFeFunc('feFuncG', feComponentTransfer);
	      this.feFuncBComposed = this.createFeFunc('feFuncB', feComponentTransfer);
	    }
	  }

	  SVGProLevelsFilter.prototype.createFeFunc = function (type, feComponentTransfer) {
	    var feFunc = createNS(type);
	    feFunc.setAttribute('type', 'table');
	    feComponentTransfer.appendChild(feFunc);
	    return feFunc;
	  };

	  SVGProLevelsFilter.prototype.getTableValue = function (inputBlack, inputWhite, gamma, outputBlack, outputWhite) {
	    var cnt = 0;
	    var segments = 256;
	    var perc;
	    var min = Math.min(inputBlack, inputWhite);
	    var max = Math.max(inputBlack, inputWhite);
	    var table = Array.call(null, {
	      length: segments
	    });
	    var colorValue;
	    var pos = 0;
	    var outputDelta = outputWhite - outputBlack;
	    var inputDelta = inputWhite - inputBlack;

	    while (cnt <= 256) {
	      perc = cnt / 256;

	      if (perc <= min) {
	        colorValue = inputDelta < 0 ? outputWhite : outputBlack;
	      } else if (perc >= max) {
	        colorValue = inputDelta < 0 ? outputBlack : outputWhite;
	      } else {
	        colorValue = outputBlack + outputDelta * Math.pow((perc - inputBlack) / inputDelta, 1 / gamma);
	      }

	      table[pos] = colorValue;
	      pos += 1;
	      cnt += 256 / (segments - 1);
	    }

	    return table.join(' ');
	  };

	  SVGProLevelsFilter.prototype.renderFrame = function (forceRender) {
	    if (forceRender || this.filterManager._mdf) {
	      var val;
	      var effectElements = this.filterManager.effectElements;

	      if (this.feFuncRComposed && (forceRender || effectElements[3].p._mdf || effectElements[4].p._mdf || effectElements[5].p._mdf || effectElements[6].p._mdf || effectElements[7].p._mdf)) {
	        val = this.getTableValue(effectElements[3].p.v, effectElements[4].p.v, effectElements[5].p.v, effectElements[6].p.v, effectElements[7].p.v);
	        this.feFuncRComposed.setAttribute('tableValues', val);
	        this.feFuncGComposed.setAttribute('tableValues', val);
	        this.feFuncBComposed.setAttribute('tableValues', val);
	      }

	      if (this.feFuncR && (forceRender || effectElements[10].p._mdf || effectElements[11].p._mdf || effectElements[12].p._mdf || effectElements[13].p._mdf || effectElements[14].p._mdf)) {
	        val = this.getTableValue(effectElements[10].p.v, effectElements[11].p.v, effectElements[12].p.v, effectElements[13].p.v, effectElements[14].p.v);
	        this.feFuncR.setAttribute('tableValues', val);
	      }

	      if (this.feFuncG && (forceRender || effectElements[17].p._mdf || effectElements[18].p._mdf || effectElements[19].p._mdf || effectElements[20].p._mdf || effectElements[21].p._mdf)) {
	        val = this.getTableValue(effectElements[17].p.v, effectElements[18].p.v, effectElements[19].p.v, effectElements[20].p.v, effectElements[21].p.v);
	        this.feFuncG.setAttribute('tableValues', val);
	      }

	      if (this.feFuncB && (forceRender || effectElements[24].p._mdf || effectElements[25].p._mdf || effectElements[26].p._mdf || effectElements[27].p._mdf || effectElements[28].p._mdf)) {
	        val = this.getTableValue(effectElements[24].p.v, effectElements[25].p.v, effectElements[26].p.v, effectElements[27].p.v, effectElements[28].p.v);
	        this.feFuncB.setAttribute('tableValues', val);
	      }

	      if (this.feFuncA && (forceRender || effectElements[31].p._mdf || effectElements[32].p._mdf || effectElements[33].p._mdf || effectElements[34].p._mdf || effectElements[35].p._mdf)) {
	        val = this.getTableValue(effectElements[31].p.v, effectElements[32].p.v, effectElements[33].p.v, effectElements[34].p.v, effectElements[35].p.v);
	        this.feFuncA.setAttribute('tableValues', val);
	      }
	    }
	  };

	  function SVGDropShadowEffect(filter, filterManager, elem, id, source) {
	    var globalFilterSize = filterManager.container.globalData.renderConfig.filterSize;
	    var filterSize = filterManager.data.fs || globalFilterSize;
	    filter.setAttribute('x', filterSize.x || globalFilterSize.x);
	    filter.setAttribute('y', filterSize.y || globalFilterSize.y);
	    filter.setAttribute('width', filterSize.width || globalFilterSize.width);
	    filter.setAttribute('height', filterSize.height || globalFilterSize.height);
	    this.filterManager = filterManager;
	    var feGaussianBlur = createNS('feGaussianBlur');
	    feGaussianBlur.setAttribute('in', 'SourceAlpha');
	    feGaussianBlur.setAttribute('result', id + '_drop_shadow_1');
	    feGaussianBlur.setAttribute('stdDeviation', '0');
	    this.feGaussianBlur = feGaussianBlur;
	    filter.appendChild(feGaussianBlur);
	    var feOffset = createNS('feOffset');
	    feOffset.setAttribute('dx', '25');
	    feOffset.setAttribute('dy', '0');
	    feOffset.setAttribute('in', id + '_drop_shadow_1');
	    feOffset.setAttribute('result', id + '_drop_shadow_2');
	    this.feOffset = feOffset;
	    filter.appendChild(feOffset);
	    var feFlood = createNS('feFlood');
	    feFlood.setAttribute('flood-color', '#00ff00');
	    feFlood.setAttribute('flood-opacity', '1');
	    feFlood.setAttribute('result', id + '_drop_shadow_3');
	    this.feFlood = feFlood;
	    filter.appendChild(feFlood);
	    var feComposite = createNS('feComposite');
	    feComposite.setAttribute('in', id + '_drop_shadow_3');
	    feComposite.setAttribute('in2', id + '_drop_shadow_2');
	    feComposite.setAttribute('operator', 'in');
	    feComposite.setAttribute('result', id + '_drop_shadow_4');
	    filter.appendChild(feComposite);
	    var feMerge = this.createMergeNode(id, [id + '_drop_shadow_4', source]);
	    filter.appendChild(feMerge); //
	  }

	  extendPrototype([SVGComposableEffect], SVGDropShadowEffect);

	  SVGDropShadowEffect.prototype.renderFrame = function (forceRender) {
	    if (forceRender || this.filterManager._mdf) {
	      if (forceRender || this.filterManager.effectElements[4].p._mdf) {
	        this.feGaussianBlur.setAttribute('stdDeviation', this.filterManager.effectElements[4].p.v / 4);
	      }

	      if (forceRender || this.filterManager.effectElements[0].p._mdf) {
	        var col = this.filterManager.effectElements[0].p.v;
	        this.feFlood.setAttribute('flood-color', rgbToHex(Math.round(col[0] * 255), Math.round(col[1] * 255), Math.round(col[2] * 255)));
	      }

	      if (forceRender || this.filterManager.effectElements[1].p._mdf) {
	        this.feFlood.setAttribute('flood-opacity', this.filterManager.effectElements[1].p.v / 255);
	      }

	      if (forceRender || this.filterManager.effectElements[2].p._mdf || this.filterManager.effectElements[3].p._mdf) {
	        var distance = this.filterManager.effectElements[3].p.v;
	        var angle = (this.filterManager.effectElements[2].p.v - 90) * degToRads;
	        var x = distance * Math.cos(angle);
	        var y = distance * Math.sin(angle);
	        this.feOffset.setAttribute('dx', x);
	        this.feOffset.setAttribute('dy', y);
	      }
	    }
	  };

	  var _svgMatteSymbols = [];

	  function SVGMatte3Effect(filterElem, filterManager, elem) {
	    this.initialized = false;
	    this.filterManager = filterManager;
	    this.filterElem = filterElem;
	    this.elem = elem;
	    elem.matteElement = createNS('g');
	    elem.matteElement.appendChild(elem.layerElement);
	    elem.matteElement.appendChild(elem.transformedElement);
	    elem.baseElement = elem.matteElement;
	  }

	  SVGMatte3Effect.prototype.findSymbol = function (mask) {
	    var i = 0;
	    var len = _svgMatteSymbols.length;

	    while (i < len) {
	      if (_svgMatteSymbols[i] === mask) {
	        return _svgMatteSymbols[i];
	      }

	      i += 1;
	    }

	    return null;
	  };

	  SVGMatte3Effect.prototype.replaceInParent = function (mask, symbolId) {
	    var parentNode = mask.layerElement.parentNode;

	    if (!parentNode) {
	      return;
	    }

	    var children = parentNode.children;
	    var i = 0;
	    var len = children.length;

	    while (i < len) {
	      if (children[i] === mask.layerElement) {
	        break;
	      }

	      i += 1;
	    }

	    var nextChild;

	    if (i <= len - 2) {
	      nextChild = children[i + 1];
	    }

	    var useElem = createNS('use');
	    useElem.setAttribute('href', '#' + symbolId);

	    if (nextChild) {
	      parentNode.insertBefore(useElem, nextChild);
	    } else {
	      parentNode.appendChild(useElem);
	    }
	  };

	  SVGMatte3Effect.prototype.setElementAsMask = function (elem, mask) {
	    if (!this.findSymbol(mask)) {
	      var symbolId = createElementID();
	      var masker = createNS('mask');
	      masker.setAttribute('id', mask.layerId);
	      masker.setAttribute('mask-type', 'alpha');

	      _svgMatteSymbols.push(mask);

	      var defs = elem.globalData.defs;
	      defs.appendChild(masker);
	      var symbol = createNS('symbol');
	      symbol.setAttribute('id', symbolId);
	      this.replaceInParent(mask, symbolId);
	      symbol.appendChild(mask.layerElement);
	      defs.appendChild(symbol);
	      var useElem = createNS('use');
	      useElem.setAttribute('href', '#' + symbolId);
	      masker.appendChild(useElem);
	      mask.data.hd = false;
	      mask.show();
	    }

	    elem.setMatte(mask.layerId);
	  };

	  SVGMatte3Effect.prototype.initialize = function () {
	    var ind = this.filterManager.effectElements[0].p.v;
	    var elements = this.elem.comp.elements;
	    var i = 0;
	    var len = elements.length;

	    while (i < len) {
	      if (elements[i] && elements[i].data.ind === ind) {
	        this.setElementAsMask(this.elem, elements[i]);
	      }

	      i += 1;
	    }

	    this.initialized = true;
	  };

	  SVGMatte3Effect.prototype.renderFrame = function () {
	    if (!this.initialized) {
	      this.initialize();
	    }
	  };

	  function SVGGaussianBlurEffect(filter, filterManager, elem, id) {
	    // Outset the filter region by 100% on all sides to accommodate blur expansion.
	    filter.setAttribute('x', '-100%');
	    filter.setAttribute('y', '-100%');
	    filter.setAttribute('width', '300%');
	    filter.setAttribute('height', '300%');
	    this.filterManager = filterManager;
	    var feGaussianBlur = createNS('feGaussianBlur');
	    feGaussianBlur.setAttribute('result', id);
	    filter.appendChild(feGaussianBlur);
	    this.feGaussianBlur = feGaussianBlur;
	  }

	  SVGGaussianBlurEffect.prototype.renderFrame = function (forceRender) {
	    if (forceRender || this.filterManager._mdf) {
	      // Empirical value, matching AE's blur appearance.
	      var kBlurrinessToSigma = 0.3;
	      var sigma = this.filterManager.effectElements[0].p.v * kBlurrinessToSigma; // Dimensions mapping:
	      //
	      //   1 -> horizontal & vertical
	      //   2 -> horizontal only
	      //   3 -> vertical only
	      //

	      var dimensions = this.filterManager.effectElements[1].p.v;
	      var sigmaX = dimensions == 3 ? 0 : sigma; // eslint-disable-line eqeqeq

	      var sigmaY = dimensions == 2 ? 0 : sigma; // eslint-disable-line eqeqeq

	      this.feGaussianBlur.setAttribute('stdDeviation', sigmaX + ' ' + sigmaY); // Repeat edges mapping:
	      //
	      //   0 -> off -> duplicate
	      //   1 -> on  -> wrap

	      var edgeMode = this.filterManager.effectElements[2].p.v == 1 ? 'wrap' : 'duplicate'; // eslint-disable-line eqeqeq

	      this.feGaussianBlur.setAttribute('edgeMode', edgeMode);
	    }
	  };

	  function TransformEffect() {}

	  TransformEffect.prototype.init = function (effectsManager) {
	    this.effectsManager = effectsManager;
	    this.type = effectTypes.TRANSFORM_EFFECT;
	    this.matrix = new Matrix();
	    this.opacity = -1;
	    this._mdf = false;
	    this._opMdf = false;
	  };

	  TransformEffect.prototype.renderFrame = function (forceFrame) {
	    this._opMdf = false;
	    this._mdf = false;

	    if (forceFrame || this.effectsManager._mdf) {
	      var effectElements = this.effectsManager.effectElements;
	      var anchor = effectElements[0].p.v;
	      var position = effectElements[1].p.v;
	      var isUniformScale = effectElements[2].p.v === 1;
	      var scaleHeight = effectElements[3].p.v;
	      var scaleWidth = isUniformScale ? scaleHeight : effectElements[4].p.v;
	      var skew = effectElements[5].p.v;
	      var skewAxis = effectElements[6].p.v;
	      var rotation = effectElements[7].p.v;
	      this.matrix.reset();
	      this.matrix.translate(-anchor[0], -anchor[1], anchor[2]);
	      this.matrix.scale(scaleWidth * 0.01, scaleHeight * 0.01, 1);
	      this.matrix.rotate(-rotation * degToRads);
	      this.matrix.skewFromAxis(-skew * degToRads, (skewAxis + 90) * degToRads);
	      this.matrix.translate(position[0], position[1], 0);
	      this._mdf = true;

	      if (this.opacity !== effectElements[8].p.v) {
	        this.opacity = effectElements[8].p.v;
	        this._opMdf = true;
	      }
	    }
	  };

	  function SVGTransformEffect(_, filterManager) {
	    this.init(filterManager);
	  }

	  extendPrototype([TransformEffect], SVGTransformEffect);

	  function CVTransformEffect(effectsManager) {
	    this.init(effectsManager);
	  }

	  extendPrototype([TransformEffect], CVTransformEffect);

	  registerRenderer('canvas', CanvasRenderer);
	  registerRenderer('html', HybridRenderer);
	  registerRenderer('svg', SVGRenderer); // Registering shape modifiers

	  ShapeModifiers.registerModifier('tm', TrimModifier);
	  ShapeModifiers.registerModifier('pb', PuckerAndBloatModifier);
	  ShapeModifiers.registerModifier('rp', RepeaterModifier);
	  ShapeModifiers.registerModifier('rd', RoundCornersModifier);
	  ShapeModifiers.registerModifier('zz', ZigZagModifier);
	  ShapeModifiers.registerModifier('op', OffsetPathModifier); // Registering expression plugin

	  setExpressionsPlugin(Expressions);
	  setExpressionInterfaces(getInterface);
	  initialize$1();
	  initialize(); // Registering svg effects

	  registerEffect$1(20, SVGTintFilter, true);
	  registerEffect$1(21, SVGFillFilter, true);
	  registerEffect$1(22, SVGStrokeEffect, false);
	  registerEffect$1(23, SVGTritoneFilter, true);
	  registerEffect$1(24, SVGProLevelsFilter, true);
	  registerEffect$1(25, SVGDropShadowEffect, true);
	  registerEffect$1(28, SVGMatte3Effect, false);
	  registerEffect$1(29, SVGGaussianBlurEffect, true);
	  registerEffect$1(35, SVGTransformEffect, false);
	  registerEffect(35, CVTransformEffect);

	  return lottie;

	})); 
} (lottie$1, lottie$1.exports));

var lottieExports = lottie$1.exports;
var lottie = /*@__PURE__*/getDefaultExportFromCjs(lottieExports);

function _iterableToArrayLimit$1(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) ; else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function ownKeys$7(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys$7(Object(source), !0).forEach(function (key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty$1(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutPropertiesLoose$1(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties$1(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose$1(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _slicedToArray$1(arr, i) {
  return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest$1();
}
function _arrayWithHoles$1(arr) {
  if (Array.isArray(arr)) return arr;
}
function _unsupportedIterableToArray$1(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
}
function _arrayLikeToArray$1(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _nonIterableRest$1() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}

var _excluded$1 = ["animationData", "loop", "autoplay", "initialSegment", "onComplete", "onLoopComplete", "onEnterFrame", "onSegmentStart", "onConfigReady", "onDataReady", "onDataFailed", "onLoadedImages", "onDOMLoaded", "onDestroy", "lottieRef", "renderer", "name", "assetsPath", "rendererSettings"];
var useLottie = function useLottie(props, style) {
  var animationData = props.animationData,
    loop = props.loop,
    autoplay = props.autoplay,
    initialSegment = props.initialSegment,
    onComplete = props.onComplete,
    onLoopComplete = props.onLoopComplete,
    onEnterFrame = props.onEnterFrame,
    onSegmentStart = props.onSegmentStart,
    onConfigReady = props.onConfigReady,
    onDataReady = props.onDataReady,
    onDataFailed = props.onDataFailed,
    onLoadedImages = props.onLoadedImages,
    onDOMLoaded = props.onDOMLoaded,
    onDestroy = props.onDestroy;
    props.lottieRef;
    props.renderer;
    props.name;
    props.assetsPath;
    props.rendererSettings;
    var rest = _objectWithoutProperties$1(props, _excluded$1);
  var _useState = useState(false),
    _useState2 = _slicedToArray$1(_useState, 2),
    animationLoaded = _useState2[0],
    setAnimationLoaded = _useState2[1];
  var animationInstanceRef = useRef();
  var animationContainer = useRef(null);
  /*
        ======================================
            INTERACTION METHODS
        ======================================
     */
  /**
   * Play
   */
  var play = function play() {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.play();
  };
  /**
   * Stop
   */
  var stop = function stop() {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.stop();
  };
  /**
   * Pause
   */
  var pause = function pause() {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.pause();
  };
  /**
   * Set animation speed
   * @param speed
   */
  var setSpeed = function setSpeed(speed) {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setSpeed(speed);
  };
  /**
   * Got to frame and play
   * @param value
   * @param isFrame
   */
  var goToAndPlay = function goToAndPlay(value, isFrame) {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.goToAndPlay(value, isFrame);
  };
  /**
   * Got to frame and stop
   * @param value
   * @param isFrame
   */
  var goToAndStop = function goToAndStop(value, isFrame) {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.goToAndStop(value, isFrame);
  };
  /**
   * Set animation direction
   * @param direction
   */
  var setDirection = function setDirection(direction) {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setDirection(direction);
  };
  /**
   * Play animation segments
   * @param segments
   * @param forceFlag
   */
  var playSegments = function playSegments(segments, forceFlag) {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.playSegments(segments, forceFlag);
  };
  /**
   * Set sub frames
   * @param useSubFrames
   */
  var setSubframe = function setSubframe(useSubFrames) {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setSubframe(useSubFrames);
  };
  /**
   * Get animation duration
   * @param inFrames
   */
  var getDuration = function getDuration(inFrames) {
    var _a;
    return (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.getDuration(inFrames);
  };
  /**
   * Destroy animation
   */
  var destroy = function destroy() {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();
    // Removing the reference to the animation so separate cleanups are skipped.
    // Without it the internal `lottie-react` instance throws exceptions as it already cleared itself on destroy.
    animationInstanceRef.current = undefined;
  };
  /*
        ======================================
            LOTTIE
        ======================================
     */
  /**
   * Load a new animation, and if it's the case, destroy the previous one
   * @param {Object} forcedConfigs
   */
  var loadAnimation = function loadAnimation() {
    var forcedConfigs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _a;
    // Return if the container ref is null
    if (!animationContainer.current) {
      return;
    }
    // Destroy any previous instance
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();
    // Build the animation configuration
    var config = _objectSpread2$1(_objectSpread2$1(_objectSpread2$1({}, props), forcedConfigs), {}, {
      container: animationContainer.current
    });
    // Save the animation instance
    animationInstanceRef.current = lottie.loadAnimation(config);
    setAnimationLoaded(!!animationInstanceRef.current);
    // Return a function that will clean up
    return function () {
      var _a;
      (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();
      animationInstanceRef.current = undefined;
    };
  };
  /**
   * (Re)Initialize when animation data changed
   */
  useEffect(function () {
    var onUnmount = loadAnimation();
    // Clean up on unmount
    return function () {
      return onUnmount === null || onUnmount === void 0 ? void 0 : onUnmount();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [animationData, loop]);
  // Update the autoplay state
  useEffect(function () {
    if (!animationInstanceRef.current) {
      return;
    }
    animationInstanceRef.current.autoplay = !!autoplay;
  }, [autoplay]);
  // Update the initial segment state
  useEffect(function () {
    if (!animationInstanceRef.current) {
      return;
    }
    // When null should reset to default animation length
    if (!initialSegment) {
      animationInstanceRef.current.resetSegments(true);
      return;
    }
    // If it's not a valid segment, do nothing
    if (!Array.isArray(initialSegment) || !initialSegment.length) {
      return;
    }
    // If the current position it's not in the new segment
    // set the current position to start
    if (animationInstanceRef.current.currentRawFrame < initialSegment[0] || animationInstanceRef.current.currentRawFrame > initialSegment[1]) {
      animationInstanceRef.current.currentRawFrame = initialSegment[0];
    }
    // Update the segment
    animationInstanceRef.current.setSegment(initialSegment[0], initialSegment[1]);
  }, [initialSegment]);
  /*
        ======================================
            EVENTS
        ======================================
     */
  /**
   * Reinitialize listener on change
   */
  useEffect(function () {
    var partialListeners = [{
      name: "complete",
      handler: onComplete
    }, {
      name: "loopComplete",
      handler: onLoopComplete
    }, {
      name: "enterFrame",
      handler: onEnterFrame
    }, {
      name: "segmentStart",
      handler: onSegmentStart
    }, {
      name: "config_ready",
      handler: onConfigReady
    }, {
      name: "data_ready",
      handler: onDataReady
    }, {
      name: "data_failed",
      handler: onDataFailed
    }, {
      name: "loaded_images",
      handler: onLoadedImages
    }, {
      name: "DOMLoaded",
      handler: onDOMLoaded
    }, {
      name: "destroy",
      handler: onDestroy
    }];
    var listeners = partialListeners.filter(function (listener) {
      return listener.handler != null;
    });
    if (!listeners.length) {
      return;
    }
    var deregisterList = listeners.map(
    /**
     * Handle the process of adding an event listener
     * @param {Listener} listener
     * @return {Function} Function that deregister the listener
     */
    function (listener) {
      var _a;
      (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener(listener.name, listener.handler);
      // Return a function to deregister this listener
      return function () {
        var _a;
        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener(listener.name, listener.handler);
      };
    });
    // Deregister listeners on unmount
    return function () {
      deregisterList.forEach(function (deregister) {
        return deregister();
      });
    };
  }, [onComplete, onLoopComplete, onEnterFrame, onSegmentStart, onConfigReady, onDataReady, onDataFailed, onLoadedImages, onDOMLoaded, onDestroy]);
  /**
   * Build the animation view
   */
  var View = /*#__PURE__*/React__default$1.createElement("div", _objectSpread2$1({
    style: style,
    ref: animationContainer
  }, rest));
  return {
    View: View,
    play: play,
    stop: stop,
    pause: pause,
    setSpeed: setSpeed,
    goToAndStop: goToAndStop,
    goToAndPlay: goToAndPlay,
    setDirection: setDirection,
    playSegments: playSegments,
    setSubframe: setSubframe,
    getDuration: getDuration,
    destroy: destroy,
    animationContainerRef: animationContainer,
    animationLoaded: animationLoaded,
    animationItem: animationInstanceRef.current
  };
};

var v$2 = "5.7.4";
var fr$2 = 29.9700012207031;
var ip$2 = 0;
var op$2 = 30.0000012219251;
var w$2 = 800;
var h$2 = 800;
var nm$2 = "Appear_Comb";
var ddd$2 = 0;
var assets$2 = [
	{
		id: "comp_0",
		layers: [
			{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: "C",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0.333,
									y: 0
								},
								t: 10,
								s: [
									719.582,
									79.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 25.0000010182709,
								s: [
									559.582,
									239.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 10,
								s: [
									0,
									0,
									100
								]
							},
							{
								i: {
									x: [
										0.833,
										0.833,
										0.833
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.167,
										0.167,
										0.167
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 25,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 36.0000014663101,
								s: [
									100.3,
									100.3,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 7",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -1.00000004073083,
				op: 40.0000016292334,
				st: 10.0000004073083,
				bm: 0
			},
			{
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: "A",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0.333,
									y: 0
								},
								t: 10,
								s: [
									79.582,
									79.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 25.0000010182709,
								s: [
									239.582,
									239.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							379.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 10,
								s: [
									0,
									0,
									100
								]
							},
							{
								i: {
									x: [
										0.833,
										0.833,
										0.833
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.167,
										0.167,
										0.167
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 25,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 36.0000014663101,
								s: [
									100.3,
									100.3,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -1.00000004073083,
				op: 40.0000016292334,
				st: 10.0000004073083,
				bm: 0
			},
			{
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: "H",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0.333,
									y: 0
								},
								t: 10,
								s: [
									719.582,
									719.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 25.0000010182709,
								s: [
									559.582,
									559.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 10,
								s: [
									0,
									0,
									100
								]
							},
							{
								i: {
									x: [
										0.833,
										0.833,
										0.833
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.167,
										0.167,
										0.167
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 25,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 36.0000014663101,
								s: [
									100.3,
									100.3,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 2",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -1.00000004073083,
				op: 40.0000016292334,
				st: 10.0000004073083,
				bm: 0
			},
			{
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: "B",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0.333,
									y: 0
								},
								t: 5,
								s: [
									399.582,
									79.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									399.582,
									239.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 8",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -1.00000004073083,
				op: 31.0000012626559,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: "F",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0.333,
									y: 0
								},
								t: 5,
								s: [
									719.582,
									399.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									559.582,
									399.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -1.00000004073083,
				op: 31.0000012626559,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: "D",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0.333,
									y: 0
								},
								t: 5,
								s: [
									79.582,
									399.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									239.582,
									399.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 1",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -1.00000004073083,
				op: 31.0000012626559,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 7,
				ty: 4,
				nm: "G",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0.333,
									y: 0
								},
								t: 5,
								s: [
									399.582,
									719.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									399.582,
									559.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -1.00000004073083,
				op: 31.0000012626559,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 8,
				ty: 4,
				nm: "E",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							399.582,
							399.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									0,
									0,
									100
								]
							},
							{
								i: {
									x: [
										0.833,
										0.833,
										0.833
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.167,
										0.167,
										0.167
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 15,
								s: [
									100,
									100,
									100
								]
							},
							{
								t: 26.0000010590017,
								s: [
									100.3,
									100.3,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 30.0000012219251,
				st: 0,
				bm: 0
			}
		]
	},
	{
		id: "comp_1",
		layers: [
			{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: "C",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0.333,
									y: 0
								},
								t: 10,
								s: [
									799.582,
									159.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 25.0000010182709,
								s: [
									639.582,
									319.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 10,
								s: [
									0,
									0,
									100
								]
							},
							{
								i: {
									x: [
										0.833,
										0.833,
										0.833
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.167,
										0.167,
										0.167
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 25,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 36.0000014663101,
								s: [
									100.3,
									100.3,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 7",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -1.00000004073083,
				op: 40.0000016292334,
				st: 10.0000004073083,
				bm: 0
			},
			{
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: "A",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0.333,
									y: 0
								},
								t: 10,
								s: [
									159.582,
									159.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 25.0000010182709,
								s: [
									319.582,
									319.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							379.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 10,
								s: [
									0,
									0,
									100
								]
							},
							{
								i: {
									x: [
										0.833,
										0.833,
										0.833
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.167,
										0.167,
										0.167
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 25,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 36.0000014663101,
								s: [
									100.3,
									100.3,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -1.00000004073083,
				op: 40.0000016292334,
				st: 10.0000004073083,
				bm: 0
			},
			{
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: "H",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0.333,
									y: 0
								},
								t: 10,
								s: [
									799.582,
									799.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 25.0000010182709,
								s: [
									639.582,
									639.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 10,
								s: [
									0,
									0,
									100
								]
							},
							{
								i: {
									x: [
										0.833,
										0.833,
										0.833
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.167,
										0.167,
										0.167
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 25,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 36.0000014663101,
								s: [
									100.3,
									100.3,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 2",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -1.00000004073083,
				op: 40.0000016292334,
				st: 10.0000004073083,
				bm: 0
			},
			{
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: "B",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0.333,
									y: 0
								},
								t: 5,
								s: [
									479.582,
									159.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									479.582,
									319.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 8",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -1.00000004073083,
				op: 31.0000012626559,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: "F",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0.333,
									y: 0
								},
								t: 5,
								s: [
									799.582,
									479.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									639.582,
									479.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -1.00000004073083,
				op: 31.0000012626559,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: "D",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0.333,
									y: 0
								},
								t: 5,
								s: [
									159.582,
									479.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									319.582,
									479.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 1",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -1.00000004073083,
				op: 31.0000012626559,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 7,
				ty: 4,
				nm: "G",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0.333,
									y: 0
								},
								t: 5,
								s: [
									479.582,
									799.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									479.582,
									639.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -1.00000004073083,
				op: 31.0000012626559,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 8,
				ty: 4,
				nm: "E",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							479.582,
							479.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									0,
									0,
									100
								]
							},
							{
								i: {
									x: [
										0.833,
										0.833,
										0.833
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.167,
										0.167,
										0.167
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 15,
								s: [
									100,
									100,
									100
								]
							},
							{
								t: 26.0000010590017,
								s: [
									100.3,
									100.3,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 30.0000012219251,
				st: 0,
				bm: 0
			}
		]
	}
];
var layers$2 = [
	{
		ddd: 0,
		ind: 1,
		ty: 0,
		nm: "Appear_Body",
		refId: "comp_0",
		sr: 1,
		ks: {
			o: {
				a: 0,
				k: 100,
				ix: 11
			},
			r: {
				a: 0,
				k: 0,
				ix: 10
			},
			p: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 2,
				l: 2
			},
			a: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 1,
				l: 2
			},
			s: {
				a: 0,
				k: [
					100,
					100,
					100
				],
				ix: 6,
				l: 2
			}
		},
		ao: 0,
		w: 800,
		h: 800,
		ip: 0,
		op: 30.0000012219251,
		st: 0,
		bm: 0
	},
	{
		ddd: 0,
		ind: 2,
		ty: 0,
		nm: "Appear_Shadow",
		refId: "comp_1",
		sr: 1,
		ks: {
			o: {
				a: 0,
				k: 100,
				ix: 11
			},
			r: {
				a: 0,
				k: 0,
				ix: 10
			},
			p: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 2,
				l: 2
			},
			a: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 1,
				l: 2
			},
			s: {
				a: 0,
				k: [
					100,
					100,
					100
				],
				ix: 6,
				l: 2
			}
		},
		ao: 0,
		w: 800,
		h: 800,
		ip: 0,
		op: 30.0000012219251,
		st: 0,
		bm: 0
	}
];
var markers$2 = [
];
var byteAppear = {
	v: v$2,
	fr: fr$2,
	ip: ip$2,
	op: op$2,
	w: w$2,
	h: h$2,
	nm: nm$2,
	ddd: ddd$2,
	assets: assets$2,
	layers: layers$2,
	markers: markers$2
};

var v$1 = "5.7.4";
var fr$1 = 29.9700012207031;
var ip$1 = 0;
var op$1 = 30.0000012219251;
var w$1 = 800;
var h$1 = 800;
var nm$1 = "Disappear_Comb";
var ddd$1 = 0;
var assets$1 = [
	{
		id: "comp_0",
		layers: [
			{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: "FilltheGap Outlines",
				sr: 1,
				ks: {
					o: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.833
									],
									y: [
										0.833
									]
								},
								o: {
									x: [
										0.167
									],
									y: [
										0.167
									]
								},
								t: 0,
								s: [
									100
								]
							},
							{
								t: 10.0000004073083,
								s: [
									0
								]
							}
						],
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							399,
							400,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							480,
							480,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100,
							100,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												400.002,
												239.676
											],
											[
												400.002,
												720.317
											]
										],
										c: false
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "st",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 3
								},
								o: {
									a: 0,
									k: 100,
									ix: 4
								},
								w: {
									a: 0,
									k: 2,
									ix: 5
								},
								lc: 1,
								lj: 1,
								ml: 10,
								bm: 0,
								nm: "Stroke 1",
								mn: "ADBE Vector Graphic - Stroke",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					},
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												560.002,
												239.676
											],
											[
												560.002,
												720.317
											]
										],
										c: false
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "st",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 3
								},
								o: {
									a: 0,
									k: 100,
									ix: 4
								},
								w: {
									a: 0,
									k: 2,
									ix: 5
								},
								lc: 1,
								lj: 1,
								ml: 10,
								bm: 0,
								nm: "Stroke 1",
								mn: "ADBE Vector Graphic - Stroke",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 2,
						mn: "ADBE Vector Group",
						hd: false
					},
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												239.999,
												559.993
											],
											[
												720.64,
												559.993
											]
										],
										c: false
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "st",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 3
								},
								o: {
									a: 0,
									k: 100,
									ix: 4
								},
								w: {
									a: 0,
									k: 2,
									ix: 5
								},
								lc: 1,
								lj: 1,
								ml: 10,
								bm: 0,
								nm: "Stroke 1",
								mn: "ADBE Vector Graphic - Stroke",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 3,
						mn: "ADBE Vector Group",
						hd: false
					},
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												239.999,
												400
											],
											[
												720.64,
												400
											]
										],
										c: false
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "st",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 3
								},
								o: {
									a: 0,
									k: 100,
									ix: 4
								},
								w: {
									a: 0,
									k: 2,
									ix: 5
								},
								lc: 1,
								lj: 1,
								ml: 10,
								bm: 0,
								nm: "Stroke 1",
								mn: "ADBE Vector Graphic - Stroke",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 4,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 45.0000018328876,
				st: -34.0000013848484,
				bm: 0
			},
			{
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: "C",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0.667,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 0,
								s: [
									559.582,
									239.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 15.0000006109625,
								s: [
									719.582,
									79.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 15.0000006109625,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 7",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 45.0000018328876,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: "A",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0.667,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 0,
								s: [
									239.582,
									239.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 15.0000006109625,
								s: [
									79.582,
									79.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							379.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 15.0000006109625,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 45.0000018328876,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: "H",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0.667,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 0,
								s: [
									559.582,
									559.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 15.0000006109625,
								s: [
									719.582,
									719.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 15.0000006109625,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 2",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 45.0000018328876,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: "B",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0.667,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 5,
								s: [
									399.582,
									239.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									399.582,
									79.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 8",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -5.00000020365417,
				op: 40.0000016292334,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: "F",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0.667,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 5,
								s: [
									559.582,
									399.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									719.582,
									399.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -5.00000020365417,
				op: 40.0000016292334,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 7,
				ty: 4,
				nm: "D",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0.667,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 5,
								s: [
									239.582,
									399.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									79.582,
									399.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 1",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -5.00000020365417,
				op: 40.0000016292334,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 8,
				ty: 4,
				nm: "G",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0.667,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 5,
								s: [
									399.582,
									559.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									399.582,
									719.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -5.00000020365417,
				op: 40.0000016292334,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 9,
				ty: 4,
				nm: "E",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							399.582,
							399.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 10,
								s: [
									100,
									100,
									100
								]
							},
							{
								t: 25.0000010182709,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -10.0000004073083,
				op: 35.0000014255792,
				st: 10.0000004073083,
				bm: 0
			}
		]
	},
	{
		id: "comp_1",
		layers: [
			{
				ddd: 0,
				ind: 1,
				ty: 3,
				nm: "Null 45",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 0,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							480,
							480,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							0,
							0,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100,
							100,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				ip: 0,
				op: 195.000007942513,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: "FilltheGap Outlines",
				parent: 1,
				sr: 1,
				ks: {
					o: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.833
									],
									y: [
										0.833
									]
								},
								o: {
									x: [
										0.167
									],
									y: [
										0.167
									]
								},
								t: 0,
								s: [
									100
								]
							},
							{
								t: 10.0000004073083,
								s: [
									0
								]
							}
						],
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							-1,
							0,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							480,
							480,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100,
							100,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												400.002,
												239.676
											],
											[
												400.002,
												720.317
											]
										],
										c: false
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "st",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 3
								},
								o: {
									a: 0,
									k: 100,
									ix: 4
								},
								w: {
									a: 0,
									k: 2,
									ix: 5
								},
								lc: 1,
								lj: 1,
								ml: 10,
								bm: 0,
								nm: "Stroke 1",
								mn: "ADBE Vector Graphic - Stroke",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					},
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												560.002,
												239.676
											],
											[
												560.002,
												720.317
											]
										],
										c: false
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "st",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 3
								},
								o: {
									a: 0,
									k: 100,
									ix: 4
								},
								w: {
									a: 0,
									k: 2,
									ix: 5
								},
								lc: 1,
								lj: 1,
								ml: 10,
								bm: 0,
								nm: "Stroke 1",
								mn: "ADBE Vector Graphic - Stroke",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 2,
						mn: "ADBE Vector Group",
						hd: false
					},
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												239.999,
												559.993
											],
											[
												720.64,
												559.993
											]
										],
										c: false
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "st",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 3
								},
								o: {
									a: 0,
									k: 100,
									ix: 4
								},
								w: {
									a: 0,
									k: 2,
									ix: 5
								},
								lc: 1,
								lj: 1,
								ml: 10,
								bm: 0,
								nm: "Stroke 1",
								mn: "ADBE Vector Graphic - Stroke",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 3,
						mn: "ADBE Vector Group",
						hd: false
					},
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												239.999,
												400
											],
											[
												720.64,
												400
											]
										],
										c: false
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "st",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 3
								},
								o: {
									a: 0,
									k: 100,
									ix: 4
								},
								w: {
									a: 0,
									k: 2,
									ix: 5
								},
								lc: 1,
								lj: 1,
								ml: 10,
								bm: 0,
								nm: "Stroke 1",
								mn: "ADBE Vector Graphic - Stroke",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 4,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 45.0000018328876,
				st: -34.0000013848484,
				bm: 0
			},
			{
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: "C",
				parent: 1,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0.667,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 0,
								s: [
									159.582,
									-160.373,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 15.0000006109625,
								s: [
									319.582,
									-320.373,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									100,
									100,
									100
								]
							},
							{
								t: 15.0000006109625,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 7",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 45.0000018328876,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: "A",
				parent: 1,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0.667,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 0,
								s: [
									-160.418,
									-160.373,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 15.0000006109625,
								s: [
									-320.418,
									-320.373,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							379.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									100,
									100,
									100
								]
							},
							{
								t: 15.0000006109625,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 45.0000018328876,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: "H",
				parent: 1,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0.667,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 0,
								s: [
									159.582,
									159.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 15.0000006109625,
								s: [
									319.582,
									319.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									100,
									100,
									100
								]
							},
							{
								t: 15.0000006109625,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 2",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 45.0000018328876,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: "B",
				parent: 1,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0.667,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 5,
								s: [
									-0.418,
									-160.373,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									-0.418,
									-320.373,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									100,
									100,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 8",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -5.00000020365417,
				op: 40.0000016292334,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 7,
				ty: 4,
				nm: "F",
				parent: 1,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0.667,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 5,
								s: [
									159.582,
									-0.373,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									319.582,
									-0.373,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									100,
									100,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -5.00000020365417,
				op: 40.0000016292334,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 8,
				ty: 4,
				nm: "D",
				parent: 1,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0.667,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 5,
								s: [
									-160.418,
									-0.373,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									-320.418,
									-0.373,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									100,
									100,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 1",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -5.00000020365417,
				op: 40.0000016292334,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 9,
				ty: 4,
				nm: "G",
				parent: 1,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0.667,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 5,
								s: [
									-0.418,
									159.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									-0.418,
									319.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									100,
									100,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -5.00000020365417,
				op: 40.0000016292334,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 10,
				ty: 4,
				nm: "E",
				parent: 1,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							-0.418,
							-0.373,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 10,
								s: [
									100,
									100,
									100
								]
							},
							{
								t: 25.0000010182709,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: -10.0000004073083,
				op: 35.0000014255792,
				st: 10.0000004073083,
				bm: 0
			}
		]
	}
];
var layers$1 = [
	{
		ddd: 0,
		ind: 1,
		ty: 0,
		nm: "Disappear_Body",
		refId: "comp_0",
		sr: 1,
		ks: {
			o: {
				a: 0,
				k: 100,
				ix: 11
			},
			r: {
				a: 0,
				k: 0,
				ix: 10
			},
			p: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 2,
				l: 2
			},
			a: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 1,
				l: 2
			},
			s: {
				a: 0,
				k: [
					100,
					100,
					100
				],
				ix: 6,
				l: 2
			}
		},
		ao: 0,
		w: 800,
		h: 800,
		ip: 0,
		op: 30.0000012219251,
		st: 0,
		bm: 0
	},
	{
		ddd: 0,
		ind: 2,
		ty: 0,
		nm: "Disappear_Shadow",
		refId: "comp_1",
		sr: 1,
		ks: {
			o: {
				a: 0,
				k: 100,
				ix: 11
			},
			r: {
				a: 0,
				k: 0,
				ix: 10
			},
			p: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 2,
				l: 2
			},
			a: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 1,
				l: 2
			},
			s: {
				a: 0,
				k: [
					100,
					100,
					100
				],
				ix: 6,
				l: 2
			}
		},
		ao: 0,
		w: 800,
		h: 800,
		ip: 0,
		op: 30.0000012219251,
		st: 0,
		bm: 0
	}
];
var markers$1 = [
];
var byteDisappear = {
	v: v$1,
	fr: fr$1,
	ip: ip$1,
	op: op$1,
	w: w$1,
	h: h$1,
	nm: nm$1,
	ddd: ddd$1,
	assets: assets$1,
	layers: layers$1,
	markers: markers$1
};

var v = "5.7.4";
var fr = 29.9700012207031;
var ip = 0;
var op = 105.000004276738;
var w = 800;
var h = 800;
var nm = "Celebration_Comb";
var ddd = 0;
var assets = [
	{
		id: "comp_0",
		layers: [
			{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: "G 4",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 399.582,
							ix: 3
						},
						y: {
							a: 0,
							k: 559.627,
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 15.0000006109625,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352941176,
										0.380392156863,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 49.0000019958109,
				st: -5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: "D 4",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 239.582,
							ix: 3
						},
						y: {
							a: 0,
							k: 399.6,
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 15.0000006109625,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352941176,
										0.380392156863,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 1",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 50.0000020365418,
				st: -5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: "H 4",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							559.582,
							559.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352941176,
										0.380392156863,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 2",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 54.0000021994651,
				st: -2.00000008146167,
				bm: 0
			},
			{
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: "E 4",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							399.582,
							399.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352941176,
										0.380392156863,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 55.0000022401959,
				st: -1.00000004073083,
				bm: 0
			},
			{
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: "A 4",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 239.582,
							ix: 3
						},
						y: {
							a: 0,
							k: 239.627,
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							379.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352941176,
										0.380392156863,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 56.0000022809268,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: "F 4",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							559.582,
							399.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 10,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 25.0000010182709,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352941176,
										0.380392156863,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 60.0000024438501,
				st: 4.00000016292334,
				bm: 0
			},
			{
				ddd: 0,
				ind: 7,
				ty: 4,
				nm: "B 4",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							399.582,
							239.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 10,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 25.0000010182709,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352941176,
										0.380392156863,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 8",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 61.0000024845809,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 8,
				ty: 4,
				nm: "C 4",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							559.582,
							239.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 15,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 30.0000012219251,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352941176,
										0.380392156863,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 7",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 66.0000026882351,
				st: 10.0000004073083,
				bm: 0
			},
			{
				ddd: 0,
				ind: 9,
				ty: 4,
				nm: "G 3",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 399.582,
							ix: 3
						},
						y: {
							a: 0,
							k: 559.627,
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 15.0000006109625,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 49.0000019958109,
				st: -5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 10,
				ty: 4,
				nm: "D 3",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 239.582,
							ix: 3
						},
						y: {
							a: 0,
							k: 399.6,
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 15.0000006109625,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 1",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 50.0000020365418,
				st: -5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 11,
				ty: 4,
				nm: "H 3",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							559.582,
							559.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 2",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 54.0000021994651,
				st: -2.00000008146167,
				bm: 0
			},
			{
				ddd: 0,
				ind: 12,
				ty: 4,
				nm: "E 3",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							399.582,
							399.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 55.0000022401959,
				st: -1.00000004073083,
				bm: 0
			},
			{
				ddd: 0,
				ind: 13,
				ty: 4,
				nm: "A 3",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 239.582,
							ix: 3
						},
						y: {
							a: 0,
							k: 239.627,
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							379.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 56.0000022809268,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 14,
				ty: 4,
				nm: "F 3",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							559.582,
							399.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 10,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 25.0000010182709,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 60.0000024438501,
				st: 4.00000016292334,
				bm: 0
			},
			{
				ddd: 0,
				ind: 15,
				ty: 4,
				nm: "B 3",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							399.582,
							239.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 10,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 25.0000010182709,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 8",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 61.0000024845809,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 16,
				ty: 4,
				nm: "C 3",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							559.582,
							239.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 15,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 30.0000012219251,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 7",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 66.0000026882351,
				st: 10.0000004073083,
				bm: 0
			}
		]
	},
	{
		id: "comp_1",
		layers: [
			{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: "G 4",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 479.582,
							ix: 3
						},
						y: {
							a: 0,
							k: 639.627,
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 15.0000006109625,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 49.0000019958109,
				st: -5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: "D 4",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 319.582,
							ix: 3
						},
						y: {
							a: 0,
							k: 479.6,
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 15.0000006109625,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 1",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 50.0000020365418,
				st: -5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: "H 4",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							639.582,
							639.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 2",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 54.0000021994651,
				st: -2.00000008146167,
				bm: 0
			},
			{
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: "E 4",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							479.582,
							479.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 55.0000022401959,
				st: -1.00000004073083,
				bm: 0
			},
			{
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: "A 4",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 319.582,
							ix: 3
						},
						y: {
							a: 0,
							k: 319.627,
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							379.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 56.0000022809268,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: "F 4",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							639.582,
							479.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 10,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 25.0000010182709,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 60.0000024438501,
				st: 4.00000016292334,
				bm: 0
			},
			{
				ddd: 0,
				ind: 7,
				ty: 4,
				nm: "B 4",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							479.582,
							319.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 10,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 25.0000010182709,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 8",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 61.0000024845809,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 8,
				ty: 4,
				nm: "C 4",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							639.582,
							319.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 15,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 30.0000012219251,
								s: [
									100.5,
									100.5,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 7",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 66.0000026882351,
				st: 10.0000004073083,
				bm: 0
			},
			{
				ddd: 0,
				ind: 9,
				ty: 4,
				nm: "G 3",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 479.582,
							ix: 3
						},
						y: {
							a: 0,
							k: 639.627,
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 15.0000006109625,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 49.0000019958109,
				st: -5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 10,
				ty: 4,
				nm: "D 3",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 319.582,
							ix: 3
						},
						y: {
							a: 0,
							k: 479.6,
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 15.0000006109625,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 1",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 50.0000020365418,
				st: -5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 11,
				ty: 4,
				nm: "H 3",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							639.582,
							639.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 2",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 54.0000021994651,
				st: -2.00000008146167,
				bm: 0
			},
			{
				ddd: 0,
				ind: 12,
				ty: 4,
				nm: "E 3",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							479.582,
							479.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 55.0000022401959,
				st: -1.00000004073083,
				bm: 0
			},
			{
				ddd: 0,
				ind: 13,
				ty: 4,
				nm: "A 3",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 319.582,
							ix: 3
						},
						y: {
							a: 0,
							k: 319.627,
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							379.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 20.0000008146167,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 56.0000022809268,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 14,
				ty: 4,
				nm: "F 3",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							639.582,
							479.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 10,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 25.0000010182709,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 60.0000024438501,
				st: 4.00000016292334,
				bm: 0
			},
			{
				ddd: 0,
				ind: 15,
				ty: 4,
				nm: "B 3",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							479.582,
							319.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 10,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 25.0000010182709,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 8",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 61.0000024845809,
				st: 5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 16,
				ty: 4,
				nm: "C 3",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							639.582,
							319.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 15,
								s: [
									100.5,
									100.5,
									100
								]
							},
							{
								t: 30.0000012219251,
								s: [
									0,
									0,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 7",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 66.0000026882351,
				st: 10.0000004073083,
				bm: 0
			}
		]
	},
	{
		id: "comp_2",
		layers: [
			{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: "G 6",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0,
									y: 0
								},
								t: 6,
								s: [
									131.582,
									264.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									53.582,
									199.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 6,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 11.0000004480392,
								s: [
									45,
									45,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.992156862745,
										0.607843137255,
										0.254901960784,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 6.00000024438501,
				op: 20.0000008146167,
				st: -10.0000004073083,
				bm: 0
			},
			{
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: "G 5",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0,
									y: 0
								},
								t: 1,
								s: [
									131.582,
									400,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									35.582,
									397.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 1,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 6.00000024438501,
								s: [
									45,
									45,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.992156862745,
										0.823529411765,
										0.929411764706,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 1.00000004073083,
				op: 20.0000008146167,
				st: -15.0000006109625,
				bm: 0
			},
			{
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: "G 4",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0,
									y: 0
								},
								t: 3,
								s: [
									653.582,
									574.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									765.582,
									687.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 3,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 8.00000032584668,
								s: [
									45,
									45,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.992156862745,
										0.607843137255,
										0.254901960784,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 3.00000012219251,
				op: 20.0000008146167,
				st: -13.0000005295009,
				bm: 0
			},
			{
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: "G 3",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0,
									y: 0
								},
								t: 0,
								s: [
									675.582,
									124.627,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									765.582,
									35.627,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0,
										0,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									0,
									0,
									100
								]
							},
							{
								t: 5.00000020365417,
								s: [
									45,
									45,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.992156862745,
										0.823529411765,
										0.929411764706,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 20.0000008146167,
				st: -16.0000006516934,
				bm: 0
			}
		]
	},
	{
		id: "comp_3",
		layers: [
			{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: "Shape Layer 16",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 90,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							349.582,
							314.875,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							239.371,
							-218.767,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							39.504,
							153.455,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215087891,
										0.905853271484,
										0.599975585938,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 3.00000012219251,
				op: 5.00000020365418,
				st: -7.00000028511585,
				bm: 0
			},
			{
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: "Shape Layer 15",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 90,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							479.958,
							464.875,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							239.371,
							-218.767,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							46.179,
							235.257,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215087891,
										0.905853271484,
										0.599975585938,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 5.00000020365417,
				op: 8.00000032584668,
				st: -5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: "Shape Layer 14",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 90,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							399.582,
							314.875,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							239.371,
							-218.767,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							38.67,
							231.7,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215087891,
										0.905853271484,
										0.599975585938,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 3.00000012219251,
				op: 8.00000032584668,
				st: -5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: "Shape Layer 17",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							639.371,
							365.189,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							239.371,
							-218.811,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							65.789,
							100,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215087891,
										0.905853271484,
										0.599975585938,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 8.00000032584668,
				st: -5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: "Shape Layer 13",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							399.686,
							181.189,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							-0.314,
							-218.811,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100,
							100,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215087891,
										0.905853271484,
										0.599975585938,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 5.00000020365417,
				op: 8.00000032584668,
				st: -5.00000020365417,
				bm: 0
			},
			{
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: "Shape Layer 11",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 90,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							349.582,
							314.875,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							239.371,
							-218.767,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							46.179,
							153.455,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215087891,
										0.905853271484,
										0.599975585938,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 8.00000032584668,
				op: 10.0000004073083,
				st: -2.00000008146167,
				bm: 0
			},
			{
				ddd: 0,
				ind: 7,
				ty: 4,
				nm: "Shape Layer 12",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 90,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							479.958,
							464.875,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							239.371,
							-218.767,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							46.179,
							235.257,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215087891,
										0.905853271484,
										0.599975585938,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 20.0000008146167,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 8,
				ty: 4,
				nm: "Shape Layer 10",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 90,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							399.582,
							314.875,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							239.371,
							-218.767,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							46.179,
							235.257,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215087891,
										0.905853271484,
										0.599975585938,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 19.0000007738859,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 9,
				ty: 4,
				nm: "Shape Layer 9",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							399.686,
							181.189,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							-0.314,
							-218.811,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100,
							100,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215087891,
										0.905853271484,
										0.599975585938,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 19.0000007738859,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 10,
				ty: 3,
				nm: "Null 34",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 0,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0.333,
									y: 0
								},
								t: 0,
								s: [
									400,
									400,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								i: {
									x: 0.667,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 10,
								s: [
									400,
									320,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									400,
									400,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							0,
							0,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									100,
									100,
									100
								]
							},
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									100,
									85,
									100
								]
							},
							{
								t: 10.0000004073083,
								s: [
									100,
									100,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				ip: 0,
				op: 308.000012545097,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 11,
				ty: 4,
				nm: "A 2",
				parent: 10,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -160.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 0,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 10,
									s: [
										-240.373
									]
								},
								{
									t: 20.0000008146167,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							379.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 6.00000024438501,
				op: 30.0000012219251,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 12,
				ty: 4,
				nm: "D 2",
				parent: 11,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 1",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 6.00000024438501,
				op: 30.0000012219251,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 13,
				ty: 4,
				nm: "A",
				parent: 10,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -160.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 0,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 10,
									s: [
										-240.373
									]
								},
								{
									t: 20.0000008146167,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							379.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 10.0000004073083,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 14,
				ty: 4,
				nm: "D",
				parent: 13,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 1",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 10.0000004073083,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 15,
				ty: 4,
				nm: "B 2",
				parent: 10,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -0.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 2,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											0.631
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 12,
									s: [
										-240.373
									]
								},
								{
									t: 22.0000008960784,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							539.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 8",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 8.00000032584668,
				op: 30.0000012219251,
				st: 14.0000005702317,
				bm: 0
			},
			{
				ddd: 0,
				ind: 16,
				ty: 4,
				nm: "G 2",
				parent: 15,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 8.00000032584668,
				op: 30.0000012219251,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 17,
				ty: 4,
				nm: "E 2",
				parent: 15,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 8.00000032584668,
				op: 30.0000012219251,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 18,
				ty: 4,
				nm: "B",
				parent: 10,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -0.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 2,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 12,
									s: [
										-240.373
									]
								},
								{
									t: 22.0000008960784,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							539.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 8",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 8.00000032584668,
				st: 14.0000005702317,
				bm: 0
			},
			{
				ddd: 0,
				ind: 19,
				ty: 4,
				nm: "G",
				parent: 18,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 8.00000032584668,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 20,
				ty: 4,
				nm: "E",
				parent: 18,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 8.00000032584668,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 21,
				ty: 4,
				nm: "C 2",
				parent: 10,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 159.582,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 4,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											0.762
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 14,
									s: [
										-240.373
									]
								},
								{
									t: 24.00000097754,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							699.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 7",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 30.000001221925,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 22,
				ty: 4,
				nm: "H 2",
				parent: 21,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 2",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 30.000001221925,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 23,
				ty: 4,
				nm: "F 2",
				parent: 21,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 30.000001221925,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 24,
				ty: 4,
				nm: "C",
				parent: 10,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 159.582,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0.011
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 4,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											0.758
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 14,
									s: [
										-240.373
									]
								},
								{
									t: 24.00000097754,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							699.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 7",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 10.0000004073083,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 25,
				ty: 4,
				nm: "H",
				parent: 24,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 2",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 10.0000004073083,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 26,
				ty: 4,
				nm: "F",
				parent: 24,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 10.0000004073083,
				st: 8.00000032584668,
				bm: 0
			}
		]
	},
	{
		id: "comp_4",
		layers: [
			{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: "Shape Layer 12",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0.833,
									y: 0.833
								},
								o: {
									x: 0.167,
									y: 0.167
								},
								t: 5,
								s: [
									615.686,
									427.189,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 8.00000032584668,
								s: [
									615.686,
									299.189,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							-0.314,
							-218.811,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							40.756,
							100,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 8.00000032584668,
				st: -10.0000004073083,
				bm: 0
			},
			{
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: "Shape Layer 11",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 90,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							429.582,
							394.875,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							239.371,
							-218.767,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							46.179,
							153.455,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 8.00000032584668,
				op: 10.0000004073083,
				st: -2.00000008146167,
				bm: 0
			},
			{
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: "Shape Layer 10",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 90,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							479.582,
							394.875,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							239.371,
							-218.767,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							46.179,
							235.257,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 19.0000007738859,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: "Shape Layer 9",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							479.686,
							261.189,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							-0.314,
							-218.811,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100,
							100,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 19.0000007738859,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 5,
				ty: 3,
				nm: "Null 34",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 0,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 0,
								s: [
									480,
									480,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								i: {
									x: 1,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 10,
								s: [
									480,
									400,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									480,
									480,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							0,
							0,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									100,
									100,
									100
								]
							},
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									100,
									85,
									100
								]
							},
							{
								t: 10.0000004073083,
								s: [
									100,
									100,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				ip: 0,
				op: 308.000012545097,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: "A 3",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -160.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 0,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 10,
									s: [
										-240.373
									]
								},
								{
									t: 20.0000008146167,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							379.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 20.0000008146167,
				op: 205.000008349821,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 7,
				ty: 4,
				nm: "D 3",
				parent: 6,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 1",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 20.0000008146167,
				op: 205.000008349821,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 8,
				ty: 4,
				nm: "A 2",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -160.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 0,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 10,
									s: [
										-240.373
									]
								},
								{
									t: 20.0000008146167,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							379.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 6.00000024438501,
				op: 20.0000008146167,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 9,
				ty: 4,
				nm: "D 2",
				parent: 8,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 1",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 6.00000024438501,
				op: 20.0000008146167,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 10,
				ty: 4,
				nm: "A",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -160.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 0,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 10,
									s: [
										-240.373
									]
								},
								{
									t: 20.0000008146167,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							379.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 6.00000024438501,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 11,
				ty: 4,
				nm: "D",
				parent: 10,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 1",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 6.00000024438501,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 12,
				ty: 4,
				nm: "B 3",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -0.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 2,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 12,
									s: [
										-240.373
									]
								},
								{
									t: 22.0000008960784,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							539.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 8",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 22.0000008960784,
				op: 210.000008553475,
				st: 14.0000005702317,
				bm: 0
			},
			{
				ddd: 0,
				ind: 13,
				ty: 4,
				nm: "G 3",
				parent: 12,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 22.0000008960784,
				op: 202.000008227629,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 14,
				ty: 4,
				nm: "E 3",
				parent: 12,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 22.0000008960784,
				op: 202.000008227629,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 15,
				ty: 4,
				nm: "B 2",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -0.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 2,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 12,
									s: [
										-240.373
									]
								},
								{
									t: 22.0000008960784,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							539.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 8",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 8.00000032584668,
				op: 22.0000008960784,
				st: 14.0000005702317,
				bm: 0
			},
			{
				ddd: 0,
				ind: 16,
				ty: 4,
				nm: "G 2",
				parent: 15,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 8.00000032584668,
				op: 22.0000008960784,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 17,
				ty: 4,
				nm: "E 2",
				parent: 15,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 8.00000032584668,
				op: 22.0000008960784,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 18,
				ty: 4,
				nm: "B",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -0.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 2,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 12,
									s: [
										-240.373
									]
								},
								{
									t: 22.0000008960784,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							539.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 8",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 8.00000032584668,
				st: 14.0000005702317,
				bm: 0
			},
			{
				ddd: 0,
				ind: 19,
				ty: 4,
				nm: "G",
				parent: 18,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 8.00000032584668,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 20,
				ty: 4,
				nm: "E",
				parent: 18,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 8.00000032584668,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 21,
				ty: 4,
				nm: "C 3",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 159.582,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 4,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 14,
									s: [
										-240.373
									]
								},
								{
									t: 24.00000097754,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							699.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 7",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 24.00000097754,
				op: 204.00000830909,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 22,
				ty: 4,
				nm: "H 3",
				parent: 21,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 2",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 24.00000097754,
				op: 204.00000830909,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 23,
				ty: 4,
				nm: "F 3",
				parent: 21,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 24.00000097754,
				op: 204.00000830909,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 24,
				ty: 4,
				nm: "C 2",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 159.582,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 4,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 14,
									s: [
										-240.373
									]
								},
								{
									t: 24.00000097754,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							699.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 7",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 24.00000097754,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 25,
				ty: 4,
				nm: "H 2",
				parent: 24,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 2",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 24.00000097754,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 26,
				ty: 4,
				nm: "F 2",
				parent: 24,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 24.00000097754,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 27,
				ty: 4,
				nm: "C",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 159.582,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 4,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 14,
									s: [
										-240.373
									]
								},
								{
									t: 24.00000097754,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							699.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 7",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 10.0000004073083,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 28,
				ty: 4,
				nm: "H",
				parent: 27,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 2",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 10.0000004073083,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 29,
				ty: 4,
				nm: "F",
				parent: 27,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 10.0000004073083,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 30,
				ty: 3,
				nm: "Null 42",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 0,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							480,
							480,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							0,
							0,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100,
							100,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				ip: 0,
				op: 308.000012545097,
				st: 0,
				bm: 0
			}
		]
	},
	{
		id: "comp_5",
		layers: [
			{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: "Shape Layer 11",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 90,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							349.582,
							314.875,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							239.371,
							-218.767,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							46.179,
							153.455,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215087891,
										0.905853271484,
										0.599975585938,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 8.00000032584668,
				op: 10.0000004073083,
				st: -2.00000008146167,
				bm: 0
			},
			{
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: "Shape Layer 12",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 90,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							479.958,
							464.875,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							239.371,
							-218.767,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							46.179,
							235.257,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215087891,
										0.905853271484,
										0.599975585938,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 20.0000008146167,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: "Shape Layer 10",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 90,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							399.582,
							314.875,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							239.371,
							-218.767,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							46.179,
							235.257,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215087891,
										0.905853271484,
										0.599975585938,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 19.0000007738859,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: "Shape Layer 9",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							399.686,
							181.189,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							-0.314,
							-218.811,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100,
							100,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215087891,
										0.905853271484,
										0.599975585938,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 19.0000007738859,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 5,
				ty: 3,
				nm: "Null 34",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 0,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 0.333,
									y: 0
								},
								t: 0,
								s: [
									400,
									400,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								i: {
									x: 0.667,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 10,
								s: [
									400,
									320,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									400,
									400,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							0,
							0,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									100,
									100,
									100
								]
							},
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									100,
									85,
									100
								]
							},
							{
								t: 10.0000004073083,
								s: [
									100,
									100,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				ip: 0,
				op: 308.000012545097,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: "A 3",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -160.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 0,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 10,
									s: [
										-240.373
									]
								},
								{
									t: 20.0000008146167,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							379.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 20.0000008146167,
				op: 205.000008349821,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 7,
				ty: 4,
				nm: "D 3",
				parent: 6,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 1",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 20.0000008146167,
				op: 205.000008349821,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 8,
				ty: 4,
				nm: "A 2",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -160.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 0,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 10,
									s: [
										-240.373
									]
								},
								{
									t: 20.0000008146167,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							379.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 6.00000024438501,
				op: 20.0000008146167,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 9,
				ty: 4,
				nm: "D 2",
				parent: 8,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 1",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 6.00000024438501,
				op: 20.0000008146167,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 10,
				ty: 4,
				nm: "A",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -160.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 0,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 10,
									s: [
										-240.373
									]
								},
								{
									t: 20.0000008146167,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							379.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 10.0000004073083,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 11,
				ty: 4,
				nm: "D",
				parent: 10,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 1",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 10.0000004073083,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 12,
				ty: 4,
				nm: "B 3",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -0.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 2,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 12,
									s: [
										-240.373
									]
								},
								{
									t: 22.0000008960784,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							539.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 8",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 22.0000008960784,
				op: 210.000008553475,
				st: 14.0000005702317,
				bm: 0
			},
			{
				ddd: 0,
				ind: 13,
				ty: 4,
				nm: "G 3",
				parent: 12,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 22.0000008960784,
				op: 202.000008227629,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 14,
				ty: 4,
				nm: "E 3",
				parent: 12,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 22.0000008960784,
				op: 202.000008227629,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 15,
				ty: 4,
				nm: "B 2",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -0.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 2,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 12,
									s: [
										-240.373
									]
								},
								{
									t: 22.0000008960784,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							539.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 8",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 8.00000032584668,
				op: 22.0000008960784,
				st: 14.0000005702317,
				bm: 0
			},
			{
				ddd: 0,
				ind: 16,
				ty: 4,
				nm: "G 2",
				parent: 15,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 8.00000032584668,
				op: 22.0000008960784,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 17,
				ty: 4,
				nm: "E 2",
				parent: 15,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 8.00000032584668,
				op: 22.0000008960784,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 18,
				ty: 4,
				nm: "B",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -0.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 2,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 12,
									s: [
										-240.373
									]
								},
								{
									t: 22.0000008960784,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							539.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 8",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 8.00000032584668,
				st: 14.0000005702317,
				bm: 0
			},
			{
				ddd: 0,
				ind: 19,
				ty: 4,
				nm: "G",
				parent: 18,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 8.00000032584668,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 20,
				ty: 4,
				nm: "E",
				parent: 18,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 8.00000032584668,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 21,
				ty: 4,
				nm: "C 3",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 159.582,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 4,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 14,
									s: [
										-240.373
									]
								},
								{
									t: 24.00000097754,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							699.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 7",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 24.00000097754,
				op: 204.00000830909,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 22,
				ty: 4,
				nm: "H 3",
				parent: 21,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 2",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 24.00000097754,
				op: 204.00000830909,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 23,
				ty: 4,
				nm: "F 3",
				parent: 21,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 24.00000097754,
				op: 204.00000830909,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 24,
				ty: 4,
				nm: "C 2",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 159.582,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 4,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											0.762
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 14,
									s: [
										-240.373
									]
								},
								{
									t: 24.00000097754,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							699.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 7",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 24.00000097754,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 25,
				ty: 4,
				nm: "H 2",
				parent: 24,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 2",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 24.00000097754,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 26,
				ty: 4,
				nm: "F 2",
				parent: 24,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.039215686275,
										0.905882352941,
										0.6,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 24.00000097754,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 27,
				ty: 4,
				nm: "C",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 159.582,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0.667
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 4,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											0.667
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 14,
									s: [
										-240.373
									]
								},
								{
									t: 24.00000097754,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							699.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 7",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 10.0000004073083,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 28,
				ty: 4,
				nm: "H",
				parent: 27,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 2",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 10.0000004073083,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 29,
				ty: 4,
				nm: "F",
				parent: 27,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.482352971096,
										0.380392186782,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 10.0000004073083,
				st: 8.00000032584668,
				bm: 0
			}
		]
	},
	{
		id: "comp_6",
		layers: [
			{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: "Shape Layer 12",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0.833,
									y: 0.833
								},
								o: {
									x: 0.167,
									y: 0.167
								},
								t: 5,
								s: [
									615.686,
									427.189,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 8.00000032584668,
								s: [
									615.686,
									299.189,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							-0.314,
							-218.811,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							40.756,
							100,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325469970703,
										0.235290527344,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 8.00000032584668,
				st: -10.0000004073083,
				bm: 0
			},
			{
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: "Shape Layer 11",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 90,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							429.582,
							394.875,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							239.371,
							-218.767,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							46.179,
							153.455,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 8.00000032584668,
				op: 10.0000004073083,
				st: -2.00000008146167,
				bm: 0
			},
			{
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: "Shape Layer 10",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 90,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							479.582,
							394.875,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							239.371,
							-218.767,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							46.179,
							235.257,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 19.0000007738859,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: "Shape Layer 9",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							479.686,
							261.189,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							-0.314,
							-218.811,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100,
							100,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ty: "rc",
								d: 1,
								s: {
									a: 0,
									k: [
										479.371,
										112.379
									],
									ix: 2
								},
								p: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 4
								},
								nm: "Rectangle Path 1",
								mn: "ADBE Vector Shape - Rect",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258819580078,
										0.811737060547,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										-0.314,
										-218.811
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Rectangle 1",
						np: 3,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 19.0000007738859,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 5,
				ty: 3,
				nm: "Null 34",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 0,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 1,
						k: [
							{
								i: {
									x: 0,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 0,
								s: [
									480,
									480,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								i: {
									x: 1,
									y: 1
								},
								o: {
									x: 1,
									y: 0
								},
								t: 10,
								s: [
									480,
									400,
									0
								],
								to: [
									0,
									0,
									0
								],
								ti: [
									0,
									0,
									0
								]
							},
							{
								t: 20.0000008146167,
								s: [
									480,
									480,
									0
								]
							}
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							0,
							0,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 1,
						k: [
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										1,
										1,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 0,
								s: [
									100,
									100,
									100
								]
							},
							{
								i: {
									x: [
										0.667,
										0.667,
										0.667
									],
									y: [
										1,
										1,
										1
									]
								},
								o: {
									x: [
										0.333,
										0.333,
										0.333
									],
									y: [
										0,
										0,
										0
									]
								},
								t: 5,
								s: [
									100,
									85,
									100
								]
							},
							{
								t: 10.0000004073083,
								s: [
									100,
									100,
									100
								]
							}
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				ip: 0,
				op: 308.000012545097,
				st: 0,
				bm: 0
			},
			{
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: "A 3",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -160.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 0,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 10,
									s: [
										-240.373
									]
								},
								{
									t: 20.0000008146167,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							379.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 20.0000008146167,
				op: 205.000008349821,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 7,
				ty: 4,
				nm: "A 2",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -160.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 0,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 10,
									s: [
										-240.373
									]
								},
								{
									t: 20.0000008146167,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							379.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 6.00000024438501,
				op: 20.0000008146167,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 8,
				ty: 4,
				nm: "D 2",
				parent: 7,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 1",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 6.00000024438501,
				op: 20.0000008146167,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 9,
				ty: 4,
				nm: "A",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -160.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 0,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 10,
									s: [
										-240.373
									]
								},
								{
									t: 20.0000008146167,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							379.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 6",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 6.00000024438501,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 10,
				ty: 4,
				nm: "D 3",
				parent: 6,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 1",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 20.0000008146167,
				op: 205.000008349821,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 11,
				ty: 4,
				nm: "D",
				parent: 9,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							379.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										379.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 1",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 6.00000024438501,
				st: 9.00000036657752,
				bm: 0
			},
			{
				ddd: 0,
				ind: 12,
				ty: 4,
				nm: "B 3",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -0.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 2,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 12,
									s: [
										-240.373
									]
								},
								{
									t: 22.0000008960784,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							539.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 8",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 22.0000008960784,
				op: 210.000008553475,
				st: 14.0000005702317,
				bm: 0
			},
			{
				ddd: 0,
				ind: 13,
				ty: 4,
				nm: "G 3",
				parent: 12,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 22.0000008960784,
				op: 202.000008227629,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 14,
				ty: 4,
				nm: "E 3",
				parent: 12,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 22.0000008960784,
				op: 202.000008227629,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 15,
				ty: 4,
				nm: "B 2",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -0.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 2,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 12,
									s: [
										-240.373
									]
								},
								{
									t: 22.0000008960784,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							539.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 8",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 8.00000032584668,
				op: 22.0000008960784,
				st: 14.0000005702317,
				bm: 0
			},
			{
				ddd: 0,
				ind: 16,
				ty: 4,
				nm: "G 2",
				parent: 15,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 8.00000032584668,
				op: 22.0000008960784,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 17,
				ty: 4,
				nm: "E 2",
				parent: 15,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 8.00000032584668,
				op: 22.0000008960784,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 18,
				ty: 4,
				nm: "B",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: -0.418,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 2,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 12,
									s: [
										-240.373
									]
								},
								{
									t: 22.0000008960784,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							539.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 8",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 8.00000032584668,
				st: 14.0000005702317,
				bm: 0
			},
			{
				ddd: 0,
				ind: 19,
				ty: 4,
				nm: "G",
				parent: 18,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 3",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 8.00000032584668,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 20,
				ty: 4,
				nm: "E",
				parent: 18,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							539.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										539.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 5",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 8.00000032584668,
				st: 6.00000024438501,
				bm: 0
			},
			{
				ddd: 0,
				ind: 21,
				ty: 4,
				nm: "C 3",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 159.582,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 4,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 14,
									s: [
										-240.373
									]
								},
								{
									t: 24.00000097754,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							699.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 7",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 24.00000097754,
				op: 204.00000830909,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 22,
				ty: 4,
				nm: "H 3",
				parent: 21,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 2",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 24.00000097754,
				op: 204.00000830909,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 23,
				ty: 4,
				nm: "F 3",
				parent: 21,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 24.00000097754,
				op: 204.00000830909,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 24,
				ty: 4,
				nm: "C 2",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 159.582,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 4,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 14,
									s: [
										-240.373
									]
								},
								{
									t: 24.00000097754,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							699.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 7",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 24.00000097754,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 25,
				ty: 4,
				nm: "H 2",
				parent: 24,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 2",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 24.00000097754,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 26,
				ty: 4,
				nm: "F 2",
				parent: 24,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0,
										0.258823529412,
										0.811764705882,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 10.0000004073083,
				op: 24.00000097754,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 27,
				ty: 4,
				nm: "C",
				parent: 5,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						s: true,
						x: {
							a: 0,
							k: 159.582,
							ix: 3
						},
						y: {
							a: 1,
							k: [
								{
									i: {
										x: [
											0
										],
										y: [
											1
										]
									},
									o: {
										x: [
											0.333
										],
										y: [
											0
										]
									},
									t: 4,
									s: [
										-160.373
									]
								},
								{
									i: {
										x: [
											1
										],
										y: [
											1
										]
									},
									o: {
										x: [
											1
										],
										y: [
											0
										]
									},
									t: 14,
									s: [
										-240.373
									]
								},
								{
									t: 24.00000097754,
									s: [
										-160.373
									]
								}
							],
							ix: 4
						}
					},
					a: {
						a: 0,
						k: [
							699.582,
							379.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										379.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 7",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 10.0000004073083,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 28,
				ty: 4,
				nm: "H",
				parent: 27,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							699.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										699.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 2",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 10.0000004073083,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 29,
				ty: 4,
				nm: "F",
				parent: 27,
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 100,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							699.582,
							539.627,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100.6,
							100.6,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				shapes: [
					{
						ty: "gr",
						it: [
							{
								ind: 0,
								ty: "sh",
								ix: 1,
								ks: {
									a: 0,
									k: {
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												80,
												80
											],
											[
												-80,
												80
											],
											[
												-80,
												-80
											],
											[
												80,
												-80
											]
										],
										c: true
									},
									ix: 2
								},
								nm: "Path 1",
								mn: "ADBE Vector Shape - Group",
								hd: false
							},
							{
								ty: "fl",
								c: {
									a: 0,
									k: [
										0.325490196078,
										0.235294117647,
										1,
										1
									],
									ix: 4
								},
								o: {
									a: 0,
									k: 100,
									ix: 5
								},
								r: 1,
								bm: 0,
								nm: "Fill 1",
								mn: "ADBE Vector Graphic - Fill",
								hd: false
							},
							{
								ty: "tr",
								p: {
									a: 0,
									k: [
										699.582,
										539.627
									],
									ix: 2
								},
								a: {
									a: 0,
									k: [
										0,
										0
									],
									ix: 1
								},
								s: {
									a: 0,
									k: [
										100,
										100
									],
									ix: 3
								},
								r: {
									a: 0,
									k: 0,
									ix: 6
								},
								o: {
									a: 0,
									k: 100,
									ix: 7
								},
								sk: {
									a: 0,
									k: 0,
									ix: 4
								},
								sa: {
									a: 0,
									k: 0,
									ix: 5
								},
								nm: "Transform"
							}
						],
						nm: "Group 4",
						np: 2,
						cix: 2,
						bm: 0,
						ix: 1,
						mn: "ADBE Vector Group",
						hd: false
					}
				],
				ip: 0,
				op: 10.0000004073083,
				st: 8.00000032584668,
				bm: 0
			},
			{
				ddd: 0,
				ind: 30,
				ty: 3,
				nm: "Null 42",
				sr: 1,
				ks: {
					o: {
						a: 0,
						k: 0,
						ix: 11
					},
					r: {
						a: 0,
						k: 0,
						ix: 10
					},
					p: {
						a: 0,
						k: [
							480,
							480,
							0
						],
						ix: 2,
						l: 2
					},
					a: {
						a: 0,
						k: [
							0,
							0,
							0
						],
						ix: 1,
						l: 2
					},
					s: {
						a: 0,
						k: [
							100,
							100,
							100
						],
						ix: 6,
						l: 2
					}
				},
				ao: 0,
				ip: 0,
				op: 308.000012545097,
				st: 0,
				bm: 0
			}
		]
	}
];
var layers = [
	{
		ddd: 0,
		ind: 1,
		ty: 0,
		nm: "Celebration_BodyEnd",
		refId: "comp_0",
		sr: 1,
		ks: {
			o: {
				a: 0,
				k: 100,
				ix: 11
			},
			r: {
				a: 0,
				k: 0,
				ix: 10
			},
			p: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 2,
				l: 2
			},
			a: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 1,
				l: 2
			},
			s: {
				a: 0,
				k: [
					100,
					100,
					100
				],
				ix: 6,
				l: 2
			}
		},
		ao: 0,
		w: 800,
		h: 800,
		ip: 67.0000027289659,
		op: 225.000009164438,
		st: 67.0000027289659,
		bm: 0
	},
	{
		ddd: 0,
		ind: 2,
		ty: 0,
		nm: "Celebration_ShadowEnd",
		refId: "comp_1",
		sr: 1,
		ks: {
			o: {
				a: 0,
				k: 100,
				ix: 11
			},
			r: {
				a: 0,
				k: 0,
				ix: 10
			},
			p: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 2,
				l: 2
			},
			a: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 1,
				l: 2
			},
			s: {
				a: 0,
				k: [
					100,
					100,
					100
				],
				ix: 6,
				l: 2
			}
		},
		ao: 0,
		w: 800,
		h: 800,
		ip: 67.0000027289659,
		op: 225.000009164438,
		st: 67.0000027289659,
		bm: 0
	},
	{
		ddd: 0,
		ind: 3,
		ty: 0,
		nm: "Confetti",
		refId: "comp_2",
		sr: 1,
		ks: {
			o: {
				a: 0,
				k: 100,
				ix: 11
			},
			r: {
				a: 0,
				k: 0,
				ix: 10
			},
			p: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 2,
				l: 2
			},
			a: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 1,
				l: 2
			},
			s: {
				a: 0,
				k: [
					100,
					100,
					100
				],
				ix: 6,
				l: 2
			}
		},
		ao: 0,
		w: 800,
		h: 800,
		ip: 40.0000016292334,
		op: 68.0000027696968,
		st: 40.0000016292334,
		bm: 0
	},
	{
		ddd: 0,
		ind: 4,
		ty: 0,
		nm: "Celebration_Body04A",
		refId: "comp_3",
		sr: 1,
		ks: {
			o: {
				a: 0,
				k: 100,
				ix: 11
			},
			r: {
				a: 0,
				k: 0,
				ix: 10
			},
			p: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 2,
				l: 2
			},
			a: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 1,
				l: 2
			},
			s: {
				a: 0,
				k: [
					100,
					100,
					100
				],
				ix: 6,
				l: 2
			}
		},
		ao: 0,
		w: 800,
		h: 800,
		ip: 40.0000016292334,
		op: 68.0000027696968,
		st: 40.0000016292334,
		bm: 0
	},
	{
		ddd: 0,
		ind: 5,
		ty: 0,
		nm: "Celebration_Shadow04A",
		refId: "comp_4",
		sr: 1,
		ks: {
			o: {
				a: 0,
				k: 100,
				ix: 11
			},
			r: {
				a: 0,
				k: 0,
				ix: 10
			},
			p: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 2,
				l: 2
			},
			a: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 1,
				l: 2
			},
			s: {
				a: 0,
				k: [
					100,
					100,
					100
				],
				ix: 6,
				l: 2
			}
		},
		ao: 0,
		w: 800,
		h: 800,
		ip: 40.0000016292334,
		op: 68.0000027696968,
		st: 40.0000016292334,
		bm: 0
	},
	{
		ddd: 0,
		ind: 6,
		ty: 0,
		nm: "Confetti",
		refId: "comp_2",
		sr: 1,
		ks: {
			o: {
				a: 0,
				k: 100,
				ix: 11
			},
			r: {
				a: 0,
				k: 0,
				ix: 10
			},
			p: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 2,
				l: 2
			},
			a: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 1,
				l: 2
			},
			s: {
				a: 0,
				k: [
					100,
					100,
					100
				],
				ix: 6,
				l: 2
			}
		},
		ao: 0,
		w: 800,
		h: 800,
		ip: 20.0000008146167,
		op: 40.0000016292334,
		st: 20.0000008146167,
		bm: 0
	},
	{
		ddd: 0,
		ind: 7,
		ty: 0,
		nm: "Celebration_Body04A",
		refId: "comp_3",
		sr: 1,
		ks: {
			o: {
				a: 0,
				k: 100,
				ix: 11
			},
			r: {
				a: 0,
				k: 0,
				ix: 10
			},
			p: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 2,
				l: 2
			},
			a: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 1,
				l: 2
			},
			s: {
				a: 0,
				k: [
					100,
					100,
					100
				],
				ix: 6,
				l: 2
			}
		},
		ao: 0,
		w: 800,
		h: 800,
		ip: 20.0000008146167,
		op: 40.0000016292334,
		st: 20.0000008146167,
		bm: 0
	},
	{
		ddd: 0,
		ind: 8,
		ty: 0,
		nm: "Celebration_Shadow04A",
		refId: "comp_4",
		sr: 1,
		ks: {
			o: {
				a: 0,
				k: 100,
				ix: 11
			},
			r: {
				a: 0,
				k: 0,
				ix: 10
			},
			p: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 2,
				l: 2
			},
			a: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 1,
				l: 2
			},
			s: {
				a: 0,
				k: [
					100,
					100,
					100
				],
				ix: 6,
				l: 2
			}
		},
		ao: 0,
		w: 800,
		h: 800,
		ip: 20.0000008146167,
		op: 40.0000016292334,
		st: 20.0000008146167,
		bm: 0
	},
	{
		ddd: 0,
		ind: 9,
		ty: 0,
		nm: "Celebration_Body04",
		refId: "comp_5",
		sr: 1,
		ks: {
			o: {
				a: 0,
				k: 100,
				ix: 11
			},
			r: {
				a: 0,
				k: 0,
				ix: 10
			},
			p: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 2,
				l: 2
			},
			a: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 1,
				l: 2
			},
			s: {
				a: 0,
				k: [
					100,
					100,
					100
				],
				ix: 6,
				l: 2
			}
		},
		ao: 0,
		w: 800,
		h: 800,
		ip: 0,
		op: 20.0000008146167,
		st: 0,
		bm: 0
	},
	{
		ddd: 0,
		ind: 10,
		ty: 0,
		nm: "Celebration_Shadow04",
		refId: "comp_6",
		sr: 1,
		ks: {
			o: {
				a: 0,
				k: 100,
				ix: 11
			},
			r: {
				a: 0,
				k: 0,
				ix: 10
			},
			p: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 2,
				l: 2
			},
			a: {
				a: 0,
				k: [
					400,
					400,
					0
				],
				ix: 1,
				l: 2
			},
			s: {
				a: 0,
				k: [
					100,
					100,
					100
				],
				ix: 6,
				l: 2
			}
		},
		ao: 0,
		w: 800,
		h: 800,
		ip: 0,
		op: 20.0000008146167,
		st: 0,
		bm: 0
	}
];
var markers = [
];
var byteCelebration = {
	v: v,
	fr: fr,
	ip: ip,
	op: op,
	w: w,
	h: h,
	nm: nm,
	ddd: ddd,
	assets: assets,
	layers: layers,
	markers: markers
};

var HEIGHT$2 = 45;
var JSONS = {
  appear: byteAppear,
  disappear: byteDisappear,
  celebration: byteCelebration
};
function ByteAnimation(props) {
  var options = {
    animationData: props.lottieJson,
    autoplay: true,
    loop: false,
    onComplete: props.callback
  };
  var _useLottie = useLottie(options, {
      height: HEIGHT$2
    }),
    View = _useLottie.View;
  return View;
}
function Byte(props) {
  var _useState = useState(null),
    _useState2 = _slicedToArray$2(_useState, 2),
    animation = _useState2[0],
    setAnimation = _useState2[1];
  useEffect(function () {
    var _props$delay;
    (animation || !noTransitionFromNull.includes(props.animation)) && setTimeout(function () {
      return setAnimation(props.animation);
    }, (_props$delay = props.delay) !== null && _props$delay !== void 0 ? _props$delay : 0);
  }, [props.animation]);
  var noTransitionFromNull = ['disappear'];
  var callbacks = {
    appear: function appear() {
      return null;
    },
    disappear: function disappear() {
      return setAnimation(null);
    },
    celebration: function celebration() {
      return null;
    }
  };
  return jsxRuntimeExports.jsx(Box$1, {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    width: HEIGHT$2,
    children: animation ? jsxRuntimeExports.jsx(ByteAnimation, {
      lottieJson: JSONS[animation],
      callback: callbacks[animation]
    }) : null
  });
}

var _templateObject$4;
var SPACING$1 = '62px';
var CIRCLE_SIZE = 24;
var CIRCLE_BORDER_THICKNESS = 2;
var ROUNDING = '20px';
var APPEAR_DELAY = 800;
var BAR_DELAY = '0.6s';
var BAR_LENGTH_CHANGE_DURATION = '0.7s';
var BAR_BEZIER = 'cubic-bezier(0.64, 0.27, 0.47, 1.53)';
var BAR_Z_INDEX = 2;
var PULSE_AMPLITUDE$1 = '1.5px';
var PULSE_PERIOD = '1.4s';
var pulse = keyframes(_templateObject$4 || (_templateObject$4 = _taggedTemplateLiteral(["\n  from {\n    transform: translateY(-", ")\n  }\n  to {\n    transform: translateY(", ")\n  }\n"])), PULSE_AMPLITUDE$1, PULSE_AMPLITUDE$1);
function ByteStepper(props) {
  var getCircle = function getCircle(disappear) {
    return jsxRuntimeExports.jsx(Box$1, {
      sx: {
        width: '100%',
        height: '100%',
        border: "".concat(CIRCLE_BORDER_THICKNESS, "px dashed ").concat(PALETTE.secondary.purple[1]),
        borderRadius: '100%',
        background: 'white',
        boxShadow: '0 0 20px white',
        boxSizing: 'border-box',
        animation: disappear ? "".concat(fadeOut, " 0.5s ease-in-out") : null,
        animationDelay: "".concat(APPEAR_DELAY, "ms"),
        animationFillMode: 'forwards'
      }
    });
  };
  var getByte = function getByte(animation, delay) {
    return jsxRuntimeExports.jsx(Stack$1, {
      height: "100%",
      width: 0,
      position: "absolute",
      overflow: "visible",
      alignItems: "center",
      justifyContent: "center",
      sx: {
        transform: 'translateY(-3px)'
      },
      zIndex: BAR_Z_INDEX + 1,
      children: jsxRuntimeExports.jsx(Box$1, {
        sx: {
          animation: "".concat(pulse, " ").concat(PULSE_PERIOD, " ease-in-out"),
          animationDirection: 'alternate',
          animationIterationCount: 'infinite'
        },
        children: jsxRuntimeExports.jsx(Byte, {
          animation: animation,
          delay: delay
        })
      })
    });
  };
  return jsxRuntimeExports.jsxs(Box$1, {
    position: "relative",
    width: "fit-content",
    height: CIRCLE_SIZE,
    overflow: "visible",
    sx: {
      background: PALETTE.secondary.grey[1]
    },
    borderRadius: ROUNDING,
    children: [jsxRuntimeExports.jsx(Box$1, {
      width: "100%",
      height: "100%",
      position: "absolute",
      children: jsxRuntimeExports.jsx(Box$1, {
        width: "calc(".concat(props.step > 0 && props.step < props.nSteps - 1 ? CIRCLE_SIZE / 2 : 0, "px + ").concat(100 * props.step / (props.nSteps - 1), "%)"),
        height: "100%",
        sx: {
          background: PALETTE.secondary.purple[1],
          transition: BAR_LENGTH_CHANGE_DURATION,
          transitionDelay: BAR_DELAY,
          transitionTimingFunction: BAR_BEZIER
        },
        borderRadius: ROUNDING,
        position: "relative",
        zIndex: BAR_Z_INDEX
      })
    }), jsxRuntimeExports.jsx(Stack$1, {
      direction: "row",
      spacing: SPACING$1,
      overflow: "visible",
      children: _toConsumableArray(Array(props.nSteps).keys()).map(function (n) {
        return jsxRuntimeExports.jsxs(Stack$1, {
          overflow: "visible",
          alignItems: "center",
          children: [jsxRuntimeExports.jsx(Box$1, {
            sx: {
              width: CIRCLE_SIZE,
              height: CIRCLE_SIZE
            },
            children: getCircle(n === 0)
          }), getByte(n === props.step ? n === props.nSteps - 1 ? 'celebration' : 'appear' : 'disappear', n === props.step ? APPEAR_DELAY : undefined)]
        }, n);
      })
    })]
  });
}

var _templateObject$3, _templateObject2$1;
function ownKeys$6(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$5(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$6(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$6(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var WIDTH$2 = '926px';
var HEIGHT$1 = '630px';
var BORDER_RADIUS = '24px';
var PADDING = '32px';
var PADDING_MOBILE = '20px';
var DEFAULT_FADEIN_DURATION = 400;
var LONG_FADEIN_DURATION = 2000;
var Z_INDEX = 999;
var STEPPER_TITLE_SEPARATION = '30px';
var BACKDROP_STYLE = {
  backdropFilter: 'blur(3px)',
  backgroundColor: 'rgba(0, 0, 0, 0.3) !important'
};
var BODY_FADE_DURATION = 850;
var fadeIn = keyframes(_templateObject$3 || (_templateObject$3 = _taggedTemplateLiteral(["\nfrom {\n  opacity: 0;\n}\nto {\n  opacity: 1;\n}\n"])));
var fadeOut = keyframes(_templateObject2$1 || (_templateObject2$1 = _taggedTemplateLiteral(["\nfrom {\n  opacity: 1;\n}\nto {\n  opacity: 0;\n}\n"])));
function UrsorDialog(props) {
  var _props$button, _props$secondaryButto, _props$button$variant, _props$secondaryButto2;
  var _useState = useState(false),
    _useState2 = _slicedToArray$2(_useState, 2),
    bodyFadeout = _useState2[0],
    setBodyFadeout = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray$2(_useState3, 2),
    canFade = _useState4[0],
    setCanFade = _useState4[1];
  useEffect(function () {
    if (canFade && _.isNumber(props.step)) {
      setBodyFadeout(true);
      setTimeout(function () {
        setBodyFadeout(false);
      }, BODY_FADE_DURATION);
    }
    setCanFade(true);
  }, [props.step]);
  var animation = {
    animation: "".concat(bodyFadeout ? fadeOut : fadeIn, " ").concat(BODY_FADE_DURATION / 1000, "s ease-in-out")
  };
  var PrimaryButtonEndIcon = /*#__PURE__*/React__default$1.isValidElement(props.button) ? undefined : (_props$button = props.button) === null || _props$button === void 0 ? void 0 : _props$button.icon;
  var SecondaryButtonEndIcon = /*#__PURE__*/React__default$1.isValidElement(props.secondaryButton) ? undefined : (_props$secondaryButto = props.secondaryButton) === null || _props$secondaryButto === void 0 ? void 0 : _props$secondaryButto.icon;
  var _useWindowSize = useWindowSize(),
    windowWidth = _useWindowSize.width;
  return jsxRuntimeExports.jsx(Dialog, {
    transitionDuration: props.longFadeIn ? LONG_FADEIN_DURATION : DEFAULT_FADEIN_DURATION,
    open: props.open,
    onClose: function onClose() {
      var _props$onCloseCallbac;
      (_props$onCloseCallbac = props.onCloseCallback) === null || _props$onCloseCallbac === void 0 || _props$onCloseCallbac.call(props);
    },
    PaperProps: {
      style: {
        width: props.width || WIDTH$2,
        maxWidth: props.maxWidth || WIDTH$2,
        maxHeight: '100%',
        height: props.dynamicHeight ? undefined : props.height || HEIGHT$1,
        borderRadius: BORDER_RADIUS,
        margin: '20px'
      }
    },
    sx: {
      py: '10px',
      '.MuiBackdrop-root': _objectSpread$5({
        display: props.noBackdrop ? 'none' : 'visible'
      }, BACKDROP_STYLE)
    },
    children: jsxRuntimeExports.jsxs(Stack, {
      position: "relative",
      p: props.noPadding ? undefined : props.isMobile ? PADDING_MOBILE : PADDING,
      px: props.paddingX,
      py: props.paddingY,
      pt: props.paddingTop || "calc(".concat(PADDING, " - 4px)"),
      borderRadius: "25px",
      overflow: props.scrollable ? 's croll' : 'hidden',
      flex: 1,
      children: [props.backButtonCallback ? jsxRuntimeExports.jsx(Box, {
        position: "absolute",
        top: props.isMobile ? PADDING_MOBILE : PADDING,
        left: props.isMobile ? PADDING_MOBILE : PADDING,
        onClick: props.backButtonCallback,
        sx: {
          cursor: 'pointer',
          '&:hover': {
            opacity: 0.6
          },
          transition: '0.2s',
          zIndex: Z_INDEX
        },
        children: jsxRuntimeExports.jsx(SvgChevronLeftIcon, {
          height: "27px"
        })
      }) : null, _.isNumber(props.step) && props.nSteps ? jsxRuntimeExports.jsx(Stack, {
        width: "100%",
        alignItems: "center",
        position: "relative",
        marginBottom: STEPPER_TITLE_SEPARATION,
        sx: {
          transform: 'translateY(1px)'
        },
        children: jsxRuntimeExports.jsx(ByteStepper, {
          nSteps: props.nSteps,
          step: props.step
        })
      }) : null, props.onCloseCallback && !props.noCloseButton ? jsxRuntimeExports.jsx(Box, {
        position: "absolute",
        top: props.isMobile ? '29px' : '34px',
        right: props.isMobile ? '20px' : '34px',
        onClick: props.onCloseCallback,
        sx: {
          cursor: 'pointer',
          '&:hover': {
            opacity: 0.6
          },
          transition: '0.2s',
          zIndex: Z_INDEX
        },
        children: jsxRuntimeExports.jsx(SvgX, {
          height: props.isMobile ? '26px' : '27px'
        })
      }) : null, jsxRuntimeExports.jsxs(Stack, {
        flex: 1,
        spacing: props.isMobile ? '24px' : props.bunchedUpContent ? '12px' : '25px',
        justifyContent: props.bunchedUpContent ? undefined : 's pace-between',
        alignItems: "center",
        sx: _.isNumber(props.step) ? animation : null,
        overflow: "hidden",
        children: [props.subtitle || props.title || props.supertitle ? jsxRuntimeExports.jsxs(Stack, {
          spacing: props.isMobile ? '0px' : '12px',
          width: "100%",
          alignItems: "center",
          textAlign: "center",
          boxSizing: "border-box",
          children: [props.supertitle ? jsxRuntimeExports.jsx(Stack, {
            direction: "row",
            width: "100%",
            children: props.supertitle ? jsxRuntimeExports.jsx(Stack, {
              width: "100%",
              alignItems: "center",
              children: jsxRuntimeExports.jsx(Typography$1, {
                variant: props.title ? 'medium' : 'large',
                bold: true,
                color: PALETTE.font.dark,
                children: props.supertitle
              })
            }) : null
          }) : null, props.title ? jsxRuntimeExports.jsxs(Stack, {
            maxWidth: props.titleMaxWidth,
            spacing: "3px",
            children: [jsxRuntimeExports.jsx(Typography$1, {
              variant: props.isMobile ? 'h5' : props.titleSize || 'h4',
              bold: true,
              color: PALETTE.secondary.purple[2],
              sx: {
                maxWidth: props.titleMaxWidth
              },
              children: props.title
            }), props.info ? jsxRuntimeExports.jsx(InfoButton, _objectSpread$5({}, props.info)) : null]
          }) : null, props.subtitle ? jsxRuntimeExports.jsx(Stack, {
            alignItems: "center",
            pt: "6px",
            children: windowWidth < 750 ? jsxRuntimeExports.jsx(Typography$1, {
              variant: props.isMobile ? 'normal' : 'medium',
              sx: {
                textAlign: 'center'
              },
              children: props.subtitle.join(' ')
            }) : props.subtitle.map(function (sentence, index) {
              return jsxRuntimeExports.jsx(Typography$1, {
                variant: "medium",
                sx: {
                  textAlign: 'center'
                },
                children: sentence
              }, index);
            })
          }) : null]
        }) : null, jsxRuntimeExports.jsx(Stack, {
          flex: 1,
          width: "100%",
          minHeight: 0,
          maxHeight: props.bunchedUpContent ? 0 : undefined,
          alignItems: "center",
          justifyContent: "start",
          overflow: props.noOverflowHidden ? undefined : 'hidden',
          children: props.children
        }), props.button || props.secondaryButton ? jsxRuntimeExports.jsxs(Stack, {
          spacing: "8px",
          width: "300px",
          maxWidth: "100%",
          children: [!!props.button ? /*#__PURE__*/React__default$1.isValidElement(props.button) ? props.button : jsxRuntimeExports.jsx(UrsorButton, {
            disabled: props.button.disabled || bodyFadeout,
            onClick: function onClick() {
              props.button.callback();
            },
            backgroundColor: props.button.color,
            variant: (_props$button$variant = props.button.variant) !== null && _props$button$variant !== void 0 ? _props$button$variant : 'primary',
            endIcon: PrimaryButtonEndIcon,
            width: "100%",
            children: props.button.text
          }) : null, props.button || props.secondaryButton || props.googleButton || !props.noCloseButton ? jsxRuntimeExports.jsx(Stack, {
            spacing: "12px",
            width: "100%",
            alignItems: "center",
            children: !!props.secondaryButton ? /*#__PURE__*/React__default$1.isValidElement(props.secondaryButton) ? props.secondaryButton : jsxRuntimeExports.jsx(UrsorButton, {
              disabled: props.secondaryButton.disabled || bodyFadeout,
              onClick: function onClick() {
                props.secondaryButton.callback();
              },
              backgroundColor: props.secondaryButton.color,
              variant: (_props$secondaryButto2 = props.secondaryButton.variant) !== null && _props$secondaryButto2 !== void 0 ? _props$secondaryButto2 : 'secondary',
              endIcon: SecondaryButtonEndIcon,
              width: "100%",
              children: props.secondaryButton.text
            }) : null
          }) : null]
        }) : null]
      })]
    })
  });
}

dayjs.extend(advancedFormat);
var cleanUrl = function cleanUrl(url) {
  return url.replace('http://', '').replace('https://', '').replace('www.', '');
};

/*! js-cookie v3.0.5 | MIT */
/* eslint-disable no-var */
function assign (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      target[key] = source[key];
    }
  }
  return target
}
/* eslint-enable no-var */

/* eslint-disable no-var */
var defaultConverter = {
  read: function (value) {
    if (value[0] === '"') {
      value = value.slice(1, -1);
    }
    return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent)
  },
  write: function (value) {
    return encodeURIComponent(value).replace(
      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,
      decodeURIComponent
    )
  }
};
/* eslint-enable no-var */

/* eslint-disable no-var */

function init (converter, defaultAttributes) {
  function set (name, value, attributes) {
    if (typeof document === 'undefined') {
      return
    }

    attributes = assign({}, defaultAttributes, attributes);

    if (typeof attributes.expires === 'number') {
      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
    }
    if (attributes.expires) {
      attributes.expires = attributes.expires.toUTCString();
    }

    name = encodeURIComponent(name)
      .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)
      .replace(/[()]/g, escape);

    var stringifiedAttributes = '';
    for (var attributeName in attributes) {
      if (!attributes[attributeName]) {
        continue
      }

      stringifiedAttributes += '; ' + attributeName;

      if (attributes[attributeName] === true) {
        continue
      }

      // Considers RFC 6265 section 5.2:
      // ...
      // 3.  If the remaining unparsed-attributes contains a %x3B (";")
      //     character:
      // Consume the characters of the unparsed-attributes up to,
      // not including, the first %x3B (";") character.
      // ...
      stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
    }

    return (document.cookie =
      name + '=' + converter.write(value, name) + stringifiedAttributes)
  }

  function get (name) {
    if (typeof document === 'undefined' || (arguments.length && !name)) {
      return
    }

    // To prevent the for loop in the first place assign an empty array
    // in case there are no cookies at all.
    var cookies = document.cookie ? document.cookie.split('; ') : [];
    var jar = {};
    for (var i = 0; i < cookies.length; i++) {
      var parts = cookies[i].split('=');
      var value = parts.slice(1).join('=');

      try {
        var found = decodeURIComponent(parts[0]);
        jar[found] = converter.read(value, found);

        if (name === found) {
          break
        }
      } catch (e) {}
    }

    return name ? jar[name] : jar
  }

  return Object.create(
    {
      set,
      get,
      remove: function (name, attributes) {
        set(
          name,
          '',
          assign({}, attributes, {
            expires: -1
          })
        );
      },
      withAttributes: function (attributes) {
        return init(this.converter, assign({}, this.attributes, attributes))
      },
      withConverter: function (converter) {
        return init(assign({}, this.converter, converter), this.attributes)
      }
    },
    {
      attributes: { value: Object.freeze(defaultAttributes) },
      converter: { value: Object.freeze(converter) }
    }
  )
}

var api = init(defaultConverter, { path: '/' });

if (window.location.hostname !== 'localhost' && !process.env.AUTH_URL) throw new Error('You must set AUTH_URL (Endpoint to call to login your users) in your .env');
var BACKEND_URL = window.location.hostname === 'localhost' ? 'http://localhost:8000' : 'https://api.astrosafe.co';
var AUTH_URL = window.location.hostname === 'localhost' ? 'http://localhost:8000' : process.env.AUTH_URL;
var getAbsoluteUrl = function getAbsoluteUrl(url) {
  return "https://".concat(url);
};
var get = function get(route) {
  return fetch(//@ts-ignore
  "".concat(BACKEND_URL, "/").concat(route), {
    method: 'GET',
    credentials: 'include'
  });
};
var post = function post(route, body) {
  return fetch(//@ts-ignore
  "".concat(BACKEND_URL, "/").concat(route), {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    credentials: 'include',
    body: body ? JSON.stringify(body) : undefined,
    cache: 'no-store'
  })["catch"](function () {
    return api.remove('user_info');
  });
};
var put = function put(route, body) {
  return fetch(//@ts-ignore
  "".concat(BACKEND_URL, "/").concat(route), {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json'
    },
    credentials: 'include',
    body: JSON.stringify(body)
  })["catch"](function () {
    return api.remove('user_info');
  });
};
var patch = function patch(route, body) {
  return fetch(//@ts-ignore
  "".concat(BACKEND_URL, "/").concat(route), {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json'
    },
    credentials: 'include',
    body: JSON.stringify(body)
  })["catch"](function () {
    return api.remove('user_info');
  });
};
var dellete = function dellete(route) {
  return fetch(//@ts-ignore
  "".concat(BACKEND_URL, "/").concat(route), {
    method: 'DELETE',
    headers: {
      'Access-Control-Allow-Origin': '*'
    },
    credentials: 'include'
  })["catch"](function () {
    return api.remove('user_info');
  });
};
var ApiController = /*#__PURE__*/function () {
  function ApiController() {
    _classCallCheck$1(this, ApiController);
  }
  return _createClass$1(ApiController, null, [{
    key: "getDevice",
    value: function () {
      var _getDevice = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", get("devices/".concat(id)).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function getDevice(_x) {
        return _getDevice.apply(this, arguments);
      }
      return getDevice;
    }()
  }, {
    key: "getEnrichedDevice",
    value: function () {
      var _getEnrichedDevice = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", get("devices/".concat(id, "?includeScreenTime=true&includeConfig=true&includeTimeLimits=true&includeAllowedTimes=true&includeOnlineStatus=true&includeLatestBrowsing=true")).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function getEnrichedDevice(_x2) {
        return _getEnrichedDevice.apply(this, arguments);
      }
      return getEnrichedDevice;
    }()
  }, {
    key: "getDeviceWithTimesAndConfig",
    value: function () {
      var _getDeviceWithTimesAndConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", get("devices/".concat(id, "?includeTimeLimits=true&includeAllowedTimes=true&includeConfig=true")).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function getDeviceWithTimesAndConfig(_x3) {
        return _getDeviceWithTimesAndConfig.apply(this, arguments);
      }
      return getDeviceWithTimesAndConfig;
    }()
  }, {
    key: "renameDevice",
    value: function () {
      var _renameDevice = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id, name) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", patch("devices/".concat(id), {
                name: name
              }));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function renameDevice(_x4, _x5) {
        return _renameDevice.apply(this, arguments);
      }
      return renameDevice;
    }()
  }, {
    key: "getGroupEnrichedDevices",
    value: function () {
      var _getGroupEnrichedDevices = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(id) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", get("devices?groupId=".concat(id, "&includeScreenTime=true&includeConfig=true&includeTimeLimits=true&includeAllowedTimes=true&includeOnlineStatus=true&includeLatestBrowsing=true")).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function getGroupEnrichedDevices(_x6) {
        return _getGroupEnrichedDevices.apply(this, arguments);
      }
      return getGroupEnrichedDevices;
    }()
  }, {
    key: "getFolderDevices",
    value: function () {
      var _getFolderDevices = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(id) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", get("devices?contentBucketId=".concat(id, "&includeConfig=true")).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function getFolderDevices(_x7) {
        return _getFolderDevices.apply(this, arguments);
      }
      return getFolderDevices;
    }()
  }, {
    key: "getDeviceFolders",
    value: function () {
      var _getDeviceFolders = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(id) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", get("content/buckets?deviceId=".concat(id, "&includePreview=true")).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function getDeviceFolders(_x8) {
        return _getDeviceFolders.apply(this, arguments);
      }
      return getDeviceFolders;
    }()
  }, {
    key: "getGroupFolders",
    value: function () {
      var _getGroupFolders = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(id) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", get("content/buckets?groupId=".concat(id)).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function getGroupFolders(_x9) {
        return _getGroupFolders.apply(this, arguments);
      }
      return getGroupFolders;
    }()
  }, {
    key: "addFolderToDevice",
    value: function () {
      var _addFolderToDevice = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(folderId, deviceId) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", post("content/buckets/".concat(folderId, "/devices"), {
                deviceId: deviceId
              }));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function addFolderToDevice(_x10, _x11) {
        return _addFolderToDevice.apply(this, arguments);
      }
      return addFolderToDevice;
    }()
  }, {
    key: "removeFolderFromDevice",
    value: function () {
      var _removeFolderFromDevice = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(folderId, deviceId) {
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", dellete("content/buckets/".concat(folderId, "/devices/").concat(deviceId)));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function removeFolderFromDevice(_x12, _x13) {
        return _removeFolderFromDevice.apply(this, arguments);
      }
      return removeFolderFromDevice;
    }()
  }, {
    key: "createFolder",
    value: function () {
      var _createFolder = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(title, groupId) {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", post('content/buckets', {
                title: title,
                groupId: groupId
              }).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function createFolder(_x14, _x15) {
        return _createFolder.apply(this, arguments);
      }
      return createFolder;
    }()
  }, {
    key: "removeFolder",
    value: function () {
      var _removeFolder = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(id) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", dellete("content/buckets/".concat(id)));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function removeFolder(_x16) {
        return _removeFolder.apply(this, arguments);
      }
      return removeFolder;
    }()
  }, {
    key: "getFolder",
    value: function () {
      var _getFolder = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(id) {
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", get("content/buckets/".concat(id)).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function getFolder(_x17) {
        return _getFolder.apply(this, arguments);
      }
      return getFolder;
    }()
  }, {
    key: "getEnrichedFolders",
    value: function () {
      var _getEnrichedFolders = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(id) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", get("content/buckets?groupId=".concat(id, "&includePreview=true")).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function getEnrichedFolders(_x18) {
        return _getEnrichedFolders.apply(this, arguments);
      }
      return getEnrichedFolders;
    }()
  }, {
    key: "renameFolder",
    value: function () {
      var _renameFolder = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(id, title) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", put("content/buckets/".concat(id), {
                title: title
              }));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function renameFolder(_x19, _x20) {
        return _renameFolder.apply(this, arguments);
      }
      return renameFolder;
    }()
  }, {
    key: "createLink",
    value: function () {
      var _createLink = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(title, url, thumbnailUrl, contentBucketId) {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              return _context16.abrupt("return", post("content/links", {
                title: title,
                url: url,
                thumbnailUrl: thumbnailUrl,
                contentBucketId: contentBucketId
              }));
            case 1:
            case "end":
              return _context16.stop();
          }
        }, _callee16);
      }));
      function createLink(_x21, _x22, _x23, _x24) {
        return _createLink.apply(this, arguments);
      }
      return createLink;
    }()
  }, {
    key: "updateLink",
    value: function () {
      var _updateLink = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(id, title, url, thumbnailUrl) {
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              return _context17.abrupt("return", put("content/links/".concat(id), {
                title: title,
                url: url,
                thumbnailUrl: thumbnailUrl
              }));
            case 1:
            case "end":
              return _context17.stop();
          }
        }, _callee17);
      }));
      function updateLink(_x25, _x26, _x27, _x28) {
        return _updateLink.apply(this, arguments);
      }
      return updateLink;
    }()
  }, {
    key: "deleteLink",
    value: function () {
      var _deleteLink = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(id) {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              return _context18.abrupt("return", dellete("content/links/".concat(id)));
            case 1:
            case "end":
              return _context18.stop();
          }
        }, _callee18);
      }));
      function deleteLink(_x29) {
        return _deleteLink.apply(this, arguments);
      }
      return deleteLink;
    }()
  }, {
    key: "createVideo",
    value: function () {
      var _createVideo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(title, url, thumbnailUrl, contentBucketId) {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              return _context19.abrupt("return", post("content/videos", {
                title: title,
                url: url,
                thumbnailUrl: thumbnailUrl,
                contentBucketId: contentBucketId
              }));
            case 1:
            case "end":
              return _context19.stop();
          }
        }, _callee19);
      }));
      function createVideo(_x30, _x31, _x32, _x33) {
        return _createVideo.apply(this, arguments);
      }
      return createVideo;
    }()
  }, {
    key: "updateVideo",
    value: function () {
      var _updateVideo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(id, title, url, contentBucketId, isChannel
      //thumbnailUrl: IVideo["thumbnailUrl"]
      ) {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              return _context20.abrupt("return", put("content/videos/".concat(id).concat(isChannel ? '?isChannel=true' : ''), {
                title: title,
                url: url,
                contentBucketId: contentBucketId
              }));
            case 1:
            case "end":
              return _context20.stop();
          }
        }, _callee20);
      }));
      function updateVideo(_x34, _x35, _x36, _x37, _x38) {
        return _updateVideo.apply(this, arguments);
      }
      return updateVideo;
    }()
  }, {
    key: "deleteVideo",
    value: function () {
      var _deleteVideo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(id, isChannel) {
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              return _context21.abrupt("return", dellete("content/videos/".concat(id).concat(isChannel ? '?isChannel=true' : '')));
            case 1:
            case "end":
              return _context21.stop();
          }
        }, _callee21);
      }));
      function deleteVideo(_x39, _x40) {
        return _deleteVideo.apply(this, arguments);
      }
      return deleteVideo;
    }()
  }, {
    key: "createChannel",
    value: function () {
      var _createChannel = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(title, url, bannerUrl, profileUrl, contentBucketId) {
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              return _context22.abrupt("return", post("content/channels", {
                title: title,
                url: url,
                bannerUrl: bannerUrl,
                profileUrl: profileUrl,
                contentBucketId: contentBucketId
              }));
            case 1:
            case "end":
              return _context22.stop();
          }
        }, _callee22);
      }));
      function createChannel(_x41, _x42, _x43, _x44, _x45) {
        return _createChannel.apply(this, arguments);
      }
      return createChannel;
    }()
  }, {
    key: "updateChannel",
    value: function () {
      var _updateChannel = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23(id, title, url, bannerUrl, profileUrl) {
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              return _context23.abrupt("return", put("content/channels/".concat(id), {
                title: title,
                url: url,
                bannerUrl: bannerUrl,
                profileUrl: profileUrl
              }));
            case 1:
            case "end":
              return _context23.stop();
          }
        }, _callee23);
      }));
      function updateChannel(_x46, _x47, _x48, _x49, _x50) {
        return _updateChannel.apply(this, arguments);
      }
      return updateChannel;
    }()
  }, {
    key: "deleteChannel",
    value: function () {
      var _deleteChannel = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24(id) {
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              return _context24.abrupt("return", dellete("content/channels/".concat(id)));
            case 1:
            case "end":
              return _context24.stop();
          }
        }, _callee24);
      }));
      function deleteChannel(_x51) {
        return _deleteChannel.apply(this, arguments);
      }
      return deleteChannel;
    }()
  }, {
    key: "getUser",
    value: function () {
      var _getUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25(id) {
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              return _context25.abrupt("return", get("users/".concat(id)).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context25.stop();
          }
        }, _callee25);
      }));
      function getUser(_x52) {
        return _getUser.apply(this, arguments);
      }
      return getUser;
    }()
  }, {
    key: "getGroupUsers",
    value: function () {
      var _getGroupUsers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26(id) {
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              return _context26.abrupt("return", get("users?groupId=".concat(id)).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context26.stop();
          }
        }, _callee26);
      }));
      function getGroupUsers(_x53) {
        return _getGroupUsers.apply(this, arguments);
      }
      return getGroupUsers;
    }()
  }, {
    key: "createUser",
    value: function () {
      var _createUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27(email) {
        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              return _context27.abrupt("return", post('users', {
                email: email,
                realName: '',
                displayName: ''
              }));
            case 1:
            case "end":
              return _context27.stop();
          }
        }, _callee27);
      }));
      function createUser(_x54) {
        return _createUser.apply(this, arguments);
      }
      return createUser;
    }()
  }, {
    key: "createFilter",
    value: function () {
      var _createFilter = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee28(groupId, title) {
        return _regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) switch (_context28.prev = _context28.next) {
            case 0:
              return _context28.abrupt("return", post("groups/".concat(groupId, "/filters"), {
                title: title
              }).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context28.stop();
          }
        }, _callee28);
      }));
      function createFilter(_x55, _x56) {
        return _createFilter.apply(this, arguments);
      }
      return createFilter;
    }()
  }, {
    key: "changeFilterName",
    value: function () {
      var _changeFilterName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee29(id, title) {
        return _regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) switch (_context29.prev = _context29.next) {
            case 0:
              return _context29.abrupt("return", patch("filters/".concat(id), {
                title: title
              }));
            case 1:
            case "end":
              return _context29.stop();
          }
        }, _callee29);
      }));
      function changeFilterName(_x57, _x58) {
        return _changeFilterName.apply(this, arguments);
      }
      return changeFilterName;
    }()
  }, {
    key: "removeFilter",
    value: function () {
      var _removeFilter = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee30(id) {
        return _regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) switch (_context30.prev = _context30.next) {
            case 0:
              return _context30.abrupt("return", dellete("filters/".concat(id)));
            case 1:
            case "end":
              return _context30.stop();
          }
        }, _callee30);
      }));
      function removeFilter(_x59) {
        return _removeFilter.apply(this, arguments);
      }
      return removeFilter;
    }()
  }, {
    key: "getFilter",
    value: function () {
      var _getFilter = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee31(id) {
        return _regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) switch (_context31.prev = _context31.next) {
            case 0:
              return _context31.abrupt("return", get("filters/".concat(id)).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context31.stop();
          }
        }, _callee31);
      }));
      function getFilter(_x60) {
        return _getFilter.apply(this, arguments);
      }
      return getFilter;
    }()
  }, {
    key: "getGroupFilters",
    value: function () {
      var _getGroupFilters = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee32(id) {
        return _regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) switch (_context32.prev = _context32.next) {
            case 0:
              return _context32.abrupt("return", get("filters?groupId=".concat(id)).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context32.stop();
          }
        }, _callee32);
      }));
      function getGroupFilters(_x61) {
        return _getGroupFilters.apply(this, arguments);
      }
      return getGroupFilters;
    }()
  }, {
    key: "getAllFilterCategories",
    value: function () {
      var _getAllFilterCategories = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee33() {
        return _regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) switch (_context33.prev = _context33.next) {
            case 0:
              return _context33.abrupt("return", get('filters/categories').then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context33.stop();
          }
        }, _callee33);
      }));
      function getAllFilterCategories() {
        return _getAllFilterCategories.apply(this, arguments);
      }
      return getAllFilterCategories;
    }()
  }, {
    key: "getFilterCategories",
    value: function () {
      var _getFilterCategories = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee34(id) {
        return _regeneratorRuntime.wrap(function _callee34$(_context34) {
          while (1) switch (_context34.prev = _context34.next) {
            case 0:
              return _context34.abrupt("return", get("filters/".concat(id, "/whitelist/categories")).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context34.stop();
          }
        }, _callee34);
      }));
      function getFilterCategories(_x62) {
        return _getFilterCategories.apply(this, arguments);
      }
      return getFilterCategories;
    }()
  }, {
    key: "getFilterDevices",
    value: function () {
      var _getFilterDevices = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee35(id, groupId) {
        return _regeneratorRuntime.wrap(function _callee35$(_context35) {
          while (1) switch (_context35.prev = _context35.next) {
            case 0:
              return _context35.abrupt("return", get("devices?groupId=".concat(groupId, "&filterId=").concat(id, "&includeConfig=true")).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context35.stop();
          }
        }, _callee35);
      }));
      function getFilterDevices(_x63, _x64) {
        return _getFilterDevices.apply(this, arguments);
      }
      return getFilterDevices;
    }()
  }, {
    key: "addFilterToDevice",
    value: function () {
      var _addFilterToDevice = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee36(filterId, deviceId) {
        return _regeneratorRuntime.wrap(function _callee36$(_context36) {
          while (1) switch (_context36.prev = _context36.next) {
            case 0:
              return _context36.abrupt("return", post("filters/".concat(filterId, "/devices"), {
                deviceId: deviceId
              }));
            case 1:
            case "end":
              return _context36.stop();
          }
        }, _callee36);
      }));
      function addFilterToDevice(_x65, _x66) {
        return _addFilterToDevice.apply(this, arguments);
      }
      return addFilterToDevice;
    }()
  }, {
    key: "getBlockedSites",
    value: function () {
      var _getBlockedSites = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee37(filterId) {
        return _regeneratorRuntime.wrap(function _callee37$(_context37) {
          while (1) switch (_context37.prev = _context37.next) {
            case 0:
              return _context37.abrupt("return", get("filters/".concat(filterId, "/blacklist")).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context37.stop();
          }
        }, _callee37);
      }));
      function getBlockedSites(_x67) {
        return _getBlockedSites.apply(this, arguments);
      }
      return getBlockedSites;
    }()
  }, {
    key: "getAllowedSites",
    value: function () {
      var _getAllowedSites = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee38(filterId) {
        return _regeneratorRuntime.wrap(function _callee38$(_context38) {
          while (1) switch (_context38.prev = _context38.next) {
            case 0:
              return _context38.abrupt("return", get("filters/".concat(filterId, "/whitelist")).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context38.stop();
          }
        }, _callee38);
      }));
      function getAllowedSites(_x68) {
        return _getAllowedSites.apply(this, arguments);
      }
      return getAllowedSites;
    }()
  }, {
    key: "removeBlockedSite",
    value: function () {
      var _removeBlockedSite = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee39(filterId, url) {
        return _regeneratorRuntime.wrap(function _callee39$(_context39) {
          while (1) switch (_context39.prev = _context39.next) {
            case 0:
              return _context39.abrupt("return", dellete("filters/".concat(filterId, "/blacklist/").concat(encodeURIComponent(getAbsoluteUrl(cleanUrl(url))))));
            case 1:
            case "end":
              return _context39.stop();
          }
        }, _callee39);
      }));
      function removeBlockedSite(_x69, _x70) {
        return _removeBlockedSite.apply(this, arguments);
      }
      return removeBlockedSite;
    }()
  }, {
    key: "addBlockedSite",
    value: function () {
      var _addBlockedSite = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee40(filterId, url) {
        return _regeneratorRuntime.wrap(function _callee40$(_context40) {
          while (1) switch (_context40.prev = _context40.next) {
            case 0:
              return _context40.abrupt("return", post("filters/".concat(filterId, "/blacklist"), {
                url: getAbsoluteUrl(cleanUrl(url))
              }));
            case 1:
            case "end":
              return _context40.stop();
          }
        }, _callee40);
      }));
      function addBlockedSite(_x71, _x72) {
        return _addBlockedSite.apply(this, arguments);
      }
      return addBlockedSite;
    }()
  }, {
    key: "removeAllowedSite",
    value: function () {
      var _removeAllowedSite = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee41(filterId, url) {
        return _regeneratorRuntime.wrap(function _callee41$(_context41) {
          while (1) switch (_context41.prev = _context41.next) {
            case 0:
              return _context41.abrupt("return", dellete("filters/".concat(filterId, "/whitelist/").concat(encodeURIComponent(getAbsoluteUrl(cleanUrl(url))))));
            case 1:
            case "end":
              return _context41.stop();
          }
        }, _callee41);
      }));
      function removeAllowedSite(_x73, _x74) {
        return _removeAllowedSite.apply(this, arguments);
      }
      return removeAllowedSite;
    }()
  }, {
    key: "addAllowedSite",
    value: function () {
      var _addAllowedSite = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee42(filterId, url) {
        return _regeneratorRuntime.wrap(function _callee42$(_context42) {
          while (1) switch (_context42.prev = _context42.next) {
            case 0:
              return _context42.abrupt("return", post("filters/".concat(filterId, "/whitelist"), {
                url: getAbsoluteUrl(cleanUrl(url))
              }));
            case 1:
            case "end":
              return _context42.stop();
          }
        }, _callee42);
      }));
      function addAllowedSite(_x75, _x76) {
        return _addAllowedSite.apply(this, arguments);
      }
      return addAllowedSite;
    }()
  }, {
    key: "addWhitelistSubcategory",
    value: function () {
      var _addWhitelistSubcategory = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee43(filterId, id) {
        return _regeneratorRuntime.wrap(function _callee43$(_context43) {
          while (1) switch (_context43.prev = _context43.next) {
            case 0:
              return _context43.abrupt("return", post("filters/".concat(filterId, "/whitelist/categories"), {
                categoryId: id.toString()
              }));
            case 1:
            case "end":
              return _context43.stop();
          }
        }, _callee43);
      }));
      function addWhitelistSubcategory(_x77, _x78) {
        return _addWhitelistSubcategory.apply(this, arguments);
      }
      return addWhitelistSubcategory;
    }()
  }, {
    key: "removeWhitelistSubcategory",
    value: function () {
      var _removeWhitelistSubcategory = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee44(filterId, id) {
        return _regeneratorRuntime.wrap(function _callee44$(_context44) {
          while (1) switch (_context44.prev = _context44.next) {
            case 0:
              return _context44.abrupt("return", dellete("filters/".concat(filterId, "/whitelist/categories/").concat(id)));
            case 1:
            case "end":
              return _context44.stop();
          }
        }, _callee44);
      }));
      function removeWhitelistSubcategory(_x79, _x80) {
        return _removeWhitelistSubcategory.apply(this, arguments);
      }
      return removeWhitelistSubcategory;
    }()
  }, {
    key: "addWhitelistCategory",
    value: function () {
      var _addWhitelistCategory = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee45(filterId, id) {
        return _regeneratorRuntime.wrap(function _callee45$(_context45) {
          while (1) switch (_context45.prev = _context45.next) {
            case 0:
              return _context45.abrupt("return", post("filters/".concat(filterId, "/whitelist/categories?isGroup=true"), {
                categoryId: id.toString()
              }));
            case 1:
            case "end":
              return _context45.stop();
          }
        }, _callee45);
      }));
      function addWhitelistCategory(_x81, _x82) {
        return _addWhitelistCategory.apply(this, arguments);
      }
      return addWhitelistCategory;
    }()
  }, {
    key: "removeWhitelistCategory",
    value: function () {
      var _removeWhitelistCategory = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee46(filterId, id) {
        return _regeneratorRuntime.wrap(function _callee46$(_context46) {
          while (1) switch (_context46.prev = _context46.next) {
            case 0:
              return _context46.abrupt("return", dellete("filters/".concat(filterId, "/whitelist/categories/").concat(id, "?isGroup=true")));
            case 1:
            case "end":
              return _context46.stop();
          }
        }, _callee46);
      }));
      function removeWhitelistCategory(_x83, _x84) {
        return _removeWhitelistCategory.apply(this, arguments);
      }
      return removeWhitelistCategory;
    }()
  }, {
    key: "getBlockedSearchWords",
    value: function () {
      var _getBlockedSearchWords = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee47(filterId) {
        return _regeneratorRuntime.wrap(function _callee47$(_context47) {
          while (1) switch (_context47.prev = _context47.next) {
            case 0:
              return _context47.abrupt("return", get("filters/".concat(filterId, "/blacklist/words")).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context47.stop();
          }
        }, _callee47);
      }));
      function getBlockedSearchWords(_x85) {
        return _getBlockedSearchWords.apply(this, arguments);
      }
      return getBlockedSearchWords;
    }()
  }, {
    key: "addBlockedSearchWord",
    value: function () {
      var _addBlockedSearchWord = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee48(filterId, word) {
        return _regeneratorRuntime.wrap(function _callee48$(_context48) {
          while (1) switch (_context48.prev = _context48.next) {
            case 0:
              return _context48.abrupt("return", post("filters/".concat(filterId, "/blacklist/words"), {
                word: word
              }));
            case 1:
            case "end":
              return _context48.stop();
          }
        }, _callee48);
      }));
      function addBlockedSearchWord(_x86, _x87) {
        return _addBlockedSearchWord.apply(this, arguments);
      }
      return addBlockedSearchWord;
    }()
  }, {
    key: "removeBlockedSearchWord",
    value: function () {
      var _removeBlockedSearchWord = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee49(filterId, word) {
        return _regeneratorRuntime.wrap(function _callee49$(_context49) {
          while (1) switch (_context49.prev = _context49.next) {
            case 0:
              return _context49.abrupt("return", dellete("filters/".concat(filterId, "/blacklist/words/").concat(word)));
            case 1:
            case "end":
              return _context49.stop();
          }
        }, _callee49);
      }));
      function removeBlockedSearchWord(_x88, _x89) {
        return _removeBlockedSearchWord.apply(this, arguments);
      }
      return removeBlockedSearchWord;
    }()
  }, {
    key: "getRequestedSites",
    value: function () {
      var _getRequestedSites = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee50(deviceId) {
        return _regeneratorRuntime.wrap(function _callee50$(_context50) {
          while (1) switch (_context50.prev = _context50.next) {
            case 0:
              return _context50.abrupt("return", get("devices/".concat(deviceId, "/requests?status=pending")).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context50.stop();
          }
        }, _callee50);
      }));
      function getRequestedSites(_x90) {
        return _getRequestedSites.apply(this, arguments);
      }
      return getRequestedSites;
    }()
  }, {
    key: "approveRequestedSite",
    value: function () {
      var _approveRequestedSite = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee51(id) {
        return _regeneratorRuntime.wrap(function _callee51$(_context51) {
          while (1) switch (_context51.prev = _context51.next) {
            case 0:
              return _context51.abrupt("return", post("devices/requests/".concat(id, "/approve"), {}));
            case 1:
            case "end":
              return _context51.stop();
          }
        }, _callee51);
      }));
      function approveRequestedSite(_x91) {
        return _approveRequestedSite.apply(this, arguments);
      }
      return approveRequestedSite;
    }()
  }, {
    key: "denyRequestedSite",
    value: function () {
      var _denyRequestedSite = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee52(id) {
        return _regeneratorRuntime.wrap(function _callee52$(_context52) {
          while (1) switch (_context52.prev = _context52.next) {
            case 0:
              return _context52.abrupt("return", dellete("devices/requests/".concat(id, "/deny")));
            case 1:
            case "end":
              return _context52.stop();
          }
        }, _callee52);
      }));
      function denyRequestedSite(_x92) {
        return _denyRequestedSite.apply(this, arguments);
      }
      return denyRequestedSite;
    }()
  }, {
    key: "getLinkPreview",
    value: function () {
      var _getLinkPreview = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee53(url) {
        return _regeneratorRuntime.wrap(function _callee53$(_context53) {
          while (1) switch (_context53.prev = _context53.next) {
            case 0:
              return _context53.abrupt("return", get("content/links/preview/".concat(url)).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context53.stop();
          }
        }, _callee53);
      }));
      function getLinkPreview(_x93) {
        return _getLinkPreview.apply(this, arguments);
      }
      return getLinkPreview;
    }()
  }, {
    key: "getVideoPreview",
    value: function () {
      var _getVideoPreview = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee54(url) {
        return _regeneratorRuntime.wrap(function _callee54$(_context54) {
          while (1) switch (_context54.prev = _context54.next) {
            case 0:
              return _context54.abrupt("return", get("content/videos/preview/".concat(url)).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context54.stop();
          }
        }, _callee54);
      }));
      function getVideoPreview(_x94) {
        return _getVideoPreview.apply(this, arguments);
      }
      return getVideoPreview;
    }()
  }, {
    key: "getChannelPreview",
    value: function () {
      var _getChannelPreview = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee55(url) {
        return _regeneratorRuntime.wrap(function _callee55$(_context55) {
          while (1) switch (_context55.prev = _context55.next) {
            case 0:
              return _context55.abrupt("return", get("content/channels/preview/".concat(url)).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context55.stop();
          }
        }, _callee55);
      }));
      function getChannelPreview(_x95) {
        return _getChannelPreview.apply(this, arguments);
      }
      return getChannelPreview;
    }()
  }, {
    key: "setTimeLimit",
    value: function () {
      var _setTimeLimit = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee56(limitId, timeLimit) {
        return _regeneratorRuntime.wrap(function _callee56$(_context56) {
          while (1) switch (_context56.prev = _context56.next) {
            case 0:
              return _context56.abrupt("return", patch("devices/configs/screentime/limits/".concat(limitId), {
                timeLimit: timeLimit
              }));
            case 1:
            case "end":
              return _context56.stop();
          }
        }, _callee56);
      }));
      function setTimeLimit(_x96, _x97) {
        return _setTimeLimit.apply(this, arguments);
      }
      return setTimeLimit;
    }()
  }, {
    key: "addAllowedTimeRange",
    value: function () {
      var _addAllowedTimeRange = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee57(deviceId, day, startTime, endTime) {
        return _regeneratorRuntime.wrap(function _callee57$(_context57) {
          while (1) switch (_context57.prev = _context57.next) {
            case 0:
              return _context57.abrupt("return", post("devices/".concat(deviceId, "/config/screentime/allowed"), {
                startTime: startTime,
                endTime: endTime
              }));
            case 1:
            case "end":
              return _context57.stop();
          }
        }, _callee57);
      }));
      function addAllowedTimeRange(_x98, _x99, _x100, _x101) {
        return _addAllowedTimeRange.apply(this, arguments);
      }
      return addAllowedTimeRange;
    }()
  }, {
    key: "changeAllowedTimeRange",
    value: function () {
      var _changeAllowedTimeRange = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee58(id, startTime, endTime) {
        return _regeneratorRuntime.wrap(function _callee58$(_context58) {
          while (1) switch (_context58.prev = _context58.next) {
            case 0:
              return _context58.abrupt("return", patch("devices/configs/screentime/allowed/".concat(id), {
                startTime: startTime,
                endTime: endTime
              }));
            case 1:
            case "end":
              return _context58.stop();
          }
        }, _callee58);
      }));
      function changeAllowedTimeRange(_x102, _x103, _x104) {
        return _changeAllowedTimeRange.apply(this, arguments);
      }
      return changeAllowedTimeRange;
    }()
  }, {
    key: "removeAllowedTimeRange",
    value: function () {
      var _removeAllowedTimeRange = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee59(id) {
        return _regeneratorRuntime.wrap(function _callee59$(_context59) {
          while (1) switch (_context59.prev = _context59.next) {
            case 0:
              return _context59.abrupt("return", dellete("devices/configs/screentime/allowed/".concat(id)));
            case 1:
            case "end":
              return _context59.stop();
          }
        }, _callee59);
      }));
      function removeAllowedTimeRange(_x105) {
        return _removeAllowedTimeRange.apply(this, arguments);
      }
      return removeAllowedTimeRange;
    }()
  }, {
    key: "resetAllowedTimes",
    value: function () {
      var _resetAllowedTimes = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee60(deviceId, day) {
        return _regeneratorRuntime.wrap(function _callee60$(_context60) {
          while (1) switch (_context60.prev = _context60.next) {
            case 0:
              return _context60.abrupt("return", put("devices/".concat(deviceId, "/config/screentime/allowed/reset?day=").concat(day), {}));
            case 1:
            case "end":
              return _context60.stop();
          }
        }, _callee60);
      }));
      function resetAllowedTimes(_x106, _x107) {
        return _resetAllowedTimes.apply(this, arguments);
      }
      return resetAllowedTimes;
    }()
  }, {
    key: "flipBrowsingAllowed",
    value: function () {
      var _flipBrowsingAllowed = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee61(deviceId, browsingAllowed) {
        return _regeneratorRuntime.wrap(function _callee61$(_context61) {
          while (1) switch (_context61.prev = _context61.next) {
            case 0:
              return _context61.abrupt("return", patch("devices/".concat(deviceId, "/configs/browsing"), {
                browsingAllowed: browsingAllowed
              }));
            case 1:
            case "end":
              return _context61.stop();
          }
        }, _callee61);
      }));
      function flipBrowsingAllowed(_x108, _x109) {
        return _flipBrowsingAllowed.apply(this, arguments);
      }
      return flipBrowsingAllowed;
    }()
  }, {
    key: "getQRCode",
    value: function () {
      var _getQRCode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee62(groupId) {
        return _regeneratorRuntime.wrap(function _callee62$(_context62) {
          while (1) switch (_context62.prev = _context62.next) {
            case 0:
              return _context62.abrupt("return", post("groups/".concat(groupId, "/devices/qrcode"), {}).then(function (response) {
                return response.text();
              }));
            case 1:
            case "end":
              return _context62.stop();
          }
        }, _callee62);
      }));
      function getQRCode(_x110) {
        return _getQRCode.apply(this, arguments);
      }
      return getQRCode;
    }()
  }, {
    key: "flipTimeLimitsEnabled",
    value: function () {
      var _flipTimeLimitsEnabled = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee63(deviceId, enabled) {
        return _regeneratorRuntime.wrap(function _callee63$(_context63) {
          while (1) switch (_context63.prev = _context63.next) {
            case 0:
              return _context63.abrupt("return", patch("devices/".concat(deviceId, "/config/screentime/toggle"), {
                timeLimitsEnabled: enabled
              }));
            case 1:
            case "end":
              return _context63.stop();
          }
        }, _callee63);
      }));
      function flipTimeLimitsEnabled(_x111, _x112) {
        return _flipTimeLimitsEnabled.apply(this, arguments);
      }
      return flipTimeLimitsEnabled;
    }()
  }, {
    key: "flipAllowedTimesEnabled",
    value: function () {
      var _flipAllowedTimesEnabled = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee64(deviceId, enabled) {
        return _regeneratorRuntime.wrap(function _callee64$(_context64) {
          while (1) switch (_context64.prev = _context64.next) {
            case 0:
              return _context64.abrupt("return", patch("devices/".concat(deviceId, "/config/screentime/toggle"), {
                allowedTimesEnabled: enabled
              }));
            case 1:
            case "end":
              return _context64.stop();
          }
        }, _callee64);
      }));
      function flipAllowedTimesEnabled(_x113, _x114) {
        return _flipAllowedTimesEnabled.apply(this, arguments);
      }
      return flipAllowedTimesEnabled;
    }()
  }, {
    key: "getStats",
    value: function () {
      var _getStats = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee65(deviceId, startDate, endDate) {
        return _regeneratorRuntime.wrap(function _callee65$(_context65) {
          while (1) switch (_context65.prev = _context65.next) {
            case 0:
              return _context65.abrupt("return", get("devices/".concat(deviceId, "/statistics?startDate=").concat(startDate, "&endDate=").concat(endDate)).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context65.stop();
          }
        }, _callee65);
      }));
      function getStats(_x115, _x116, _x117) {
        return _getStats.apply(this, arguments);
      }
      return getStats;
    }()
  }, {
    key: "getHistory",
    value: function () {
      var _getHistory = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee66(deviceId, date, pageIndex, pageSize, searchTerm) {
        return _regeneratorRuntime.wrap(function _callee66$(_context66) {
          while (1) switch (_context66.prev = _context66.next) {
            case 0:
              return _context66.abrupt("return", get("devices/".concat(deviceId, "/history?date=").concat(date, "&page=").concat(pageIndex, "&limit=").concat(pageSize).concat(searchTerm ? "&search=".concat(searchTerm) : '')).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context66.stop();
          }
        }, _callee66);
      }));
      function getHistory(_x118, _x119, _x120, _x121, _x122) {
        return _getHistory.apply(this, arguments);
      }
      return getHistory;
    }()
  }, {
    key: "getApps",
    value: function () {
      var _getApps = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee67(deviceId, pageIndex, pageSize, categoryId, searchTerm) {
        return _regeneratorRuntime.wrap(function _callee67$(_context67) {
          while (1) switch (_context67.prev = _context67.next) {
            case 0:
              return _context67.abrupt("return", get("devices/".concat(deviceId, "/apps?page=").concat(pageIndex, "&limit=").concat(pageSize).concat(searchTerm ? "&search=".concat(searchTerm) : '').concat(categoryId ? "&categoryId=".concat(categoryId) : '')).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context67.stop();
          }
        }, _callee67);
      }));
      function getApps(_x123, _x124, _x125, _x126, _x127) {
        return _getApps.apply(this, arguments);
      }
      return getApps;
    }()
  }, {
    key: "enableApp",
    value: function () {
      var _enableApp = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee68(deviceId, appId) {
        return _regeneratorRuntime.wrap(function _callee68$(_context68) {
          while (1) switch (_context68.prev = _context68.next) {
            case 0:
              return _context68.abrupt("return", post("devices/".concat(deviceId, "/apps/").concat(appId, "/enable"), {}));
            case 1:
            case "end":
              return _context68.stop();
          }
        }, _callee68);
      }));
      function enableApp(_x128, _x129) {
        return _enableApp.apply(this, arguments);
      }
      return enableApp;
    }()
  }, {
    key: "disableApp",
    value: function () {
      var _disableApp = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee69(deviceId, appId) {
        return _regeneratorRuntime.wrap(function _callee69$(_context69) {
          while (1) switch (_context69.prev = _context69.next) {
            case 0:
              return _context69.abrupt("return", dellete("devices/".concat(deviceId, "/apps/").concat(appId, "/disable")));
            case 1:
            case "end":
              return _context69.stop();
          }
        }, _callee69);
      }));
      function disableApp(_x130, _x131) {
        return _disableApp.apply(this, arguments);
      }
      return disableApp;
    }()
  }, {
    key: "updateUser",
    value: function () {
      var _updateUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee70(id, realName, displayName) {
        return _regeneratorRuntime.wrap(function _callee70$(_context70) {
          while (1) switch (_context70.prev = _context70.next) {
            case 0:
              return _context70.abrupt("return", put("users/".concat(id), {
                realName: realName,
                displayName: displayName
              }));
            case 1:
            case "end":
              return _context70.stop();
          }
        }, _callee70);
      }));
      function updateUser(_x132, _x133, _x134) {
        return _updateUser.apply(this, arguments);
      }
      return updateUser;
    }()
  }, {
    key: "getChannel",
    value: function () {
      var _getChannel = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee71(id) {
        return _regeneratorRuntime.wrap(function _callee71$(_context71) {
          while (1) switch (_context71.prev = _context71.next) {
            case 0:
              return _context71.abrupt("return", get("content/channels/".concat(id)).then(function (response) {
                return response.json();
              }));
            case 1:
            case "end":
              return _context71.stop();
          }
        }, _callee71);
      }));
      function getChannel(_x135) {
        return _getChannel.apply(this, arguments);
      }
      return getChannel;
    }()
  }, {
    key: "changeChannelName",
    value: function () {
      var _changeChannelName = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee72(id, title) {
        return _regeneratorRuntime.wrap(function _callee72$(_context72) {
          while (1) switch (_context72.prev = _context72.next) {
            case 0:
              return _context72.abrupt("return", put("content/channels/".concat(id), {
                title: title
              }));
            case 1:
            case "end":
              return _context72.stop();
          }
        }, _callee72);
      }));
      function changeChannelName(_x136, _x137) {
        return _changeChannelName.apply(this, arguments);
      }
      return changeChannelName;
    }()
  }]);
}();

var DynamicCardGrid = function DynamicCardGrid(props) {
  return jsxRuntimeExports.jsx("div", {
    style: {
      display: 'grid',
      width: '100%',
      gridTemplateColumns: "repeat(auto-fill, minmax(".concat(props.cardWidth, ", 1fr))"),
      columnGap: props.columnGap,
      rowGap: props.rowGap,
      paddingRight: props.paddingRight
    },
    children: props.children
  });
};

var SPACING = '8px';
var ICON_SIZE$1 = '16px';
var PopupList = function PopupList(props) {
  return jsxRuntimeExports.jsx(Stack$1, {
    spacing: SPACING,
    children: props.items.map(function (item, index) {
      var _item$color;
      return jsxRuntimeExports.jsxs(Stack$1, {
        sx: {
          cursor: 'pointer',
          transition: '0.2s',
          '&:hover': {
            opacity: 0.3
          },
          svg: {
            path: {
              fill: (_item$color = item.color) !== null && _item$color !== void 0 ? _item$color : PALETTE.font.dark
            }
          }
        },
        onClick: function onClick() {
          props.closeCallback();
          item.kallback();
        },
        direction: "row",
        spacing: "8px",
        alignItems: "center",
        children: [item.icon ? jsxRuntimeExports.jsx(item.icon, {
          height: ICON_SIZE$1,
          width: ICON_SIZE$1
        }) : null, jsxRuntimeExports.jsx(Typography$1, {
          color: item.color,
          variant: "normal",
          bold: true,
          children: item.text
        })]
      }, index);
    })
  });
};
function ActionPopup(props) {
  return jsxRuntimeExports.jsx(UrsorPopover, {
    open: props.open,
    content: jsxRuntimeExports.jsx(PopupList, {
      items: props.items,
      closeCallback: props.closeCallback
    }),
    closeCallback: props.closeCallback,
    placement: props.placement,
    zIndex: props.zIndex,
    flip: true,
    children: props.children
  });
}

var _path$a;
function _extends$b() { return _extends$b = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$b.apply(null, arguments); }
var SvgMoreIcon = function SvgMoreIcon(props) {
  return /*#__PURE__*/React$1.createElement("svg", _extends$b({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 32 32"
  }, props), _path$a || (_path$a = /*#__PURE__*/React$1.createElement("path", {
    fill: "#0D2839",
    d: "M3 18a3 3 0 1 0 0-6 3 3 0 0 0 0 6M16 18a3 3 0 1 0 0-6 3 3 0 0 0 0 6M32 15a3 3 0 1 1-6 0 3 3 0 0 1 6 0"
  })));
};

var DEFAULT_SIZE = '12px';
var LARGE_SIZE = '20px';
function UrsorActionButton(props) {
  var _props$size, _props$size2;
  var _useState = useState(false),
    _useState2 = _slicedToArray$2(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  return jsxRuntimeExports.jsx(ActionPopup, {
    open: open,
    items: props.actions,
    closeCallback: function closeCallback() {
      return setOpen(false);
    },
    placement: "right",
    zIndex: 9999,
    children: jsxRuntimeExports.jsx(Stack$1, {
      height: (_props$size = props.size) !== null && _props$size !== void 0 ? _props$size : '40px',
      width: (_props$size2 = props.size) !== null && _props$size2 !== void 0 ? _props$size2 : '40px',
      justifyContent: "center",
      alignItems: "center",
      sx: {
        background: props.background || 'rgb(255,255,255)',
        cursor: 'pointer',
        '&:hover': {
          opacity: 0.7
        },
        transition: '0.2s',
        svg: {
          transform: 'rotate(90deg)',
          path: {
            fill: props.fontColor || (props.light ? PALETTE.font.light : PALETTE.font.dark)
          }
        }
      },
      borderRadius: "100%",
      border: props.border ? "2px solid ".concat(props.fontColor || (props.light ? PALETTE.font.light : PALETTE.font.dark)) : undefined,
      boxSizing: "border-box",
      onClick: function onClick() {
        var _props$buttonClickCal;
        if (props.notClickable) return;
        setOpen(!open);
        (_props$buttonClickCal = props.buttonClickCallback) === null || _props$buttonClickCal === void 0 || _props$buttonClickCal.call(props);
      },
      boxShadow: props.shadow ? '0 0 16px rgba(0,0,0,0.08)' : undefined,
      children: jsxRuntimeExports.jsx(SvgMoreIcon, {
        height: props.iconSize || (props.large ? LARGE_SIZE : DEFAULT_SIZE),
        width: props.iconSize || (props.large ? LARGE_SIZE : DEFAULT_SIZE)
      })
    })
  });
}

function ownKeys$5(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$4(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$5(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var TitleRowItemCore = function TitleRowItemCore(props) {
  var _props$options2;
  var _useState = useState(false),
    _useState2 = _slicedToArray$2(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var ActualItem = jsxRuntimeExports.jsxs(Stack$1, {
    direction: "row",
    spacing: props.isMobile ? '6px' : '12px',
    onClick: function onClick() {
      var _props$options, _props$callback;
      if (((_props$options = props.options) === null || _props$options === void 0 ? void 0 : _props$options.length) === 0) return;
      setOpen(true);
      (_props$callback = props.callback) === null || _props$callback === void 0 || _props$callback.call(props);
    },
    alignItems: "flex-end",
    children: [props.image, jsxRuntimeExports.jsx(Stack$1, {
      justifyContent: "center",
      children: jsxRuntimeExports.jsx(Typography$1, {
        bold: true,
        variant: props.isMobile ? 'medium' : 'h4',
        color: !props.last ? PALETTE.secondary.grey[3] : undefined,
        maxLines: 1,
        sx: {
          wordBreak: 'break-all'
        },
        children: props.text
      })
    }), props.label ? jsxRuntimeExports.jsx(Stack$1, {
      justifyContent: "flex-end",
      height: "100%",
      sx: {
        transform: 'translateY(-1px)'
      },
      children: jsxRuntimeExports.jsx(Typography$1, {
        variant: props.isMobile ? 'tiny' : 'normal',
        color: PALETTE.secondary.grey[4],
        children: props.label
      })
    }) : null, props.options && props.options.length > 0 ? jsxRuntimeExports.jsx(SvgChevronDown, {
      height: props.isMobile ? '24px' : '32px',
      width: props.isMobile ? '24px' : '32px'
    }) : null]
  });
  return props.options && props.options.length > 0 ? jsxRuntimeExports.jsx(UrsorPopover, {
    open: open,
    content: jsxRuntimeExports.jsx(Stack$1, {
      spacing: "10px",
      children: (_props$options2 = props.options) === null || _props$options2 === void 0 ? void 0 : _props$options2.map(function (o, i) {
        var _o$imageUrl;
        return jsxRuntimeExports.jsxs(Stack$1, {
          direction: "row",
          alignItems: "center",
          spacing: "8px",
          sx: {
            cursor: 'pointer',
            '&:hover': {
              opacity: 0.6
            },
            transition: '0.2s'
          },
          onClick: o.callback,
          children: [o.image || o.imageUrl ? jsxRuntimeExports.jsx(Stack$1, {
            borderRadius: "100%",
            overflow: "hidden",
            children: jsxRuntimeExports.jsx("img", {
              src: (_o$imageUrl = o.imageUrl) !== null && _o$imageUrl !== void 0 ? _o$imageUrl : '',
              height: 20,
              width: 20,
              alt: "option image"
            })
          }) : null, jsxRuntimeExports.jsx(Typography$1, {
            bold: true,
            children: o.text
          })]
        }, i);
      })
    }),
    placement: "left",
    closeCallback: function closeCallback() {
      return setOpen(false);
    },
    children: ActualItem
  }) : ActualItem;
};
var TitleRow = function TitleRow(props) {
  return jsxRuntimeExports.jsx(Stack$1, {
    direction: "row",
    spacing: props.isMobile ? '6px' : '12px',
    alignItems: "center",
    children: props.items.map(function (x, i) {
      var _props$items$length, _props$items, _x$options, _props$items$length2, _props$items2;
      var isLast = i === ((_props$items$length = (_props$items = props.items) === null || _props$items === void 0 ? void 0 : _props$items.length) !== null && _props$items$length !== void 0 ? _props$items$length : 0) - 1;
      return jsxRuntimeExports.jsxs(Stack$1, {
        alignItems: "center",
        direction: "row",
        spacing: props.isMobile ? '6px' : '12px',
        sx: !(isLast && ((_x$options = x.options) === null || _x$options === void 0 ? void 0 : _x$options.length) === 0) ? {
          cursor: 'pointer',
          transition: '0.2s',
          '&:hover': {
            opacity: 0.7
          }
        } : undefined,
        children: [jsxRuntimeExports.jsx(TitleRowItemCore, _objectSpread$4(_objectSpread$4({}, x), {}, {
          last: i === ((_props$items$length2 = (_props$items2 = props.items) === null || _props$items2 === void 0 ? void 0 : _props$items2.length) !== null && _props$items$length2 !== void 0 ? _props$items$length2 : 0) - 1,
          isMobile: props.isMobile
        })), !isLast ? jsxRuntimeExports.jsx(Typography$1, {
          bold: true,
          variant: props.isMobile ? 'medium' : 'h4',
          color: PALETTE.secondary.grey[3],
          children: "/"
        }) : null]
      }, i);
    })
  });
};

var _path$9;
function _extends$a() { return _extends$a = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$a.apply(null, arguments); }
var SvgBookIcon = function SvgBookIcon(props) {
  return /*#__PURE__*/React$1.createElement("svg", _extends$a({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 28 28"
  }, props), _path$9 || (_path$9 = /*#__PURE__*/React$1.createElement("path", {
    fill: "#7B61FF",
    fillRule: "evenodd",
    d: "M0 3.063C0 2.338.588 1.75 1.313 1.75h7.442a6.55 6.55 0 0 1 5.252 2.627 6.55 6.55 0 0 1 5.252-2.627h7.429c.724 0 1.312.588 1.312 1.313v18.375c0 .724-.588 1.312-1.312 1.312H18.8a3.94 3.94 0 0 0-2.785 1.153l-1.087 1.088a1.31 1.31 0 0 1-1.856 0l-1.087-1.088A3.94 3.94 0 0 0 9.2 22.75H1.313A1.313 1.313 0 0 1 0 21.438zm15.321 5.25a3.94 3.94 0 0 1 3.938-3.938h6.116v15.75H18.8a6.56 6.56 0 0 0-3.485 1.002zM12.69 21.13l.006-8.879-.003-3.942a3.937 3.937 0 0 0-3.938-3.934h-6.13v15.75H9.2c1.245 0 2.452.353 3.49 1.005",
    clipRule: "evenodd"
  })));
};

var _path$8;
function _extends$9() { return _extends$9 = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$9.apply(null, arguments); }
var SvgPeopleIcon = function SvgPeopleIcon(props) {
  return /*#__PURE__*/React$1.createElement("svg", _extends$9({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 32 32"
  }, props), _path$8 || (_path$8 = /*#__PURE__*/React$1.createElement("path", {
    fill: "#0D2839",
    fillRule: "evenodd",
    d: "M11 7.001a4 4 0 1 0 0 8 4 4 0 0 0 0-8m-7 4A7 7 0 1 1 15.796 16.1a11.01 11.01 0 0 1 6.068 8.168 1.5 1.5 0 1 1-2.964.47 8.003 8.003 0 0 0-15.8 0 1.502 1.502 0 0 1-2.942.113 1.5 1.5 0 0 1-.022-.585 11.02 11.02 0 0 1 6.068-8.164A6.98 6.98 0 0 1 4 11.001m18-3a1.5 1.5 0 1 0 0 3 3 3 0 0 1 1.332 5.688 1.5 1.5 0 0 0-.832 1.344v.704a1.5 1.5 0 0 0 1.148 1.46c2.4.578 4.324 2.4 5.044 4.744a1.501 1.501 0 0 0 2.762.267 1.5 1.5 0 0 0 .106-1.147 10.02 10.02 0 0 0-5.12-6.024A6 6 0 0 0 22 8.001",
    clipRule: "evenodd"
  })));
};

var _path$7;
function _extends$8() { return _extends$8 = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$8.apply(null, arguments); }
var SvgFilterIcon = function SvgFilterIcon(props) {
  return /*#__PURE__*/React$1.createElement("svg", _extends$8({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 32 32"
  }, props), _path$7 || (_path$7 = /*#__PURE__*/React$1.createElement("path", {
    fill: "#0D2839",
    fillRule: "evenodd",
    d: "M1.5 6a1.5 1.5 0 0 0 0 3h29a1.5 1.5 0 0 0 0-3zM6 15.5A1.5 1.5 0 0 1 7.5 14h17a1.5 1.5 0 0 1 0 3h-17A1.5 1.5 0 0 1 6 15.5m6 8a1.5 1.5 0 0 1 1.5-1.5h5a1.5 1.5 0 0 1 0 3h-5a1.5 1.5 0 0 1-1.5-1.5",
    clipRule: "evenodd"
  })));
};

function LabeledInputField(props) {
  return jsxRuntimeExports.jsxs(Stack$1, {
    spacing: "6px",
    children: [props.label ? jsxRuntimeExports.jsx(Typography$1, {
      variant: "small",
      color: PALETTE.secondary.grey[4],
      children: props.label
    }) : null, props.children]
  });
}

var _templateObject$2;
var PULSE_AMPLITUDE = '12px';
keyframes(_templateObject$2 || (_templateObject$2 = _taggedTemplateLiteral(["\n  from {\n    transform: translateY(-", ")\n  }\n  to {\n    transform: translateY(", ")\n  }\n"])), PULSE_AMPLITUDE, PULSE_AMPLITUDE);

[{
  monthlyId: process.env.REACT_ENV === 'production' ? 'prod_PlC9OCbk8oBkWW' : 'prod_QBufh97tFHY0PT',
  annualId: process.env.REACT_ENV === 'production' ? 'prod_PlWrHG8V57yjrn' : 'prod_QBufh97tFHY0PT',
  plan: 'home',
  items: ['10 devices monitored', 'Unlimited parents/teachers', 'All features included'],
  title: 'Home',
  subtitle: 'Ideal for families',
  monthlyPrices: {
    USD: 12.99,
    GBP: 8.99,
    CAD: 15.99,
    EUR: 10.99
  },
  annualPrices: {
    USD: 119.99,
    GBP: 79.99,
    CAD: 149.99,
    EUR: 99.99
  }
}, {
  monthlyId: process.env.REACT_ENV === 'production' ? 'prod_QAEaFpLDEJnlli' : 'prod_QBufZ1xT1eUOx8',
  annualId: process.env.REACT_ENV === 'production' ? 'prod_QAEYttD39HvFKz' : 'prod_QBufZ1xT1eUOx8',
  plan: 's chool',
  items: ['10 devices monitored', 'Unlimited parents/teachers', 'All features included'],
  title: 's chool',
  subtitle: 'Ideal for Schools',
  monthlyPrices: {
    USD: 59.99,
    GBP: 39.99,
    CAD: 74.99,
    EUR: 49.99
  },
  annualPrices: {
    USD: 599.99,
    GBP: 399.99,
    CAD: 749.99,
    EUR: 499.99
  }
}];

var _path$6;
function _extends$7() { return _extends$7 = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$7.apply(null, arguments); }
var SvgPencil = function SvgPencil(props) {
  return /*#__PURE__*/React$1.createElement("svg", _extends$7({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 32 32"
  }, props), _path$6 || (_path$6 = /*#__PURE__*/React$1.createElement("path", {
    fill: "#0D2839",
    fillRule: "evenodd",
    d: "M22.025 2.853a3.5 3.5 0 0 1 4.95 0l2.171 2.171a3.5 3.5 0 0 1 0 4.95l-17.219 17.22a3.5 3.5 0 0 1-1.513.89L3.912 29.94a1.5 1.5 0 0 1-1.854-1.854l1.857-6.502a3.5 3.5 0 0 1 .89-1.513zm2.829 2.121a.5.5 0 0 0-.707 0L21.62 7.5l2.88 2.879 2.524-2.525a.5.5 0 0 0 0-.707zM22.379 12.5 19.5 9.621 6.927 22.193a.5.5 0 0 0-.127.217l-1.116 3.905L9.59 25.2a.5.5 0 0 0 .216-.127z",
    clipRule: "evenodd"
  })));
};

var BORDER_THICKNESS = '1.5px';
var BORDER = "".concat(BORDER_THICKNESS, " solid ").concat(PALETTE.secondary.grey[2]);
var BODY_CELL_Y_PADDING = '13px';
({
  //overflow: "visible",
  '& td': {
    maxWidth: '450px',
    paddingTop: BODY_CELL_Y_PADDING,
    paddingBottom: BODY_CELL_Y_PADDING,
    border: 0,
    borderLeft: "1px solid ".concat(alpha$1(PALETTE.secondary.grey[2], 0.5)),
    borderTop: "1px solid ".concat(alpha$1(PALETTE.secondary.grey[3], 0.2))
  },
  '& tr:first-of-type': {
    borderTop: BORDER
  },
  '& td:last-of-type': {
    borderLeft: 0
  }
  // "& td:last-of-type": {
  //   borderRight: BORDER,
  // },
  // "& td:last-of-type": {
  //   borderRight: BORDER,
  // },
  // "& tr:first-of-type": {
  //   "& td": {
  //     borderTop: BORDER,
  //   },
  //   "& td:first-of-type": {
  //     borderTopLeftRadius: ROUNDING,
  //   },
  //   "& td:last-of-type": {
  //     borderTopRightRadius: ROUNDING,
  //   },
  // },
  // "& tr:last-of-type": {
  //   "& td": {
  //     borderBottom: BORDER,
  //   },
  //   // "& td:first-of-type": {
  //   //   borderBottomLeftRadius: ROUNDING,
  //   // },
  //   "& td:last-of-type": {
  //     borderBottom: 0,
  //   },
  // },
});

var NotificationContext = /*#__PURE__*/createContext({
  message: null,
  type: null,
  success: function success(message) {
    return null;
  },
  negativeSuccess: function negativeSuccess(message) {
    return null;
  },
  error: function error(message) {
    return null;
  }
});

var getUserInfo = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var resp, data;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return fetch("".concat(BACKEND_URL, "/users/self"), {
            credentials: 'include'
          });
        case 2:
          resp = _context.sent;
          if (resp.ok) {
            _context.next = 5;
            break;
          }
          throw new Error('Failed to fetch user info - invalid session.');
        case 5:
          _context.next = 7;
          return resp.json();
        case 7:
          data = _context.sent;
          return _context.abrupt("return", data);
        case 9:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getUserInfo() {
    return _ref.apply(this, arguments);
  };
}();

var useAuth = function useAuth() {
  var _useState = useState({}),
    _useState2 = _slicedToArray$2(_useState, 2),
    user = _useState2[0],
    setUser = _useState2[1];
  useEffect(function () {
    getUserInfo().then(function (data) {
      setUser(data);
      return;
    })["catch"](function () {
      return login().then(function () {
        getUserInfo().then(function (data) {
          setUser(data);
          return;
        });
      })["catch"](function (err) {});
    } // Failing login after first failed login = death?
    );
  }, []);
  var login = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var resp;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return post('auth/login/confidential', {
              client_id: 'troomi',
              client_secret: 'ay8efW7PT2zhmP6VvhnWdML07pY3Lj0l'
            });
          case 2:
            resp = _context.sent;
            if (resp) {
              _context.next = 5;
              break;
            }
            return _context.abrupt("return");
          case 5:
            _context.next = 7;
            return resp.json();
          case 7:
            return _context.abrupt("return", _context.sent);
          case 8:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function login() {
      return _ref.apply(this, arguments);
    };
  }();
  var logout = function logout() {
    window.location.href = "".concat(AUTH_URL, "/logout");
    return;
  };
  return {
    user: user,
    login: login,
    logout: logout
  };
};

var MobileTitleRow = function MobileTitleRow(props) {
  var _props$item$options;
  var _useState3 = useState(false),
    _useState4 = _slicedToArray$2(_useState3, 2),
    open = _useState4[0],
    setOpen = _useState4[1];
  return jsxRuntimeExports.jsx(Stack$1, {
    direction: "row",
    spacing: "6px",
    alignItems: "center",
    children: jsxRuntimeExports.jsx(Stack$1, {
      alignItems: "center",
      direction: "row",
      spacing: "6px",
      sx: {
        cursor: 'pointer',
        transition: '0.2s',
        '&:hover': {
          opacity: 0.7
        }
      },
      children: jsxRuntimeExports.jsx(UrsorPopover, {
        open: open,
        content: jsxRuntimeExports.jsx(Stack$1, {
          spacing: "10px",
          children: (_props$item$options = props.item.options) === null || _props$item$options === void 0 ? void 0 : _props$item$options.map(function (o, i) {
            return jsxRuntimeExports.jsxs(Stack$1, {
              direction: "row",
              alignItems: "center",
              spacing: "8px",
              sx: {
                cursor: 'pointer',
                '&:hover': {
                  opacity: 0.6
                },
                transition: '0.2s'
              },
              onClick: o.callback,
              children: [o.image || (o.imageUrl ? jsxRuntimeExports.jsx(Stack$1, {
                borderRadius: "100%",
                overflow: "hidden",
                children: jsxRuntimeExports.jsx("img", {
                  src: o.imageUrl,
                  height: 20,
                  width: 20,
                  alt: "option image"
                })
              }) : null), jsxRuntimeExports.jsx(Typography$1, {
                bold: true,
                children: o.text
              })]
            }, i);
          })
        }),
        placement: "left",
        closeCallback: function closeCallback() {
          return setOpen(false);
        },
        children: jsxRuntimeExports.jsxs(Stack$1, {
          direction: "row",
          spacing: "6px",
          onClick: function onClick() {
            var _props$item$callback, _props$item;
            setOpen(true);
            (_props$item$callback = (_props$item = props.item).callback) === null || _props$item$callback === void 0 || _props$item$callback.call(_props$item);
          },
          alignItems: "center",
          children: [jsxRuntimeExports.jsx(Stack$1, {
            justifyContent: "center",
            children: jsxRuntimeExports.jsx(Typography$1, {
              bold: true,
              variant: "medium",
              maxLines: 1,
              sx: {
                wordBreak: 'break-all'
              },
              children: props.item.text
            })
          }), props.item.options && props.item.options.length > 0 ? jsxRuntimeExports.jsx(SvgChevronDown, {
            height: "20px",
            width: "20px"
          }) : null]
        })
      })
    })
  });
};

var _path$5;
function _extends$6() { return _extends$6 = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$6.apply(null, arguments); }
var SvgThreeBarsIcon = function SvgThreeBarsIcon(props) {
  return /*#__PURE__*/React$1.createElement("svg", _extends$6({
    xmlns: "http://www.w3.org/2000/svg",
    width: 20,
    height: 20,
    fill: "none"
  }, props), _path$5 || (_path$5 = /*#__PURE__*/React$1.createElement("path", {
    fill: "#0D2839",
    fillRule: "evenodd",
    d: "M1.25 3.437a.94.94 0 0 1 .938-.937h15.625a.938.938 0 0 1 0 1.875H2.188a.937.937 0 0 1-.938-.938m0 6.25a.94.94 0 0 1 .938-.937h15.625a.938.938 0 0 1 0 1.874H2.188a.94.94 0 0 1-.938-.937M2.188 15a.938.938 0 0 0 0 1.875h15.625a.937.937 0 1 0 0-1.876z",
    clipRule: "evenodd"
  })));
};

var _path$4;
function _extends$5() { return _extends$5 = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$5.apply(null, arguments); }
var SvgVersionsIcon = function SvgVersionsIcon(props) {
  return /*#__PURE__*/React$1.createElement("svg", _extends$5({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 20 20"
  }, props), _path$4 || (_path$4 = /*#__PURE__*/React$1.createElement("path", {
    fill: "#0D2839",
    fillRule: "evenodd",
    d: "M9.688 17.5A2.19 2.19 0 0 1 7.5 15.313V4.688c0-1.209.98-2.188 2.188-2.188h8.124C19.022 2.5 20 3.48 20 4.688v10.625c0 1.208-.98 2.187-2.187 2.187zm-.313-2.187c0 .172.14.312.313.312h8.124c.173 0 .313-.14.313-.312V4.688a.31.31 0 0 0-.312-.313H9.688a.31.31 0 0 0-.313.313zM6.124 4.384a.937.937 0 0 1-.342 1.281.31.31 0 0 0-.157.271v8.125c0 .115.061.216.157.272a.938.938 0 0 1-.939 1.623 2.19 2.19 0 0 1-1.093-1.895V5.937c0-.81.442-1.517 1.093-1.894a.937.937 0 0 1 1.281.342M2.032 6.916a.938.938 0 0 0-.939-1.623A2.19 2.19 0 0 0 0 7.187v5.625c0 .811.442 1.518 1.093 1.895a.937.937 0 1 0 .939-1.623.31.31 0 0 1-.157-.272V7.187c0-.114.061-.215.157-.27",
    clipRule: "evenodd"
  })));
};

var PAGE_ICONS = {
  profiles: SvgPeopleIcon,
  filters: SvgFilterIcon,
  content: SvgBookIcon,
  lessons: SvgVersionsIcon,
  account: SvgVersionsIcon
};
var PAGE_ROUTES = {
  profiles: 'profiles',
  filters: 'filters',
  content: 'folders',
  lessons: 'lessons',
  account: 'account'
};
var PAGE_DISPLAY_NAMES = {
  profiles: 'Kids',
  filters: 'Filters',
  content: 'Content',
  lessons: 'Lessons',
  account: 'Account'
};
var MobileSideBar = function MobileSideBar(props) {
  var navigate = useNavigate();
  return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
    children: [jsxRuntimeExports.jsx(Stack$1, {
      position: "absolute",
      bgcolor: "rgba(0,0,0,0.2)",
      width: "100%",
      height: "100%",
      onClick: props.onClose,
      sx: {
        pointerEvents: props.open ? undefined : 'none',
        opacity: props.open ? 1 : 0,
        transition: '0.5s',
        backdropFilter: 'blur(2px)'
      },
      zIndex: 999
    }), jsxRuntimeExports.jsxs(Stack$1, {
      position: "absolute",
      spacing: "32px",
      height: "100%",
      width: "272px",
      bgcolor: "rgb(255,255,255)",
      px: "28px",
      py: "56px",
      boxSizing: "border-box",
      sx: {
        transform: "translateX(".concat(props.open ? 0 : '-100%', ")"),
        transition: '0.5s'
      },
      zIndex: 1000,
      children: [jsxRuntimeExports.jsxs(Stack$1, {
        direction: "row",
        alignItems: "center",
        justifyContent: "space-between",
        children: [jsxRuntimeExports.jsx("img", {
          src: "https://ursorassets.s3.eu-west-1.amazonaws.com/astroLogo!.png",
          height: 20,
          width: 59,
          alt: "astro"
        }), jsxRuntimeExports.jsx(Stack$1, {
          onClick: props.onClose,
          children: jsxRuntimeExports.jsx(SvgX, {
            height: "28px",
            width: "28px"
          })
        })]
      }), jsxRuntimeExports.jsxs(Stack$1, {
        justifyContent: "space-between",
        height: "100%",
        children: [jsxRuntimeExports.jsx(Stack$1, {
          spacing: "24px",
          children: ['profiles', 'filters', 'content'].map(function (page) {
            var Icon = PAGE_ICONS[page];
            return jsxRuntimeExports.jsxs(Stack$1, {
              direction: "row",
              spacing: "12px",
              alignItems: "center",
              sx: {
                cursor: 'pointer',
                '&:hover': {
                  opacity: 0.7
                },
                transition: '0.2s',
                svg: {
                  path: {
                    fill: props.selectedPage === page ? PALETTE.secondary.purple[2] : PALETTE.primary.navy
                  }
                }
              },
              onClick: function onClick() {
                return navigate.push("/".concat(PAGE_ROUTES[page]));
              },
              children: [jsxRuntimeExports.jsx(Icon, {
                height: "28px",
                width: "28px"
              }), jsxRuntimeExports.jsx(Typography$1, {
                bold: true,
                color: props.selectedPage === page ? PALETTE.secondary.purple[2] : PALETTE.primary.navy,
                children: PAGE_DISPLAY_NAMES[page]
              })]
            }, page);
          })
        }), jsxRuntimeExports.jsxs(Stack$1, {
          direction: "row",
          spacing: "12px",
          alignItems: "center",
          onClick: function onClick() {
            return navigate.push("/".concat(PAGE_ROUTES['account']));
          },
          sx: {
            cursor: 'pointer',
            '&:hover': {
              opacity: 0.7
            },
            transition: '0.2s'
          },
          children: [jsxRuntimeExports.jsx(UserInitialsCircle, {
            size: 32,
            fontSize: 12,
            name: 'Mario Super'
          }), jsxRuntimeExports.jsx(Typography$1, {
            bold: true,
            color: props.selectedPage === 'account' ? PALETTE.secondary.purple[2] : PALETTE.primary.navy,
            children: "Account"
          })]
        })]
      })]
    })]
  });
};

function ownKeys$4(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$4(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var MobilePageLayout = function MobilePageLayout(props) {
  var _useState = useState(false),
    _useState2 = _slicedToArray$2(_useState, 2),
    sideBarOpen = _useState2[0],
    setSideBarOpen = _useState2[1];
  return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
    children: [jsxRuntimeExports.jsxs(Stack$1, {
      height: "100%",
      width: "100%",
      overflow: "scroll",
      px: "12px",
      py: "24px",
      boxSizing: "border-box",
      children: [props.header ? jsxRuntimeExports.jsx(Stack$1, {
        pb: "24px",
        children: props.header
      }) : null, jsxRuntimeExports.jsxs(Stack$1, {
        pb: "24px",
        spacing: "4px",
        children: [jsxRuntimeExports.jsxs(Stack$1, {
          justifyContent: "space-between",
          alignItems: "center",
          direction: "row",
          children: [jsxRuntimeExports.jsxs(Stack$1, {
            direction: "row",
            spacing: "12px",
            alignItems: "center",
            children: [jsxRuntimeExports.jsx(Stack$1, {
              onClick: function onClick() {
                return setSideBarOpen(true);
              },
              children: jsxRuntimeExports.jsx(SvgThreeBarsIcon, {
                height: "20px",
                width: "20px"
              })
            }), props.titleBackButtonCallback ? jsxRuntimeExports.jsx(Stack$1, {
              width: "25px",
              children: jsxRuntimeExports.jsx(Stack$1, {
                sx: {
                  cursor: 'pointer',
                  '&:hover': {
                    opacity: 0.6
                  },
                  transition: '0.2s'
                },
                onClick: props.titleBackButtonCallback,
                justifyContent: "center",
                children: jsxRuntimeExports.jsx(SvgChevronLeftIcon, {
                  height: "24px",
                  width: "24px"
                })
              })
            }) : null, props.title ? jsxRuntimeExports.jsx(Typography$1, {
              bold: true,
              variant: "medium",
              children: props.title
            }) : null, props.titleRow ? jsxRuntimeExports.jsx(MobileTitleRow, {
              item: props.titleRow
            }) : null]
          }), props.topRightElement, props.actions ? jsxRuntimeExports.jsx(UrsorActionButton, {
            actions: props.actions,
            iconSize: "14px",
            size: "32px",
            background: "transparent",
            border: true
          }) : null]
        }), props.info ? jsxRuntimeExports.jsx(InfoButton, _objectSpread$3({}, props.info)) : null]
      }), props.children]
    }), jsxRuntimeExports.jsx(MobileSideBar, {
      selectedPage: props.selectedPage,
      open: sideBarOpen,
      onClose: function onClose() {
        return setSideBarOpen(false);
      }
    })]
  });
};

var getInitials = function getInitials(name) {
  var _name$split$map;
  return name === null || name === void 0 || (_name$split$map = name.split(' ').map(function (x) {
    return _.capitalize(x)[0];
  })) === null || _name$split$map === void 0 ? void 0 : _name$split$map.slice(0, 2).join('');
};
var UserInitialsCircle = function UserInitialsCircle(props) {
  return jsxRuntimeExports.jsx(Stack$1, {
    height: "".concat(props.size || 132, "px"),
    width: "".concat(props.size || 132, "px"),
    minHeight: "".concat(props.size || 132, "px"),
    minWidth: "".concat(props.size || 132, "px"),
    bgcolor: PALETTE.secondary.blue[2],
    borderRadius: "100%",
    overflow: "hidden",
    justifyContent: "center",
    alignItems: "center",
    children: jsxRuntimeExports.jsx(Typography$1, {
      variant: "h2",
      color: "rgb(255,255,255)",
      sx: props.fontSize ? {
        fontSize: props.fontSize
      } : undefined,
      children: props.name ? getInitials(props.name) : ''
    })
  });
};

var UserContext = /*#__PURE__*/createContext({
  loaded: false
});
var useUserContext = function useUserContext() {
  var context = useContext(UserContext);
  if (context === undefined) {
    throw new Error('useUserContext must be used within a UserContextProvider');
  }
  return context;
};

var _templateObject$1, _templateObject2;
var WIDTH$1 = '106px';
var Y_PADDING = '26px';
var ICON_SIZE = '28px';
var SMALL_ICON_SIZE = '22px';
var SMALL_ICON_HEIGHT_THRESHOLD = 630;
var NO_TEXT_HEIGHT_THRESHOLD = 469;
keyframes(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteral(["\nfrom {\n  transform: translateX(-1000px);\n}\nto {\n  transform: translateX(40px);\n}\n"])));
keyframes(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\nfrom {\n  transform: translateX(40px);\n}\nto {\n  transform: translateX(-1000px);\n}\n"])));
var SidebarItem = function SidebarItem(props) {
  return jsxRuntimeExports.jsxs(Stack$1, {
    id: props.tourId,
    width: "100%",
    alignItems: "center",
    justifyContent: "center",
    sx: {
      cursor: 'pointer',
      '&:hover': {
        opacity: 0.6
      },
      transition: '0.2s',
      svg: {
        path: {
          fill: props.selected ? PALETTE.secondary.purple[2] : PALETTE.secondary.grey[5]
        },
        rect: {
          stroke: props.selected ? PALETTE.secondary.purple[2] : PALETTE.secondary.grey[5]
        }
      }
    },
    onClick: props.callback,
    position: "relative",
    children: [props.notificationCount ? jsxRuntimeExports.jsx(Stack$1, {
      top: "-3px",
      right: "26px",
      position: "absolute",
      height: "20px",
      width: "20px",
      justifyContent: "center",
      alignItems: "center",
      borderRadius: "100%",
      bgcolor: PALETTE.system.orange,
      children: jsxRuntimeExports.jsx(Typography$1, {
        variant: "tiny",
        bold: true,
        color: "rgb(255,255,255)",
        children: props.notificationCount
      })
    }) : null, jsxRuntimeExports.jsxs(Stack$1, {
      flex: 1,
      spacing: "4px",
      justifyContent: "center",
      alignItems: "center",
      children: [props.children, !props.noText ? jsxRuntimeExports.jsx(Typography$1, {
        variant: props.small ? 'tiny' : 'small',
        bold: true,
        color: props.selected ? PALETTE.secondary.purple[2] : PALETTE.secondary.grey[5],
        children: props.title
      }) : null]
    })]
  });
};
function Sidebar(props) {
  var user = useUserContext().user;
  var navigate = useNavigate();
  var topItems = [{
    id: 'devices',
    //tourId: "devices-button",
    icon: SvgPeopleIcon,
    title: 'Kids',
    callback: function callback() {
      return navigate.push('/profiles');
    }
  }, {
    id: 'filters',
    //tourId: "devices-button",
    icon: SvgFilterIcon,
    title: 'Filters',
    callback: function callback() {
      return navigate.push('/filters');
    }
  }, {
    id: 'content',
    //tourId: "devices-button",
    icon: SvgBookIcon,
    title: 'Content',
    callback: function callback() {
      return navigate.push('/folders');
    }
  }];
  var getList = function getList(items, small, noText) {
    return jsxRuntimeExports.jsx(Stack$1, {
      spacing: small ? '16px' : '24px',
      width: "100%",
      children: items.map(function (item, index) {
        var selected = item.id === props.selectedItemId;
        return jsxRuntimeExports.jsx(SidebarItem, {
          title: item.title,
          callback: item.callback,
          selected: selected,
          small: small,
          noText: noText,
          tourId: item.tourId,
          notificationCount: item.notificationCount,
          children: jsxRuntimeExports.jsx(item.icon, {
            height: small ? SMALL_ICON_SIZE : ICON_SIZE
          })
        }, index);
      })
    });
  };
  var _useElementSize = useElementSize(),
    _useElementSize2 = _slicedToArray$2(_useElementSize, 2),
    ref = _useElementSize2[0],
    _useElementSize2$ = _useElementSize2[1];
    _useElementSize2$.width;
    var height = _useElementSize2$.height;
  var small = !!height && height > 0 && height < SMALL_ICON_HEIGHT_THRESHOLD;
  var noText = !!height && height < NO_TEXT_HEIGHT_THRESHOLD;
  return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
    children: jsxRuntimeExports.jsxs(Stack$1, {
      ref: ref,
      height: "100%",
      width: WIDTH$1,
      sx: {
        background: 'white',
        fontSize: '10px'
      },
      borderRadius: "20px",
      py: Y_PADDING,
      justifyContent: "space-between",
      id: "my-first-step",
      children: [jsxRuntimeExports.jsx(Stack$1, {
        spacing: small ? '16px' : '24px',
        alignItems: "center",
        children: getList(topItems, small, noText)
      }), jsxRuntimeExports.jsx(SidebarItem, {
        title: "Account",
        callback: function callback() {
          return navigate.push('/account');
        },
        selected: 'account' === props.selectedItemId,
        small: small,
        noText: noText,
        tourId: "account",
        children: jsxRuntimeExports.jsx(UserInitialsCircle, {
          size: 32,
          fontSize: 12,
          name: user ? user === null || user === void 0 ? void 0 : user.realName : ''
        })
      })]
    })
  });
}

var DynamicallyLoadedPortal = function DynamicallyLoadedPortal(props) {
  return /*#__PURE__*/createPortal(props.children, document.body);
};

function ownKeys$3(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var PADDING_TOP = '51px';
var SIDEBAR_X_MARGIN = 48;
var SIDEBAR_Y_MARGIN = '31px';
var PageLayout = /*#__PURE__*/forwardRef(function (props, ref) {
  var _props$button, _props$button2, _props$button3, _props$button4, _props$bodyWidth;
  var _useWindowSize = useWindowSize(),
    width = _useWindowSize.width;
  return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
    children: [jsxRuntimeExports.jsxs(Stack, {
      direction: "row",
      height: "100vh",
      width: "100vw",
      overflow: "hidden",
      sx: {
        background: PALETTE.secondary.grey[1]
      },
      children: [!props.noSidebar ? jsxRuntimeExports.jsx(Stack, {
        minWidth: "calc(".concat(WIDTH$1, " + ").concat(SIDEBAR_X_MARGIN, "px)"),
        alignItems: "flex-end",
        py: SIDEBAR_Y_MARGIN,
        mr: "5px",
        justifyContent: "center",
        children: jsxRuntimeExports.jsx(Sidebar, {
          selectedItemId: props.selectedSidebarItemId,
          classroomId: props.classroomId
        })
      }) : null, jsxRuntimeExports.jsxs(Stack, {
        sx: {
          height: props.scrollable ? undefined : '100%',
          width: '100%'
        },
        overflow: props.scrollable ? 's croll' : 'hidden',
        spacing: "20px",
        pr: "".concat(SIDEBAR_X_MARGIN, "px"),
        pt: PADDING_TOP,
        ref: ref,
        onScroll: props.onScroll,
        children: [props.header ? jsxRuntimeExports.jsx(Stack, {
          pl: "50px",
          pb: "24px",
          children: props.header
        }) : null, jsxRuntimeExports.jsx(Stack, {
          spacing: "30px",
          justifyContent: "space-between",
          pl: "".concat(SIDEBAR_X_MARGIN, "px"),
          children: jsxRuntimeExports.jsx(Stack, {
            direction: "row",
            width: "100%",
            justifyContent: "space-between",
            spacing: "18px",
            children: jsxRuntimeExports.jsx(Stack, {
              direction: "row",
              spacing: "30px",
              alignItems: "flex-end",
              //flex={1}
              width: "100%",
              children: jsxRuntimeExports.jsxs(Stack, {
                flex: 1,
                direction: "row",
                justifyContent: "space-between",
                children: [jsxRuntimeExports.jsxs(Stack, {
                  direction: "row",
                  spacing: "15px",
                  alignItems: "center",
                  children: [props.titleBackButtonCallback ? jsxRuntimeExports.jsx(Stack, {
                    width: "25px",
                    children: jsxRuntimeExports.jsx(Stack, {
                      sx: {
                        cursor: 'pointer',
                        '&:hover': {
                          opacity: 0.6
                        },
                        transition: '0.2s'
                      },
                      onClick: props.titleBackButtonCallback,
                      justifyContent: "center",
                      children: jsxRuntimeExports.jsx(SvgChevronLeft, {
                        height: "32px",
                        width: "32px"
                      })
                    })
                  }) : null, jsxRuntimeExports.jsxs(Stack, {
                    direction: "row",
                    spacing: "12px",
                    alignItems: "center",
                    overflow: "hidden",
                    children: [props.dotColor ? jsxRuntimeExports.jsx(Box, {
                      height: "23px",
                      width: "23px",
                      minWidth: "23px",
                      bgcolor: props.dotColor,
                      borderRadius: "100%"
                    }) : null, jsxRuntimeExports.jsx(UrsorFadeIn, {
                      delay: 200,
                      duration: 600,
                      children: jsxRuntimeExports.jsxs(Stack, {
                        direction: "row",
                        spacing: "20px",
                        alignItems: "flex-end",
                        width: "100%",
                        overflow: "hidden",
                        children: [jsxRuntimeExports.jsxs(Stack, {
                          overflow: "hidden",
                          spacing: "5px",
                          children: [props.titleRow ? jsxRuntimeExports.jsx(TitleRow, {
                            items: props.titleRow
                          }) : jsxRuntimeExports.jsx(Typography$1, {
                            variant: "h3",
                            color: props.dark ? PALETTE.font.light : PALETTE.font.dark,
                            noWrap: true,
                            children: props.title
                          }), props.description ? jsxRuntimeExports.jsx(Typography$1, {
                            variant: "small",
                            color: PALETTE.secondary.grey[4],
                            children: props.description
                          }) : null]
                        }), props.titleRowLefthandElement ? jsxRuntimeExports.jsx(Stack, {
                          style: {
                            paddingBottom: '3px'
                            // overflow: "hidden",
                          },
                          //overflow="hidden"
                          position: "relative",
                          overflow: "visible",
                          children: props.titleRowLefthandElement
                        }) : null, props.info ? jsxRuntimeExports.jsx(Stack, {
                          sx: {
                            transform: 'translateY(-3px)'
                          },
                          children: jsxRuntimeExports.jsx(InfoButton, _objectSpread$2({}, props.info))
                        }) : null]
                      })
                    })]
                  })]
                }), props.button || props.secondaryButton || props.buttonRowExtraElement || props.actions ? jsxRuntimeExports.jsx(UrsorFadeIn, {
                  delay: props.buttonsDelay || 600,
                  duration: 1100,
                  children: jsxRuntimeExports.jsxs(Stack, {
                    direction: "row",
                    spacing: "16px",
                    position: "relative",
                    alignItems: "center",
                    children: [props.buttonRowExtraElement, props.secondaryButton ? jsxRuntimeExports.jsx(Box, {
                      id: (_props$button = props.button) === null || _props$button === void 0 ? void 0 : _props$button.tourId,
                      children: jsxRuntimeExports.jsx(UrsorButton, {
                        onClick: props.secondaryButton.callback,
                        endIcon: props.secondaryButton.icon,
                        variant: "secondary",
                        disabled: (_props$button2 = props.button) === null || _props$button2 === void 0 ? void 0 : _props$button2.disabled,
                        children: props.secondaryButton.text
                      })
                    }) : null, props.button ? jsxRuntimeExports.jsx(Box, {
                      id: (_props$button3 = props.button) === null || _props$button3 === void 0 ? void 0 : _props$button3.tourId,
                      children: jsxRuntimeExports.jsx(UrsorButton, {
                        onClick: props.button.callback,
                        endIcon: props.button.icon,
                        dark: true,
                        variant: "tertiary",
                        disabled: (_props$button4 = props.button) === null || _props$button4 === void 0 ? void 0 : _props$button4.disabled,
                        children: props.button.text
                      })
                    }) : null, props.buttonRowExtraElementRight, props.actions ? jsxRuntimeExports.jsx(UrsorActionButton, {
                      actions: props.actions,
                      large: true,
                      iconSize: "18px",
                      background: "transparent",
                      border: true
                    }) : null]
                  })
                }) : null]
              })
            })
          })
        }), jsxRuntimeExports.jsx(Stack
        // sx={{
        //   display: "flex",
        //   justifyContent: "center",
        // }}
        , {
          // sx={{
          //   display: "flex",
          //   justifyContent: "center",
          // }}
          width: (_props$bodyWidth = props.bodyWidth) !== null && _props$bodyWidth !== void 0 ? _props$bodyWidth : '100%',
          height: "100%" // cannot scroll without this
          ,
          children: props.children
        })]
      })]
    }), props.maxWidth && width < props.maxWidth ? jsxRuntimeExports.jsx(DynamicallyLoadedPortal, {
      children: jsxRuntimeExports.jsxs(Stack, {
        top: 0,
        left: 0,
        position: "absolute",
        width: "100%",
        height: "100%",
        justifyContent: "center",
        alignItems: "center",
        sx: {
          backdropFilter: 'blur(5px)'
        },
        bgcolor: "rgba(0,0,0,0.5)",
        zIndex: 9999,
        spacing: "3px",
        children: [jsxRuntimeExports.jsx(Typography$1, {
          bold: true,
          color: "rgba(255,255,255,0.93)",
          children: "This screen is too narrow to have a proper Astro experience."
        }), jsxRuntimeExports.jsx(Typography$1, {
          bold: true,
          color: "rgba(255,255,255,0.93)",
          children: "Please switch to a wider screen."
        })]
      })
    }) : null]
  });
});
PageLayout.displayName = 'Page layout';

var _path$3;
function _extends$4() { return _extends$4 = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$4.apply(null, arguments); }
var SvgPlusIcon = function SvgPlusIcon(props) {
  return /*#__PURE__*/React$1.createElement("svg", _extends$4({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 32 32"
  }, props), _path$3 || (_path$3 = /*#__PURE__*/React$1.createElement("path", {
    fill: "#0D2839",
    fillRule: "evenodd",
    d: "M16.117 4.798a1.5 1.5 0 0 1 1.5 1.5v8.5h8.5a1.5 1.5 0 1 1 0 3h-8.5v8.5a1.5 1.5 0 0 1-3 0v-8.5h-8.5a1.5 1.5 0 0 1 0-3h8.5v-8.5a1.5 1.5 0 0 1 1.5-1.5",
    clipRule: "evenodd"
  })));
};

var _path$2;
function _extends$3() { return _extends$3 = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$3.apply(null, arguments); }
var SvgStar = function SvgStar(props) {
  return /*#__PURE__*/React$1.createElement("svg", _extends$3({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 18 19"
  }, props), _path$2 || (_path$2 = /*#__PURE__*/React$1.createElement("path", {
    fill: "#fff",
    d: "m9.822 18.012 2.224-4.066a3.5 3.5 0 0 1 1.401-1.401l4.066-2.224a.936.936 0 0 0 0-1.645l-4.066-2.224a3.53 3.53 0 0 1-1.4-1.4L9.821.988a.937.937 0 0 0-1.644 0L5.954 5.053a3.53 3.53 0 0 1-1.4 1.4L.488 8.679a.937.937 0 0 0 0 1.645l4.066 2.223c.59.324 1.077.81 1.4 1.402l2.224 4.066a.938.938 0 0 0 1.644-.002"
  })));
};

var ProfileImageRow = function ProfileImageRow(props) {
  return jsxRuntimeExports.jsx(Stack$1, {
    direction: "row",
    spacing: "4px",
    height: "42px",
    children: props.devices.length > 0 ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
      children: [jsxRuntimeExports.jsx(Stack$1, {
        direction: "row",
        spacing: "36px",
        children: props.devices.slice(0, 3).map(function (d, i) {
          return jsxRuntimeExports.jsx(Stack$1, {
            width: 0,
            position: "relative",
            overflow: "visible",
            children: jsxRuntimeExports.jsx(Stack$1, {
              position: "absolute",
              bottom: 0,
              left: 0,
              children: jsxRuntimeExports.jsx(Stack$1, {
                borderRadius: "100%",
                overflow: "hidden",
                boxShadow: "0 0 12px rgba(0,0,0,0.14)",
                minWidth: 42,
                minHeight: 42,
                justifyContent: "center",
                alignItems: "center",
                bgcolor: PALETTE.secondary.blue[2],
                children: d.profileAvatarUrl ? jsxRuntimeExports.jsx("img", {
                  src: d.profileAvatarUrl,
                  height: 42,
                  width: 42,
                  alt: "profile image"
                }) : jsxRuntimeExports.jsx(Typography$1, {
                  color: "rgb(255,255,255)",
                  bold: true,
                  children: getInitials(d.name)
                })
              })
            })
          }, i);
        })
      }), props.totalDeviceCount > 3 ? jsxRuntimeExports.jsxs(Stack$1, {
        height: "63px",
        direction: "row",
        spacing: "4px",
        alignItems: "center",
        sx: {
          transform: 'translate(48px, -10px)',
          svg: {
            path: {
              fill: PALETTE.secondary.grey[4]
            }
          }
        },
        children: [jsxRuntimeExports.jsx(Typography$1, {
          variant: "small",
          bold: true,
          color: PALETTE.secondary.grey[4],
          children: "+".concat(props.totalDeviceCount - 3)
        }), jsxRuntimeExports.jsx(SvgPeopleIcon, {
          height: "12px",
          width: "12px"
        })]
      }) : null]
    }) : jsxRuntimeExports.jsxs(Stack$1, {
      direction: "row",
      spacing: "6px",
      height: "42px",
      alignItems: "center",
      children: [jsxRuntimeExports.jsx(Stack$1, {
        bgcolor: PALETTE.secondary.grey[2],
        width: "42px",
        height: "42px",
        overflow: "hidden",
        borderRadius: "100%"
      }), jsxRuntimeExports.jsx(Typography$1, {
        variant: "small",
        bold: true,
        color: PALETTE.secondary.grey[3],
        children: "No Devices yet"
      })]
    })
  });
};

var _path$1;
function _extends$2() { return _extends$2 = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$2.apply(null, arguments); }
var SvgTrashcanIcon = function SvgTrashcanIcon(props) {
  return /*#__PURE__*/React$1.createElement("svg", _extends$2({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 32 32"
  }, props), _path$1 || (_path$1 = /*#__PURE__*/React$1.createElement("path", {
    fill: "#0D2839",
    fillRule: "evenodd",
    d: "M13 3.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5V6h-6zm9 0V6h4.5a1.5 1.5 0 0 1 0 3h-21a1.5 1.5 0 0 1 0-3H10V3.5A3.5 3.5 0 0 1 13.5 0h5A3.5 3.5 0 0 1 22 3.5M8.993 13.35a1.5 1.5 0 0 0-2.986.3l1.32 13.198A3.5 3.5 0 0 0 10.81 30h10.38a3.5 3.5 0 0 0 3.483-3.152l1.32-13.199a1.5 1.5 0 0 0-2.986-.298l-1.32 13.199a.5.5 0 0 1-.497.45H10.81a.5.5 0 0 1-.498-.45z",
    clipRule: "evenodd"
  })));
};

var _path;
function _extends$1() { return _extends$1 = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$1.apply(null, arguments); }
var SvgArrowUpRight = function SvgArrowUpRight(props) {
  return /*#__PURE__*/React$1.createElement("svg", _extends$1({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 32 32"
  }, props), _path || (_path = /*#__PURE__*/React$1.createElement("path", {
    fill: "#0D2839",
    fillRule: "evenodd",
    d: "M9.06 9.501a1.5 1.5 0 0 1 1.5-1.5h12.021a1.5 1.5 0 0 1 1.5 1.5v12.02a1.5 1.5 0 0 1-3 0v-8.399l-10.52 10.521a1.5 1.5 0 0 1-2.122-2.121L18.96 11h-8.4a1.5 1.5 0 0 1-1.5-1.5",
    clipRule: "evenodd"
  })));
};

var INPUT_PHRASE = 'delete';
var DeletionDialog = function DeletionDialog(props) {
  var _useState = useState(''),
    _useState2 = _slicedToArray$2(_useState, 2),
    inputValue = _useState2[0],
    setInputValue = _useState2[1];
  var notificationCtx = useContext(NotificationContext);
  return jsxRuntimeExports.jsx(UrsorDialog, {
    open: props.open,
    onCloseCallback: props.onClose,
    title: "Are you sure?",
    subtitle: [props.subtitle],
    width: "422px",
    dynamicHeight: true,
    isMobile: props.isMobile,
    children: jsxRuntimeExports.jsxs(Stack$1, {
      flex: 1,
      width: "100%",
      height: "100%",
      justifyContent: "space-between",
      spacing: "32px",
      children: [!props.noConfirmation ? jsxRuntimeExports.jsx(LabeledInputField, {
        label: "Type \"".concat(INPUT_PHRASE, "\" to delete this ").concat(_.capitalize(props.type)),
        children: jsxRuntimeExports.jsx(UrsorInputField, {
          value: inputValue,
          onChange: function onChange(event) {
            return setInputValue(event.target.value);
          },
          placeholder: INPUT_PHRASE,
          width: "100%",
          leftAlign: true
        })
      }) : null, jsxRuntimeExports.jsxs(Stack$1, {
        spacing: "8px",
        width: "100%",
        children: [jsxRuntimeExports.jsx(UrsorButton, {
          dark: true,
          variant: "tertiary",
          width: "100%",
          disabled: !props.noConfirmation && inputValue !== INPUT_PHRASE,
          onClick: function onClick() {
            props.onSubmit();
            notificationCtx.negativeSuccess("Deleted ".concat(_.capitalize(props.type)));
          },
          backgroundColor: PALETTE.system.red,
          hoverOpacity: 0.7,
          children: "Delete"
        }), jsxRuntimeExports.jsx(UrsorButton, {
          variant: "secondary",
          width: "100%",
          onClick: props.onClose,
          children: "Keep"
        })]
      })]
    })
  });
};

var FolderRenameDialog = function FolderRenameDialog(props) {
  var _useState = useState(''),
    _useState2 = _slicedToArray$2(_useState, 2),
    name = _useState2[0],
    setName = _useState2[1];
  useEffect(function () {
    return setName(props.name);
  }, [props.name]);
  return jsxRuntimeExports.jsx(UrsorDialog, {
    open: props.open,
    onCloseCallback: props.onClose,
    title: "Rename Folder",
    width: "422px",
    height: "294px",
    isMobile: props.isMobile,
    children: jsxRuntimeExports.jsxs(Stack$1, {
      flex: 1,
      width: "100%",
      height: "100%",
      justifyContent: "space-between",
      children: [jsxRuntimeExports.jsx(LabeledInputField, {
        label: "Name",
        children: jsxRuntimeExports.jsx(UrsorInputField, {
          value: name,
          onChange: function onChange(event) {
            return setName(event.target.value);
          },
          placeholder: "Write a new name",
          width: "100%",
          leftAlign: true
        })
      }), jsxRuntimeExports.jsx(UrsorButton, {
        dark: true,
        variant: "tertiary",
        width: "100%",
        onClick: function onClick() {
          props.onSubmit(name);
          props.onClose();
        },
        children: "Save"
      })]
    })
  });
};

var lib = {};

var uaParser_min = {exports: {}};

/* UAParser.js v1.0.38
   Copyright © 2012-2021 Faisal Salman <f@faisalman.com>
   MIT License */

(function (module, exports) {
	(function(window,undefined$1){var LIBVERSION="1.0.38",EMPTY="",UNKNOWN="?",FUNC_TYPE="function",UNDEF_TYPE="undefined",OBJ_TYPE="object",STR_TYPE="string",MAJOR="major",MODEL="model",NAME="name",TYPE="type",VENDOR="vendor",VERSION="version",ARCHITECTURE="architecture",CONSOLE="console",MOBILE="mobile",TABLET="tablet",SMARTTV="smarttv",WEARABLE="wearable",EMBEDDED="embedded",UA_MAX_LENGTH=500;var AMAZON="Amazon",APPLE="Apple",ASUS="ASUS",BLACKBERRY="BlackBerry",BROWSER="Browser",CHROME="Chrome",EDGE="Edge",FIREFOX="Firefox",GOOGLE="Google",HUAWEI="Huawei",LG="LG",MICROSOFT="Microsoft",MOTOROLA="Motorola",OPERA="Opera",SAMSUNG="Samsung",SHARP="Sharp",SONY="Sony",XIAOMI="Xiaomi",ZEBRA="Zebra",FACEBOOK="Facebook",CHROMIUM_OS="Chromium OS",MAC_OS="Mac OS";var extend=function(regexes,extensions){var mergedRegexes={};for(var i in regexes){if(extensions[i]&&extensions[i].length%2===0){mergedRegexes[i]=extensions[i].concat(regexes[i]);}else {mergedRegexes[i]=regexes[i];}}return mergedRegexes},enumerize=function(arr){var enums={};for(var i=0;i<arr.length;i++){enums[arr[i].toUpperCase()]=arr[i];}return enums},has=function(str1,str2){return typeof str1===STR_TYPE?lowerize(str2).indexOf(lowerize(str1))!==-1:false},lowerize=function(str){return str.toLowerCase()},majorize=function(version){return typeof version===STR_TYPE?version.replace(/[^\d\.]/g,EMPTY).split(".")[0]:undefined$1},trim=function(str,len){if(typeof str===STR_TYPE){str=str.replace(/^\s\s*/,EMPTY);return typeof len===UNDEF_TYPE?str:str.substring(0,UA_MAX_LENGTH)}};var rgxMapper=function(ua,arrays){var i=0,j,k,p,q,matches,match;while(i<arrays.length&&!matches){var regex=arrays[i],props=arrays[i+1];j=k=0;while(j<regex.length&&!matches){if(!regex[j]){break}matches=regex[j++].exec(ua);if(!!matches){for(p=0;p<props.length;p++){match=matches[++k];q=props[p];if(typeof q===OBJ_TYPE&&q.length>0){if(q.length===2){if(typeof q[1]==FUNC_TYPE){this[q[0]]=q[1].call(this,match);}else {this[q[0]]=q[1];}}else if(q.length===3){if(typeof q[1]===FUNC_TYPE&&!(q[1].exec&&q[1].test)){this[q[0]]=match?q[1].call(this,match,q[2]):undefined$1;}else {this[q[0]]=match?match.replace(q[1],q[2]):undefined$1;}}else if(q.length===4){this[q[0]]=match?q[3].call(this,match.replace(q[1],q[2])):undefined$1;}}else {this[q]=match?match:undefined$1;}}}}i+=2;}},strMapper=function(str,map){for(var i in map){if(typeof map[i]===OBJ_TYPE&&map[i].length>0){for(var j=0;j<map[i].length;j++){if(has(map[i][j],str)){return i===UNKNOWN?undefined$1:i}}}else if(has(map[i],str)){return i===UNKNOWN?undefined$1:i}}return str};var oldSafariMap={"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"},windowsVersionMap={ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2e3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",8.1:"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"};var regexes={browser:[[/\b(?:crmo|crios)\/([\w\.]+)/i],[VERSION,[NAME,"Chrome"]],[/edg(?:e|ios|a)?\/([\w\.]+)/i],[VERSION,[NAME,"Edge"]],[/(opera mini)\/([-\w\.]+)/i,/(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,/(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i],[NAME,VERSION],[/opios[\/ ]+([\w\.]+)/i],[VERSION,[NAME,OPERA+" Mini"]],[/\bop(?:rg)?x\/([\w\.]+)/i],[VERSION,[NAME,OPERA+" GX"]],[/\bopr\/([\w\.]+)/i],[VERSION,[NAME,OPERA]],[/\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i],[VERSION,[NAME,"Baidu"]],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,/(avant|iemobile|slim)\s?(?:browser)?[\/ ]?([\w\.]*)/i,/(?:ms|\()(ie) ([\w\.]+)/i,/(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,/(heytap|ovi)browser\/([\d\.]+)/i,/(weibo)__([\d\.]+)/i],[NAME,VERSION],[/\bddg\/([\w\.]+)/i],[VERSION,[NAME,"DuckDuckGo"]],[/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],[VERSION,[NAME,"UC"+BROWSER]],[/microm.+\bqbcore\/([\w\.]+)/i,/\bqbcore\/([\w\.]+).+microm/i,/micromessenger\/([\w\.]+)/i],[VERSION,[NAME,"WeChat"]],[/konqueror\/([\w\.]+)/i],[VERSION,[NAME,"Konqueror"]],[/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],[VERSION,[NAME,"IE"]],[/ya(?:search)?browser\/([\w\.]+)/i],[VERSION,[NAME,"Yandex"]],[/slbrowser\/([\w\.]+)/i],[VERSION,[NAME,"Smart Lenovo "+BROWSER]],[/(avast|avg)\/([\w\.]+)/i],[[NAME,/(.+)/,"$1 Secure "+BROWSER],VERSION],[/\bfocus\/([\w\.]+)/i],[VERSION,[NAME,FIREFOX+" Focus"]],[/\bopt\/([\w\.]+)/i],[VERSION,[NAME,OPERA+" Touch"]],[/coc_coc\w+\/([\w\.]+)/i],[VERSION,[NAME,"Coc Coc"]],[/dolfin\/([\w\.]+)/i],[VERSION,[NAME,"Dolphin"]],[/coast\/([\w\.]+)/i],[VERSION,[NAME,OPERA+" Coast"]],[/miuibrowser\/([\w\.]+)/i],[VERSION,[NAME,"MIUI "+BROWSER]],[/fxios\/([-\w\.]+)/i],[VERSION,[NAME,FIREFOX]],[/\bqihu|(qi?ho?o?|360)browser/i],[[NAME,"360 "+BROWSER]],[/(oculus|sailfish|huawei|vivo)browser\/([\w\.]+)/i],[[NAME,/(.+)/,"$1 "+BROWSER],VERSION],[/samsungbrowser\/([\w\.]+)/i],[VERSION,[NAME,SAMSUNG+" Internet"]],[/(comodo_dragon)\/([\w\.]+)/i],[[NAME,/_/g," "],VERSION],[/metasr[\/ ]?([\d\.]+)/i],[VERSION,[NAME,"Sogou Explorer"]],[/(sogou)mo\w+\/([\d\.]+)/i],[[NAME,"Sogou Mobile"],VERSION],[/(electron)\/([\w\.]+) safari/i,/(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,/m?(qqbrowser|2345Explorer)[\/ ]?([\w\.]+)/i],[NAME,VERSION],[/(lbbrowser)/i,/\[(linkedin)app\]/i],[NAME],[/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i],[[NAME,FACEBOOK],VERSION],[/(Klarna)\/([\w\.]+)/i,/(kakao(?:talk|story))[\/ ]([\w\.]+)/i,/(naver)\(.*?(\d+\.[\w\.]+).*\)/i,/safari (line)\/([\w\.]+)/i,/\b(line)\/([\w\.]+)\/iab/i,/(alipay)client\/([\w\.]+)/i,/(twitter)(?:and| f.+e\/([\w\.]+))/i,/(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i],[NAME,VERSION],[/\bgsa\/([\w\.]+) .*safari\//i],[VERSION,[NAME,"GSA"]],[/musical_ly(?:.+app_?version\/|_)([\w\.]+)/i],[VERSION,[NAME,"TikTok"]],[/headlesschrome(?:\/([\w\.]+)| )/i],[VERSION,[NAME,CHROME+" Headless"]],[/ wv\).+(chrome)\/([\w\.]+)/i],[[NAME,CHROME+" WebView"],VERSION],[/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],[VERSION,[NAME,"Android "+BROWSER]],[/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i],[NAME,VERSION],[/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i],[VERSION,[NAME,"Mobile Safari"]],[/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i],[VERSION,NAME],[/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],[NAME,[VERSION,strMapper,oldSafariMap]],[/(webkit|khtml)\/([\w\.]+)/i],[NAME,VERSION],[/(navigator|netscape\d?)\/([-\w\.]+)/i],[[NAME,"Netscape"],VERSION],[/mobile vr; rv:([\w\.]+)\).+firefox/i],[VERSION,[NAME,FIREFOX+" Reality"]],[/ekiohf.+(flow)\/([\w\.]+)/i,/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,/(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,/(firefox)\/([\w\.]+)/i,/(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,/(links) \(([\w\.]+)/i,/panasonic;(viera)/i],[NAME,VERSION],[/(cobalt)\/([\w\.]+)/i],[NAME,[VERSION,/master.|lts./,""]]],cpu:[[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i],[[ARCHITECTURE,"amd64"]],[/(ia32(?=;))/i],[[ARCHITECTURE,lowerize]],[/((?:i[346]|x)86)[;\)]/i],[[ARCHITECTURE,"ia32"]],[/\b(aarch64|arm(v?8e?l?|_?64))\b/i],[[ARCHITECTURE,"arm64"]],[/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],[[ARCHITECTURE,"armhf"]],[/windows (ce|mobile); ppc;/i],[[ARCHITECTURE,"arm"]],[/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i],[[ARCHITECTURE,/ower/,EMPTY,lowerize]],[/(sun4\w)[;\)]/i],[[ARCHITECTURE,"sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i],[[ARCHITECTURE,lowerize]]],device:[[/\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i],[MODEL,[VENDOR,SAMSUNG],[TYPE,TABLET]],[/\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,/samsung[- ]([-\w]+)/i,/sec-(sgh\w+)/i],[MODEL,[VENDOR,SAMSUNG],[TYPE,MOBILE]],[/(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i],[MODEL,[VENDOR,APPLE],[TYPE,MOBILE]],[/\((ipad);[-\w\),; ]+apple/i,/applecoremedia\/[\w\.]+ \((ipad)/i,/\b(ipad)\d\d?,\d\d?[;\]].+ios/i],[MODEL,[VENDOR,APPLE],[TYPE,TABLET]],[/(macintosh);/i],[MODEL,[VENDOR,APPLE]],[/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],[MODEL,[VENDOR,SHARP],[TYPE,MOBILE]],[/\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i],[MODEL,[VENDOR,HUAWEI],[TYPE,TABLET]],[/(?:huawei|honor)([-\w ]+)[;\)]/i,/\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i],[MODEL,[VENDOR,HUAWEI],[TYPE,MOBILE]],[/\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,/\b; (\w+) build\/hm\1/i,/\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,/\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,/oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i,/\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i],[[MODEL,/_/g," "],[VENDOR,XIAOMI],[TYPE,MOBILE]],[/oid[^\)]+; (2\d{4}(283|rpbf)[cgl])( bui|\))/i,/\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i],[[MODEL,/_/g," "],[VENDOR,XIAOMI],[TYPE,TABLET]],[/; (\w+) bui.+ oppo/i,/\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i],[MODEL,[VENDOR,"OPPO"],[TYPE,MOBILE]],[/\b(opd2\d{3}a?) bui/i],[MODEL,[VENDOR,"OPPO"],[TYPE,TABLET]],[/vivo (\w+)(?: bui|\))/i,/\b(v[12]\d{3}\w?[at])(?: bui|;)/i],[MODEL,[VENDOR,"Vivo"],[TYPE,MOBILE]],[/\b(rmx[1-3]\d{3})(?: bui|;|\))/i],[MODEL,[VENDOR,"Realme"],[TYPE,MOBILE]],[/\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,/\bmot(?:orola)?[- ](\w*)/i,/((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i],[MODEL,[VENDOR,MOTOROLA],[TYPE,MOBILE]],[/\b(mz60\d|xoom[2 ]{0,2}) build\//i],[MODEL,[VENDOR,MOTOROLA],[TYPE,TABLET]],[/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i],[MODEL,[VENDOR,LG],[TYPE,TABLET]],[/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,/\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,/\blg-?([\d\w]+) bui/i],[MODEL,[VENDOR,LG],[TYPE,MOBILE]],[/(ideatab[-\w ]+)/i,/lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i],[MODEL,[VENDOR,"Lenovo"],[TYPE,TABLET]],[/(?:maemo|nokia).*(n900|lumia \d+)/i,/nokia[-_ ]?([-\w\.]*)/i],[[MODEL,/_/g," "],[VENDOR,"Nokia"],[TYPE,MOBILE]],[/(pixel c)\b/i],[MODEL,[VENDOR,GOOGLE],[TYPE,TABLET]],[/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],[MODEL,[VENDOR,GOOGLE],[TYPE,MOBILE]],[/droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i],[MODEL,[VENDOR,SONY],[TYPE,MOBILE]],[/sony tablet [ps]/i,/\b(?:sony)?sgp\w+(?: bui|\))/i],[[MODEL,"Xperia Tablet"],[VENDOR,SONY],[TYPE,TABLET]],[/ (kb2005|in20[12]5|be20[12][59])\b/i,/(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i],[MODEL,[VENDOR,"OnePlus"],[TYPE,MOBILE]],[/(alexa)webm/i,/(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i,/(kf[a-z]+)( bui|\)).+silk\//i],[MODEL,[VENDOR,AMAZON],[TYPE,TABLET]],[/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],[[MODEL,/(.+)/g,"Fire Phone $1"],[VENDOR,AMAZON],[TYPE,MOBILE]],[/(playbook);[-\w\),; ]+(rim)/i],[MODEL,VENDOR,[TYPE,TABLET]],[/\b((?:bb[a-f]|st[hv])100-\d)/i,/\(bb10; (\w+)/i],[MODEL,[VENDOR,BLACKBERRY],[TYPE,MOBILE]],[/(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i],[MODEL,[VENDOR,ASUS],[TYPE,TABLET]],[/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],[MODEL,[VENDOR,ASUS],[TYPE,MOBILE]],[/(nexus 9)/i],[MODEL,[VENDOR,"HTC"],[TYPE,TABLET]],[/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,/(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,/(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i],[VENDOR,[MODEL,/_/g," "],[TYPE,MOBILE]],[/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],[MODEL,[VENDOR,"Acer"],[TYPE,TABLET]],[/droid.+; (m[1-5] note) bui/i,/\bmz-([-\w]{2,})/i],[MODEL,[VENDOR,"Meizu"],[TYPE,MOBILE]],[/; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i],[MODEL,[VENDOR,"Ulefone"],[TYPE,MOBILE]],[/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno)[-_ ]?([-\w]*)/i,/(hp) ([\w ]+\w)/i,/(asus)-?(\w+)/i,/(microsoft); (lumia[\w ]+)/i,/(lenovo)[-_ ]?([-\w]+)/i,/(jolla)/i,/(oppo) ?([\w ]+) bui/i],[VENDOR,MODEL,[TYPE,MOBILE]],[/(kobo)\s(ereader|touch)/i,/(archos) (gamepad2?)/i,/(hp).+(touchpad(?!.+tablet)|tablet)/i,/(kindle)\/([\w\.]+)/i,/(nook)[\w ]+build\/(\w+)/i,/(dell) (strea[kpr\d ]*[\dko])/i,/(le[- ]+pan)[- ]+(\w{1,9}) bui/i,/(trinity)[- ]*(t\d{3}) bui/i,/(gigaset)[- ]+(q\w{1,9}) bui/i,/(vodafone) ([\w ]+)(?:\)| bui)/i],[VENDOR,MODEL,[TYPE,TABLET]],[/(surface duo)/i],[MODEL,[VENDOR,MICROSOFT],[TYPE,TABLET]],[/droid [\d\.]+; (fp\du?)(?: b|\))/i],[MODEL,[VENDOR,"Fairphone"],[TYPE,MOBILE]],[/(u304aa)/i],[MODEL,[VENDOR,"AT&T"],[TYPE,MOBILE]],[/\bsie-(\w*)/i],[MODEL,[VENDOR,"Siemens"],[TYPE,MOBILE]],[/\b(rct\w+) b/i],[MODEL,[VENDOR,"RCA"],[TYPE,TABLET]],[/\b(venue[\d ]{2,7}) b/i],[MODEL,[VENDOR,"Dell"],[TYPE,TABLET]],[/\b(q(?:mv|ta)\w+) b/i],[MODEL,[VENDOR,"Verizon"],[TYPE,TABLET]],[/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],[MODEL,[VENDOR,"Barnes & Noble"],[TYPE,TABLET]],[/\b(tm\d{3}\w+) b/i],[MODEL,[VENDOR,"NuVision"],[TYPE,TABLET]],[/\b(k88) b/i],[MODEL,[VENDOR,"ZTE"],[TYPE,TABLET]],[/\b(nx\d{3}j) b/i],[MODEL,[VENDOR,"ZTE"],[TYPE,MOBILE]],[/\b(gen\d{3}) b.+49h/i],[MODEL,[VENDOR,"Swiss"],[TYPE,MOBILE]],[/\b(zur\d{3}) b/i],[MODEL,[VENDOR,"Swiss"],[TYPE,TABLET]],[/\b((zeki)?tb.*\b) b/i],[MODEL,[VENDOR,"Zeki"],[TYPE,TABLET]],[/\b([yr]\d{2}) b/i,/\b(dragon[- ]+touch |dt)(\w{5}) b/i],[[VENDOR,"Dragon Touch"],MODEL,[TYPE,TABLET]],[/\b(ns-?\w{0,9}) b/i],[MODEL,[VENDOR,"Insignia"],[TYPE,TABLET]],[/\b((nxa|next)-?\w{0,9}) b/i],[MODEL,[VENDOR,"NextBook"],[TYPE,TABLET]],[/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],[[VENDOR,"Voice"],MODEL,[TYPE,MOBILE]],[/\b(lvtel\-)?(v1[12]) b/i],[[VENDOR,"LvTel"],MODEL,[TYPE,MOBILE]],[/\b(ph-1) /i],[MODEL,[VENDOR,"Essential"],[TYPE,MOBILE]],[/\b(v(100md|700na|7011|917g).*\b) b/i],[MODEL,[VENDOR,"Envizen"],[TYPE,TABLET]],[/\b(trio[-\w\. ]+) b/i],[MODEL,[VENDOR,"MachSpeed"],[TYPE,TABLET]],[/\btu_(1491) b/i],[MODEL,[VENDOR,"Rotor"],[TYPE,TABLET]],[/(shield[\w ]+) b/i],[MODEL,[VENDOR,"Nvidia"],[TYPE,TABLET]],[/(sprint) (\w+)/i],[VENDOR,MODEL,[TYPE,MOBILE]],[/(kin\.[onetw]{3})/i],[[MODEL,/\./g," "],[VENDOR,MICROSOFT],[TYPE,MOBILE]],[/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],[MODEL,[VENDOR,ZEBRA],[TYPE,TABLET]],[/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],[MODEL,[VENDOR,ZEBRA],[TYPE,MOBILE]],[/smart-tv.+(samsung)/i],[VENDOR,[TYPE,SMARTTV]],[/hbbtv.+maple;(\d+)/i],[[MODEL,/^/,"SmartTV"],[VENDOR,SAMSUNG],[TYPE,SMARTTV]],[/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i],[[VENDOR,LG],[TYPE,SMARTTV]],[/(apple) ?tv/i],[VENDOR,[MODEL,APPLE+" TV"],[TYPE,SMARTTV]],[/crkey/i],[[MODEL,CHROME+"cast"],[VENDOR,GOOGLE],[TYPE,SMARTTV]],[/droid.+aft(\w+)( bui|\))/i],[MODEL,[VENDOR,AMAZON],[TYPE,SMARTTV]],[/\(dtv[\);].+(aquos)/i,/(aquos-tv[\w ]+)\)/i],[MODEL,[VENDOR,SHARP],[TYPE,SMARTTV]],[/(bravia[\w ]+)( bui|\))/i],[MODEL,[VENDOR,SONY],[TYPE,SMARTTV]],[/(mitv-\w{5}) bui/i],[MODEL,[VENDOR,XIAOMI],[TYPE,SMARTTV]],[/Hbbtv.*(technisat) (.*);/i],[VENDOR,MODEL,[TYPE,SMARTTV]],[/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,/hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i],[[VENDOR,trim],[MODEL,trim],[TYPE,SMARTTV]],[/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],[[TYPE,SMARTTV]],[/(ouya)/i,/(nintendo) ([wids3utch]+)/i],[VENDOR,MODEL,[TYPE,CONSOLE]],[/droid.+; (shield) bui/i],[MODEL,[VENDOR,"Nvidia"],[TYPE,CONSOLE]],[/(playstation [345portablevi]+)/i],[MODEL,[VENDOR,SONY],[TYPE,CONSOLE]],[/\b(xbox(?: one)?(?!; xbox))[\); ]/i],[MODEL,[VENDOR,MICROSOFT],[TYPE,CONSOLE]],[/((pebble))app/i],[VENDOR,MODEL,[TYPE,WEARABLE]],[/(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i],[MODEL,[VENDOR,APPLE],[TYPE,WEARABLE]],[/droid.+; (glass) \d/i],[MODEL,[VENDOR,GOOGLE],[TYPE,WEARABLE]],[/droid.+; (wt63?0{2,3})\)/i],[MODEL,[VENDOR,ZEBRA],[TYPE,WEARABLE]],[/(quest( \d| pro)?)/i],[MODEL,[VENDOR,FACEBOOK],[TYPE,WEARABLE]],[/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],[VENDOR,[TYPE,EMBEDDED]],[/(aeobc)\b/i],[MODEL,[VENDOR,AMAZON],[TYPE,EMBEDDED]],[/droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i],[MODEL,[TYPE,MOBILE]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i],[MODEL,[TYPE,TABLET]],[/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],[[TYPE,TABLET]],[/(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i],[[TYPE,MOBILE]],[/(android[-\w\. ]{0,9});.+buil/i],[MODEL,[VENDOR,"Generic"]]],engine:[[/windows.+ edge\/([\w\.]+)/i],[VERSION,[NAME,EDGE+"HTML"]],[/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],[VERSION,[NAME,"Blink"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,/ekioh(flow)\/([\w\.]+)/i,/(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,/(icab)[\/ ]([23]\.[\d\.]+)/i,/\b(libweb)/i],[NAME,VERSION],[/rv\:([\w\.]{1,9})\b.+(gecko)/i],[VERSION,NAME]],os:[[/microsoft (windows) (vista|xp)/i],[NAME,VERSION],[/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i],[NAME,[VERSION,strMapper,windowsVersionMap]],[/windows nt 6\.2; (arm)/i,/windows[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i,/(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i],[[VERSION,strMapper,windowsVersionMap],[NAME,"Windows"]],[/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,/(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i,/cfnetwork\/.+darwin/i],[[VERSION,/_/g,"."],[NAME,"iOS"]],[/(mac os x) ?([\w\. ]*)/i,/(macintosh|mac_powerpc\b)(?!.+haiku)/i],[[NAME,MAC_OS],[VERSION,/_/g,"."]],[/droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i],[VERSION,NAME],[/(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,/(blackberry)\w*\/([\w\.]*)/i,/(tizen|kaios)[\/ ]([\w\.]+)/i,/\((series40);/i],[NAME,VERSION],[/\(bb(10);/i],[VERSION,[NAME,BLACKBERRY]],[/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i],[VERSION,[NAME,"Symbian"]],[/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i],[VERSION,[NAME,FIREFOX+" OS"]],[/web0s;.+rt(tv)/i,/\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],[VERSION,[NAME,"webOS"]],[/watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i],[VERSION,[NAME,"watchOS"]],[/crkey\/([\d\.]+)/i],[VERSION,[NAME,CHROME+"cast"]],[/(cros) [\w]+(?:\)| ([\w\.]+)\b)/i],[[NAME,CHROMIUM_OS],VERSION],[/panasonic;(viera)/i,/(netrange)mmh/i,/(nettv)\/(\d+\.[\w\.]+)/i,/(nintendo|playstation) ([wids345portablevuch]+)/i,/(xbox); +xbox ([^\);]+)/i,/\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,/(mint)[\/\(\) ]?(\w*)/i,/(mageia|vectorlinux)[; ]/i,/([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,/(hurd|linux) ?([\w\.]*)/i,/(gnu) ?([\w\.]*)/i,/\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,/(haiku) (\w+)/i],[NAME,VERSION],[/(sunos) ?([\w\.\d]*)/i],[[NAME,"Solaris"],VERSION],[/((?:open)?solaris)[-\/ ]?([\w\.]*)/i,/(aix) ((\d)(?=\.|\)| )[\w\.])*/i,/\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,/(unix) ?([\w\.]*)/i],[NAME,VERSION]]};var UAParser=function(ua,extensions){if(typeof ua===OBJ_TYPE){extensions=ua;ua=undefined$1;}if(!(this instanceof UAParser)){return new UAParser(ua,extensions).getResult()}var _navigator=typeof window!==UNDEF_TYPE&&window.navigator?window.navigator:undefined$1;var _ua=ua||(_navigator&&_navigator.userAgent?_navigator.userAgent:EMPTY);var _uach=_navigator&&_navigator.userAgentData?_navigator.userAgentData:undefined$1;var _rgxmap=extensions?extend(regexes,extensions):regexes;var _isSelfNav=_navigator&&_navigator.userAgent==_ua;this.getBrowser=function(){var _browser={};_browser[NAME]=undefined$1;_browser[VERSION]=undefined$1;rgxMapper.call(_browser,_ua,_rgxmap.browser);_browser[MAJOR]=majorize(_browser[VERSION]);if(_isSelfNav&&_navigator&&_navigator.brave&&typeof _navigator.brave.isBrave==FUNC_TYPE){_browser[NAME]="Brave";}return _browser};this.getCPU=function(){var _cpu={};_cpu[ARCHITECTURE]=undefined$1;rgxMapper.call(_cpu,_ua,_rgxmap.cpu);return _cpu};this.getDevice=function(){var _device={};_device[VENDOR]=undefined$1;_device[MODEL]=undefined$1;_device[TYPE]=undefined$1;rgxMapper.call(_device,_ua,_rgxmap.device);if(_isSelfNav&&!_device[TYPE]&&_uach&&_uach.mobile){_device[TYPE]=MOBILE;}if(_isSelfNav&&_device[MODEL]=="Macintosh"&&_navigator&&typeof _navigator.standalone!==UNDEF_TYPE&&_navigator.maxTouchPoints&&_navigator.maxTouchPoints>2){_device[MODEL]="iPad";_device[TYPE]=TABLET;}return _device};this.getEngine=function(){var _engine={};_engine[NAME]=undefined$1;_engine[VERSION]=undefined$1;rgxMapper.call(_engine,_ua,_rgxmap.engine);return _engine};this.getOS=function(){var _os={};_os[NAME]=undefined$1;_os[VERSION]=undefined$1;rgxMapper.call(_os,_ua,_rgxmap.os);if(_isSelfNav&&!_os[NAME]&&_uach&&_uach.platform&&_uach.platform!="Unknown"){_os[NAME]=_uach.platform.replace(/chrome os/i,CHROMIUM_OS).replace(/macos/i,MAC_OS);}return _os};this.getResult=function(){return {ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}};this.getUA=function(){return _ua};this.setUA=function(ua){_ua=typeof ua===STR_TYPE&&ua.length>UA_MAX_LENGTH?trim(ua,UA_MAX_LENGTH):ua;return this};this.setUA(_ua);return this};UAParser.VERSION=LIBVERSION;UAParser.BROWSER=enumerize([NAME,VERSION,MAJOR]);UAParser.CPU=enumerize([ARCHITECTURE]);UAParser.DEVICE=enumerize([MODEL,VENDOR,TYPE,CONSOLE,MOBILE,SMARTTV,TABLET,WEARABLE,EMBEDDED]);UAParser.ENGINE=UAParser.OS=enumerize([NAME,VERSION]);{if(module.exports){exports=module.exports=UAParser;}exports.UAParser=UAParser;}var $=typeof window!==UNDEF_TYPE&&(window.jQuery||window.Zepto);if($&&!$.ua){var parser=new UAParser;$.ua=parser.getResult();$.ua.get=function(){return parser.getUA()};$.ua.set=function(ua){parser.setUA(ua);var result=parser.getResult();for(var prop in result){$.ua[prop]=result[prop];}};}})(typeof window==="object"?window:commonjsGlobal); 
} (uaParser_min, uaParser_min.exports));

var uaParser_minExports = uaParser_min.exports;

Object.defineProperty(lib, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = React__default$1;
var React__default = _interopDefault(React);

var UAParser = uaParser_minExports;

var ClientUAInstance = new UAParser();
var browser = ClientUAInstance.getBrowser();
var cpu = ClientUAInstance.getCPU();
var device = ClientUAInstance.getDevice();
var engine = ClientUAInstance.getEngine();
var os = ClientUAInstance.getOS();
var ua = ClientUAInstance.getUA();
var setUa = function setUa(userAgentString) {
  return ClientUAInstance.setUA(userAgentString);
};
var parseUserAgent = function parseUserAgent(userAgent) {
  if (!userAgent) {
    console.error('No userAgent string was provided');
    return;
  }

  var UserAgentInstance = new UAParser(userAgent);
  return {
    UA: UserAgentInstance,
    browser: UserAgentInstance.getBrowser(),
    cpu: UserAgentInstance.getCPU(),
    device: UserAgentInstance.getDevice(),
    engine: UserAgentInstance.getEngine(),
    os: UserAgentInstance.getOS(),
    ua: UserAgentInstance.getUA(),
    setUserAgent: function setUserAgent(userAgentString) {
      return UserAgentInstance.setUA(userAgentString);
    }
  };
};

var UAHelper = /*#__PURE__*/Object.freeze({
  ClientUAInstance: ClientUAInstance,
  browser: browser,
  cpu: cpu,
  device: device,
  engine: engine,
  os: os,
  ua: ua,
  setUa: setUa,
  parseUserAgent: parseUserAgent
});

function ownKeys$2(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys$2(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$2(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var DeviceTypes = {
  Mobile: 'mobile',
  Tablet: 'tablet',
  SmartTv: 'smarttv',
  Console: 'console',
  Wearable: 'wearable',
  Embedded: 'embedded',
  Browser: undefined
};
var BrowserTypes = {
  Chrome: 'Chrome',
  Firefox: 'Firefox',
  Opera: 'Opera',
  Yandex: 'Yandex',
  Safari: 'Safari',
  InternetExplorer: 'Internet Explorer',
  Edge: 'Edge',
  Chromium: 'Chromium',
  Ie: 'IE',
  MobileSafari: 'Mobile Safari',
  EdgeChromium: 'Edge Chromium',
  MIUI: 'MIUI Browser',
  SamsungBrowser: 'Samsung Browser'
};
var OsTypes = {
  IOS: 'iOS',
  Android: 'Android',
  WindowsPhone: 'Windows Phone',
  Windows: 'Windows',
  MAC_OS: 'Mac OS'
};
var InitialDeviceTypes = {
  isMobile: false,
  isTablet: false,
  isBrowser: false,
  isSmartTV: false,
  isConsole: false,
  isWearable: false
};

var checkDeviceType = function checkDeviceType(type) {
  switch (type) {
    case DeviceTypes.Mobile:
      return {
        isMobile: true
      };

    case DeviceTypes.Tablet:
      return {
        isTablet: true
      };

    case DeviceTypes.SmartTv:
      return {
        isSmartTV: true
      };

    case DeviceTypes.Console:
      return {
        isConsole: true
      };

    case DeviceTypes.Wearable:
      return {
        isWearable: true
      };

    case DeviceTypes.Browser:
      return {
        isBrowser: true
      };

    case DeviceTypes.Embedded:
      return {
        isEmbedded: true
      };

    default:
      return InitialDeviceTypes;
  }
};
var setUserAgent = function setUserAgent(userAgent) {
  return setUa(userAgent);
};
var setDefaults = function setDefaults(p) {
  var d = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'none';
  return p ? p : d;
};
var getNavigatorInstance = function getNavigatorInstance() {
  if (typeof window !== 'undefined') {
    if (window.navigator || navigator) {
      return window.navigator || navigator;
    }
  }

  return false;
};
var isIOS13Check = function isIOS13Check(type) {
  var nav = getNavigatorInstance();
  return nav && nav.platform && (nav.platform.indexOf(type) !== -1 || nav.platform === 'MacIntel' && nav.maxTouchPoints > 1 && !window.MSStream);
};

var browserPayload = function browserPayload(isBrowser, browser, engine, os, ua) {
  return {
    isBrowser: isBrowser,
    browserMajorVersion: setDefaults(browser.major),
    browserFullVersion: setDefaults(browser.version),
    browserName: setDefaults(browser.name),
    engineName: setDefaults(engine.name),
    engineVersion: setDefaults(engine.version),
    osName: setDefaults(os.name),
    osVersion: setDefaults(os.version),
    userAgent: setDefaults(ua)
  };
};
var mobilePayload = function mobilePayload(type, device, os, ua) {
  return _objectSpread2({}, type, {
    vendor: setDefaults(device.vendor),
    model: setDefaults(device.model),
    os: setDefaults(os.name),
    osVersion: setDefaults(os.version),
    ua: setDefaults(ua)
  });
};
var smartTvPayload = function smartTvPayload(isSmartTV, engine, os, ua) {
  return {
    isSmartTV: isSmartTV,
    engineName: setDefaults(engine.name),
    engineVersion: setDefaults(engine.version),
    osName: setDefaults(os.name),
    osVersion: setDefaults(os.version),
    userAgent: setDefaults(ua)
  };
};
var consolePayload = function consolePayload(isConsole, engine, os, ua) {
  return {
    isConsole: isConsole,
    engineName: setDefaults(engine.name),
    engineVersion: setDefaults(engine.version),
    osName: setDefaults(os.name),
    osVersion: setDefaults(os.version),
    userAgent: setDefaults(ua)
  };
};
var wearablePayload = function wearablePayload(isWearable, engine, os, ua) {
  return {
    isWearable: isWearable,
    engineName: setDefaults(engine.name),
    engineVersion: setDefaults(engine.version),
    osName: setDefaults(os.name),
    osVersion: setDefaults(os.version),
    userAgent: setDefaults(ua)
  };
};
var embeddedPayload = function embeddedPayload(isEmbedded, device, engine, os, ua) {
  return {
    isEmbedded: isEmbedded,
    vendor: setDefaults(device.vendor),
    model: setDefaults(device.model),
    engineName: setDefaults(engine.name),
    engineVersion: setDefaults(engine.version),
    osName: setDefaults(os.name),
    osVersion: setDefaults(os.version),
    userAgent: setDefaults(ua)
  };
};

function deviceDetect(userAgent) {
  var _ref = userAgent ? parseUserAgent(userAgent) : UAHelper,
      device = _ref.device,
      browser = _ref.browser,
      engine = _ref.engine,
      os = _ref.os,
      ua = _ref.ua;

  var type = checkDeviceType(device.type);
  var isBrowser = type.isBrowser,
      isMobile = type.isMobile,
      isTablet = type.isTablet,
      isSmartTV = type.isSmartTV,
      isConsole = type.isConsole,
      isWearable = type.isWearable,
      isEmbedded = type.isEmbedded;

  if (isBrowser) {
    return browserPayload(isBrowser, browser, engine, os, ua);
  }

  if (isSmartTV) {
    return smartTvPayload(isSmartTV, engine, os, ua);
  }

  if (isConsole) {
    return consolePayload(isConsole, engine, os, ua);
  }

  if (isMobile) {
    return mobilePayload(type, device, os, ua);
  }

  if (isTablet) {
    return mobilePayload(type, device, os, ua);
  }

  if (isWearable) {
    return wearablePayload(isWearable, engine, os, ua);
  }

  if (isEmbedded) {
    return embeddedPayload(isEmbedded, device, engine, os, ua);
  }
}

var isMobileType = function isMobileType(_ref) {
  var type = _ref.type;
  return type === DeviceTypes.Mobile;
};
var isTabletType = function isTabletType(_ref2) {
  var type = _ref2.type;
  return type === DeviceTypes.Tablet;
};
var isMobileAndTabletType = function isMobileAndTabletType(_ref3) {
  var type = _ref3.type;
  return type === DeviceTypes.Mobile || type === DeviceTypes.Tablet;
};
var isSmartTVType = function isSmartTVType(_ref4) {
  var type = _ref4.type;
  return type === DeviceTypes.SmartTv;
};
var isBrowserType = function isBrowserType(_ref5) {
  var type = _ref5.type;
  return type === DeviceTypes.Browser;
};
var isWearableType = function isWearableType(_ref6) {
  var type = _ref6.type;
  return type === DeviceTypes.Wearable;
};
var isConsoleType = function isConsoleType(_ref7) {
  var type = _ref7.type;
  return type === DeviceTypes.Console;
};
var isEmbeddedType = function isEmbeddedType(_ref8) {
  var type = _ref8.type;
  return type === DeviceTypes.Embedded;
};
var getMobileVendor = function getMobileVendor(_ref9) {
  var vendor = _ref9.vendor;
  return setDefaults(vendor);
};
var getMobileModel = function getMobileModel(_ref10) {
  var model = _ref10.model;
  return setDefaults(model);
};
var getDeviceType = function getDeviceType(_ref11) {
  var type = _ref11.type;
  return setDefaults(type, 'browser');
}; // os types

var isAndroidType = function isAndroidType(_ref12) {
  var name = _ref12.name;
  return name === OsTypes.Android;
};
var isWindowsType = function isWindowsType(_ref13) {
  var name = _ref13.name;
  return name === OsTypes.Windows;
};
var isMacOsType = function isMacOsType(_ref14) {
  var name = _ref14.name;
  return name === OsTypes.MAC_OS;
};
var isWinPhoneType = function isWinPhoneType(_ref15) {
  var name = _ref15.name;
  return name === OsTypes.WindowsPhone;
};
var isIOSType = function isIOSType(_ref16) {
  var name = _ref16.name;
  return name === OsTypes.IOS;
};
var getOsVersion = function getOsVersion(_ref17) {
  var version = _ref17.version;
  return setDefaults(version);
};
var getOsName = function getOsName(_ref18) {
  var name = _ref18.name;
  return setDefaults(name);
}; // browser types

var isChromeType = function isChromeType(_ref19) {
  var name = _ref19.name;
  return name === BrowserTypes.Chrome;
};
var isFirefoxType = function isFirefoxType(_ref20) {
  var name = _ref20.name;
  return name === BrowserTypes.Firefox;
};
var isChromiumType = function isChromiumType(_ref21) {
  var name = _ref21.name;
  return name === BrowserTypes.Chromium;
};
var isEdgeType = function isEdgeType(_ref22) {
  var name = _ref22.name;
  return name === BrowserTypes.Edge;
};
var isYandexType = function isYandexType(_ref23) {
  var name = _ref23.name;
  return name === BrowserTypes.Yandex;
};
var isSafariType = function isSafariType(_ref24) {
  var name = _ref24.name;
  return name === BrowserTypes.Safari || name === BrowserTypes.MobileSafari;
};
var isMobileSafariType = function isMobileSafariType(_ref25) {
  var name = _ref25.name;
  return name === BrowserTypes.MobileSafari;
};
var isOperaType = function isOperaType(_ref26) {
  var name = _ref26.name;
  return name === BrowserTypes.Opera;
};
var isIEType = function isIEType(_ref27) {
  var name = _ref27.name;
  return name === BrowserTypes.InternetExplorer || name === BrowserTypes.Ie;
};
var isMIUIType = function isMIUIType(_ref28) {
  var name = _ref28.name;
  return name === BrowserTypes.MIUI;
};
var isSamsungBrowserType = function isSamsungBrowserType(_ref29) {
  var name = _ref29.name;
  return name === BrowserTypes.SamsungBrowser;
};
var getBrowserFullVersion = function getBrowserFullVersion(_ref30) {
  var version = _ref30.version;
  return setDefaults(version);
};
var getBrowserVersion = function getBrowserVersion(_ref31) {
  var major = _ref31.major;
  return setDefaults(major);
};
var getBrowserName = function getBrowserName(_ref32) {
  var name = _ref32.name;
  return setDefaults(name);
}; // engine types

var getEngineName = function getEngineName(_ref33) {
  var name = _ref33.name;
  return setDefaults(name);
};
var getEngineVersion = function getEngineVersion(_ref34) {
  var version = _ref34.version;
  return setDefaults(version);
};
var isElectronType = function isElectronType() {
  var nav = getNavigatorInstance();
  var ua = nav && nav.userAgent && nav.userAgent.toLowerCase();
  return typeof ua === 'string' ? /electron/.test(ua) : false;
};
var isEdgeChromiumType = function isEdgeChromiumType(ua) {
  return typeof ua === 'string' && ua.indexOf('Edg/') !== -1;
};
var getIOS13 = function getIOS13() {
  var nav = getNavigatorInstance();
  return nav && (/iPad|iPhone|iPod/.test(nav.platform) || nav.platform === 'MacIntel' && nav.maxTouchPoints > 1) && !window.MSStream;
};
var getIPad13 = function getIPad13() {
  return isIOS13Check('iPad');
};
var getIphone13 = function getIphone13() {
  return isIOS13Check('iPhone');
};
var getIPod13 = function getIPod13() {
  return isIOS13Check('iPod');
};
var getUseragent = function getUseragent(userAg) {
  return setDefaults(userAg);
};

function buildSelectorsObject(options) {
  var _ref = options ? options : UAHelper,
      device = _ref.device,
      browser = _ref.browser,
      os = _ref.os,
      engine = _ref.engine,
      ua = _ref.ua;

  return {
    isSmartTV: isSmartTVType(device),
    isConsole: isConsoleType(device),
    isWearable: isWearableType(device),
    isEmbedded: isEmbeddedType(device),
    isMobileSafari: isMobileSafariType(browser) || getIPad13(),
    isChromium: isChromiumType(browser),
    isMobile: isMobileAndTabletType(device) || getIPad13(),
    isMobileOnly: isMobileType(device),
    isTablet: isTabletType(device) || getIPad13(),
    isBrowser: isBrowserType(device),
    isDesktop: isBrowserType(device),
    isAndroid: isAndroidType(os),
    isWinPhone: isWinPhoneType(os),
    isIOS: isIOSType(os) || getIPad13(),
    isChrome: isChromeType(browser),
    isFirefox: isFirefoxType(browser),
    isSafari: isSafariType(browser),
    isOpera: isOperaType(browser),
    isIE: isIEType(browser),
    osVersion: getOsVersion(os),
    osName: getOsName(os),
    fullBrowserVersion: getBrowserFullVersion(browser),
    browserVersion: getBrowserVersion(browser),
    browserName: getBrowserName(browser),
    mobileVendor: getMobileVendor(device),
    mobileModel: getMobileModel(device),
    engineName: getEngineName(engine),
    engineVersion: getEngineVersion(engine),
    getUA: getUseragent(ua),
    isEdge: isEdgeType(browser) || isEdgeChromiumType(ua),
    isYandex: isYandexType(browser),
    deviceType: getDeviceType(device),
    isIOS13: getIOS13(),
    isIPad13: getIPad13(),
    isIPhone13: getIphone13(),
    isIPod13: getIPod13(),
    isElectron: isElectronType(),
    isEdgeChromium: isEdgeChromiumType(ua),
    isLegacyEdge: isEdgeType(browser) && !isEdgeChromiumType(ua),
    isWindows: isWindowsType(os),
    isMacOs: isMacOsType(os),
    isMIUI: isMIUIType(browser),
    isSamsungBrowser: isSamsungBrowserType(browser)
  };
}

var isSmartTV = isSmartTVType(device);
var isConsole = isConsoleType(device);
var isWearable = isWearableType(device);
var isEmbedded = isEmbeddedType(device);
var isMobileSafari = isMobileSafariType(browser) || getIPad13();
var isChromium = isChromiumType(browser);
var isMobile = isMobileAndTabletType(device) || getIPad13();
var isMobileOnly = isMobileType(device);
var isTablet = isTabletType(device) || getIPad13();
var isBrowser = isBrowserType(device);
var isDesktop = isBrowserType(device);
var isAndroid = isAndroidType(os);
var isWinPhone = isWinPhoneType(os);
var isIOS = isIOSType(os) || getIPad13();
var isChrome = isChromeType(browser);
var isFirefox = isFirefoxType(browser);
var isSafari = isSafariType(browser);
var isOpera = isOperaType(browser);
var isIE = isIEType(browser);
var osVersion = getOsVersion(os);
var osName = getOsName(os);
var fullBrowserVersion = getBrowserFullVersion(browser);
var browserVersion = getBrowserVersion(browser);
var browserName = getBrowserName(browser);
var mobileVendor = getMobileVendor(device);
var mobileModel = getMobileModel(device);
var engineName = getEngineName(engine);
var engineVersion = getEngineVersion(engine);
var getUA = getUseragent(ua);
var isEdge = isEdgeType(browser) || isEdgeChromiumType(ua);
var isYandex = isYandexType(browser);
var deviceType = getDeviceType(device);
var isIOS13 = getIOS13();
var isIPad13 = getIPad13();
var isIPhone13 = getIphone13();
var isIPod13 = getIPod13();
var isElectron = isElectronType();
var isEdgeChromium = isEdgeChromiumType(ua);
var isLegacyEdge = isEdgeType(browser) && !isEdgeChromiumType(ua);
var isWindows = isWindowsType(os);
var isMacOs = isMacOsType(os);
var isMIUI = isMIUIType(browser);
var isSamsungBrowser = isSamsungBrowserType(browser);
var getSelectorsByUserAgent = function getSelectorsByUserAgent(userAgent) {
  if (!userAgent || typeof userAgent !== 'string') {
    console.error('No valid user agent string was provided');
    return;
  }

  var _UAHelper$parseUserAg = parseUserAgent(userAgent),
      device = _UAHelper$parseUserAg.device,
      browser = _UAHelper$parseUserAg.browser,
      os = _UAHelper$parseUserAg.os,
      engine = _UAHelper$parseUserAg.engine,
      ua = _UAHelper$parseUserAg.ua;

  return buildSelectorsObject({
    device: device,
    browser: browser,
    os: os,
    engine: engine,
    ua: ua
  });
};

var AndroidView = function AndroidView(_ref) {
  var renderWithFragment = _ref.renderWithFragment,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["renderWithFragment", "children"]);

  return isAndroid ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement("div", props, children) : null;
};
var BrowserView = function BrowserView(_ref2) {
  var renderWithFragment = _ref2.renderWithFragment,
      children = _ref2.children,
      props = _objectWithoutProperties(_ref2, ["renderWithFragment", "children"]);

  return isBrowser ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement("div", props, children) : null;
};
var IEView = function IEView(_ref3) {
  var renderWithFragment = _ref3.renderWithFragment,
      children = _ref3.children,
      props = _objectWithoutProperties(_ref3, ["renderWithFragment", "children"]);

  return isIE ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement("div", props, children) : null;
};
var IOSView = function IOSView(_ref4) {
  var renderWithFragment = _ref4.renderWithFragment,
      children = _ref4.children,
      props = _objectWithoutProperties(_ref4, ["renderWithFragment", "children"]);

  return isIOS ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement("div", props, children) : null;
};
var MobileView = function MobileView(_ref5) {
  var renderWithFragment = _ref5.renderWithFragment,
      children = _ref5.children,
      props = _objectWithoutProperties(_ref5, ["renderWithFragment", "children"]);

  return isMobile ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement("div", props, children) : null;
};
var TabletView = function TabletView(_ref6) {
  var renderWithFragment = _ref6.renderWithFragment,
      children = _ref6.children,
      props = _objectWithoutProperties(_ref6, ["renderWithFragment", "children"]);

  return isTablet ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement("div", props, children) : null;
};
var WinPhoneView = function WinPhoneView(_ref7) {
  var renderWithFragment = _ref7.renderWithFragment,
      children = _ref7.children,
      props = _objectWithoutProperties(_ref7, ["renderWithFragment", "children"]);

  return isWinPhone ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement("div", props, children) : null;
};
var MobileOnlyView = function MobileOnlyView(_ref8) {
  var renderWithFragment = _ref8.renderWithFragment,
      children = _ref8.children;
      _ref8.viewClassName;
      _ref8.style;
      var props = _objectWithoutProperties(_ref8, ["renderWithFragment", "children", "viewClassName", "style"]);

  return isMobileOnly ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement("div", props, children) : null;
};
var SmartTVView = function SmartTVView(_ref9) {
  var renderWithFragment = _ref9.renderWithFragment,
      children = _ref9.children,
      props = _objectWithoutProperties(_ref9, ["renderWithFragment", "children"]);

  return isSmartTV ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement("div", props, children) : null;
};
var ConsoleView = function ConsoleView(_ref10) {
  var renderWithFragment = _ref10.renderWithFragment,
      children = _ref10.children,
      props = _objectWithoutProperties(_ref10, ["renderWithFragment", "children"]);

  return isConsole ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement("div", props, children) : null;
};
var WearableView = function WearableView(_ref11) {
  var renderWithFragment = _ref11.renderWithFragment,
      children = _ref11.children,
      props = _objectWithoutProperties(_ref11, ["renderWithFragment", "children"]);

  return isWearable ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement("div", props, children) : null;
};
var CustomView = function CustomView(_ref12) {
  var renderWithFragment = _ref12.renderWithFragment,
      children = _ref12.children;
      _ref12.viewClassName;
      _ref12.style;
      var condition = _ref12.condition,
      props = _objectWithoutProperties(_ref12, ["renderWithFragment", "children", "viewClassName", "style", "condition"]);

  return condition ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement("div", props, children) : null;
};

function withOrientationChange(WrappedComponent) {
  return /*#__PURE__*/function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class(props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this, props));
      _this.isEventListenerAdded = false;
      _this.handleOrientationChange = _this.handleOrientationChange.bind(_assertThisInitialized(_this));
      _this.onOrientationChange = _this.onOrientationChange.bind(_assertThisInitialized(_this));
      _this.onPageLoad = _this.onPageLoad.bind(_assertThisInitialized(_this));
      _this.state = {
        isLandscape: false,
        isPortrait: false
      };
      return _this;
    }

    _createClass(_class, [{
      key: "handleOrientationChange",
      value: function handleOrientationChange() {
        if (!this.isEventListenerAdded) {
          this.isEventListenerAdded = true;
        }

        var orientation = window.innerWidth > window.innerHeight ? 90 : 0;
        this.setState({
          isPortrait: orientation === 0,
          isLandscape: orientation === 90
        });
      }
    }, {
      key: "onOrientationChange",
      value: function onOrientationChange() {
        this.handleOrientationChange();
      }
    }, {
      key: "onPageLoad",
      value: function onPageLoad() {
        this.handleOrientationChange();
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        if ((typeof window === "undefined" ? "undefined" : _typeof(window)) !== undefined && isMobile) {
          if (!this.isEventListenerAdded) {
            this.handleOrientationChange();
            window.addEventListener("load", this.onPageLoad, false);
          } else {
            window.removeEventListener("load", this.onPageLoad, false);
          }

          window.addEventListener("resize", this.onOrientationChange, false);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        window.removeEventListener("resize", this.onOrientationChange, false);
      }
    }, {
      key: "render",
      value: function render() {
        return React__default.createElement(WrappedComponent, _extends({}, this.props, {
          isLandscape: this.state.isLandscape,
          isPortrait: this.state.isPortrait
        }));
      }
    }]);

    return _class;
  }(React__default.Component);
}

function useMobileOrientation() {
  var _useState = React.useState(function () {
    var orientation = window.innerWidth > window.innerHeight ? 90 : 0;
    return {
      isPortrait: orientation === 0,
      isLandscape: orientation === 90,
      orientation: orientation === 0 ? 'portrait' : 'landscape'
    };
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var handleOrientationChange = React.useCallback(function () {
    var orientation = window.innerWidth > window.innerHeight ? 90 : 0;
    var next = {
      isPortrait: orientation === 0,
      isLandscape: orientation === 90,
      orientation: orientation === 0 ? 'portrait' : 'landscape'
    };
    state.orientation !== next.orientation && setState(next);
  }, [state.orientation]);
  React.useEffect(function () {
    if ((typeof window === "undefined" ? "undefined" : _typeof(window)) !== undefined && isMobile) {
      handleOrientationChange();
      window.addEventListener("load", handleOrientationChange, false);
      window.addEventListener("resize", handleOrientationChange, false);
    }

    return function () {
      window.removeEventListener("resize", handleOrientationChange, false);
      window.removeEventListener("load", handleOrientationChange, false);
    };
  }, [handleOrientationChange]);
  return state;
}

function useDeviceData(userAgent) {
  var hookUserAgent = userAgent ? userAgent : window.navigator.userAgent;
  return parseUserAgent(hookUserAgent);
}

function useDeviceSelectors(userAgent) {
  var hookUserAgent = userAgent ? userAgent : window.navigator.userAgent;
  var deviceData = useDeviceData(hookUserAgent);
  var selectors = buildSelectorsObject(deviceData);
  return [selectors, deviceData];
}

lib.AndroidView = AndroidView;
lib.BrowserTypes = BrowserTypes;
lib.BrowserView = BrowserView;
lib.ConsoleView = ConsoleView;
lib.CustomView = CustomView;
lib.IEView = IEView;
lib.IOSView = IOSView;
lib.MobileOnlyView = MobileOnlyView;
lib.MobileView = MobileView;
lib.OsTypes = OsTypes;
lib.SmartTVView = SmartTVView;
lib.TabletView = TabletView;
lib.WearableView = WearableView;
lib.WinPhoneView = WinPhoneView;
lib.browserName = browserName;
lib.browserVersion = browserVersion;
lib.deviceDetect = deviceDetect;
lib.deviceType = deviceType;
lib.engineName = engineName;
lib.engineVersion = engineVersion;
lib.fullBrowserVersion = fullBrowserVersion;
lib.getSelectorsByUserAgent = getSelectorsByUserAgent;
lib.getUA = getUA;
lib.isAndroid = isAndroid;
lib.isBrowser = isBrowser;
lib.isChrome = isChrome;
lib.isChromium = isChromium;
lib.isConsole = isConsole;
lib.isDesktop = isDesktop;
lib.isEdge = isEdge;
lib.isEdgeChromium = isEdgeChromium;
lib.isElectron = isElectron;
lib.isEmbedded = isEmbedded;
lib.isFirefox = isFirefox;
lib.isIE = isIE;
lib.isIOS = isIOS;
lib.isIOS13 = isIOS13;
lib.isIPad13 = isIPad13;
lib.isIPhone13 = isIPhone13;
lib.isIPod13 = isIPod13;
lib.isLegacyEdge = isLegacyEdge;
lib.isMIUI = isMIUI;
lib.isMacOs = isMacOs;
var isMobile_1 = lib.isMobile = isMobile;
lib.isMobileOnly = isMobileOnly;
lib.isMobileSafari = isMobileSafari;
lib.isOpera = isOpera;
lib.isSafari = isSafari;
lib.isSamsungBrowser = isSamsungBrowser;
lib.isSmartTV = isSmartTV;
lib.isTablet = isTablet;
lib.isWearable = isWearable;
lib.isWinPhone = isWinPhone;
lib.isWindows = isWindows;
lib.isYandex = isYandex;
lib.mobileModel = mobileModel;
lib.mobileVendor = mobileVendor;
lib.osName = osName;
lib.osVersion = osVersion;
lib.parseUserAgent = parseUserAgent;
lib.setUserAgent = setUserAgent;
lib.useDeviceData = useDeviceData;
lib.useDeviceSelectors = useDeviceSelectors;
lib.useMobileOrientation = useMobileOrientation;
lib.withOrientationChange = withOrientationChange;

var INFOS = {
  folders: {
    title: 'What are Content Folders?',
    text: 'A Folder is a collection of Links, Videos, and Video Channels that can be assigned to Devices. Once assigned to the Device they will be discover this Content from their homepage. Please note that the Folder will override the Filters and allow access to the sites you add to make it easy to share Content with your kids without worrying about Filter settings.'
  },
  folderDevice: {
    title: 'What happens when I add a Device?',
    text: "By adding a Device to a Content Folder all of the Content will appear on the Device's homepage and will be accessible on their Device. You won't have to worry about configuring the Filter to access the Content!"
  },
  filters: {
    title: 'How does a Filter work?',
    text: "A Filter is a set of rules to keep your Device safe. Toggle on the Categories you want to be accessible and we'll take care of the rest. If you want to handle websites more specifically you can add them to the Allow list or Block list. This lets you create exceptions to your Categories. For example you might want to block social media - but allow Facebook because your family uses it in a safe and appropriate environment. You can toggle off social media but add facebook.com to the Allow list. Similarly for the Block list you might want to specifically block sites that would otherwise be allowed. The Blocked Words apply only to search engines, to prevent certain terms being searched."
  },
  filterDevice: {
    title: 'What happens when I add a Device?',
    text: 'Add a Device to this Filter and the Device will follow the safety rules set out by this Filter. You can easily change this by adding it to another Filter.'
  },
  addLink: {
    title: 'How do I add a site?',
    text: 'Copy and paste the URL of the site you want to add into the URL field. If the data is available we will automatically get the title and image for the page. But feel free to edit them!'
  },
  addVideo: {
    title: 'How do I add a Safe Video?',
    text: 'Copy and paste the URL of the YouTube video you want to add into the URL field. We will automatically get the video title and thumbnail for you and the Video will show up on the assigned Devices in a safe viewing portal without ads, recommendations, comments, or distractions.'
  },
  addChannel: {
    title: 'How do I add a Safe Video Channel?',
    text: 'Copy and paste the URL of the YouTube channel you want to add into the URL field. We will automatically get the channel name and thumbnail image. Once a Channel is added all of the live videos on the Youtube channel will appear in the Channel folder on the Device. All of the new videos posted to the channel will appear too!'
  }
};

var FOLDER_DELETION_DIALOG_SUBTITLE = 'If you delete this Folder all of the Content within the Folder will also be deleted and it will no longer be accessible on the assigned Devices.';

var _templateObject;
var spin = keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  from {\n    transform: rotate(0)\n  }\n  to {\n    transform: rotate(360deg)\n  }\n"])));
var SECONDARY_COLOR_ORDER = ['purple', 'pink', 'red', 'orange', 'yellow', 'grey', 'green', 'blue'];
var FolderCard = function FolderCard(props) {
  var _props$preview, _props$preview2, _props$preview3, _props$preview4, _props$preview5, _props$preview6, _props$preview7, _props$preview8, _props$preview9, _props$preview$totalD, _props$title;
  var _useState = useState('#ffffff'),
    _useState2 = _slicedToArray$2(_useState, 2),
    stackCard1Color = _useState2[0],
    setStackCard1Color = _useState2[1];
  var _useState3 = useState('#ffffff'),
    _useState4 = _slicedToArray$2(_useState3, 2),
    stackCard2Color = _useState4[0],
    setStackCard2Color = _useState4[1];
  useEffect(function () {
    setStackCard1Color(PALETTE.secondary[SECONDARY_COLOR_ORDER[_.random(SECONDARY_COLOR_ORDER.length - 1)]][_.random(2, 5)]);
    setStackCard2Color(PALETTE.secondary[SECONDARY_COLOR_ORDER[_.random(SECONDARY_COLOR_ORDER.length - 1)]][_.random(2, 5)]);
  }, []);
  var _useState5 = useState(false),
    _useState6 = _slicedToArray$2(_useState5, 2),
    hovering = _useState6[0],
    setHovering = _useState6[1];
  var navigate = useNavigate();
  var notificationCtx = useContext(NotificationContext);
  var _useState7 = useState(false),
    _useState8 = _slicedToArray$2(_useState7, 2),
    deletionDialogOpen = _useState8[0],
    setDeletionDialogOpen = _useState8[1];
  var deleteFolder = function deleteFolder() {
    return ApiController.removeFolder(props.id).then(function () {
      var _props$deletionCallba;
      (_props$deletionCallba = props.deletionCallback) === null || _props$deletionCallba === void 0 || _props$deletionCallba.call(props);
      notificationCtx.negativeSuccess('Removed Folder');
    });
  };
  var _useState9 = useState(false),
    _useState10 = _slicedToArray$2(_useState9, 2),
    renameDialogOpen = _useState10[0],
    setRenameDialogOpen = _useState10[1];
  var renameFolder = function renameFolder(title) {
    return ApiController.renameFolder(props.id, title).then(function () {
      var _props$editingCallbac;
      (_props$editingCallbac = props.editingCallback) === null || _props$editingCallbac === void 0 || _props$editingCallbac.call(props);
      notificationCtx.success('Renamed Folder');
    });
  };
  return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
    children: [jsxRuntimeExports.jsxs(Stack$1, {
      width: "100%",
      position: "relative",
      onMouseEnter: function onMouseEnter() {
        setHovering(true);
      },
      onMouseLeave: function onMouseLeave() {
        setHovering(false);
      },
      children: [jsxRuntimeExports.jsx(Stack$1, {
        position: "absolute",
        top: 0,
        right: 0,
        left: 0,
        marginLeft: "auto",
        marginRight: "auto",
        width: "calc(100% - 36px)",
        height: "60px",
        borderRadius: "12px",
        bgcolor: stackCard1Color,
        sx: {
          transform: "rotate(-".concat(hovering ? 6 : 2.6, "deg) translateY(-7px)"),
          transition: '0.4s'
        },
        boxShadow: props.strongShadow ? '0 0 20px rgba(0,0,0,0.08)' : '0 0 12px rgba(0,0,0,0.06)',
        zIndex: 0
      }), jsxRuntimeExports.jsx(Stack$1, {
        position: "absolute",
        top: 0,
        right: 0,
        left: 0,
        marginLeft: "auto",
        marginRight: "auto",
        width: "calc(100% - 20px)",
        height: "60px",
        borderRadius: "12px",
        bgcolor: stackCard2Color,
        sx: {
          transform: "rotate(".concat(hovering ? 5 : 1.4, "deg) translateY(-7px)"),
          transition: '0.4s'
        },
        boxShadow: props.strongShadow ? '0 0 20px rgba(0,0,0,0.08)' : '0 0 12px rgba(0,0,0,0.06)',
        zIndex: 0
      }), props.editingCallback && props.deletionCallback ? jsxRuntimeExports.jsx(Stack$1, {
        position: "absolute",
        top: "163px",
        right: "3px",
        zIndex: 2,
        children: jsxRuntimeExports.jsx(UrsorActionButton, {
          size: "32px",
          iconSize: "16px",
          actions: [{
            text: 'Open',
            kallback: function kallback() {
              return navigate.push("/folders/".concat(props.id));
            },
            icon: SvgArrowUpRight
          }, {
            text: 'Edit',
            kallback: function kallback() {
              return setRenameDialogOpen(true);
            },
            icon: SvgPencil
          }, {
            text: 'Delete',
            kallback: function kallback() {
              return setDeletionDialogOpen(true);
            },
            icon: SvgTrashcanIcon,
            color: PALETTE.system.red
          }].concat(_toConsumableArray(props.extraActions || []))
        })
      }) : null, jsxRuntimeExports.jsx(Stack$1, {
        borderRadius: "12px",
        border: "4px solid rgb(255,255,255)",
        boxSizing: "border-box",
        sx: {
          transition: '0.2s'
          // outline: orangeBorderOn
          //   ? `3px solid ${PALETTE.system.orange}`
          //   : undefined,
        },
        bgcolor: "rgb(255,255,255)",
        width: "100%",
        boxShadow: props.strongShadow ? '0 0 20px rgba(0,0,0,0.08)' : '0 0 12px rgba(0,0,0,0.06)',
        position: "relative",
        pb: "6px",
        children: jsxRuntimeExports.jsxs(Stack$1, {
          flex: 1,
          onClick: props.clickCallback,
          sx: {
            cursor: 'pointer',
            transition: '0.2s',
            '&:hover': {
              opacity: 0.6
            }
          },
          borderRadius: "8px 8px 0 0",
          overflow: "hidden",
          children: [jsxRuntimeExports.jsxs(Stack$1, {
            height: "156px",
            minHeight: "156px",
            width: "100%",
            direction: "row",
            spacing: "4px",
            children: [jsxRuntimeExports.jsx(Stack$1, {
              flex: 1,
              bgcolor: PALETTE.secondary.orange[4],
              position: "relative",
              justifyContent: "center",
              alignItems: "center",
              sx: {
                opacity: 0.74,
                svg: {
                  transform: 'rotate(26deg)'
                },
                backgroundSize: 'cover',
                backgroundPosition: 'center',
                backgroundImage: (_props$preview = props.preview) !== null && _props$preview !== void 0 && (_props$preview = _props$preview.thumbnailUrls) !== null && _props$preview !== void 0 && _props$preview[0] ? "url(".concat(props.preview.thumbnailUrls[0], ")") : undefined
              },
              children: !((_props$preview2 = props.preview) !== null && _props$preview2 !== void 0 && (_props$preview2 = _props$preview2.thumbnailUrls) !== null && _props$preview2 !== void 0 && _props$preview2[0]) ? jsxRuntimeExports.jsx(Stack$1, {
                sx: {
                  animation: "".concat(spin, " 9s linear"),
                  animationIterationCount: 'infinite'
                },
                children: jsxRuntimeExports.jsx(SvgStar, {
                  height: "52px",
                  width: "52px"
                })
              }) : null
            }), jsxRuntimeExports.jsxs(Stack$1, {
              spacing: "4px",
              width: "30%",
              children: [jsxRuntimeExports.jsx(Stack$1, {
                flex: 1,
                bgcolor: PALETTE.secondary.blue[2],
                position: "relative",
                justifyContent: "center",
                alignItems: "center",
                sx: {
                  opacity: 0.74,
                  svg: {
                    transform: 'rotate(39deg)'
                  },
                  backgroundSize: 'cover',
                  backgroundPosition: 'center',
                  backgroundImage: (_props$preview3 = props.preview) !== null && _props$preview3 !== void 0 && (_props$preview3 = _props$preview3.thumbnailUrls) !== null && _props$preview3 !== void 0 && _props$preview3[1] ? "url(".concat(props.preview.thumbnailUrls[1], ")") : undefined
                },
                children: !((_props$preview4 = props.preview) !== null && _props$preview4 !== void 0 && (_props$preview4 = _props$preview4.thumbnailUrls) !== null && _props$preview4 !== void 0 && _props$preview4[1]) ? jsxRuntimeExports.jsx(Stack$1, {
                  sx: {
                    animation: "".concat(spin, " 12s linear"),
                    animationDirection: 'reverse',
                    animationIterationCount: 'infinite'
                  },
                  children: jsxRuntimeExports.jsx(SvgStar, {
                    height: "20px",
                    width: "20px"
                  })
                }) : null
              }), jsxRuntimeExports.jsx(Stack$1, {
                flex: 1,
                bgcolor: PALETTE.secondary.green[3],
                position: "relative",
                justifyContent: "center",
                alignItems: "center",
                sx: {
                  opacity: 0.74,
                  svg: {
                    transform: 'rotate(50deg)'
                  },
                  backgroundSize: 'cover',
                  backgroundPosition: 'center',
                  backgroundImage: (_props$preview5 = props.preview) !== null && _props$preview5 !== void 0 && (_props$preview5 = _props$preview5.thumbnailUrls) !== null && _props$preview5 !== void 0 && _props$preview5[2] ? "url(".concat((_props$preview6 = props.preview) === null || _props$preview6 === void 0 ? void 0 : _props$preview6.thumbnailUrls[2], ")") : undefined
                },
                children: !((_props$preview7 = props.preview) !== null && _props$preview7 !== void 0 && (_props$preview7 = _props$preview7.thumbnailUrls) !== null && _props$preview7 !== void 0 && _props$preview7[2]) ? jsxRuntimeExports.jsx(Stack$1, {
                  sx: {
                    animation: "".concat(spin, " 4s linear"),
                    animationIterationCount: 'infinite'
                  },
                  children: jsxRuntimeExports.jsx(SvgStar, {
                    height: "20px",
                    width: "20px"
                  })
                }) : null
              })]
            })]
          }), jsxRuntimeExports.jsxs(Stack$1, {
            px: "4px",
            children: [jsxRuntimeExports.jsxs(Stack$1, {
              direction: "row",
              flex: 1,
              minHeight: "58px",
              children: [jsxRuntimeExports.jsx(Stack$1, {
                pt: "8px",
                flex: 1,
                children: jsxRuntimeExports.jsx(Typography$1, {
                  bold: true,
                  variant: "medium",
                  maxLines: 2,
                  children: props.title
                })
              }), jsxRuntimeExports.jsx(Stack$1, {
                minWidth: "27px"
              })]
            }), (_props$preview8 = props.preview) !== null && _props$preview8 !== void 0 && _props$preview8.devices ? jsxRuntimeExports.jsx(ProfileImageRow, {
              devices: (_props$preview9 = props.preview) === null || _props$preview9 === void 0 ? void 0 : _props$preview9.devices,
              totalDeviceCount: (_props$preview$totalD = props.preview.totalDeviceCount) !== null && _props$preview$totalD !== void 0 ? _props$preview$totalD : 0
            }) : null]
          })]
        })
      })]
    }), jsxRuntimeExports.jsx(DeletionDialog, {
      open: deletionDialogOpen,
      type: "Folder",
      onClose: function onClose() {
        return setDeletionDialogOpen(false);
      },
      subtitle: FOLDER_DELETION_DIALOG_SUBTITLE,
      onSubmit: deleteFolder,
      isMobile: props.isMobile
    }), jsxRuntimeExports.jsx(FolderRenameDialog, {
      open: renameDialogOpen,
      onClose: function onClose() {
        return setRenameDialogOpen(false);
      },
      name: (_props$title = props.title) !== null && _props$title !== void 0 ? _props$title : '',
      onSubmit: renameFolder,
      isMobile: false
    })]
  });
};

var EmptyStateIllustration = function EmptyStateIllustration(props) {
  return jsxRuntimeExports.jsx(Stack$1, {
    height: "100%",
    justifyContent: "center",
    alignItems: "center",
    sx: {
      pointerEvents: 'none',
      filter: 'grayscale(1)'
    },
    zIndex: 999,
    children: jsxRuntimeExports.jsx(UrsorFadeIn, {
      delay: 500,
      duration: 800,
      children: jsxRuntimeExports.jsxs(Stack$1, {
        position: "relative",
        children: [jsxRuntimeExports.jsx(Stack$1, {
          sx: {
            opacity: 0.3
          },
          children: jsxRuntimeExports.jsx("img", {
            height: 217,
            width: 217,
            src: "https://ursorassets.s3.eu-west-1.amazonaws.com/wondering_.png",
            alt: "Empty state illustration"
          })
        }), jsxRuntimeExports.jsx(Stack$1, {
          width: "100%",
          alignItems: "center",
          sx: {
            transform: 'translateY(-12px)'
          },
          children: jsxRuntimeExports.jsx(Typography$1, {
            bold: true,
            variant: "medium",
            color: PALETTE.secondary.grey[3],
            sx: {
              textAlign: 'center'
            },
            children: props.children
          })
        })]
      })
    })
  });
};

function ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var AllFoldersPageDesktopBody = function AllFoldersPageDesktopBody(props) {
  var navigate = useNavigate();
  return jsxRuntimeExports.jsx(PageLayout, {
    title: "My Content",
    info: INFOS.folders,
    bodyWidth: "100%",
    fullHeight: true,
    selectedSidebarItemId: "content",
    button: {
      text: 'Create a Folder',
      callback: props.createFolder,
      icon: SvgPlusIcon
    },
    maxWidth: 834,
    scrollable: true,
    children: props.folders.length > 0 ? jsxRuntimeExports.jsx(Stack$1, {
      pt: "20px",
      pb: "33px",
      pl: "51px",
      children: jsxRuntimeExports.jsx(DynamicCardGrid, {
        cardWidth: "292px",
        rowGap: "40px",
        columnGap: "20px",
        children: props.folders.map(function (f, i) {
          return jsxRuntimeExports.jsx(UrsorFadeIn, {
            duration: 800,
            delay: i * 90,
            children: jsxRuntimeExports.jsx(FolderCard, _objectSpread$1(_objectSpread$1({}, f), {}, {
              clickCallback: function clickCallback() {
                return navigate.push("/folders/".concat(f.id));
              },
              editingCallback: props.onUpdate,
              deletionCallback: props.onUpdate
            }))
          }, f.id);
        })
      })
    }) : jsxRuntimeExports.jsx(EmptyStateIllustration, {
      paddingTop: 20,
      children: "No Folders yet"
    })
  });
};

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var AllFoldersPageMobileBody = function AllFoldersPageMobileBody(props) {
  var navigate = useNavigate();
  return jsxRuntimeExports.jsx(MobilePageLayout, {
    title: "My Folders",
    info: INFOS.folders,
    selectedPage: "content",
    topRightElement: jsxRuntimeExports.jsx(UrsorButton, {
      dark: true,
      variant: "tertiary",
      size: "small",
      endIcon: SvgPlusIcon,
      onClick: props.createFolder,
      children: "Create a Folder"
    }),
    children: props.folders.length > 0 ? jsxRuntimeExports.jsx(Stack$1, {
      pt: "20px",
      children: jsxRuntimeExports.jsx(Stack$1, {
        spacing: "36px",
        children: props.folders.map(function (f, i) {
          return jsxRuntimeExports.jsx(UrsorFadeIn, {
            duration: 800,
            delay: i * 90,
            fullWidth: true,
            children: jsxRuntimeExports.jsx(FolderCard, _objectSpread(_objectSpread({}, f), {}, {
              clickCallback: function clickCallback() {
                return navigate.push("/folders/".concat(f.id));
              },
              editingCallback: props.onUpdate,
              deletionCallback: props.onUpdate,
              isMobile: true
            }))
          }, f.id);
        })
      })
    }) : jsxRuntimeExports.jsx(EmptyStateIllustration, {
      paddingTop: 20,
      children: "No Folders yet"
    })
  });
};

var FolderCreationDialog = function FolderCreationDialog(props) {
  var _useState = useState(''),
    _useState2 = _slicedToArray$2(_useState, 2),
    name = _useState2[0],
    setName = _useState2[1];
  return jsxRuntimeExports.jsx(UrsorDialog, {
    open: props.open,
    onCloseCallback: props.onClose,
    title: "Create Folder",
    subtitle: ['Choose a name for', 'your Folder.'],
    width: "422px",
    dynamicHeight: true,
    isMobile: props.isMobile,
    children: jsxRuntimeExports.jsxs(Stack$1, {
      flex: 1,
      width: "100%",
      height: "100%",
      justifyContent: "space-between",
      spacing: "12px",
      children: [jsxRuntimeExports.jsx(LabeledInputField, {
        label: "Name",
        children: jsxRuntimeExports.jsx(UrsorInputField, {
          value: name,
          onChange: function onChange(event) {
            return setName(event.target.value);
          },
          placeholder: "Choose a name",
          width: "100%",
          leftAlign: true
        })
      }), jsxRuntimeExports.jsx(UrsorButton, {
        dark: true,
        variant: "tertiary",
        width: "100%",
        onClick: function onClick() {
          props.onSubmit(name);
          props.onClose();
        },
        children: "Create"
      })]
    })
  });
};

var AllFoldersPage = function AllFoldersPage(props) {
  var _useAuth = useAuth(),
    user = _useAuth.user;
  var navigate = useNavigate();
  var _useState = useState([]),
    _useState2 = _slicedToArray$2(_useState, 2),
    folders = _useState2[0],
    setFolders = _useState2[1];
  var loadFolders = useCallback(function () {
    return (user === null || user === void 0 ? void 0 : user.group_id) && ApiController.getEnrichedFolders(user.group_id).then(function (f) {
      return setFolders(f);
    });
  }, [user === null || user === void 0 ? void 0 : user.group_id]);
  useEffect(function () {
    loadFolders();
  }, [loadFolders]);
  var createFolder = function createFolder(title) {
    return (user === null || user === void 0 ? void 0 : user.group_id) && ApiController.createFolder(title, user.group_id).then(function (response) {
      return navigate.push("/folders/".concat(response.contentBucketId));
    });
  };
  var _useState3 = useState(false),
    _useState4 = _slicedToArray$2(_useState3, 2),
    creationDialogOpen = _useState4[0],
    setCreationDialogOpen = _useState4[1];
  return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
    children: [props.isMobile ? jsxRuntimeExports.jsx(AllFoldersPageMobileBody, {
      folders: folders,
      createFolder: function createFolder() {
        return setCreationDialogOpen(true);
      },
      onUpdate: loadFolders
    }) : jsxRuntimeExports.jsx(AllFoldersPageDesktopBody, {
      folders: folders,
      createFolder: function createFolder() {
        return setCreationDialogOpen(true);
      },
      onUpdate: loadFolders
    }), jsxRuntimeExports.jsx(FolderCreationDialog, {
      open: creationDialogOpen,
      onClose: function onClose() {
        return setCreationDialogOpen(false);
      },
      onSubmit: createFolder,
      isMobile: props.isMobile
    })]
  });
};

function NotificationProvider(props) {
  var _useState = useState(null),
    _useState2 = _slicedToArray$2(_useState, 2),
    type = _useState2[0],
    setType = _useState2[1];
  var _useState3 = useState(null),
    _useState4 = _slicedToArray$2(_useState3, 2),
    message = _useState4[0],
    setMessage = _useState4[1];
  var success = function success(text) {
    window.scroll(0, 0);
    setMessage(text);
    setType('success');
  };
  var negativeSuccess = function negativeSuccess(text) {
    window.scroll(0, 0);
    setMessage(text);
    setType('negativeSuccess');
  };
  var error = function error(text) {
    if (process.env.REACT_APP_BUILD_ENV !== 'prod') {
      window.scroll(0, 0);
      setMessage(text);
      setType('error');
    }
  };
  useEffect(function () {
    message && setTimeout(function () {
      return setMessage(null);
    }, 2500);
  }, [message]);
  return jsxRuntimeExports.jsx(NotificationContext.Provider, {
    value: {
      message: message,
      type: type,
      success: success,
      negativeSuccess: negativeSuccess,
      error: error
    },
    children: props.children
  });
}

var HEIGHT = '44px';
var WIDTH = '421px';
var DURATION = 2000;
var TOP_PADDING = '31px';
var COLORS = {
  error: PALETTE.system.red,
  success: PALETTE.secondary.purple[2],
  negativeSuccess: PALETTE.system.red
};
function UrsorNotificationBar(props) {
  var notificationCtx = useContext(NotificationContext);
  var _React$useState = React$1.useState(false),
    _React$useState2 = _slicedToArray$2(_React$useState, 2),
    visible = _React$useState2[0],
    setVisible = _React$useState2[1];
  React$1.useEffect(function () {
    if (notificationCtx.message) {
      setVisible(true);
      setTimeout(function () {
        setVisible(false);
      }, DURATION);
    }
  }, [notificationCtx.message]);
  return jsxRuntimeExports.jsx(Stack, {
    position: "absolute",
    left: 0,
    right: 0,
    margin: "auto auto",
    py: isMobile_1 ? '8px' : 0,
    minHeight: HEIGHT,
    width: WIDTH,
    maxWidth: "calc(90% - 28px)",
    bgcolor: notificationCtx.type && notificationCtx.message ? COLORS[notificationCtx.type] : 'transparent',
    justifyContent: "center",
    alignItems: "center",
    zIndex: 999999,
    borderRadius: "12px",
    top: visible ? TOP_PADDING : "-".concat(HEIGHT),
    sx: {
      transition: '0.5s',
      willChange: 'transform'
    },
    children: jsxRuntimeExports.jsx(Stack, {
      position: "absolute",
      width: "100%",
      height: "100%",
      justifyContent: "center",
      alignItems: "center",
      children: jsxRuntimeExports.jsx(Typography$1, {
        bold: true,
        color: PALETTE.font.light,
        sx: {
          textAlign: 'center'
        },
        children: notificationCtx.type === 'error' ? "Technical Error: ".concat(notificationCtx.message) : notificationCtx.message
      })
    })
  });
}

function RootLayout(_ref) {
  var children = _ref.children;
  return jsxRuntimeExports.jsxs("html", {
    lang: "en",
    style: {
      zIndex: 999999999999
    },
    children: [jsxRuntimeExports.jsx("meta", {
      name: "theme-color",
      content: PALETTE.secondary.purple[2]
    }), jsxRuntimeExports.jsx("body", {
      className: "__className_5c20f6",
      style: {
        margin: 0,
        overflow: 'hidden'
      },
      children: jsxRuntimeExports.jsx(Stack$1, {
        height: "100vh",
        minHeight: "100vh",
        overflow: "hidden",
        width: "100vw",
        position: "relative",
        bgcolor: PALETTE.secondary.purple[2],
        children: jsxRuntimeExports.jsxs(NotificationProvider, {
          children: [jsxRuntimeExports.jsx(Stack$1, {
            width: "100%",
            justifyContent: "center",
            zIndex: 999999999,
            children: jsxRuntimeExports.jsx(UrsorNotificationBar, {})
          }), children]
        })
      })
    })]
  });
}

var Folders = function Folders() {
  return jsxRuntimeExports.jsx(RootLayout, {
    children: jsxRuntimeExports.jsx(AllFoldersPage, {
      isMobile: isMobile_1
    })
  });
};

export { Folders as FoldersPage };
